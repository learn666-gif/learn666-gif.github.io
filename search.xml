<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web前端框架01 -- bootstrap</title>
      <link href="/2020/05/05/web%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B601%20--%20bootstrap/"/>
      <url>/2020/05/05/web%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B601%20--%20bootstrap/</url>
      
        <content type="html"><![CDATA[<h2 id="Bootstrap："><a href="#Bootstrap：" class="headerlink" title="Bootstrap："></a>Bootstrap：</h2><p><a href="https://v3.bootcss.com/" target="_blank" rel="noopener">bootstrap官方</a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</li><li>框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li>好处：<ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备。</li></ul></li></ol></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, </span></span><br><span class="line"><span class="string">initial-scale=1"</span>&gt;</span><br><span class="line">&lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">&lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;</span><br><span class="line">&lt;!-- Bootstrap --&gt;</span><br><span class="line">&lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;!-- jQuery (Bootstrap 的所有 JavaScript </span><br><span class="line">插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">&lt;script src="js/jquery-3.2.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。</span><br><span class="line">你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">&lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好，世界！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>同一套页面可以兼容不同分辨率的设备。</li><li>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>定义容器。相当于之前的table、</p><ul><li>容器分类：<ol><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ol></li></ul></li><li><p>定义行。相当于之前的tr   样式：row</p></li><li><p>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目</p><ul><li><p>设备代号：</p><ol><li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ol></li><li><p>注意：</p><ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li></ol></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="col-lg-1 col-sm-2 inner"&gt;1&lt;/div&gt;. </span><br><span class="line">大屏幕该标签占用<span class="number">1</span>个和小屏幕占用<span class="number">2</span>个</span><br></pre></td></tr></table></figure><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><h3 id="全局CSS样式："><a href="#全局CSS样式：" class="headerlink" title="全局CSS样式："></a>全局CSS样式：</h3><ul><li>按钮：<code>class=&quot;btn btn-default&quot;</code></li><li>图片：<ul><li><code>class=&quot;img-responsive&quot;</code>：图片在任意尺寸都占100%</li><li>图片形状</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;</code>：方形</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt;</code>： 圆形</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt;</code> ：相框</li></ul></li><li>表格<ul><li>table</li><li>table-bordered</li><li>table-hover</li></ul></li><li>表单<ul><li>给表单项添加：class=”form-control” </li></ul></li></ul><ol start="2"><li>组件：<pre><code>* 导航条* 分页条</code></pre><ol start="3"><li>插件：<ul><li>轮播图</li></ul></li></ol></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">    &lt;script src="js/jquery-3.2.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .paddtop&#123;</span><br><span class="line">            padding-top: <span class="number">10</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .search-btn&#123;</span><br><span class="line">            <span class="keyword">float</span>: left;</span><br><span class="line">            border:1px solid #ffc900;</span><br><span class="line">            width: <span class="number">90</span>px;</span><br><span class="line">            height: <span class="number">35</span>px;</span><br><span class="line">            background-color:#ffc900 ;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: <span class="number">35</span>px;</span><br><span class="line">            margin-top: <span class="number">15</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .search-input&#123;</span><br><span class="line">            <span class="keyword">float</span>: left;</span><br><span class="line">            border:2px solid #ffc900;</span><br><span class="line">            width: <span class="number">400</span>px;</span><br><span class="line">            height: <span class="number">35</span>px;</span><br><span class="line">            padding-left: <span class="number">5</span>px;</span><br><span class="line">            margin-top: <span class="number">15</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .jx&#123;</span><br><span class="line">            border-bottom: 2px solid #ffc900;</span><br><span class="line">            padding: <span class="number">5</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .company&#123;</span><br><span class="line">            height: <span class="number">40</span>px;</span><br><span class="line">            background-color: #ffc900;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height:<span class="number">40</span>px ;</span><br><span class="line">            font-size: <span class="number">8</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- <span class="number">1</span>.页眉部分--&gt;</span><br><span class="line">   &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">"img/top_banner.jpg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row paddtop"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"img/logo.jpg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-5"</span>&gt;</span><br><span class="line">               &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"search-input"</span> placeholder=<span class="string">"请输入线路名称"</span>&gt;</span><br><span class="line">               &lt;a class="search-btn" href="#"&gt;搜索&lt;/a&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"img/hotel_tel.png"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;!--导航栏--&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-default"</span>&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">                   &lt;!-- Brand and toggle get grouped <span class="keyword">for</span> better mobile display --&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">                       &lt;!-- 定义汉堡按钮 --&gt;</span><br><span class="line">                       &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-toggle collapsed"</span> data-toggle=<span class="string">"collapse"</span> data-target=<span class="string">"#bs-example-navbar-collapse-1"</span> aria-expanded=<span class="string">"false"</span>&gt;</span><br><span class="line">                           &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;</span><br><span class="line">                           &lt;span class="icon-bar"&gt;&lt;/span&gt;</span><br><span class="line">                           &lt;span class="icon-bar"&gt;&lt;/span&gt;</span><br><span class="line">                           &lt;span class="icon-bar"&gt;&lt;/span&gt;</span><br><span class="line">                       &lt;/button&gt;</span><br><span class="line">                       &lt;a class="navbar-brand" href="#"&gt;首页&lt;/a&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;!-- Collect the nav links, forms, and other content <span class="keyword">for</span> toggling --&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"collapse navbar-collapse"</span> id=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span><br><span class="line">                       &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav navbar-nav"</span>&gt;</span><br><span class="line">                           &lt;li class="active"&gt;&lt;a href="#"&gt;Link &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;/ul&gt;</span><br><span class="line">                   &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;</span><br><span class="line">               &lt;/div&gt;&lt;!-- /.container-fluid --&gt;</span><br><span class="line">           &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!--轮播图--&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;div id=<span class="string">"carousel-example-generic"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel slide"</span> data-ride=<span class="string">"carousel"</span>&gt;</span><br><span class="line">               &lt;!-- Indicators --&gt;</span><br><span class="line">               &lt;ol <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-indicators"</span>&gt;</span><br><span class="line">                   &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt;</span><br><span class="line">                   &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt;</span><br><span class="line">                   &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt;</span><br><span class="line">               &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Wrapper <span class="keyword">for</span> slides --&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-inner"</span> role=<span class="string">"listbox"</span>&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item active"</span>&gt;</span><br><span class="line">                       &lt;img src=<span class="string">"img/banner_1.jpg"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">                       &lt;img src=<span class="string">"img/banner_2.jpg"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">                       &lt;img src=<span class="string">"img/banner_3.jpg"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Controls --&gt;</span><br><span class="line">               &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"left carousel-control"</span> href=<span class="string">"#carousel-example-generic"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"prev"</span>&gt;</span><br><span class="line">                   &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt;</span><br><span class="line">                   &lt;span class="sr-only"&gt;Previous&lt;/span&gt;</span><br><span class="line">               &lt;/a&gt;</span><br><span class="line">               &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"right carousel-control"</span> href=<span class="string">"#carousel-example-generic"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"next"</span>&gt;</span><br><span class="line">                   &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt;</span><br><span class="line">                   &lt;span class="sr-only"&gt;Next&lt;/span&gt;</span><br><span class="line">               &lt;/a&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/header&gt;</span><br><span class="line">   &lt;!-- <span class="number">2</span>.主体部分--&gt;</span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row jx"</span>&gt;</span><br><span class="line">            &lt;img src=<span class="string">"img/icon_5.jpg"</span>&gt;</span><br><span class="line">            &lt;span&gt;黑马精选&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row paddtop"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                    &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                    &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                    &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                   &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                   &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line"></span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                   &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                   &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line"></span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                   &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                   &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row jx"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">"img/icon_6.jpg"</span>&gt;</span><br><span class="line">           &lt;span&gt;国内游&lt;/span&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row paddtop"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"img/guonei_1.jpg"</span>&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-8"</span>&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;!-- <span class="number">3</span>.页脚部分--&gt;</span><br><span class="line">   &lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">"img/footer_service.png"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row company"</span>&gt;</span><br><span class="line">           版权所有Copyright <span class="number">2006</span>-<span class="number">2018</span>, All Rights Reserved 苏ICP备<span class="number">16007882</span></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库运用02--Redis浅析</title>
      <link href="/2020/05/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%94%A802--Redis%E6%B5%85%E6%9E%90/"/>
      <url>/2020/05/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%94%A802--Redis%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="redis是一款高性能的NOSQL系列的非关系型数据库"><a href="#redis是一款高性能的NOSQL系列的非关系型数据库" class="headerlink" title="redis是一款高性能的NOSQL系列的非关系型数据库"></a>redis是一款高性能的NOSQL系列的非关系型数据库</h4><ul><li>NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。redis。hbase等</li><li>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</li></ul><h3 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>成本</li><li>查询速度</li><li>存储数据的格式</li><li>扩展性</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>维护的工具和资料有限</li><li>不提供对sql的支持</li><li>不提供关系型数据库对事务的处理。</li></ol><ul><li>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</li></ul><h3 id="主流的NOSQL产品"><a href="#主流的NOSQL产品" class="headerlink" title="主流的NOSQL产品"></a>主流的NOSQL产品</h3><h4 id="键值-Key-Value-存储数据库"><a href="#键值-Key-Value-存储数据库" class="headerlink" title="键值(Key-Value)存储数据库"></a>键值(Key-Value)存储数据库</h4><ul><li><p>内容缓存，主要用于处理大量数据的高访问负载</p></li><li><p>Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</p></li><li><p>一系列键值对</p></li></ul><h4 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h4><ul><li><p>Cassandra, HBase, Riak</p></li><li><p>分布式的文件系统</p></li><li><p>以列簇式存储，将同一列数据存在一起</p></li></ul><h4 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h4><ul><li><p>CouchDB、MongoDB</p></li><li><p>Web应用（与Key-Value类似，Value是结构化的）</p></li><li><p>一系列键值对</p></li></ul><h4 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph)数据库"></a>图形(Graph)数据库</h4><ul><li>Neo4J、InfoGrid、Infinite Graph</li><li>社交网络</li><li>图结构</li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis支持的键值数据类型"><a href="#Redis支持的键值数据类型" class="headerlink" title="Redis支持的键值数据类型"></a>Redis支持的键值数据类型</h3><ul><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ul><h3 id="redis的应用场景"><a href="#redis的应用场景" class="headerlink" title="redis的应用场景"></a>redis的应用场景</h3><ul><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://redis.io" target="_blank" rel="noopener">官网</a></p><p><a href="http://www.redis.net.cn/" target="_blank" rel="noopener">中文网</a></p><ul><li><p>解压后make编译直接可以使用，查看官网</p><ul><li>redis.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ul><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><h3 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h3><ul><li>redis存储的是key,value格式的数据，其中key都是字符串，value有5种不同的数据结构</li></ul><h3 id="value的数据结构"><a href="#value的数据结构" class="headerlink" title="value的数据结构"></a>value的数据结构</h3><ul><li>字符串类型 string</li><li>哈希类型 hash ： map格式 </li><li>列表类型 list ： linkedlist格式。支持重复元素</li><li>集合类型 set  ： 不允许重复元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ul><h4 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h4><ul><li>存储： set key value/set username zhangsan</li><li>获取： get key/get username</li><li>删除： del key/del age</li></ul><h4 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h4><ul><li>存储： hset key field value</li><li>获取<ul><li>hget key field: 获取指定的field对应的值</li><li>hgetall key：获取所有的field和value</li></ul></li><li>删除： hdel key field</li></ul><h4 id="列表类型-list-可以添加一个元素到列表的头部（左边）或者尾部（右边）"><a href="#列表类型-list-可以添加一个元素到列表的头部（左边）或者尾部（右边）" class="headerlink" title="列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）"></a>列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）</h4><ul><li>添加<ol><li>lpush key value: 将元素加入列表左边(头部)</li><li>rpush key value：将元素加入列表右边</li></ol></li><li>获取<ul><li>lrange key start end ：范围获取</li><li>lrange myList 0 -1</li></ul></li><li>删除<ol><li>lpop key： 删除列表最左边的元素，并将元素返回</li><li>rpop key： 删除列表最右边的元素，并将元素返回</li></ol></li></ul><h4 id="集合类型-set-：-不允许重复元素"><a href="#集合类型-set-：-不允许重复元素" class="headerlink" title="集合类型 set ： 不允许重复元素"></a>集合类型 set ： 不允许重复元素</h4><ul><li><p>存储：sadd key value   – value可以写多个，用空格</p></li><li><p>获取：smembers key:获取set集合中所有元素</p></li><li><p>删除：srem key value:删除set集合中的某个元素    </p><h4 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a>有序集合类型</h4></li><li><p>sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p></li><li><p>存储：zadd key score value/zadd mysort 60 zhangsan</p></li><li><p>获取：</p><ul><li>zrange key start end [withscores]</li><li>zrange mysort 0 -1</li><li>zrange mysort 0 -1 withscores</li></ul></li><li><p>删除：zrem key value</p></li></ul><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><ul><li>keys * : 查询所有的键</li><li>type key ： 获取键对应的value的类型</li><li>del key：删除指定的key value</li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p><h3 id="redis持久化机制"><a href="#redis持久化机制" class="headerlink" title="redis持久化机制"></a>redis持久化机制</h3><h4 id="RDB：默认方式，不需要进行配置，默认就使用这种机制"><a href="#RDB：默认方式，不需要进行配置，默认就使用这种机制" class="headerlink" title="RDB：默认方式，不需要进行配置，默认就使用这种机制"></a>RDB：默认方式，不需要进行配置，默认就使用这种机制</h4><ul><li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li><li>编辑redis.conf文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>重新启动redis服务器，并指定配置文件名称 redis-server.exe redis.windows.conf</li><li>数据保存在：.pdb文件</li></ul><h4 id="AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据"><a href="#AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据" class="headerlink" title="AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据"></a>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</h4><ul><li>编辑redis.windwos.conf文件<ul><li>appendonly no（关闭aof）</li><li>appendfsync always ： 每一次操作都进行持久化</li><li>appendfsync everysec ： 每隔一秒进行一次持久化(默认)</li><li>appendfsync no     ： 不进行持久化</li></ul></li><li>存入：appendonly.dof</li></ul><h2 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端 Jedis"></a>Java客户端 Jedis</h2><h3 id="Jedis-一款java操作redis数据库的工具"><a href="#Jedis-一款java操作redis数据库的工具" class="headerlink" title="Jedis: 一款java操作redis数据库的工具."></a>Jedis: 一款java操作redis数据库的工具.</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul><li>下载jedis的jar包</li><li>使用<ol><li>获取连接,创建对象</li><li>操作</li><li>关闭连接</li></ol></li></ul><h3 id="Jedis操作各种redis中的数据结构"><a href="#Jedis操作各种redis中的数据结构" class="headerlink" title="Jedis操作各种redis中的数据结构"></a>Jedis操作各种redis中的数据结构</h3><h4 id="字符串类型-string-1"><a href="#字符串类型-string-1" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h4><ul><li><p>set/get</p></li><li><p>可以使用setex()方法存储可以指定过期时间的 key value</p><ul><li>将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对<ul><li>jedis.setex(“activecode”,20,”hehe”);</li></ul></li></ul></li></ul><h4 id="哈希类型-hash-：-map格式"><a href="#哈希类型-hash-：-map格式" class="headerlink" title="哈希类型 hash ： map格式"></a>哈希类型 hash ： map格式</h4><ul><li>hset/hget/hgetAll</li></ul><h4 id="列表类型-list-：-linkedlist格式。支持重复元素"><a href="#列表类型-list-：-linkedlist格式。支持重复元素" class="headerlink" title="列表类型 list ： linkedlist格式。支持重复元素"></a>列表类型 list ： linkedlist格式。支持重复元素</h4><ul><li>lpush / rpush<ul><li>jedis.lpush(“mylist”,”a”,”b”,”c”);//从左边存</li></ul></li><li>lpop / rpop<ul><li>lrange start end : 范围获取</li><li>jedis.lrange(“mylist”, 0, -1);</li></ul></li></ul><h4 id="集合类型-set-：-不允许重复元素-1"><a href="#集合类型-set-：-不允许重复元素-1" class="headerlink" title="集合类型 set  ： 不允许重复元素"></a>集合类型 set  ： 不允许重复元素</h4><ul><li>sadd</li><li>smembers:获取所有元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li><li>zadd<ul><li>jedis.zadd(“mysortedset”,3,”亚瑟”);</li></ul></li><li>zrange</li></ul><h3 id="jedis连接池：-JedisPool"><a href="#jedis连接池：-JedisPool" class="headerlink" title="jedis连接池： JedisPool"></a>jedis连接池： JedisPool</h3><h4 id="创建JedisPool连接池对象"><a href="#创建JedisPool连接池对象" class="headerlink" title="创建JedisPool连接池对象"></a>创建JedisPool连接池对象</h4><ul><li>调用方法 getResource()方法获取Jedis连接</li></ul><h4 id="创建一个配置对象-耦合度低"><a href="#创建一个配置对象-耦合度低" class="headerlink" title="创建一个配置对象(耦合度低)"></a>创建一个配置对象(耦合度低)</h4><ul><li>JedisPoolConfig()</li></ul><h4 id="创建Jedis连接池对象"><a href="#创建Jedis连接池对象" class="headerlink" title="创建Jedis连接池对象"></a>创建Jedis连接池对象</h4><ul><li>JedisPool(config,”localhost”,6379)</li></ul><h4 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h4><ul><li>jedisPool.getResource()</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>关闭 归还到连接池中 close</li></ul><h4 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h4><ul><li>使用redis缓存一些不经常发生变化的数据。<ul><li>数据库的数据一旦发生改变，则需要更新缓存</li><li>数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入</li><li>在service对应的增删改方法中，将redis数据删除。</li></ul></li></ul><h2 id="redis安装和配置"><a href="#redis安装和配置" class="headerlink" title="redis安装和配置"></a>redis安装和配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>下载安装包<br>上次课前资料提供的安装包，或者:<a href="https://redis.io/download" target="_blank" rel="noopener">官网下载</a><br>建议上传到我们的home下：/home/leyou/</p></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf redis-4.0.9.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv redis-4.0.9 redis</span><br><span class="line">cd redis</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改安装目录下的redis.conf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure><p>修改以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1 <span class="comment"># 将这行代码注释，监听所有的ip地址，外网可以访问</span></span></span><br><span class="line">protected-mode no # 把yes改成no，允许外网访问</span><br><span class="line">daemonize yes # 把no改成yes，后台运行</span><br></pre></td></tr></table></figure><h3 id="启动或停止"><a href="#启动或停止" class="headerlink" title="启动或停止"></a>启动或停止</h3><p>redis提供了服务端命令和客户端命令：</p><ul><li>redis-server 服务端命令，可以包含以下参数：<br>start 启动<br>stop 停止</li><li>redis-cli 客户端控制台，包含参数：<br>-h xxx 指定服务端地址，缺省值是127.0.0.1<br>-p xxx 指定服务端端口，缺省值是6379</li></ul><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>1) 输入命令，新建文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/redis</span><br></pre></td></tr></table></figure><p>输入下面内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig:   2345 90 10</span></span><br><span class="line"><span class="comment"># description:  Redis is a persistent key-value database</span></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/sbin:/usr/bin:/bin</span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</span><br><span class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis.pid</span><br><span class="line"></span><br><span class="line">CONF=<span class="string">"/home/leyou/redis/redis.conf"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>  </span><br><span class="line">    start)  </span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span>  </span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]   </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">"Redis is running..."</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        ;;  </span><br><span class="line">    stop)  </span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span>  </span><br><span class="line">                <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span> SHUTDOWN  </span><br><span class="line">                <span class="keyword">while</span> [ -x <span class="variable">$&#123;PIDFILE&#125;</span> ]  </span><br><span class="line">               <span class="keyword">do</span>  </span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span>  </span><br><span class="line">                    sleep 1  </span><br><span class="line">                <span class="keyword">done</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        ;;  </span><br><span class="line">   restart|force-reload)  </span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> stop  </span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> start  </span><br><span class="line">        ;;  </span><br><span class="line">  *)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2  </span><br><span class="line">        <span class="built_in">exit</span> 1  </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>然后保存退出</p><p>注意：以下信息需要根据安装目录进行调整：</p><blockquote><p>EXEC=/usr/local/bin/redis-server # 执行脚本的地址</p><p>REDIS_CLI=/usr/local/bin/redis-cli # 客户端执行脚本的地址</p><p>PIDFILE=/var/run/redis.pid # 进程id文件地址</p><p>CONF=”/usr/local/src/redis-3.0.2/redis.conf” #配置文件地址</p></blockquote><p>2）设置权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /etc/init.d/redis</span><br></pre></td></tr></table></figure><p>3）启动测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/redis start</span><br></pre></td></tr></table></figure><p>启动成功会提示如下信息：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Starting</span></span> Redis server...</span><br><span class="line"><span class="function"><span class="title">Redis</span></span> is running...</span><br></pre></td></tr></table></figure><p>4）设置开机自启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add /etc/init.d/redis</span><br><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库运用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库运用 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫01 -- 小小爬虫概述</title>
      <link href="/2020/04/27/python%E7%88%AC%E8%99%AB01%20--%20%E5%B0%8F%E5%B0%8F%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/04/27/python%E7%88%AC%E8%99%AB01%20--%20%E5%B0%8F%E5%B0%8F%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h2><p>爬虫就是给网站发起请求，并从响应中提取需要的数据的自动化程序</p><h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><h3 id="发起请求，获取相应"><a href="#发起请求，获取相应" class="headerlink" title="发起请求，获取相应"></a>发起请求，获取相应</h3><ul><li>通过http库，对目标站点进行请求，等同于自己打开浏览器，输入网址</li><li>常用库：urllib（标准库）, urllib3, requests</li><li>服务器会返回请求的内容，一般为：html，二进制文件（音频/视频），文档，json字符串等</li></ul><h3 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h3><ul><li>寻找需要的信息，就是利用正则表达式或者其他库提目标信息</li></ul><blockquote><p>F12  查看网页源码: Elements：源码 Console: 页面后台输出 Network：监控网络状况（有我们需要的一些关键信息，如头信息，User-Agent,cookies，响应response等）</p></blockquote><ul><li>常用库：re, beautifulsoup4</li></ul><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><ul><li>将解析得到的数据持久化到文件或者数据库中</li></ul><h2 id="爬虫–请求"><a href="#爬虫–请求" class="headerlink" title="爬虫–请求"></a>爬虫–请求</h2><h3 id="使用urllib发送请求"><a href="#使用urllib发送请求" class="headerlink" title="使用urllib发送请求"></a>使用urllib发送请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line"></span><br><span class="line">res = request.urlopen(url)  <span class="comment"># 访问url并获取响应</span></span><br><span class="line"></span><br><span class="line">print(res.geturl())  <span class="comment"># 获取主机地址</span></span><br><span class="line">print(res.getcode())  <span class="comment"># 获取请求状态码</span></span><br><span class="line">print(res.info())  <span class="comment"># 获取响应头</span></span><br><span class="line"></span><br><span class="line">html = res.read()  <span class="comment"># 获取的是字节形式的内容</span></span><br><span class="line">html.decode(<span class="string">"utf-8"</span>)  <span class="comment"># 解码</span></span><br><span class="line"></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><ul><li>状态码</li></ul><blockquote><p>2xx：正常访问</p><p>3xx：发生了重定向，访问A内部转发到B网站</p><p>4xx：404，页面不存在 403，请求被禁止(反爬)</p><p>5xx：服务器内部错误</p></blockquote><ul><li>出现403则存在反爬，需要添加User-Agent   <code>HTTP Error 403: Forbidden</code></li><li>反爬措施：将自己的User-agent信息加入到header中（基本）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.dianping.com'</span></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel </span></span><br><span class="line"><span class="string">        Mac OS X 10_15_4) AppleWebKit/537.36 </span></span><br><span class="line"><span class="string">        (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(url, headers=header)  <span class="comment"># 访问url并获取响应</span></span><br><span class="line">res = request.urlopen(req)</span><br></pre></td></tr></table></figure><h3 id="使用requests发送请求"><a href="#使用requests发送请求" class="headerlink" title="使用requests发送请求"></a>使用requests发送请求</h3><ul><li>安装：pip install requests</li><li>发起请求requests.get()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.dianping.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反爬--添加header</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"www.dianping.com"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS "</span></span><br><span class="line">                  <span class="string">"AppleWebKit/537.36 (KHTML, like Gecko) "</span></span><br><span class="line">                  <span class="string">"Chrome/81.0.4044.122 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=header)  </span><br><span class="line"><span class="comment"># 发起请求,不需要像上面进行处理直接使用</span></span><br><span class="line">print(resp.encoding)  <span class="comment"># 查看编码</span></span><br><span class="line">print(resp.status_code)  <span class="comment"># 查看状态码</span></span><br><span class="line"><span class="comment"># html = resp.text 二进制</span></span><br><span class="line">resp.encoding = <span class="string">"utf-8"</span></span><br><span class="line"><span class="comment"># 如果里面没有Content-Type, encoding=utf-8,就以设置为准，否则就是iso8859-1</span></span><br><span class="line">html = resp.text</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h2 id="爬虫–解析"><a href="#爬虫–解析" class="headerlink" title="爬虫–解析"></a>爬虫–解析</h2><h3 id="使用beautifulsoup4解析内容"><a href="#使用beautifulsoup4解析内容" class="headerlink" title="使用beautifulsoup4解析内容"></a>使用beautifulsoup4解析内容</h3><ul><li>beautifulsoup4将复杂的HTML文档转换成一个树形结构，每个节点都是python对象</li><li>安装：pip install beautifulsoup4</li><li>Beautifulsoup4(html)</li></ul><blockquote><p>获取节点：find()、fiand_all(）/select()</p><p>获取属性：attrs</p><p>获取文本：text</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求</span></span><br><span class="line">url = <span class="string">'http://wsjkw.sc.gov.cn/scwsjkw/gzbd/fyzt.shtml'</span></span><br><span class="line">res =requests.get(url)</span><br><span class="line">res.encoding = <span class="string">"utf-8"</span></span><br><span class="line">html = res.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析，需要规定解析器features</span></span><br><span class="line">soup = BeautifulSoup(html, features=<span class="string">"html.parser"</span>)</span><br><span class="line">soup.find(<span class="string">"h2"</span>)  <span class="comment"># 解析所有的h2标签</span></span><br><span class="line">a = soup.find(<span class="string">"a"</span>)  <span class="comment"># 解析获取第一个a标签对象</span></span><br><span class="line"><span class="comment"># print(a.attrs)  # 获取该对象的属性信息</span></span><br><span class="line">u = a.attrs[<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取的url与其前面部分拼接成新的url</span></span><br><span class="line">url_new = <span class="string">"http://wsjkw.sc.gov.cn"</span> + u</span><br><span class="line">print(url_new)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次请求</span></span><br><span class="line">res_new = requests.get(url_new)</span><br><span class="line">res_new.encoding = <span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次解析</span></span><br><span class="line">soup_new = BeautifulSoup(res_new.text, features=<span class="string">"html.parser"</span>)</span><br><span class="line">s = soup_new.find(<span class="string">"p"</span>) </span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="使用re解析内容"><a href="#使用re解析内容" class="headerlink" title="使用re解析内容"></a>使用re解析内容</h3><ul><li>re是python自带的正则表达式模块</li><li>re.search(regex, str)</li></ul><blockquote><p>在str中查找满足条件的字符串，匹配不上返回none</p><p>对返回的结果分组，可以在字符串内添加小括号分离数据：groups(), groups(index):返回指定分组内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">confirm_add_patten = <span class="string">"确诊病例(\d+)例"</span></span><br><span class="line">confirm_add = re.search(confirm_add_patten, res_new.text)</span><br><span class="line">print(confirm_add)</span><br><span class="line">print(confirm_add.group())</span><br><span class="line">print(confirm_add.group(<span class="number">0</span>))  <span class="comment"># 所有符合的</span></span><br><span class="line">print(confirm_add.group(<span class="number">1</span>))  <span class="comment"># 匹配正则里的</span></span><br></pre></td></tr></table></figure><h2 id="爬取腾讯疫情数据"><a href="#爬取腾讯疫情数据" class="headerlink" title="爬取腾讯疫情数据"></a>爬取腾讯疫情数据</h2><ul><li>部分网站反爬手段较高，需要较好的反反爬策略</li></ul><h3 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h3><ul><li>分析网站</li><li>F12 查看网站信息，然后在network中查看js的数据信息找到需要的json数据，在headers中复制相关的request url(注意其url取舍)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5'</span></span><br><span class="line"></span><br><span class="line">res = requests.get(url)</span><br><span class="line"><span class="comment"># xx = res.text # json 字符串文本</span></span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">xx = res.text</span><br><span class="line">data = json.loads(xx)  <span class="comment"># 加载json字符串</span></span><br><span class="line">print(type(data[<span class="string">'data'</span>]))  <span class="comment"># str</span></span><br><span class="line"></span><br><span class="line">data_all = json.loads(data[<span class="string">"data"</span>])  <span class="comment"># 继续加载json，变成字典</span></span><br><span class="line">print(type(data_all))  <span class="comment"># dict</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> data_all.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><ul><li>分析处理</li></ul><blockquote><p>lastUpdateTime #最后更新时间</p></blockquote><blockquote><p>chinaTotal #总数</p><p>chinaAdd # 新增</p><p>areaTree : </p><blockquote><p>-name #areaTree[0]: 中国数据</p><p>-today/-total</p><p>-childre：name # 市级数据，列表 today/total</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> traceback  <span class="comment"># 追踪异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tencent_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: 返回历史数据和当日详细数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?</span></span><br><span class="line"><span class="string">    name=disease_other'</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User - Agent"</span>: <span class="string">"Mozilla /</span></span><br><span class="line"><span class="string">         5.0(Macintosh;IntelMacOSX10_15_4) </span></span><br><span class="line"><span class="string">         AppleWebKit / 537.36(KHTML, "</span></span><br><span class="line">         <span class="string">"likeGecko) Chrome / </span></span><br><span class="line"><span class="string">         81.0.4044.122Safari / </span></span><br><span class="line"><span class="string">         537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, headers)</span><br><span class="line">    res = json.loads(r.text) <span class="comment"># json转字典</span></span><br><span class="line">    data_all = json.loads(res[<span class="string">'data'</span>])</span><br><span class="line"></span><br><span class="line">    history = &#123;&#125;  <span class="comment"># 每日总数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_all[<span class="string">'chinaDayList'</span>]:</span><br><span class="line">        ds = <span class="string">"2020."</span>+i[<span class="string">'date'</span>]</span><br><span class="line">        tup = time.strptime(ds, <span class="string">"%Y.%m.%d"</span>)</span><br><span class="line">        ds = time.strftime(<span class="string">"%Y.%m.%d"</span>, tup)</span><br><span class="line">        confirm = i[<span class="string">'confirm'</span>]</span><br><span class="line">        suspect = i[<span class="string">'suspect'</span>]</span><br><span class="line">        heal = i[<span class="string">'heal'</span>]</span><br><span class="line">        dead = i[<span class="string">'dead'</span>]</span><br><span class="line">        history[ds] = &#123;</span><br><span class="line">        <span class="string">"confirm"</span>: confirm, </span><br><span class="line">        <span class="string">"suspect"</span>: suspect, </span><br><span class="line">        <span class="string">"heal"</span>: heal, <span class="string">"dead"</span>: dead&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_all[<span class="string">'chinaDayAddList'</span>]:</span><br><span class="line">        ds = <span class="string">"2020."</span>+i[<span class="string">'date'</span>]</span><br><span class="line">        tup = time.strptime(ds, <span class="string">"%Y.%m.%d"</span>)</span><br><span class="line">        ds = time.strftime(<span class="string">"%Y.%m.%d"</span>, tup)</span><br><span class="line">        confirm = i[<span class="string">'confirm'</span>]</span><br><span class="line">        suspect = i[<span class="string">'suspect'</span>]</span><br><span class="line">        heal = i[<span class="string">'heal'</span>]</span><br><span class="line">        dead = i[<span class="string">'dead'</span>]</span><br><span class="line">        history[ds].update(&#123;<span class="string">"confirm_add"</span>: </span><br><span class="line">        confirm, <span class="string">"suspect_add"</span>: suspect, </span><br><span class="line">        <span class="string">"heal_add"</span>: heal, </span><br><span class="line">        <span class="string">"dead_add"</span>: dead&#125;) <span class="comment"># 更新</span></span><br><span class="line">    <span class="keyword">return</span> history</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_day_details</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?</span></span><br><span class="line"><span class="string">    name=disease_h5'</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User - Agent"</span>: <span class="string">"Mozilla / </span></span><br><span class="line"><span class="string">        5.0(Macintosh;IntelMacOSX10_15_4) </span></span><br><span class="line"><span class="string">        AppleWebKit / 537.36(KHTML, "</span></span><br><span class="line">        <span class="string">"likeGecko) Chrome / 81.0.4044.122Safari </span></span><br><span class="line"><span class="string">        / 537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, headers)</span><br><span class="line">    res = json.loads(r.text) <span class="comment"># json转字典</span></span><br><span class="line">    data_all = json.loads(res[<span class="string">'data'</span>])</span><br><span class="line">    datails = [] <span class="comment"># 当日详细数据</span></span><br><span class="line">    update_time = data_all[<span class="string">"lastUpdateTime"</span>]</span><br><span class="line">    data_country = data_all[<span class="string">"areaTree"</span>]  <span class="comment"># 25个国家</span></span><br><span class="line">    data_provice = data_country[<span class="number">0</span>][<span class="string">"children"</span>]  <span class="comment"># 中国省份</span></span><br><span class="line">    <span class="keyword">for</span> pro_infos <span class="keyword">in</span> data_provice:</span><br><span class="line">        provice = pro_infos[<span class="string">"name"</span>]  <span class="comment"># 名</span></span><br><span class="line">        <span class="keyword">for</span> city_infos <span class="keyword">in</span> pro_infos[<span class="string">'children'</span>]:</span><br><span class="line">            city = city_infos[<span class="string">'name'</span>]</span><br><span class="line">            confirm = city_infos[<span class="string">'total'</span>][<span class="string">"confirm"</span>]</span><br><span class="line">            confirm_add = city_infos[<span class="string">'today'</span>][<span class="string">'confirm'</span>]</span><br><span class="line">            heal = city_infos[<span class="string">'total'</span>][<span class="string">'heal'</span>]</span><br><span class="line">            dead = city_infos[<span class="string">'total'</span>][<span class="string">'dead'</span>]</span><br><span class="line">            datails.append([update_time, provice, </span><br><span class="line">            city, confirm, confirm_add, heal, dead])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datails</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立数据库连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    config = dict(host=<span class="string">'localhost'</span>,</span><br><span class="line">                  user=<span class="string">'root'</span>,</span><br><span class="line">                  password=<span class="string">'123456'</span>,</span><br><span class="line">                  cursorclass=pymysql.cursors.DictCursor,</span><br><span class="line">                  db=<span class="string">'cov'</span>,</span><br><span class="line">                  charset=<span class="string">"utf8"</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">    conn = pymysql.connect(**config)</span><br><span class="line">    cursor = conn.cursor()  <span class="comment"># 创建游标， 默认元祖</span></span><br><span class="line">    print(<span class="string">'数据库连接开启'</span>)</span><br><span class="line">    <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_conn</span><span class="params">(conn, cursor)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        conn.close()</span><br><span class="line">    print(<span class="string">'数据库连接关闭'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updata_details</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    更新details表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        li = get_day_details() <span class="comment"># 0是历史数据字典,1最新详细数据列表</span></span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">"insert into details(update_time, </span></span><br><span class="line"><span class="string">        province, </span></span><br><span class="line"><span class="string">        city, </span></span><br><span class="line"><span class="string">        confirm, </span></span><br><span class="line"><span class="string">        confirm_add, </span></span><br><span class="line"><span class="string">        heal, dead) </span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s,%s,%s)"</span></span><br><span class="line">        sql_query = <span class="string">"select %s=(</span></span><br><span class="line"><span class="string">        select update_time from details order </span></span><br><span class="line"><span class="string">        by id desc limit 1)"</span> <span class="comment"># 对比当前最大时间戳</span></span><br><span class="line">        cursor.execute(sql_query, li[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cursor.fetchone():</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>开始更新数据"</span>)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">                cursor.execute(sql, item)</span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>更新数据完毕"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>已经是最新数据"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_history</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入历史数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dic = get_tencent_data()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>开始插入数据"</span>)</span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">'insert into history </span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s,%s,%s,%s)'</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> dic.items():</span><br><span class="line">            <span class="comment"># item 格式&#123;'2020-1-1':</span></span><br><span class="line">            &#123;<span class="string">"confirm"</span>: <span class="number">41</span>, <span class="string">'suspect'</span>: <span class="number">0</span> ...&#125;&#125;</span><br><span class="line">            cursor.execute(sql, [k, </span><br><span class="line">            v.get(<span class="string">"confirm"</span>), </span><br><span class="line">            v.get(<span class="string">"confirm_add"</span>), </span><br><span class="line">            v.get(<span class="string">"suspect"</span>), </span><br><span class="line">            v.get(<span class="string">"suspect_add"</span>),</span><br><span class="line">            v.get(<span class="string">'heal'</span>), </span><br><span class="line">            v.get(<span class="string">'dead'</span>), </span><br><span class="line">            v.get(<span class="string">'dead_add'</span>)])</span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>插入历史数据完毕"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_history</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    更新历史数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dic = get_tencent_data()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>开始更新数据"</span>)</span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">"insert into history </span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s,%s,%s,%s,%s)"</span></span><br><span class="line">        sql_query = <span class="string">"select confirm </span></span><br><span class="line"><span class="string">        from history where ds = %s"</span></span><br><span class="line">        <span class="keyword">for</span> k ,v <span class="keyword">in</span> dic.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cursor.execute(sql_query, k):</span><br><span class="line">                cursor.execute(sql, [k, </span><br><span class="line">                v.get(<span class="string">"confirm"</span>), </span><br><span class="line">                v.get(<span class="string">"confirm_add"</span>), </span><br><span class="line">                v.get(<span class="string">"suspect"</span>), </span><br><span class="line">                v.get(<span class="string">"suspect_add"</span>),</span><br><span class="line">                v.get(<span class="string">'heal'</span>), </span><br><span class="line">                v.get(<span class="string">'heal_add'</span>), </span><br><span class="line">                v.get(<span class="string">'dead'</span>), </span><br><span class="line">                v.get(<span class="string">'dead_add'</span>)])</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>历史数据更新完毕"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><ul><li>数据库建表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `history`(</span><br><span class="line">`ds` datetime Not NULL COMMENT <span class="string">'日期'</span>,</span><br><span class="line">`confirm` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计确诊'</span>,</span><br><span class="line">`confirm_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增确诊'</span>,</span><br><span class="line">`suspect` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'剩余疑似'</span>,</span><br><span class="line">`suspect_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增疑似'</span>,</span><br><span class="line">`heal` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计治愈'</span>,</span><br><span class="line">`dead` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计死亡'</span>,</span><br><span class="line">`dead_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增死亡'</span>,</span><br><span class="line">PRIMARY KEY (`ds`) USING BTREE</span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET = utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `details`(</span><br><span class="line">`id` int(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`update_time` datetime DEFAULT NULL COMMENT <span class="string">'数据最后更新时间'</span>,</span><br><span class="line">`province` VARCHAR(<span class="number">50</span>) DEFAULT NULL COMMENT <span class="string">'省'</span>,</span><br><span class="line">`city` VARCHAR(<span class="number">50</span>) DEFAULT NULL COMMENT <span class="string">'市'</span>,</span><br><span class="line">`confirm` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计确诊'</span>,</span><br><span class="line">`confirm_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增确诊'</span>,</span><br><span class="line">`heal` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计治愈'</span>,</span><br><span class="line">`dead` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计死亡'</span>,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET = utf8mb4;</span><br></pre></td></tr></table></figure><ul><li>数据存储 –pymysql</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 建立数据库连接</span></span><br><span class="line">config = dict(host=<span class="string">'localhost'</span>, </span><br><span class="line">              user=<span class="string">'root'</span>, </span><br><span class="line">              password=<span class="string">'123456'</span>,</span><br><span class="line">              cursorclass=pymysql.cursors.DictCursor, </span><br><span class="line">              db=<span class="string">'cov'</span>)</span><br><span class="line"></span><br><span class="line">conn = pymysql.Connect(**config)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()  <span class="comment"># 创建游标， 默认元祖</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">"select * from history"</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.commit() # 提交事物</span></span><br><span class="line">res = cursor.fetchall()  <span class="comment"># 获取所有查询结果</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="抓取百度热搜数据"><a href="#抓取百度热搜数据" class="headerlink" title="抓取百度热搜数据"></a>抓取百度热搜数据</h2><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><ul><li>百度的数据页面使用了动态渲染技术，需要使用selenium来抓取</li></ul><blockquote><p>selenium是一个用于web应用程序测试的工具，直接运行在浏览器中，就像真正的用户在操作</p><p>安装：pip install selenium</p></blockquote><h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h3><ul><li>数据都是通过js动态加载的</li><li>安装浏览器（谷歌）打开浏览器设置-关于谷歌-可以查看版本号</li><li>下载对应版本浏览器驱动：<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/</a><blockquote><p>mac下载的驱动需要放在/usr/local/bin 通过chromedriver –version 查看，需要在安全与隐私中把chromedriver去掉才能用</p><p>或者直接放在你当前执行的目录下</p></blockquote></li></ul><blockquote><p>创建浏览器对象</p><p>浏览器.get()</p><p>浏览器.find()</p></blockquote><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_baidu_hot</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回百度疫情热搜</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    option = ChromeOptions()</span><br><span class="line">    option.add_argument(<span class="string">"--headless"</span>)</span><br><span class="line">    <span class="comment"># 隐藏浏览器</span></span><br><span class="line">    option.add_argument(<span class="string">"--no-sandbox"</span>)</span><br><span class="line">    <span class="comment"># linux部署需要禁用</span></span><br><span class="line"></span><br><span class="line">    brower = Chrome(options=option)</span><br><span class="line">    <span class="comment"># executable_path= 浏览器.exe文件位置</span></span><br><span class="line">    brower.get(url=<span class="string">"https://voice.baidu.com/act"</span></span><br><span class="line">                   <span class="string">"/virussearch/virussear"</span></span><br><span class="line">                   <span class="string">"ch?from=osari_map&amp;tab=0&amp;infomore=1"</span>)</span><br><span class="line">    <span class="comment"># print(brower.page_source)   # 查看网页源码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展开按钮的selector</span></span><br><span class="line">    buttur = brower.find_element_by_css_selector(</span><br><span class="line">        <span class="string">'#ptab-0 &gt; div &gt; div.VirusHot_1-5-6_32'</span></span><br><span class="line">        <span class="string">'AY4F.VirusHot_1-5-6_2RnRvg &gt; section &gt; div'</span>)</span><br><span class="line">    buttur.click()  <span class="comment"># 点击</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    c = brower.find_elements_by_xpath(</span><br><span class="line">        <span class="string">'//*[@id="ptab-0"]/div/div[1]/section/a/div/span[2]'</span>)</span><br><span class="line">    context = [i.text <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">    print(context)</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_hotsearch</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    保存到数据库</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        contect = get_baidu_hot()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>：开始更新数据"</span>)</span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">'insert into hotsearch(dt, content) values(%s, %s)'</span></span><br><span class="line">        ts = time.strftime(<span class="string">"%y-%m-%d %X"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> contect:</span><br><span class="line">            cursor.execute(sql, (ts, i))</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>：数据更新完毕"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Flask 是一个使用python编写的轻量级web应用框架。其WSGI(Python Web Server ..)工具包采用Werkzeug,模版引擎则使用Jinja2，目前比较流行</p><h3 id="小应用"><a href="#小应用" class="headerlink" title="小应用"></a>小应用</h3><ul><li>安装：pip install flask</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')   # 使用装饰器定义路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')  # 获取表单信息并返回给页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world2</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.values.get(<span class="string">"name"</span>)</span><br><span class="line">    pwd = request.values.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"name=<span class="subst">&#123;name&#125;</span>, pwd=<span class="subst">&#123;pwd&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/abc')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world1</span><span class="params">()</span>:</span>  <span class="comment"># 获取ID 提交表单</span></span><br><span class="line">    id = request.values.get(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'&lt;form action="/login"&gt;账号：&lt;input name="name" </span></span><br><span class="line"><span class="string">    value="<span class="subst">&#123;id&#125;</span>"&gt;&lt;br&gt;密码：&lt;input name="pwd"&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="submit"&gt;&lt;/form&gt;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="template模版使用"><a href="#template模版使用" class="headerlink" title="template模版使用"></a>template模版使用</h3><ul><li>模版就是事先写好的页面，里面可以使用特殊语法引入变量</li><li>使用render_template返回模版页面 就是前端页面</li><li>return的有三种：字符串、模版、json</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')   # 使用装饰器定义路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/mypage")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moban</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"new.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="使用ajax局部刷新页面"><a href="#使用ajax局部刷新页面" class="headerlink" title="使用ajax局部刷新页面"></a>使用ajax局部刷新页面</h3><ul><li><p>ajax 是Asynchronous Javascript and XML 的简称，通过Ajax向服务器发送请求，接收服务器返回的json数据，然后使用javascript修改网页来实现页面局部数据更新</p></li><li><p>使用jquery框架可方便的编写ajax代码，需要jquery.js文件</p></li><li><p>使用时需要在jquery官网下载相关jquery.js,将其文件放入static/js文件夹中，在相关html调用，就是在head头信息中加入<code>&lt;script src=&quot;../static/js/jquery-3.5.0.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>异步请求–局部刷新 代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>疫情追踪<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>实时报道<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个button标签点击click函数 点击后执行下面ajax内容</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"/ajax"</span>,  <span class="comment">//请求路由，后端定义的相关路由</span></span></span><br><span class="line"><span class="actionscript">            type:<span class="string">"post"</span>,  <span class="comment">//请求类型</span></span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"name"</span>:<span class="string">"xxx"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"pwd"</span>:<span class="string">"asadwqdw"</span></span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="comment">//数据</span></span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(d)</span> </span>&#123;  </span></span><br><span class="line"><span class="actionscript">            <span class="comment">//请求成功的回调函数，d是后端返回的数据</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"h1"</span>).html(<span class="string">"实时报道替换成了"</span>+d)</span></span><br><span class="line"><span class="actionscript">            &#125;,error:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;  <span class="comment">//请求失败执行的函数</span></span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"发送ajax请求失败"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/ajax", methods=["get", "post"]) </span></span><br><span class="line"><span class="comment"># 默认为get请求 在ajax中定义url的路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_ceshi</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.values.get(<span class="string">"name"</span>) </span><br><span class="line">    <span class="comment"># 获取前端ajax的date中的数据</span></span><br><span class="line">    pwd = request.values.get(<span class="string">"pwd"</span>)</span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;name, pwd&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"10000"</span> <span class="comment">#前端接收到的d='10000'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/index") #ajax直接写在该页面中，在该页面操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_ap</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="可视化大屏模版制作"><a href="#可视化大屏模版制作" class="headerlink" title="可视化大屏模版制作"></a>可视化大屏模版制作</h2><h3 id="Hbuider–前端软件"><a href="#Hbuider–前端软件" class="headerlink" title="Hbuider–前端软件"></a>Hbuider–前端软件</h3><ul><li>使用绝对定位划分板块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#.css 采用id选择器</span><br><span class="line">#c0&#123;</span><br><span class="line">position: absolute; /*绝对定位*/</span><br><span class="line">width: 40%;</span><br><span class="line">height: 10%;</span><br><span class="line">top: 0;</span><br><span class="line">left: 30%;</span><br><span class="line">/* background: #666666; */</span><br><span class="line">color: white;  /* 字体颜色*/</span><br><span class="line">font-size: 30px;</span><br><span class="line"></span><br><span class="line">display: flex;  /*弹性布局*/</span><br><span class="line">align-items: center;   /*横居中*/</span><br><span class="line">justify-content: center; /*竖居中*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># .html 引用前面的选择器</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>疫情监控<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../static/css/main.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c0"</span>&gt;</span>全国疫情实时追踪<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flask-–-后端"><a href="#flask-–-后端" class="headerlink" title="flask – 后端"></a>flask – 后端</h3><ul><li>自定义工具，utils.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">()</span>:</span></span><br><span class="line">    time_str = time.strftime(<span class="string">"%Y&#123;&#125;%m&#123;&#125;%d %X"</span>)</span><br><span class="line">    <span class="keyword">return</span> time_str.format(<span class="string">"年"</span>, <span class="string">"月"</span>, <span class="string">"日"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    连接，游标</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">"localhost"</span>,</span><br><span class="line">        user=<span class="string">"root"</span>,</span><br><span class="line">        password=<span class="string">"123456"</span>,</span><br><span class="line">        db=<span class="string">"cov"</span>,</span><br><span class="line">        charset=<span class="string">"utf8"</span>,</span><br><span class="line">    )</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_conn</span><span class="params">(conn, cursor)</span>:</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(sql, *args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    封装通用查询</span></span><br><span class="line"><span class="string">    :param sql:</span></span><br><span class="line"><span class="string">    :param args:</span></span><br><span class="line"><span class="string">    :return:返回查询结果，((),())</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    conn, cursor = get_conn()</span><br><span class="line">    cursor.execute(sql, args)</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    close_conn(conn, cursor)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cl_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回ID= c1 的数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sql = <span class="string">"SELECT SUM(confirm), "</span> \</span><br><span class="line">          <span class="string">"(SELECT suspect from history "</span> \</span><br><span class="line">          <span class="string">"ORDER BY ds DESC LIMIT 1),"</span> \</span><br><span class="line">          <span class="string">"SUM(heal),SUM(dead) from details "</span> \</span><br><span class="line">          <span class="string">"WHERE update_time=(SELECT update_time </span></span><br><span class="line"><span class="string">          from details ORDER BY update_time desc LIMIT 1)"</span></span><br><span class="line">    res = query(sql)</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>app.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_ap</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"main.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/time")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> utils.get_time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/c1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_c1_data</span><span class="params">()</span>:</span></span><br><span class="line">    data = utils.get_cl_data()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">    <span class="string">"confirm"</span>:int(data[<span class="number">0</span>]),</span><br><span class="line">    <span class="string">"suspect"</span>:int(data[<span class="number">1</span>]),</span><br><span class="line">    <span class="string">"heal"</span>:int(data[<span class="number">2</span>]),</span><br><span class="line">    <span class="string">"dead"</span>:int(data[<span class="number">3</span>])&#125;)</span><br></pre></td></tr></table></figure><h3 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h3>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 疫情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术02--微信小程序配置浅析</title>
      <link href="/2020/03/17/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF02--%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E6%B5%85%E6%9E%90/"/>
      <url>/2020/03/17/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF02--%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="项目工程目录"><a href="#项目工程目录" class="headerlink" title="项目工程目录"></a>项目工程目录</h2><h3 id="小程序文件类型"><a href="#小程序文件类型" class="headerlink" title="小程序文件类型"></a>小程序文件类型</h3><ul><li>.wxml 结构，类似于html</li></ul><blockquote><p>标签名字：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由HTML（<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>...）改为===》 微信小程序的WXML (<span class="tag">&lt;<span class="name">view</span>&gt;</span>)`</span><br><span class="line"></span><br><span class="line">`wx:ifwx:for&#123;&#123;&#125;&#125;`</span><br></pre></td></tr></table></figure><ul><li>.wxss 表现，类似于css</li></ul><blockquote><p>具备css的大部分属性</p><p> 新增尺寸单位</p><p>全局样式和局部样式</p></blockquote><ul><li><p>.js  行为 —&gt; 原生js语言</p></li><li><p>.json 配置</p></li></ul><blockquote><p>工具配置—<code>project.config.json</code></p><p> 项目配置—<code>app.json</code></p><p>页面配置—<code>&lt;page name&gt;.json</code></p></blockquote><h3 id="目录解释"><a href="#目录解释" class="headerlink" title="目录解释"></a>目录解释</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro01.jpg" alt=""></p><ul><li>pages目录—页面相关的代码 （新建小程序项目，自动生成）</li><li>utils目录—工具相关代码（网络请求、文件操作等） （新建小程序项目，自动生成）</li><li>其他文件—thirdparty(第三方代码)、conponents(小程序组件代码)、resources(存放小程序资源，图标图片等等)</li></ul><h3 id="小程序的全局入口、配置与样式"><a href="#小程序的全局入口、配置与样式" class="headerlink" title="小程序的全局入口、配置与样式"></a>小程序的全局入口、配置与样式</h3><ul><li>全局入口—app.js</li><li>全局配置—app.json</li><li>全局样式—app.wxss</li></ul><h2 id="小程序框架"><a href="#小程序框架" class="headerlink" title="小程序框架"></a>小程序框架</h2><h3 id="小程序的配置"><a href="#小程序的配置" class="headerlink" title="小程序的配置"></a>小程序的配置</h3><ul><li>全局配置 — <code>app.json</code></li><li>页面配置 — <code>&lt;pages&gt;.json</code></li></ul><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><ul><li>pages列表配置</li><li>window属性配置</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro02.png" alt="wechat_pro02"></p><ul><li>tabbar配置(底部菜单栏)</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/WeChat_pro03.png" alt="WeChat_pro03"></p><ul><li>补充</li></ul><blockquote><p>iconPath 是未选中时的图标</p><p>selectedIconPath 是选中时的图标</p></blockquote><h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><ul><li>只能配置全局配置中的window配置项内容</li><li>会覆盖全局配置中的window配置</li><li>开启下拉刷新</li></ul><blockquote><p>在<pages>.json写入如图所示，即可下拉触发刷新</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro05.png" alt="WeChat_pro05"></p><h3 id="小程序逻辑层"><a href="#小程序逻辑层" class="headerlink" title="小程序逻辑层"></a>小程序逻辑层</h3><ul><li>小程序注册逻辑</li></ul><blockquote><p>App函数</p></blockquote><blockquote><blockquote><p>注册全局唯一的小程序</p></blockquote></blockquote><blockquote><blockquote><p>只能调用一次</p></blockquote></blockquote><blockquote><blockquote><p>接受一个对象作为函数参数，这个对象指定了两个东西（第一个东西是小程序的全局数据，第二个东西是小程序的生命周期回调函数）</p></blockquote></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro06.png" alt="wechat_pro06"></p><ul><li>页面注册逻辑</li></ul><ol><li><p>Page函数</p><blockquote><p>注册一个页面</p><p>接受一个对象作为函数参数，这个对象指定了两个东西（第一个东西是页面数据，第二个东西是页面的生命周期回调函数）</p></blockquote></li><li><p>页面数据</p><blockquote><p>data属性</p></blockquote><p> <code>data:{message: &quot;hello world&quot;,}</code></p><blockquote><p>访问： <code>this.data.message</code></p></blockquote><blockquote><p>修改：<code>this.setData({})</code></p></blockquote><blockquote><p>使用全局数据</p></blockquote><blockquote><p>获取全局唯一的App实例    <code>const app = getApp()</code></p></blockquote><blockquote><p>通过唯一实例获取全局数据 <code>var data = app.globalData</code></p></blockquote></li><li><p>页面生命周期回调</p></li></ol><table><thead><tr><th align="center">生命周期回调函数</th><th align="center">触发时机</th></tr></thead><tbody><tr><td align="center">OnLoad</td><td align="center">生命周期回调—监听页面加载</td></tr><tr><td align="center">OnShow</td><td align="center">生命周期回调—监听页面显示</td></tr><tr><td align="center">OnReady</td><td align="center">生命周期回调—监听页面初次渲染完成</td></tr><tr><td align="center">OnHide</td><td align="center">生命周期回调—监听页面隐藏</td></tr><tr><td align="center">OnUnload</td><td align="center">生命周期回调—监听页面卸载</td></tr></tbody></table><h3 id="小程序的视图层。xxx-wxml"><a href="#小程序的视图层。xxx-wxml" class="headerlink" title="小程序的视图层。xxx.wxml"></a>小程序的视图层。xxx.wxml</h3><ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li><li>绑定事件</li></ul><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法：`&#123;&#123; &#125;&#125;`</span><br><span class="line"></span><br><span class="line">//视图层 例如：index.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//逻辑层 例如：index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        message: 'Hello MINA!'</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法：`wx:for`</span><br><span class="line"></span><br><span class="line">//逻辑层  xxx.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        array:[&#123;          // array数组，包含了两个对象</span><br><span class="line">            messqge:'foo',</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            message:'bar'</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)    </span><br><span class="line"></span><br><span class="line">//视图层 xxx.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span>   // for循环array数组   </span><br><span class="line">//注意，与变量展示相比，需要加两个冒号</span><br><span class="line">    &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125; </span><br><span class="line">    // index是数组序号，item是数组里的对象</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法： `wx:if 、wx:elif、wx:else`</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">“&#123;&#123;length</span> &gt;</span> 5&#125;&#125;”&gt; 1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;length &gt; 2&#125;&#125;"</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><table><thead><tr><th align="center">页面事件</th><th align="center">触发时机</th></tr></thead><tbody><tr><td align="center">tap</td><td align="center">手指触摸后马上离开</td></tr><tr><td align="center">longpress</td><td align="center">手指触摸后，超过350ms再离开（推荐使用）</td></tr><tr><td align="center">longtap</td><td align="center">手指触摸后，超过350ms再离开</td></tr><tr><td align="center">touchstart</td><td align="center">手指触摸动作开始</td></tr><tr><td align="center">touchend</td><td align="center">手指触摸动作结束</td></tr></tbody></table><ul><li>事件绑定的写法以key、value的形式</li><li>key以bind或catch开头，然后跟上事件的类型</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 视图层  xxx.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"tapTest"</span> <span class="attr">data-hi</span>=<span class="string">"WeChat"</span> <span class="attr">bindtap</span>=<span class="string">'tapName'</span>&gt;</span> Click me! <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 逻辑层 xxx.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    tapName: function(event) &#123;</span><br><span class="line">          console.log(event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="小程序提供的能力和常用API"><a href="#小程序提供的能力和常用API" class="headerlink" title="小程序提供的能力和常用API"></a>小程序提供的能力和常用API</h2><h3 id="微信API"><a href="#微信API" class="headerlink" title="微信API"></a>微信API</h3><ul><li>网络请求</li><li>本地储存</li><li>文件系统</li></ul><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul><li>HTTP请求 （异步的请求！！！！！！！）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wx.request(&#123;   //HTTP请求，wx.request（）函数包含一个对象&#123;...&#125;</span><br><span class="line">    url: '',         //string类型，表示服务端地址</span><br><span class="line">    data: &#123;&#125;,    //表示请求参数</span><br><span class="line">    header: &#123;&#125;,  //object类型，表示HTTP headers请求头</span><br><span class="line">    method: 'POST',  //string类型，请求方法</span><br><span class="line">    success: function(res)&#123; //function类型，接口成功的回调函数</span><br><span class="line">        console.log(res.data) </span><br><span class="line">    &#125;,</span><br><span class="line">    fail: function(res)&#123;&#125;   //function类型，接口失败的回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>异步特性</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro09.png" alt="wechat_pro09"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro10.png" alt="wechat_pro10"></p><h3 id="文件上传、下载"><a href="#文件上传、下载" class="headerlink" title="文件上传、下载"></a>文件上传、下载</h3><ul><li>上传文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.uploadFile(&#123;</span><br><span class="line">    url: 'upload',   //服务端地址</span><br><span class="line">    filePath: 'example.jpg', //文件资源的路径</span><br><span class="line">    name: 'file',                //文件对应的Key,文件名字</span><br><span class="line">    formData: &#123;                  //文件附加信息</span><br><span class="line">        'user'：‘test’</span><br><span class="line">    &#125;,</span><br><span class="line">    success(res)&#123;               //异步的，成功回调函数</span><br><span class="line">       console.log(res.data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>下载文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wx.downloadFile(&#123;</span><br><span class="line">    url: 'download',         //下载的url</span><br><span class="line">    header: &#123;&#125;,</span><br><span class="line">    filePath: 'example.jpg',  //下载后存储的路径</span><br><span class="line">    success(res) &#123;               //接口成功的回调函数</span><br><span class="line">       console.log(res.statusCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>*Task(网络任务对象)</li></ul><p>异步任务提交以后，需要对任务进行操作时，使用Task对象。</p><blockquote><p>RequestTask (发起HTTP请求，可以得到一个RequestTask)</p></blockquote><blockquote><p>UploadTask (同理，上传文件时，也可以得到)</p></blockquote><blockquote><p>DownloadTask （同理）</p></blockquote><blockquote><p>SocketTask （同理）</p></blockquote><p>拿到这些task，可以做什么呢？</p><blockquote><p>中断任务  （比如上传文件的时候，上传到一半的时候，想取消它，可以调用这task来中断）</p></blockquote><blockquote><p>触发回调函数 （比如上传文件的时候，上传到10%时，可以用task来触发回调函数）</p></blockquote><blockquote><p>关闭连接 （比如HTTP请求，socket请求，请求到一半，可以用task对象来关闭网络连接）</p></blockquote><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>将数据存储在本地缓存中指定的key中，数据存储生命周期跟小程序本身一致</p><ul><li>操作本地存储，有四个API:</li></ul><blockquote><p>wx.setStorage</p></blockquote><blockquote><p>wx.getStorage（异步的），  也有同步的api：wx.getStorageSync</p></blockquote><blockquote><p>wx.removeStorage</p></blockquote><blockquote><p>wx.clearStorage  (慎用，会把本地所有的缓存都删除)</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro11.png" alt="wechat_pro11"></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><ul><li>全局文件管理器</li></ul><blockquote><p>获取全局唯一的文件管理器. <code>var fs=wx.getFileSystemManager()</code></p></blockquote><ul><li>文件的增删改查</li></ul><blockquote><p>对文件进行操作的API有很多，完全覆盖编程语言对文件的各种操作</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fs.saveFile</span><br><span class="line"></span><br><span class="line">fs.writeFile</span><br><span class="line"></span><br><span class="line">fs.readFile</span><br><span class="line"></span><br><span class="line">fs.removeSavedFile</span><br><span class="line"></span><br><span class="line">fs.appendFile</span><br></pre></td></tr></table></figure><ul><li>文件夹的操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir</span><br><span class="line"></span><br><span class="line">fs.rmdir</span><br><span class="line"></span><br><span class="line">fs.isDirectory</span><br><span class="line"></span><br><span class="line">fs.isFile</span><br></pre></td></tr></table></figure><h3 id="开发能力"><a href="#开发能力" class="headerlink" title="开发能力"></a>开发能力</h3><ul><li>用户数据</li><li>推送消息</li><li>运营数据</li></ul><h3 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a>用户数据</h3><ul><li>头像、昵称等公开信息 — wx.getUserInfo()</li><li>openid等敏感数据</li></ul><h3 id="推送消息"><a href="#推送消息" class="headerlink" title="推送消息"></a>推送消息</h3><ul><li>基于微信的通知渠道，小程序框架为开发者提供了可以高效触达用户的消息。（在微信的服务通知查看）</li></ul><h3 id="运营数据"><a href="#运营数据" class="headerlink" title="运营数据"></a>运营数据</h3><ul><li>小程序管理后台—数据分析</li><li>小程序数据助手（小程序）</li></ul><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><ul><li>视图容器—view、scroll-view、swiper、cover-view</li><li>基础内容—text、icon、rich-text</li><li>表单、导航—button、form、input</li></ul><h3 id="WeUI-wxss"><a href="#WeUI-wxss" class="headerlink" title="WeUI-wxss"></a>WeUI-wxss</h3><ul><li>WeUI是一套同微信原生视觉体验一致的基础样式库</li><li>微信官方设计团队为微信内网页和微信小程序量身设计</li><li>包含button、view等众多元素</li><li>Github搜索weui-wxss获取源码</li><li>手机预览，微信搜索：weui小程序</li></ul><h3 id="怎么使用weui"><a href="#怎么使用weui" class="headerlink" title="怎么使用weui"></a>怎么使用weui</h3><ul><li><p>1.新建一个thirdparty的目录，放入weui.wxss文件</p></li><li><p>2.在全局的app.wxss文件中，加入 @import”thirdparty/weui.wxss”;</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro12.png" alt="wechat_pro12"></p><h2 id="小程序发布流程"><a href="#小程序发布流程" class="headerlink" title="小程序发布流程"></a>小程序发布流程</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro13.png" alt=""></p><h2 id="微信小程序登陆"><a href="#微信小程序登陆" class="headerlink" title="微信小程序登陆"></a>微信小程序登陆</h2><p>小程序可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系。</p><h3 id="登录流程时序"><a href="#登录流程时序" class="headerlink" title="登录流程时序"></a>登录流程时序</h3><p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/api-login.2fcc9f35.jpg" alt=""></p><ul><li><p>小程序端调用wx.login()接口获取登录凭证code</p></li><li><p>小程序端调用wx.request()接口把code发送到我的服务器后台</p></li><li><p>在我的服务器后台，我已知appId、appsecret、code,然后调用如下官方提供的http接口， 官方提供了http接口地址为： <a href="https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code</a>, 即可返回获取openId、session_key</p></li><li><p>在我的服务器后台获得的openid，session_key, 然后生成一个唯一字符串sessionid作为键，将openid和session_key作为值，存入redis，超时时间设置为2小时，将sessionid返回给微信小程序，微信小程序端把sessionid保存在storage中；</p></li><li><p>在之后，调用那些需要登录后才有权限的访问的后台服务时，你可以将保存在storage中的sessionid取出并携带在请求中（可以放在header中携带，也可以放在querystring中，或是放在body中，根据你自己的需要来使用），传递到后台服务，后台代码中获取到该sessionid后，从redis中查找是否有该sessionid存在，存在的话，即确认该session是有效的，继续后续的代码执行，否则进行错误处理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程07 -- 正则表达式</title>
      <link href="/2020/03/03/python%E7%BC%96%E7%A8%8B07%20--%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/03/03/python%E7%BC%96%E7%A8%8B07%20--%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。</p><a id="more"></a><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="noopener">正则表达式运用</a></p><h2 id="基础函数运用"><a href="#基础函数运用" class="headerlink" title="基础函数运用"></a>基础函数运用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pattern类工厂方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>) <span class="comment">#将正则表达编译成pattern对象</span></span><br><span class="line">print(pattern.split(<span class="string">'one1two2three'</span>)) </span><br><span class="line"><span class="comment">#以此分隔并返回分开后的形式</span></span><br><span class="line">print(pattern.match(<span class="string">'0one1two2three'</span>))  </span><br><span class="line"><span class="comment">#返回一个对象</span></span><br><span class="line">print(pattern.findall(<span class="string">'one111two211three'</span>)) </span><br><span class="line"><span class="comment">#返回所有能匹配的对象</span></span><br><span class="line">print(pattern.finditer(<span class="string">'one1two2three'</span>))   </span><br><span class="line"><span class="comment">#返回为迭代器</span></span><br><span class="line">pattern1 = re.compile(<span class="string">r'(\d\w+) (\d\w+)'</span>)  </span><br><span class="line"><span class="comment">#相互交换位置</span></span><br><span class="line">print(pattern1.sub(<span class="string">r'\2 \1'</span>,<span class="string">'1one 2two'</span>))</span><br></pre></td></tr></table></figure><h2 id="re-compile-strPattern-flag"><a href="#re-compile-strPattern-flag" class="headerlink" title="re.compile(strPattern[, flag])"></a>re.compile(strPattern[, flag])</h2><ul><li><p>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 </p></li><li><p>第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。</p></li><li><p>可以在regex字符串中指定模式，比如<code>re.compile(&#39;pattern&#39;, re.I | re.M)</code>与<code>re.compile(&#39;(?im)pattern&#39;)</code>是等价的。</p></li><li><p>可选值:</p><blockquote><p><code>re.I(re.IGNORECASE)</code>: 忽略大小写（括号内是完整写法，下同）</p></blockquote><blockquote><p><code>M(MULTILINE)</code>: 多行模式，改变’^’和’$’的行为（参见上图）</p></blockquote><blockquote><p><code>S(DOTALL)</code>: 点任意匹配模式，改变’.’的行为</p></blockquote><blockquote><p><code>L(LOCALE)</code>: 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</p></blockquote><blockquote><p><code>U(UNICODE)</code>: 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</p></blockquote><blockquote><p><code>X(VERBOSE)</code>: 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = re.compile(<span class="string">r"""\d +  # the integral part</span></span><br><span class="line"><span class="string">                   \.    # the decimal point</span></span><br><span class="line"><span class="string">                   \d *  # some fractional digits"""</span>, re.X)</span><br><span class="line">b = re.compile(<span class="string">r"\d+\.\d*"</span>)</span><br></pre></td></tr></table></figure></li><li><p>re提供了众多模块方法用于完成正则表达式的功能。</p><blockquote><p>这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：</p></blockquote><pre><code>m = re.match(r&apos;hello&apos;, &apos;hello world!&apos;)print m.group()</code></pre></li><li><p>re模块还提供了一个方法escape(string)</p><blockquote><p>用于将string中的正则表达式元字符如*/+/?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。</p></blockquote></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>邮箱等规则字符串可用</p></blockquote><ul><li><p>模糊查询：判断主题是字符串</p></li><li><p>特殊字符：</p><blockquote><p><code>\d</code>:数字（一个数字（开始为数字则正确））<br><code>\D</code>:非数字<br><code>\w</code>:单词字符<br><code>\W</code>:非单词字符<br><code>\s</code>:空白字符<br><code>[1-9]</code>: 1到9数字<br><code>[a-z|A-Z]</code>:所有英文字符</p></blockquote><blockquote><p>转义符：<code>\</code><br>  <code>\\d</code>:\d<br>  <code>\.</code>:.<br>  <code>.</code>:任意字符<br>  <code>|</code>：左右满足任何一个即可</p></blockquote></li><li><p>正则表达式的数量：</p><blockquote><p><code>*</code>:0个或多个</p></blockquote><blockquote><p><code>+</code>:1个或多个</p></blockquote><blockquote><p><code>?</code>:0个或1个  贪婪模式下:取消贪婪模式</p></blockquote><blockquote><p>注意：<code>+</code> <code>？`` *</code> 匹配的是前一个字符</p></blockquote><blockquote><p>贪婪模式：<code>*?</code>  <code>+?</code>  <code>??</code>  <code>{1,4}?</code></p></blockquote><blockquote><p><code>^</code>:以xxx开头</p></blockquote><blockquote><p><code>$</code>:以XXX结尾</p></blockquote><blockquote><p><code>\A</code>:相当于：^\w</p></blockquote><blockquote><p><code>\Z</code>:相当于:\w$</p></blockquote><blockquote><p><code>{0,5}</code>：格式重复次数0到5次</p></blockquote><blockquote><p><code>r</code>:转译符，r’  ‘</p></blockquote></li></ul><h2 id="re函数"><a href="#re函数" class="headerlink" title="re函数"></a>re函数</h2><blockquote><p><code>match</code>:尽量不匹配，找到一个马上返回<br><code>search</code>：<br><code>findall</code>:尽量匹配</p></blockquote><h3 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h3><blockquote><p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p></blockquote><ul><li><p>属性</p><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">string</td><td align="center">匹配时使用的文本。</td></tr><tr><td align="center">re</td><td align="center">匹配时使用的Pattern对象。</td></tr><tr><td align="center">pos</td><td align="center">文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</td></tr><tr><td align="center">endpos</td><td align="center">文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</td></tr><tr><td align="center">lastindex</td><td align="center">最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</td></tr><tr><td align="center">lastgroup</td><td align="center">最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</td></tr></tbody></table></li><li><p>方法</p><blockquote><p><code>group([group1, …])</code>:</p><blockquote><p>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。</p><p>group1可以使用编号也可以使用别名；</p><p>编号0代表整个匹配的子串；不填写参数时，返回group(0)；</p><p>没有截获字符串的组返回None；</p><p>截获了多次的组返回最后一次截获的子串。</p></blockquote></blockquote><blockquote><p><code>groups([default])</code>:</p><blockquote><p>以元组形式返回全部分组截获的字符串。</p><p>相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</p></blockquote></blockquote><blockquote><p><code>groupdict([default])</code>:</p><blockquote><p>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</p></blockquote><p><code>start([group])</code>:</p><blockquote><p>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</p></blockquote><p><code>end([group])</code>:</p><blockquote><p>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</p></blockquote><p><code>span([group])</code>:</p><blockquote><p>返回(start(group), end(group))。</p></blockquote><p><code>expand(template)</code>:</p><blockquote><p>将匹配到的分组代入template中然后返回。</p><p>template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。</p><p>\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g&lt;1&gt;0。</p></blockquote></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = re.match(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, <span class="string">'hello world!'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.string:"</span>, m.string</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.re:"</span>, m.re</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.pos:"</span>, m.pos</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.endpos:"</span>, m.endpos</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.lastindex:"</span>, m.lastindex</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.lastgroup:"</span>, m.lastgroup</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.group(1,2):"</span>, m.group(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.groups():"</span>, m.groups()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.groupdict():"</span>, m.groupdict()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.start(2):"</span>, m.start(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.end(2):"</span>, m.end(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"m.span(2):"</span>, m.span(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">r"m.expand(r'\2 \1\3'):"</span>, m.expand(<span class="string">r'\2 \1\3'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># m.string: hello world!</span></span><br><span class="line"><span class="comment"># m.re: &lt;_sre.SRE_Pattern object at 0x016E1A38&gt;</span></span><br><span class="line"><span class="comment"># m.pos: 0</span></span><br><span class="line"><span class="comment"># m.endpos: 12</span></span><br><span class="line"><span class="comment"># m.lastindex: 3</span></span><br><span class="line"><span class="comment"># m.lastgroup: sign</span></span><br><span class="line"><span class="comment"># m.group(1,2): ('hello', 'world')</span></span><br><span class="line"><span class="comment"># m.groups(): ('hello', 'world', '!')</span></span><br><span class="line"><span class="comment"># m.groupdict(): &#123;'sign': '!'&#125;</span></span><br><span class="line"><span class="comment"># m.start(2): 6</span></span><br><span class="line"><span class="comment"># m.end(2): 11</span></span><br><span class="line"><span class="comment"># m.span(2): (6, 11)</span></span><br><span class="line"><span class="comment"># m.expand(r'\2 \1\3'): world hello!</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h3><pre><code>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。Pattern不能直接实例化，必须使用re.compile()进行构造。</code></pre><ul><li><p>Pattern提供了几个可读属性用于获取表达式的相关信息</p><blockquote><p><code>pattern</code>: 编译时用的表达式字符串。</p><p><code>flags</code>: 编译时用的匹配模式。数字形式。</p><p><code>groups</code>: 表达式中分组的数量。</p><p><code>groupindex</code>: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">p = re.compile(<span class="string">r'(\w+) (\w+)(?P&lt;sign&gt;.*)'</span>, re.DOTALL)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"p.pattern:"</span>, p.pattern</span><br><span class="line"><span class="keyword">print</span> <span class="string">"p.flags:"</span>, p.flags</span><br><span class="line"><span class="keyword">print</span> <span class="string">"p.groups:"</span>, p.groups</span><br><span class="line"><span class="keyword">print</span> <span class="string">"p.groupindex:"</span>, p.groupindex</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># p.pattern: (\w+) (\w+)(?P&lt;sign&gt;.*)</span></span><br><span class="line"><span class="comment"># p.flags: 16</span></span><br><span class="line"><span class="comment"># p.groups: 3</span></span><br><span class="line"><span class="comment"># p.groupindex: &#123;'sign': 3&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="实例方法-re模块方法-："><a href="#实例方法-re模块方法-：" class="headerlink" title="实例方法[ | re模块方法]："></a>实例方法[ | re模块方法]：</h3><ul><li><p>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags])</p><blockquote><p>这个方法将从string的pos下标处起尝试匹配pattern；</p><p>如果pattern结束时仍可匹配，则返回一个Match对象；</p><p>如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。</p><p>pos和endpos的默认值分别为0和len(string)；</p><p>re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</p></blockquote><pre><code>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符&apos;$&apos;。</code></pre></li><li><p>search(string[, pos[, endpos]]) | re.search(pattern, string[, flags])</p><blockquote><p>这个方法用于查找字符串中可以匹配成功的子串。</p><p>从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；</p><p>若无法匹配，则将pos加1后重新尝试匹配；直到pos=endpos时仍无法匹配则返回None。</p><p>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: UTF-8 </span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将正则表达式编译成Pattern对象 </span></span><br><span class="line">pattern = re.compile(<span class="string">r'world'</span>) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用search()查找匹配的子串，不存在能匹配的子串时将返回None </span></span><br><span class="line"><span class="comment"># 这个例子中使用match()无法成功匹配 </span></span><br><span class="line">match = pattern.search(<span class="string">'hello world!'</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> match: </span><br><span class="line">    <span class="comment"># 使用Match获得分组信息 </span></span><br><span class="line">    <span class="keyword">print</span> match.group() </span><br><span class="line"> </span><br><span class="line"><span class="comment">### 输出 ### </span></span><br><span class="line"><span class="comment"># world</span></span><br></pre></td></tr></table></figure></li><li><p>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit])</p><blockquote><p>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</p></blockquote><pre><code>import rep = re.compile(r&apos;\d+&apos;)print p.split(&apos;one1two2three3four4&apos;)### output #### [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;, &apos;four&apos;, &apos;&apos;]</code></pre></li><li><p>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags])</p><blockquote><p>搜索string，以列表形式返回全部能匹配的子串。</p></blockquote><pre><code>import rep = re.compile(r&apos;\d+&apos;)print p.findall(&apos;one1two2three3four4&apos;)### output #### [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;]</code></pre></li><li><p>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags])</p><blockquote><p>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。</p></blockquote><pre><code>import rep = re.compile(r&apos;\d+&apos;)for m in p.finditer(&apos;one1two2three3four4&apos;):    print m.group(),### output #### 1 2 3 4</code></pre></li><li><p>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]):</p><blockquote><p>使用repl替换string中每一个匹配的子串后返回替换后的字符串。</p></blockquote><blockquote><p>当repl是一个字符串时，可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。</p></blockquote><blockquote><p>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。</p></blockquote><blockquote><p>count用于指定最多替换次数，不指定时全部替换。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'i say, hello world!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> p.sub(<span class="string">r'\2 \1'</span>, s)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> p.sub(func, s)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># say i, world hello!</span></span><br><span class="line"><span class="comment"># I Say, Hello World!</span></span><br><span class="line">subn(repl, string[, count]) |re.sub(pattern, repl, string[, count]):</span><br><span class="line">返回 (sub(repl, string[, count]), 替换次数)。</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">p = re.compile(<span class="string">r'(\w+) (\w+)'</span>)</span><br><span class="line">s = <span class="string">'i say, hello world!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> p.subn(<span class="string">r'\2 \1'</span>, s)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">' '</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> p.subn(func, s)</span><br><span class="line"> </span><br><span class="line"><span class="comment">### output ###</span></span><br><span class="line"><span class="comment"># ('say i, world hello!', 2)</span></span><br><span class="line"><span class="comment"># ('I Say, Hello World!', 2)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="邮箱-IP正则"><a href="#邮箱-IP正则" class="headerlink" title="邮箱/IP正则"></a>邮箱/IP正则</h3><ul><li><p>判断邮箱合法性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pa = <span class="string">'\d'</span>   <span class="comment">#规则 ---&gt;正则表达式</span></span><br><span class="line">str1 = <span class="string">'qaqsqdq12313'</span></span><br><span class="line">x = re.findall(pa,str1)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_num</span><span class="params">(string1)</span>:</span></span><br><span class="line">   pattern = <span class="string">'\w+@\w+\.com'</span> <span class="comment">#邮箱正则</span></span><br><span class="line">   x = re.findall(pattern,string1)</span><br><span class="line">   print(x)</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  str1 = input(<span class="string">'输入邮箱： '</span>)</span><br><span class="line">   res = is_num(str1)</span><br><span class="line">  <span class="keyword">if</span> len(res) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'xxxx'</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'oooooo'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>判断IP合法性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_num</span><span class="params">(string1)</span>:</span></span><br><span class="line">   pattern = <span class="string">r"^((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.)</span></span><br><span class="line"><span class="string">   &#123;3&#125;(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])$"</span></span><br><span class="line">   <span class="comment">#pattern = r'1\d\d|25[0-5]|2[0-4]\d'</span></span><br><span class="line">   </span><br><span class="line">   x = re.findall(pattern, string1)</span><br><span class="line">   print(x)</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    str1 = input(<span class="string">'输入号码： '</span>)</span><br><span class="line">    res = is_num(str1)</span><br><span class="line">    <span class="keyword">if</span> len(res) != <span class="number">1</span>:</span><br><span class="line">      print(<span class="string">'xxxx'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       print(<span class="string">'oooooo'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    content = <span class="string">'Hello 12345 World'</span></span><br><span class="line"> </span><br><span class="line"> result = re.match(<span class="string">'^Hello\s(\d+)\sWorld'</span>, content)</span><br><span class="line"> print(result.group())</span><br></pre></td></tr></table></figure></li></ul><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><blockquote><p>正则表达式通常用于在文本中查找匹配的字符串。</p><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪的则相反，总是尝试匹配尽可能少的字符。</p><p>例如：正则表达式”ab*”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="string">'http://weibo.com/comment/kEraCNdsfgkdsfgjkldsjkl'</span></span><br><span class="line">result1 = re.match(<span class="string">'http.*?comment/(.*?)'</span>, content)</span><br><span class="line">result2 = re.match(<span class="string">'http.*?comment/(.*)'</span>, content)</span><br><span class="line">print(<span class="string">'result1'</span>, result1.group(<span class="number">1</span>))  <span class="comment"># 结果 result1</span></span><br><span class="line">print(<span class="string">'result2'</span>, result2.group(<span class="number">1</span>))  <span class="comment"># 结果 result2 kEraCN</span></span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*Demo$'</span>, content)</span><br><span class="line">print(result.group(<span class="number">1</span>))  <span class="comment"># 结果</span></span><br><span class="line">result = re.match(<span class="string">'^He.*(\d+).*Demo$'</span>, content)</span><br><span class="line">print(result.group(<span class="number">1</span>))  <span class="comment"># 结果 7</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> re函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python面试01 -- 面试</title>
      <link href="/2020/02/14/python%E9%9D%A2%E8%AF%9501%20--%20%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/02/14/python%E9%9D%A2%E8%AF%9501%20--%20%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文内容主要对近期面试问题和答案进行总结并记录注意的地方，只供参考，无其他实际用途</p><a id="more"></a><h2 id="PEP8规范"><a href="#PEP8规范" class="headerlink" title="PEP8规范"></a>PEP8规范</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>常量：大写加下划线 <code>USER_CONSTANT</code></p><p>私有变量：小写加一个前导下划线 <code>_private_value</code> (通俗约定，python中并不存在，需要保护的变量会使用)</p><p>内置变量：<code>__class__</code> (为避免内置变量和其他变量产生冲突，两个前导下划线会导致变量在解释期间被更名 python的名称改编特性)</p><h3 id="函数和方法-（通用小写和下划线）"><a href="#函数和方法-（通用小写和下划线）" class="headerlink" title="函数和方法 （通用小写和下划线）"></a>函数和方法 （通用小写和下划线）</h3><p>私有方法：小写和一个前导下划线 （与私有变量一样）<code>_func</code></p><p>特殊方法：小写和两个前导下划线，两个后置下划线  <code>__str__ __cmp__</code>  (只用于特殊函数)</p><p>函数参数：小写和下划线，缺省值等号两边无空格 <code>user_number=1</code></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>驼峰格式命名，所有单词首字母大写其余小写 通常采用其类型或者特性的后缀 <code>SQLEngine</code>  <code>MimeTypes</code> </p><p>基类：使用<code>Base</code> 或者<code>Abstract</code> 前缀   <code>BaseCookie</code>  <code>AbstractGroup</code></p><h3 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h3><p>特殊模块：<code>__init__</code></p><p>实现一个协议，通常使用lib为后缀  <code>import smtplib</code>  </p><p>其他：不带下划线的小写字母  </p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>不使用断言实现静态类型检测 python是动态类型语言，断言应该被用于避免函数不被毫无意义的调用</p><p>不随意使用<code>*args</code> <code>**kwargs</code>,其参数可能会破坏函数的健壮性。会使签名变得模糊，会使其在不应该的地方构建小的参数解析器</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>布尔元素：使用has或者is前缀  <code>is_connect = True</code></p><p>序列: 复数形式  <code>numbers = [&#39;user_1&#39;, &#39;user_2&#39;]</code></p><p>字典： 显式名称 <code>person_address = {&#39;user_2&#39;:&#39;20 street huafu&#39;}</code>. </p><p>避免出现现有名称再次使用 如os sys</p><h3 id="一些数字"><a href="#一些数字" class="headerlink" title="一些数字"></a>一些数字</h3><p>一行列数： 最高79列 满屏编辑器的显示列数</p><p>一个函数：不超过30行代码，即不使用游标可看到整个函数代码</p><p>一个类：不超过200行，不超过10个方法，一个模块不超过500行</p><h3 id="验证脚本"><a href="#验证脚本" class="headerlink" title="验证脚本"></a>验证脚本</h3><pre><code>安装一个pep8脚本安装    </code></pre><h2 id="Linux基础和git"><a href="#Linux基础和git" class="headerlink" title="Linux基础和git"></a>Linux基础和git</h2><h3 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h3><p>1.区分文件和文件夹: ls -F : 显示名称的时候会在文件夹后面加’/‘, 文件后面加’*’</p><p>2.日志存放路径：以文本存放在’var/log/‘文件夹下，后缀为.log</p><p>3.查看服务器端口：netstat -anp | grep service_name</p><p>4.ubuntu设置开机自启动程序 </p><blockquote><p>查看某一服务是否开机自启动：chkconfig –list|服务名</p></blockquote><blockquote><p>单独开启/关闭某一服务：chkconfig 服务吗 on/off</p></blockquote><blockquote><p>查看服务状态：service 服务名 status</p></blockquote><p>5.find/grep区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find: 根据文件属性进行查找，如文件名，文件大小，所有者，是否为空，访问时间，修改时间</span><br><span class="line">      find 路径 -name filename[可使用tong p]</span><br><span class="line">      find / [-文件特征：amin atime empty group user]</span><br><span class="line">grep：根据文件的内容进行查找，会对文件的每一行按照给定的模式进行匹配查找</span><br><span class="line">      grep <span class="string">'test'</span> d*  :显示所有以d开头文件中包含test的行</span><br></pre></td></tr></table></figure><p>6.重定向</p><p><code>&gt;</code>:Linux允许将命令执行结果重定向到一个文件，本应该显示在终端上的内容保存到指定文件中，若文件不存在会创建一个，存在则覆盖其内容。    例如：<code>ls &gt; test.txt</code></p><p><code>&gt;&gt;</code>:将输出内容追加到目标文件中。文件不存在则创建，存在则将内容追加到文件末尾，原文件内容不受影响</p><p>7.软连接和硬链接</p><p>软连接相当于快捷方式，硬连接可理解为源文件的一个别名，可以存在多个别名，当rm一个文件的时候，此文件的硬连接数减1，为0时文件被删除</p><p>8.10个常用Linux命令</p><pre><code>pwd     显示工作路径ls         查看目录中的文件cd filename/        进入filename目录cd ..     回到上级目录cd ../..         回到上两级目录mkdir dir1    创建一个名叫dir1的目录rm -f file1    删除file1文件， -f 忽略不存在的文件，不给出提示rmdir dir1    删除dir1目录groupadd group_name     创建一个新用户组groupdel group_name    删除一个用户组tar -cvf archive.tar file1     创建一个非压缩的tartar -cvf archive.tar file1 file2 dir1         创建一个包含file1 file2 dir1的档案文件tar -tf archive.tar    显示一个包中内容tar -xvf archive.tar        释放一个包tar -xvf archive.tar -C /tmp        将压缩包释放到tmp/目录下</code></pre><p>9.Linux关机命令</p><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">reboot</td><td align="left">重新启动操作系统</td></tr><tr><td align="left">shutdown -r now</td><td align="left">重新启动，shutdown会给其他用户提示</td></tr><tr><td align="left">shutdown -h now/20:24</td><td align="left">立刻关机/在20:24关机</td></tr><tr><td align="left">shutdown -h +10</td><td align="left">系统在10分钟后自动关机</td></tr><tr><td align="left">init 0</td><td align="left">关机</td></tr><tr><td align="left">init 6</td><td align="left">重启</td></tr></tbody></table><h3 id="git冲突"><a href="#git冲突" class="headerlink" title="git冲突"></a>git冲突</h3><p>git合并文件出现冲突解决办法：</p><ol><li><code>git merge</code> 冲突，根据提示找到冲突文件，解决冲突，文件存在冲突会有提示</li><li>修改完成后，<code>git add</code> 冲突文件名</li><li><code>git commit</code> 注意：没有 -m 选项 进去后类似于vim编辑器，把confict相关的行删除，直接<code>push</code>就可以了</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><blockquote><p>dict 字典：字典是一组键（key）值（value）对。通过key查找，没有顺序，使用{}<br>主要应用于使用键和值进行关联的数据</p></blockquote><ul><li><p>1.1 现有字典 d={‘a’:24, ‘g’:52, ‘i’: 12, ‘k’:33} 按照字典的value进行排序</p><blockquote><p>sorted(d.items(), key=lamada x:x[1])</p></blockquote><p>  <code>sorted(iterable, cmp=None, key=None, reverse=False)</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">* iterable -- 可迭代对象。</span><br><span class="line"></span><br><span class="line">* cmp -- 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回<span class="number">1</span>，小于则返回<span class="number">-1</span>，等于则返回<span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">* key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，</span><br><span class="line"> 指定可迭代对象中的一个元素来进行排序。</span><br><span class="line"></span><br><span class="line">* reverse -- 排序规则，reverse = <span class="literal">True</span> 降序 ， reverse = <span class="literal">False</span> 升序（默认）。</span><br></pre></td></tr></table></figure></li><li><p>1.2 字典和json的区别</p><p>  字典是一种数据结构，json是一种数据的表现形式，字典中的key只要能hash就行，而json必须是字符串</p></li><li><p>1.3 可变类型和不可变类型</p><p>  可变与不可变是指内存中的值是否可以被改变，不可变类型指的是对象所在内存块中的值不可以改变，有数值、字符串、元祖；可变类型则是可以改变，主要有字典、列表</p></li><li><p>1.4 存入字典中的数据有没有先后顺序</p><p>  存入的数据不会自动排序，可以使用sort函数对字典进行排序</p></li><li><p>1.5 字典推导式 {}    </p><blockquote><p>d = {key:value for (key, value) in iterable}</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将同一个字母大小写对应的值相加</span></span><br><span class="line">mcase = &#123;<span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">34</span>, <span class="string">'A'</span>: <span class="number">7</span>, <span class="string">'B'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">mcase_frequency = &#123;</span><br><span class="line">   k.lower(): mcase.get(k.lower(), <span class="number">0</span>) + mcase.get(k.upper(), <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">for</span> k <span class="keyword">in</span> mcase.keys()</span><br><span class="line">  <span class="keyword">if</span> k.lower() <span class="keyword">in</span> [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换key和value</span></span><br><span class="line"></span><br><span class="line">mcase_frequency1 = &#123;v: k <span class="keyword">for</span> (k, v) <span class="keyword">in</span> mcase.items()&#125;</span><br></pre></td></tr></table></figure></li><li><p>1.6 列表推导式 []</p><blockquote><p>variable = [out_exp_res for out_exp in input_list if out_exp == 2]</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> <span class="keyword">is</span> <span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line">multiples1 = [func(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>1.7 生成器generator采用（）修改列表推导式即可</p><blockquote><p>multiples = (i for i in range(30) if i % 3 is 0)</p></blockquote></li><li><p>1.8 集合推导式  与列表推导式差不多 采用 { }</p><blockquote><p>squared = {x**2 for x in [1, 2, 2]}</p></blockquote></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>2.1 python 字符串中的<code>\</code>有三种含义：转移字符、连接路径名、太长代码换行编写</p></li><li><p>2.2 反转字符串:      <code>print(&#39;astart&#39; [::-1])</code> </p></li><li><p>2.3 将一个字符串处理成一个字典</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str1dict</span><span class="params">(str1)</span>:</span></span><br><span class="line">   dict1 = &#123;&#125;</span><br><span class="line">   <span class="keyword">for</span> iterms <span class="keyword">in</span> str1.split(<span class="string">'|'</span>):</span><br><span class="line">       key, value = iterms.split(<span class="string">':'</span>)</span><br><span class="line">       dict1[key] = value</span><br><span class="line">   <span class="keyword">return</span> dict1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"k:1|k1:2|k2:3"</span></span><br></pre></td></tr></table></figure></li><li><p>2.4 将alist中元素的age由大到小排序</p><blockquote><p>alist = [{‘name’: ‘a’, ‘age’: 20}, {‘name’: ‘b’, ‘age’: 24}, {name’: ‘c’, ‘age’: 19}]<br>sorted(alist, key= lambda x:x[‘age’], reverse = True)</p></blockquote></li><li><p>2.5 lambda 匿名函数 lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值。</p><blockquote><p>lambda匿名函数的格式：冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式。其实lambda返回值是一个函数的地址，也就是函数对象。</p></blockquote></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li><p>3.1 列表取值超过索引范围时，程序会产生异常 <code>indexError:list index out of range</code></p></li><li><p>3.2 列表常用操作</p><blockquote><p>增加</p><blockquote><p>列表名.insert(index, 数据)：        指定位置插入数据，index超过索引会补位</p></blockquote></blockquote><blockquote><blockquote><p>列表名.append(数据)：        在列表的末尾增加数据</p></blockquote></blockquote><blockquote><blockquote><p>列表.extend(iterable)：        将可迭代对象追加到列表</p></blockquote></blockquote><blockquote><p>取值和修改：根据下标取值和修改</p></blockquote><blockquote><p>删除</p><blockquote><p>del 列表名[index]：删除指定索引的数据</p></blockquote></blockquote><blockquote><blockquote><p>列表名.remove(数据)：删除第一次出现的指定数据</p></blockquote></blockquote><blockquote><blockquote><p>列表名.pop()：删除末尾数据，返回被删除的元素</p></blockquote></blockquote><blockquote><blockquote><p>列表名.pop(index)：删除指定索引的数据，返回被删除的元素</p></blockquote></blockquote><blockquote><blockquote><p>列表名.clear()：清空整个列表的元素</p></blockquote></blockquote><blockquote><p>排序</p></blockquote><blockquote><blockquote><p>列表名.sort()：升序排序，从小到大</p></blockquote></blockquote><blockquote><blockquote><p>列表名.sort(reverse=True)：降序排序，从大到小</p></blockquote></blockquote><blockquote><blockquote><p>列表名.reverse()：列表逆序，反转</p></blockquote></blockquote><blockquote><p>统计相关</p></blockquote><blockquote><blockquote><p>len()、列表名.count(数据)、列表名.index(数据)–数据首次出现的索引，无则报错</p></blockquote></blockquote><blockquote><p>循环遍历 while for</p></blockquote></li><li><p>3.3 <code>a = [1,2,3,4,5,3,2,1] print(list[40:])</code> 不会报错indexError，将输出[]</p></li><li><p>3.4 列表生成式，生成一个公差为11的列表 <code>[x*11 for x in range(10)]</code></p></li><li><p>3.5 有两个列表找出其中相同和不同的元素(集合处理)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">41</span>,,<span class="number">2</span>]</span><br><span class="line">set1 = set(list1)</span><br><span class="line">set2 = set(list2)</span><br><span class="line">set1&amp;set2</span><br><span class="line">set1^set2</span><br></pre></td></tr></table></figure></li><li><p>3.5 分析代码性能 使用cProfile.run(‘函数名’)</p></li></ul><h3 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h3><ul><li>元祖将多样的对象集合在一起，不能修改，通过索引进行查找，使用（），应用于把一些数据当作一个整体去使用，不能修改</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>5.1 集合与列表、元祖类似，可以存储多个数据，但是这些数据不重复。集合支持union（联合） intersection（交） difference sysmmetric_difference（对称差集）等数学运算</li><li>5.2 应用：快速去除列表中的重复元素，交集&amp;、并集｜、差集-（另一个集合中没有的）、对称差集^（在A或者B中，但不会同时出现在二者中）</li></ul><h2 id="python-高级"><a href="#python-高级" class="headerlink" title="python    高级"></a>python    高级</h2><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><ul><li><p>Python中类方法、类实例方法、静态方法有何区别？</p><blockquote><p>类方法：是类对象的方法，在定义时需要在上方使用“@classmethod”进行装饰，形参为 cls，表示类对象，类对象和实例对象都可调用；</p></blockquote><blockquote><p>类实例方法：是类实例化对象的方法，只有实例对象可以调用，形参为self，指代对象本身；</p></blockquote><blockquote><p>静态方法：是一个任意函数，在其上方使用“@staticmethod”进行装饰，可以用对象直接调用，静态方法实际上跟该类没有太大关系。</p></blockquote></li><li><p>Python中如何动态获取和设置对象的属性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hasattr(Parent，<span class="string">'x'</span>):</span><br><span class="line">    print(getattr(Parent，<span class="string">'x'</span>))</span><br><span class="line">    setattr(Parent，<span class="string">'x'</span>，<span class="number">3</span>)</span><br><span class="line">print(getattr(Parent，<span class="string">'x'</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="内存管理与垃圾回收机制"><a href="#内存管理与垃圾回收机制" class="headerlink" title="内存管理与垃圾回收机制"></a>内存管理与垃圾回收机制</h3><ul><li><p>Python的内存管理机制及调优手段？</p><blockquote><p>内存管理机制：引用计数、垃圾回收、内存池。</p></blockquote></li><li><p>引用计数：</p><blockquote><p>引用计数是一种非常高效的内存管理手段， 当一个 Python 对象被引用时其引用计数增加1， 当其不再被一个变量引用时则计数减 1. 当引用计数等于0时对象被删除。</p></blockquote></li><li><p>垃圾回收 ：</p><blockquote><p>引用计数</p><blockquote><p>引用计数也是一种垃圾收集机制，而且也是一种最直观，最简单的垃圾收集技术。当 Python 的某个对象的引用计数降为 0 时，说明没有任何引用指向该对象，该对象就成为要被回收的垃圾了。比如某个新建对象，它被分配给某个引用，对象的引用计数变为 1。如果引用被删除，对象的引用计数为 0，那么该对象就可以被垃圾回收。不过如果出现循环引用的话，引用计数机制就不再起有效的作用了</p></blockquote></blockquote><blockquote><p>标记清除</p></blockquote><blockquote><blockquote><p>如果两个对象的引用计数都为 1，但是仅仅存在他们之间的循环引用，那么这两个对象都是需要被回收的，也就是说，它们的引用计数虽然表现为非 0，但实际上有效的引用计数为 0。所以先将循环引用摘掉，就会得出这两个对象的有效计数。</p></blockquote></blockquote><blockquote><p>分代回收</p></blockquote><blockquote><blockquote><p>从前面“标记-清除”这样的垃圾收集机制来看，这种垃圾收集机制所带来的额外操作实际上与系统中总的内存块的数量是相关的，当需要回收的内存块越多时，垃圾检测带来的额外操作就越多，而垃圾回收带来的额外操作就越少；反之，当需回收的内存块越少时，垃圾检测就将比垃圾回收带来更少的额外操作。</p></blockquote></blockquote><blockquote><blockquote><p>举个例子：<br>当某些内存块 M 经过了 3 次垃圾收集的清洗之后还存活时，我们就将内存块 M 划到一个集合 A 中去，而新分配的内存都划分到集合 B 中去。当垃圾收集开始工作时，大多数情况都只对集合 B 进行垃圾回收，而对集合 A 进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合 B 中的某些内存块由于存活时间长而会被转移到集合 A 中，当然，集合 A 中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p></blockquote></blockquote></li><li><p>内存池</p><blockquote><p>Python 的内存机制呈现金字塔形状，-1，-2 层主要有操作系统进行操作；</p></blockquote><blockquote><p>第 0 层是 C 中的 malloc，free 等内存分配和释放函数进行操作；</p></blockquote><blockquote><p>第1 层和第 2 层是内存池，有 Python 的接口函数 PyMem_Malloc 函数实现，当对象小于 256K 时有该层直接分配内存；</p></blockquote><blockquote><p>第3层是最上层，也就是我们对 Python 对象的直接操作；</p></blockquote><blockquote><p>Python 在运行期间会大量地执行 malloc 和 free 的操作，频繁地在用户态和核心态之间进行切换，这将严重影响 Python 的执行效率。为了加速Python 的执行效率，Python 引入了一个内存池机制，用于管理对小块内存的申请和释放。</p></blockquote><blockquote><p>Python 内部默认的小块内存与大块内存的分界点定在 256 个字节，当申请的内存小于 256 字节时，PyObject_Malloc会在内存池中申请内存；当申请的内存大于 256 字节时，PyObject_Malloc 的行为将蜕化为 malloc 的行为。当然，通过修改 Python 源代码，我们可以改变这个默认值，从而改变 Python 的默认内存管理行为。</p></blockquote></li><li><p>调优手段（了解）</p><blockquote><p>1.手动垃圾回收</p></blockquote><blockquote><p>2.调高垃圾回收阈值</p></blockquote><blockquote><p>3.避免循环引用（手动解循环引用和使用弱引用）</p></blockquote></li><li><p>内存泄露是什么？如何避免？</p><blockquote><p>指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。导致程序运行速度减慢甚至系统崩溃等严重后果。<br>有 <strong>del</strong>() 函数的对象间的循环引用是导致内存泄漏的主凶。</p></blockquote><blockquote><p>不使用一个对象时使用:del object 来删除一个对象的引用计数就可以有效防止内存泄漏问题。</p></blockquote><blockquote><p>通过Python 扩展模块 gc 来查看不能回收的对象的详细信息。</p></blockquote><blockquote><p>可以通过 sys.getrefcount(obj) 来获取对象的引用计数，并根据返回值是否为 0 来判断是否内存泄漏。</p></blockquote></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul><li><p>Python函数调用的时候参数的传递方式是值传递还是引用传递</p><blockquote><p>Python的参数传递有：位置参数、默认参数、可变参数、关键字参数。</p></blockquote><blockquote><p>函数的传值到底是值传递还是引用传递，要分情况：</p><p>不可变参数用值传递：</p><blockquote><p>像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象</p></blockquote></blockquote><blockquote><p>可变参数是引用传递的：</p><blockquote><p>比如像列表，字典这样的对象是通过引用传递、和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变。</p></blockquote></blockquote></li><li><p>对缺省参数的理解 </p><blockquote><p>缺省参数指在调用函数的时候没有传入参数的情况下，调用默认的参数，在调用函数的同时赋值时，所传入的参数会替代默认参数。</p></blockquote><blockquote><p><code>*args</code> 是不定长参数，他可以表示输入参数是不确定的，可以是任意多个。</p></blockquote><blockquote><p><code>**kwargs</code> 是关键字参数，赋值的时候是以键 = 值的方式，参数是可以任意多对在定义函数的时候不确定会有多少参数会传入时，就可以使用两个参数。</p></blockquote></li><li><p>为什么函数名字可以当做参数用</p><blockquote><p>Python中一切皆对象，函数名是函数在内存中的空间，也是一个对象。</p></blockquote></li><li><p>Python中pass语句的作用是什么？</p><blockquote><p>在编写代码时只写框架思路，具体实现还未编写就可以用 pass 进行占位，使程序不报错，不会进行任何操作。</p></blockquote></li><li><p>有这样一段代码，print c会输出什么，为什么</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = [a]</span><br><span class="line">a = <span class="number">15</span></span><br></pre></td></tr></table></figure><blockquote><p>10对于字符串、数字，传递是相应的值。</p></blockquote></li></ul><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><ul><li><p>map函数和reduce函数？</p><blockquote><p>①从参数方面来讲：<br>map()包含两个参数，第一个参数是一个函数，第二个是序列（列表 或元组）。其中，函数（即 map 的第一个参数位置的函数）可以接收一个或多个参数。<br>reduce()第一个参数是函数，第二个是序列（列表或元组）。但是，其函数必须接收两个参数。 </p></blockquote><blockquote><p>②从对传进去的数值作用来讲：<br>map()是将传入的函数依次作用到序列的每个元素，每个元素都是独自被函数“作用”一次 。<br>reduce()是将传人的函数作用在序列的第一个元素得到结果后，把这个结果继续与下一个元素作用（累积计算）。</p></blockquote></li><li><p>递归函数停止的条件？</p><blockquote><p>递归的终止条件一般定义在递归函数内部，在递归调用前要做一个条件判断，根据判断的结果选择是继续调用自身，还是 return;返回终止递归。<br>终止的条件：</p><blockquote><p>判断递归的次数是否达到某一限定值</p></blockquote></blockquote></li></ul><blockquote><blockquote><p>判断运算的结果是否达到某个范围等，根据设计的目的来选择</p></blockquote></blockquote><ul><li><p>回调函数，如何通信的? </p><p>  回调函数是把函数的指针(地址)作为参数传递给另一个函数，将整个函数当作一个对象，赋值给调用的函数。</p></li><li><p>Python主要的内置数据类型都有哪些？ print dir( ‘a ’) 的输出</p><blockquote><p>内建类型：布尔类型、数字、字符串、列表、元组、字典、集合；</p></blockquote><blockquote><p>输出字符串‘a’的内建方法；</p></blockquote></li><li><p>print(list(map(lambda x: x * x, [y for y in range(3)])))的输出？</p><p>  [0， 1， 4]</p></li><li><p>hasattr() getattr() setattr() 函数使用详解？(2018-4-16-lxy)</p><blockquote><p>hasattr(object, name)函数：</p><blockquote><p>判断一个对象里面是否有name属性或者name方法，返回bool值，有name属性(方法)返回True，否则返回False。注意：name要使用引号括起来。</p></blockquote></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">function_demo</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello function"</span></span><br><span class="line">functiondemo = function_demo()</span><br><span class="line">res = hasattr(functiondemo, <span class="string">'name'</span>)  <span class="comment">#判断对象是否有name属性，True</span></span><br><span class="line">res = hasattr(functiondemo, <span class="string">"run"</span>) <span class="comment">#判断对象是否有run方法，True</span></span><br><span class="line">res = hasattr(functiondemo, <span class="string">"age"</span>) <span class="comment">#判断对象是否有age属性，Falsw</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><blockquote><p>getattr(object, name[,default]) 函数：</p><blockquote><p>获取对象object的属性或者方法，如果存在则打印出来，如果不存在，打印默认值，默认值可选。注意：如果返回的是对象的方法，则打印结果是：方法的内存地址，如果需要运行这个方法，可以在后面添加括号()。</p></blockquote></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">functiondemo = function_demo()</span><br><span class="line">getattr(functiondemo, <span class="string">'name'</span>) </span><br><span class="line"><span class="comment">#获取name属性，存在就打印出来--- demo </span></span><br><span class="line">getattr(functiondemo, <span class="string">"run"</span>) </span><br><span class="line"><span class="comment">#获取run方法，存在打印出 方法的内存地址---</span></span><br><span class="line">&lt;bound method function_demo.run of &lt;__main__.functio</span><br><span class="line">n_demo object at <span class="number">0x10244f320</span>&gt;&gt;</span><br><span class="line">getattr(functiondemo, <span class="string">"age"</span>) </span><br><span class="line"><span class="comment">#获取不存在的属性，报错如下：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/liuhuiling/Desktop/MT_code/OpAPIDemo/</span></span><br><span class="line"><span class="string">  conf/OPCommUtil.py"</span>, line <span class="number">39</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    res = getattr(functiondemo, <span class="string">"age"</span>)</span><br><span class="line">AttributeError: <span class="string">'function_demo'</span> object has no attribute <span class="string">'age'</span></span><br><span class="line">getattr(functiondemo, <span class="string">"age"</span>, <span class="number">18</span>)  </span><br><span class="line"><span class="comment">#获取不存在的属性，返回一个默认值</span></span><br></pre></td></tr></table></figure><blockquote><p>setattr(object,name,values)函数：</p><blockquote><p>给对象的属性赋值，若属性不存在，先创建再赋值</p></blockquote></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">function_demo</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello function"</span></span><br><span class="line">functiondemo = function_demo()</span><br><span class="line">res = hasattr(functiondemo, <span class="string">'age'</span>)  <span class="comment"># 判断age属性是否存在，False</span></span><br><span class="line">print(res)</span><br><span class="line">setattr(functiondemo, <span class="string">'age'</span>, <span class="number">18</span> )  <span class="comment">#对age属性进行赋值，无返回值</span></span><br><span class="line">res1 = hasattr(functiondemo, <span class="string">'age'</span>) <span class="comment">#再次判断属性是否存在，True</span></span><br></pre></td></tr></table></figure><blockquote><p>综合使用：</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">function_demo</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello function"</span></span><br><span class="line">functiondemo = function_demo()</span><br><span class="line">res = hasattr(functiondemo, <span class="string">'addr'</span>) <span class="comment"># 先判断是否存在if res:</span></span><br><span class="line">    addr = getattr(functiondemo, <span class="string">'addr'</span>)</span><br><span class="line">    print(addr)<span class="keyword">else</span>:</span><br><span class="line">    addr = getattr(functiondemo, <span class="string">'addr'</span>, setattr(functiondemo, </span><br><span class="line">    <span class="string">'addr'</span>, <span class="string">'北京首都'</span>))</span><br><span class="line">    <span class="comment">#addr = getattr(functiondemo, 'addr', '美国纽约')</span></span><br><span class="line">    print(addr)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><ul><li><p>什么是lambda函数？ 有什么好处？<br>lambda 函数是一个可以接收任意多个参数(包括可选参数)并且返回单个表达式值的函数</p><blockquote><p>1、lambda 函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用，连名字都很随意的情况下；</p></blockquote><blockquote><p>2、匿名函数，一般用来给 filter， map 这样的函数式编程服务;</p></blockquote><blockquote><p>3、作为回调函数，传递给某些应用，比如消息处理</p></blockquote></li><li><p>下面这段代码的输出结果将是什么？请解释。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipliers</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">lambda</span> x : i * x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"><span class="keyword">print</span> [m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> multipliers()]</span><br></pre></td></tr></table></figure><blockquote><p>上面代码输出的结果是[6， 6， 6， 6] (不是我们想的[0， 2， 4， 6])。</p></blockquote></li><li><p>你如何修改上面的multipliers的定义产生想要的结果？</p><blockquote><p>上述问题产生的原因是Python闭包的延迟绑定。这意味着内部函数被调用时，参数的值在闭包内进行查找。因此，当任何由multipliers()返回的函数被调用时，i的值将在附近的范围进行查找。那时，不管返回的函数是否被调用，for循环已经完成，i被赋予了最终的值3。</p></blockquote><blockquote><p>因此，每次返回的函数乘以传递过来的值3，因为上段代码传过来的值是2，它们最终返回的都是6。(3*2)碰巧的是，《The Hitchhiker’s Guide to Python》也指出，在与lambdas函数相关也有一个被广泛被误解的知识点，不过跟这个case不一样。由lambda表达式创造的函数没有什么特殊的地方，它其实是和def创造的函数式一样的。<br>下面是解决这一问题的一些方法。</p></blockquote><blockquote><p>一种解决方法就是用Python生成器。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipliers</span><span class="params">()</span>:</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="keyword">yield</span> <span class="keyword">lambda</span> x : i * x</span><br></pre></td></tr></table></figure><blockquote><p>另外一个解决方案就是创造一个闭包，利用默认函数立即绑定。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">multipliers</span><span class="params">()</span>:</span> </span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">lambda</span> x， i=i : i * x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br></pre></td></tr></table></figure></li><li><p>什么是lambda函数？它有什么好处？写一个匿名函数求两个数的和？</p></li></ul><blockquote><p>lambda 函数是匿名函数；使用 lambda 函数能创建小型匿名函数。这种函数得名于省略了用 def 声明函数的标准步骤；</p></blockquote><pre><code>f = lambda x，y:x+yprint(f(2017，2018))</code></pre><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><ul><li><p>请手写一个单例(2018-3-30-lxy)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls， *args， **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>  cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br></pre></td></tr></table></figure></li><li><p>单例模式的应用场景有哪些？</p><blockquote><p>单例模式应用的场景一般发现在以下条件下：</p></blockquote><blockquote><blockquote><p>资源共享的情况下，避免由于资源操作时导致的性能或损耗等。如日志文件，应用配置。 　　</p></blockquote></blockquote><blockquote><blockquote><p>控制资源的情况下，方便资源之间的互相通信。如线程池等。 1.网站的计数器 2.应用配置 3.多线程池 4.数据库配置，数据库连接池 5.应用程序的日志应用….</p></blockquote></blockquote></li></ul><h2 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h2><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul><li><p>对装饰器的理解 ，并写出一个计时器记录方法执行性能的装饰器？</p><blockquote><p>装饰器本质上是一个 Python 函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(func)</span>:</span></span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">　　　　 start = time.clock()</span><br><span class="line">　　　　 func() end =time.clock()</span><br><span class="line">　　　　 <span class="keyword">print</span> <span class="string">'used:'</span>， end - start</span><br><span class="line">　　　　 <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'in foo()'</span>foo()</span><br></pre></td></tr></table></figure></li><li><p>解释一下什么是闭包?</p><blockquote><p>在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</p></blockquote></li><li><p>函数装饰器有什么作用？</p><p>  装饰器本质上是一个Python函数，它可以在让其他函数在不需要做任何代码的变动的前提下增加额外的功能。 装饰器的返回值也是一个函数的对象，它经常用于有切面需求的场景。 比如：插入日志、性能测试、事务处理、缓存、权限的校验等场景 有了装饰器就可以抽离出大量的与函数功能本身无关的雷同代码并发并继续使用。</p></li></ul><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li><p>生成器、迭代器的区别？</p><blockquote><p>迭代器是一个更抽象的概念，任何对象，如果它的类有next方法和iter方法返回自己本身，对于string、list、dict、tuple等这类容器对象，使用for循环遍历是很方便的。在后台for语句对容器对象调用iter()函数，iter()是python的内置函数。iter()会返回一个定义了next()方法的迭代器对象，它在容器中逐个访问容器内元素，next()也是python的内置函数。在没有后续元素时，next()会抛出一个StopIteration异常。</p></blockquote><blockquote><p>生成器（Generator）是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数，只是在需要返回数据的时候使用 yield 语句。每次 next()被调用时，生成器会返回它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）</p></blockquote><blockquote><p>区别：生成器能做到迭代器能做的所有事,而且因为自动创建了iter()和 next()方法,生成器显得特别简洁,而且生成器也是高效的，使用生成器表达式取代列表解析可以同时节省内存。除了创建和保存程序状态的自动方法,当发生器终结时,还会自动抛出 StopIteration 异常。</p></blockquote></li><li><p>X是什么类型？<br><code>X = (for  i  in  ramg(10))</code><br>答：X是generator 类型。</p></li><li><p>请尝试用“一行代码”实现将1-N  的整数列表以 3为单位分组，比如 1-100分组后为? </p><pre><code>print([[x for x in range(1，100)][i:i+3] for i in range(0，len(list_a)，3)])</code></pre></li><li><p>Python中yield的用法？</p><blockquote><p>yield就是保存当前程序执行状态。你用for循环的时候，每次取一个元素的时候就会计算一次。用yield的函数叫generator，和iterator一样，它的好处是不用一次计算所有元素，而是用一次算一次，可以节省很多空间。generator每次计算需要上一次计算结果，所以用yield，否则一return，上次计算结果就没了。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">createGenerator</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>   mylist = range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line"><span class="meta">... </span>       <span class="keyword">yield</span> i*i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mygenerator = createGenerator() <span class="comment"># create a generator</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(mygenerator) <span class="comment"># mygenerator is an object!</span></span><br><span class="line">&lt;generator object createGenerator at <span class="number">0xb7555c34</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><ul><li><p>Python中的可变对象和不可变对象？</p><blockquote><p>不可变对象，该对象所指向的内存中的值不能被改变。当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。</p></blockquote><blockquote><p>可变对象，该对象所指向的内存中的值可以被改变。变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是原地改变。</p></blockquote><blockquote><p>Python中，数值类型（int和float）、字符串str、元组tuple都是不可变类型。而列表list、字典dict、集合set是可变类型。</p></blockquote></li><li><p>Python中is和==的区别？</p><blockquote><p>is判断的是a对象是否就是b对象，是通过id来判断的。</p></blockquote><blockquote><p>==判断的是a对象的值是否和b对象的值相等，是通过value来判断的。</p></blockquote></li><li><p>Python的魔法方法 </p><blockquote><p>魔法方法就是可以给你的类增加魔力的特殊方法，如果你的对象实现 （重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。 它们经常是两个下划线包围来命名的（比如 <code>__init__</code>，<code>__lt__</code>），Python 的魔法方法是非常强大的，所以了解其使用方法也变得尤为重要！ </p></blockquote><blockquote><p><code>__init__</code> 构造器，当一个实例被创建的时候初始化的方法。但是它并 不是实例化调用的第一个方法。 </p></blockquote><blockquote><p><code>__new__</code>才是实例化对象调用的第一个方法，它只取下 cls 参数，并把 其他参数传给<code>__init__</code>。 <code>__new__</code>很少使用，但是也有它适合的场景，尤其 是当类继承自一个像元组或者字符串这样不经常改变的类型的时候。 </p></blockquote><blockquote><p><code>__call__</code> 允许一个类的实例像函数一样被调用 。</p></blockquote><blockquote><p><code>__getitem__</code>定义获取容器中指定元素的行为，相当于 self[key] 。</p></blockquote><blockquote><p><code>__getattr__</code>定义当用户试图访问一个不存在属性的时候的行为 。</p></blockquote><blockquote><p><code>__setattr__</code> 定义当一个属性被设置的时候的行为 。</p></blockquote><blockquote><p><code>__getattribute__</code>定义当一个属性被访问的时候的行为 。</p></blockquote></li><li><p>面向对象中怎么实现只读属性? </p><blockquote><p>将对象私有化，通过共有方法提供一个读取数据的接口。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>:</span>     </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x)</span>:</span>  </span><br><span class="line">        self.__age = <span class="number">10</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">return</span> self.__age;  </span><br><span class="line">t = person(<span class="number">22</span>)  </span><br><span class="line"><span class="comment"># t.__age = 100  </span></span><br><span class="line">print(t.age())  </span><br><span class="line"></span><br><span class="line">最好的方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCls</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    __weight = <span class="number">50</span>  </span><br><span class="line"> </span><br><span class="line">    @property  <span class="comment">#以访问属性的方式来访问weight方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">return</span> self.__weight  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    obj = MyCls()  </span><br><span class="line">    print(obj.weight)  </span><br><span class="line">    obj.weight = <span class="number">12</span>  </span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):  </span><br><span class="line"><span class="number">50</span>  </span><br><span class="line">  File <span class="string">"C:/PythonTest/test.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;  </span><br><span class="line">    obj.weight = <span class="number">12</span>  </span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br></pre></td></tr></table></figure></li><li><p>谈谈你对面向对象的理解</p><blockquote><p>面向对象是相对于面向过程而言的。面向过程语言是一种基于功能分析的、以算法为中心的程序设计方法；而面向对象是一种基于结构分析的、以数据为中心的程序设计思想。在面向对象语言中有一个有很重要东西，叫做类。<br>面向对象有三大特性：封装、继承、多态。</p></blockquote></li></ul><h2 id="系统编程"><a href="#系统编程" class="headerlink" title="系统编程"></a>系统编程</h2><h3 id="进程总结"><a href="#进程总结" class="headerlink" title="进程总结"></a>进程总结</h3><blockquote><p>进程：程序运行在操作系统上的一个实例，就称之为进程。进程需要相应的系统资源：内存、时间片、pid。</p></blockquote><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><ul><li><p>1.首先要导入multiprocessing中的Process；</p></li><li><p>2.创建一个Process对象；</p></li><li><p>3.创建Process对象时，可以传递参数；</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = Process(target=XXX, args=(元组,) , kwargs=&#123;key:value&#125;)</span><br><span class="line">target = XXX 指定的任务函数,不用加()</span><br><span class="line">args=(元组,) , kwargs=&#123;key:value&#125; 给任务函数传递的参数</span><br></pre></td></tr></table></figure></li><li><p>4.使用start()启动进程；</p></li><li><p>5.结束进程。</p></li></ul><h3 id="Process语法结构"><a href="#Process语法结构" class="headerlink" title="Process语法结构"></a>Process语法结构</h3><ul><li><p><code>Process([group [, target [, name [, args [, kwargs]]]]])</code></p><blockquote><p>target：如果传递了函数的引用，可以让这个子进程就执行函数中的代码</p></blockquote><blockquote><p>args：给target指定的函数传递的参数，以元组的形式进行传递</p></blockquote><blockquote><p>kwargs：给target指定的函数传递参数，以字典的形式进行传递</p></blockquote><blockquote><p>name：给进程设定一个名字，可以省略</p></blockquote><blockquote><p>group：指定进程组，大多数情况下用不到</p></blockquote></li><li><p>Process创建的实例对象的常用方法有</p><blockquote><p>start()：启动子进程实例(创建子进程)</p></blockquote><blockquote><p>is_alive()：判断进程子进程是否还在活着</p></blockquote><blockquote><p>join(timeout)：是否等待子进程执行结束，或者等待多少秒</p></blockquote><blockquote><p>terminate()：不管任务是否完成，立即终止子进程</p></blockquote></li><li><p>Process创建的实例对象的常用属性</p><blockquote><p>name：当前进程的别名，默认为Process-N,N为从1开始递增的整数</p></blockquote><blockquote><p>pid：当前进程的pid(进程号) ppid 父进程</p></blockquote></li><li><p>给子进程指定函数传递参数Demo</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> osfrom multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pro_func</span><span class="params">(name, age, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">"子进程正在运行中,name=%s, age=%d, pid=%d"</span> %(name, age, </span><br><span class="line">        os.getpid()))</span><br><span class="line">        print(kwargs)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建Process对象</span></span><br><span class="line">    p = Process(target=pro_func, args=(<span class="string">'小明'</span>,<span class="number">18</span>), kwargs=&#123;<span class="string">'m'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 1秒钟之后，立刻结束子进程</span></span><br><span class="line">    p.terminate()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>注意：进程间不共享全局变量。</p></blockquote></blockquote></li><li><p>进程之间的通信-Queue</p><blockquote><p>在初始化Queue()对象时，(例如q=Queue()，若在括号中没有指定最大可接受的消息数量，或数量为负值时，那么就代表可接受的消息数量没有上限-直到内存的尽头)</p></blockquote><blockquote><p>Queue.qsize()：返回当前队列包含的消息数量。</p></blockquote><blockquote><p>Queue.empty()：如果队列为空，返回True,反之False。</p></blockquote><blockquote><p>Queue.full()：如果队列满了，返回True，反之False。</p></blockquote><blockquote><p>Queue.get([block[,timeout]])：获取队列中的一条消息，然后将其从队列中移除，block默认值为True。</p></blockquote><blockquote><blockquote><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p></blockquote></blockquote><blockquote><blockquote><p>如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；<br>  Queue.get_nowait()：相当Queue.get(False)；</p></blockquote></blockquote><blockquote><p>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</p></blockquote><blockquote><blockquote><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p></blockquote></blockquote><blockquote><blockquote><p>如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p></blockquote></blockquote><blockquote><p>Queue.put_nowait(item)：相当Queue.put(item, False)；</p></blockquote></li><li><p>进程间通信Demo：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queueimport os, time, random</span><br><span class="line"><span class="comment"># 写数据进程执行的代码:def write(q):</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"><span class="comment"># 读数据进程执行的代码:def read(q):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()    </span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    pr.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'所有数据都写入并且读完'</span>)</span><br></pre></td></tr></table></figure></li><li><p>进程池Pool</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Poolimport os, time, random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"%s开始执行,进程号为%d"</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成0~1之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>) </span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg,<span class="string">"执行完毕，耗时%0.2f"</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line">po = Pool(<span class="number">3</span>)  <span class="comment"># 定义一个进程池，最大进程数3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元组,))</span></span><br><span class="line">    <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">    po.apply_async(worker,(i,))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"----start----"</span>)</span><br><span class="line">po.close()  <span class="comment"># 关闭进程池，关闭后po不再接收新的请求</span></span><br><span class="line">po.join()  <span class="comment"># 等待po中所有子进程执行完成，必须放在close语句之后</span></span><br><span class="line">print(<span class="string">"-----end-----"</span>)</span><br></pre></td></tr></table></figure></li><li><p>multiprocessing.Pool常用函数解析：</p><blockquote><p>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</p></blockquote><blockquote><p>close()：关闭Pool，使其不再接受新的任务；</p></blockquote><blockquote><p>terminate()：不管任务是否完成，立即终止；</p></blockquote><blockquote><p>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；<br>进程池中使用Queue</p></blockquote><blockquote><blockquote><p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：</p></blockquote></blockquote><pre><code>RuntimeError: Queue objects should only be shared between processes through inheritance.from multiprocessing </code></pre>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Manager,Poolimport os,time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"reader启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(<span class="string">"reader从Queue获取到消息：%s"</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"writer启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"itcast"</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"(%s) start"</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue()  <span class="comment"># 使用Manager中的Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 先让上面的任务向Queue存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    print(<span class="string">"(%s) End"</span> % os.getpid())</span><br></pre></td></tr></table></figure></li></ul><h3 id="多进程，多线程，以及协程的理解，项目是否用？"><a href="#多进程，多线程，以及协程的理解，项目是否用？" class="headerlink" title="多进程，多线程，以及协程的理解，项目是否用？"></a>多进程，多线程，以及协程的理解，项目是否用？</h3><ul><li><p>这个问题被问的概率相当之大，其实多线程，多进程，在实际开发中用到的很少，除非是那些对项目性能要求特别高的，有的开发工作几年了，也确实没用过，你可以这么回答，给他扯扯什么是进程，线程（cpython中是伪多线程）的概念就行，实在不行你就说你之前写过下载文件时，用过多线程技术，或者业余时间用过多线程写爬虫，提升效率。</p></li><li><p>进程：一个运行的程序（代码）就是一个进程，没有运行的代码叫程序，进程是系统资源分配的最小单位，进程拥有自己独立的内存空间，所以进程间数据不共享，开销大。</p></li><li><p>线程：  调度执行的最小单位，也叫执行路径，不能独立存在，依赖进程存在一个进程至少有一个线程，叫主线程，而多个线程共享内存(数据共享，共享全局变量)，从而极大地提高了程序的运行效率。</p></li><li><p>协程：是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p></li></ul><h3 id="多线程竞争"><a href="#多线程竞争" class="headerlink" title="多线程竞争"></a>多线程竞争</h3><p>线程是非独立的，同一个进程里线程是数据共享的，当各个线程访问数据资源时会出现竞争状态即：数据几乎同步会被多个线程占用，造成数据混乱 ，即所谓的线程不安全</p><ul><li><p>解决多线程竞争问题– 锁。</p><blockquote><p>锁的好处：<br>确保了某段关键代码(共享数据资源)只能由一个线程从头到尾完整地执行能解决多线程资源竞争下的原子操作问题。</p></blockquote><blockquote><p>锁的坏处：<br>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了<br>锁的致命问题：死锁。</p></blockquote></li><li><p>什么是锁，有哪几种锁? </p><blockquote><p>锁(Lock)是 Python 提供的对线程控制的对象。有互斥锁、可重入锁、死锁。</p></blockquote></li><li><p>死锁</p><blockquote><p>若干子线程在系统资源竞争时，都在等待对方对某部分资源解除占用状态，结果是谁也不愿先解锁，互相干等着，程序无法执行下去，这就是死锁。</p></blockquote><blockquote><p>GIL锁 全局解释器锁（只在cpython里才有）<br>作用：限制多线程同时执行，保证同一时间只有一个线程执行，所以cpython里的多线程其实是伪多线程!<br>所以Python里常常使用协程技术来代替多线程，协程是一种更轻量级的线程，<br>进程和线程的切换时由系统决定，而协程由我们程序员自己决定，而模块gevent下切换是遇到了耗时操作才会切换。</p></blockquote></li></ul><p><strong>三者的关系：进程里有线程，线程里有协程。</strong></p><ul><li><p>什么是线程安全，什么是互斥锁</p><blockquote><p>每个对象都对应于一个可称为” 互斥锁” 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</p></blockquote><blockquote><p>同一个进程中的多线程之间是共享系统资源的，多个线程同时对一个对象进行操作，一个线程操作尚未结束，另一个线程已经对其进行操作，导致最终结果出现错误，此时需要对被操作对象添加互斥锁，保证每个线程对该对象的操作都得到正确的结果。</p></blockquote></li><li><p>同步，异步，阻塞，非阻塞</p><blockquote><p>同步：多个任务之间有先后顺序执行，一个执行完下个才能执行。</p></blockquote><blockquote><p>异步：多个任务之间没有先后顺序，可以同时执行有时候一个任务可能要在必要的时候获取另一个同时执行的任务的结果，这个就叫回调！</p></blockquote><blockquote><p>阻塞：如果卡住了调用者，调用者不能继续往下执行，就是说调用者阻塞了。</p></blockquote><blockquote><p>非阻塞：如果不会卡住，可以继续执行，就是说非阻塞的。</p></blockquote><p>  同步异步相对于多任务而言，阻塞非阻塞相对于代码执行而言。</p></li><li><p>僵尸进程和孤儿进程 以及避免僵尸进程</p><blockquote><p>孤儿进程：父进程退出，子进程还在运行的这些子进程都是孤儿进程，孤儿进程将被 init 进程(进程号为 1)所收养，并由 init 进程对它们完成状态收集工作。</p></blockquote><blockquote><p>僵尸进程：进程使用 fork 创建子进程，如果子进程退出，而父进程并没有调用 wait 或 waitpid 获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中的这些进程是僵尸进程。</p></blockquote><blockquote><p>避免僵尸进程的方法：</p></blockquote><blockquote><blockquote><p>1.fork两次用孙子进程去完成子进程的任务；</p></blockquote></blockquote><blockquote><blockquote><p>2.用wait()函数使父进程阻塞；</p></blockquote></blockquote><blockquote><blockquote><p>3.使用信号量，在 signal handler 中调用waitpid，这样父进程不用阻塞。</p></blockquote></blockquote></li><li><p>Python中的进程与线程的使用场景</p><blockquote><p>多进程适合在 CPU 密集型操作(cpu 操作指令比较多，如位数多的浮点运算)。</p></blockquote><blockquote><p>多线程适合在 IO 密集型操作(读写数据操作较多的，比如爬虫)。</p></blockquote></li><li><p>线程是并发还是并行，进程是并发还是并行</p><blockquote><p>线程是并发，进程是并行；</p></blockquote><blockquote><p>进程之间相互独立，是系统分配资源的最小单位，同一个进程中的所有线程共享资源。</p></blockquote></li><li><p>并行（parallel）和并发（concurrency）</p><blockquote><p>并行：同一时刻多个任务同时在运行。</p></blockquote><blockquote><p>并发：在同一时间间隔内多个任务都在运行，但是并不会在同一时刻同时运行，存在交替执行的情况。</p></blockquote><blockquote><p>实现并行的库有：multiprocessing</p></blockquote><blockquote><p>实现并发的库有：threading</p></blockquote><blockquote><p>程序需要执行较多的读写、请求和回复任务的需要大量的 IO 操作，IO密集型操作使用并发更好。<br>CPU运算量大的程序程序，使用并行会更好。</p></blockquote></li><li><p>IO密集型和CPU密集型区别</p><blockquote><p>IO密集型：系统运作，大部分的状况是CPU在等 I/O (硬盘/内存)的读/写。<br>CPU密集型：大部份时间用来做计算、逻辑判断等 CPU动作的程序称之CPU密集型。</p></blockquote></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/UDP.jpg" alt="UDP"></p><ul><li><p>使用udp发送/接收数据步骤：</p><blockquote><p>1.创建客户端套接字</p></blockquote><blockquote><p>2.发送/接收数据</p></blockquote><blockquote><p>3.关闭套接字</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建udp套接字</span></span><br><span class="line">    <span class="comment"># socket.AF_INET  表示IPv4协议  AF_INET6 表示IPv6协议</span></span><br><span class="line">    <span class="comment"># socket.SOCK_DGRAM  数据报套接字，只要用于udp协议</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, </span><br><span class="line">    socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、准备接收方的地址</span></span><br><span class="line">    <span class="comment"># 元组类型  ip是字符串类型   端口号是整型</span></span><br><span class="line">    dest_addr = (<span class="string">'192.168.113.111'</span>, <span class="number">8888</span>)</span><br><span class="line">    <span class="comment"># 要发送的数据</span></span><br><span class="line">    send_data = <span class="string">"我是要发送的数据"</span></span><br><span class="line">    <span class="comment"># 3、发送数据</span></span><br><span class="line">    udp_socket.sendto(send_data.encode(<span class="string">"utf-8"</span>), dest_addr)</span><br><span class="line">    <span class="comment"># 4、等待接收方发送的数据  如果没有收到数据则会阻塞等待，</span></span><br><span class="line">    直到收到数据</span><br><span class="line">    <span class="comment"># 接收到的数据是一个元组   (接收到的数据, 发送方的ip和端口)</span></span><br><span class="line">    <span class="comment"># 1024  表示本次接收的最大字节数</span></span><br><span class="line">    recv_data, addr = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 5、关闭套接字</span></span><br><span class="line">    udp_socket.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>编码的转换</p><blockquote><p>str –&gt;bytes: encode编码</p></blockquote><blockquote><p>bytes–&gt; str: decode()解码</p></blockquote></li><li><p>UDP绑定端口号：</p><blockquote><p>1.创建socket套接字</p></blockquote><blockquote><p>2.绑定端口号</p></blockquote><blockquote><p>3.接收/发送数据</p><p>4.关闭套接字</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建udp套接字</span></span><br><span class="line">    <span class="comment"># socket.AF_INET  表示IPv4协议  AF_INET6 表示IPv6协议</span></span><br><span class="line">    <span class="comment"># socket.SOCK_DGRAM  数据报套接字，只要用于udp协议</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2、绑定端口</span></span><br><span class="line">    <span class="comment"># 元组类型  ip一般不写 表示本机的任何的一个ip</span></span><br><span class="line">    local_addr = (<span class="string">''</span>, <span class="number">7777</span>)</span><br><span class="line">    udp_socket.bind(local_addr)</span><br><span class="line">    <span class="comment"># 3、准备接收方的地址</span></span><br><span class="line">    <span class="comment"># 元组类型  ip是字符串类型   端口号是整型</span></span><br><span class="line">    dest_addr = (<span class="string">'192.168.113.111'</span>, <span class="number">8888</span>)</span><br><span class="line">    <span class="comment"># 要发送的数据</span></span><br><span class="line">    send_data = <span class="string">"我是要发送的数据"</span></span><br><span class="line">    <span class="comment"># 4、发送数据</span></span><br><span class="line">    udp_socket.sendto(send_data.encode(<span class="string">"utf-8"</span>), dest_addr)</span><br><span class="line">    <span class="comment"># 5、等待接收方发送的数据  如果没有收到数据则会阻塞等待，直到收到数据</span></span><br><span class="line">    <span class="comment"># 接收到的数据是一个元组   (接收到的数据, 发送方的ip和端口)</span></span><br><span class="line">    <span class="comment"># 1024  表示本次接收的最大字节数</span></span><br><span class="line">    recv_data, addr = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 6、关闭套接字</span></span><br><span class="line">    udp_socket.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>  注意点：绑定端口要在发送数据之前进行绑定。</p></li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p><img src="" alt="TCP"></p><ul><li><p>TCP客户端的创建流程：</p><blockquote><p>1.创建TCP的socket套接字</p></blockquote><blockquote><p>2.连接服务器</p></blockquote><blockquote><p>3.发送数据给服务器端</p></blockquote><blockquote><p>4.接收服务器端发送来的消息</p></blockquote><blockquote><p>5.关闭套接字</p></blockquote>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">socket</span></span><br><span class="line">def main():</span><br><span class="line">    <span class="comment"># 1、创建客户端的socket</span></span><br><span class="line">    <span class="comment"># socket.AF_INET  表示IPv4协议  AF_INET6 表示IPv6协议</span></span><br><span class="line">    <span class="comment"># socket.SOCK_STREAM  流式套接字，只要用于TCP协议</span></span><br><span class="line">    client_socket = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, </span><br><span class="line">    <span class="built_in">socket</span>.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2、构建目标地址</span></span><br><span class="line">    server_ip = input(<span class="string">"请输入服务器端的IP地址："</span>)</span><br><span class="line">    server_port = int(input(<span class="string">"请输入服务器端的端口号："</span>))</span><br><span class="line">    <span class="comment"># 3、连接服务器</span></span><br><span class="line">    <span class="comment"># 参数：元组类型   ip是字符串类型   端口号是整型</span></span><br><span class="line">    client_socket.connect((server_ip, server_port))</span><br><span class="line">    <span class="comment"># 要发送给服务器端的数据</span></span><br><span class="line">    send_data = <span class="string">"我是要发送给服务器端的数据"</span></span><br><span class="line">    <span class="comment"># 4、发送数据</span></span><br><span class="line">    client_socket.<span class="built_in">send</span>(send_data.encode(<span class="string">"gbk"</span>))</span><br><span class="line">    <span class="comment"># 5、接收服务器端恢复的消息， 没有消息会阻塞</span></span><br><span class="line">      <span class="comment"># 1024表示接收的最大字节数</span></span><br><span class="line">    recv_date= client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"接收到的数据是："</span>, recv_date.decode(<span class="string">'gbk'</span>))</span><br><span class="line">    <span class="comment"># 6、关闭套接字</span></span><br><span class="line">    client_socket.<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>TCP服务器端的创建流程</p><blockquote><p>1.创建TCP服务端的socket</p></blockquote><blockquote><p>2.bind绑定ip地址和端口号</p></blockquote><blockquote><p>3.listen使套接字变为被动套接字</p></blockquote><blockquote><p>4.accept取出一个客户端连接，用于服务</p></blockquote><blockquote><p>5.recv/send接收和发送消息</p></blockquote><blockquote><p>6.关闭套接字</p></blockquote></li></ul><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1、创建tcp服务端的socket</span></span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, </span><br><span class="line">    socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、绑定</span></span><br><span class="line">    server_socket.bind((<span class="string">''</span>, <span class="number">8888</span>))</span><br><span class="line">    <span class="comment"># 3、listen使套接字变为被动套接字</span></span><br><span class="line">    server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="comment"># 4、如果有新的客户端来链接服务器，那么就产生一个新的套</span></span><br><span class="line">    接字专门为这个客户端服务</span><br><span class="line">    <span class="comment"># client_socket用来为这个客户端服务</span></span><br><span class="line">    <span class="comment"># tcp_server_socket就可以省下来专门等待其他新客户端的链接</span></span><br><span class="line">    client_socket, client_addr = server_socket.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5、接收客户端发来的消息</span></span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"接收到客户端%s的数据：%s"</span> % (str(client_addr), </span><br><span class="line">    recv_data.decode(<span class="string">'gbk'</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6、回复数据给客户端</span></span><br><span class="line">    client_socket.send(<span class="string">"收到消息"</span>.encode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7、关闭套接字</span></span><br><span class="line">    client_socket.close()</span><br><span class="line">    server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>注意点：</p><blockquote><p>tcp服务器一般都需要绑定，否则客户端找不到服务器</p><p>tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机</p></blockquote><blockquote><p>tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的</p></blockquote><blockquote><p>当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信</p></blockquote></li><li><p>怎么实现强行关闭客户端和服务器之间的连接? </p><blockquote><p>在socket通信过程中不断循环检测一个全局变量(开关标记变量)，一旦标记变量变为关闭，则 调用socket的close方法，循环结束，从而达到关闭连接的目的。</p></blockquote></li><li><p>简述TCP和UDP的区别以及优缺点? </p><blockquote><p>UDP是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息。</p></blockquote><blockquote><blockquote><p>优点：UDP速度快、操作简单、要求系统资源较少，由于通讯不需要连接，可以实现广播发送</p></blockquote></blockquote><blockquote><blockquote><p>缺点：UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，也不重复发送，不可靠。</p></blockquote></blockquote><blockquote><p>TCP是面向连接的通讯协议，通过三次握手建立连接，通讯完成时四次挥手</p></blockquote><blockquote><blockquote><p>优点：TCP在数据传递时，有确认、窗口、重传、阻塞等控制机制，能保证数据正确性，较为可靠。</p></blockquote></blockquote><blockquote><blockquote><p>缺点：TCP相对于UDP速度慢一点，要求系统资源较多。</p></blockquote></blockquote></li></ul><h2 id="404科技公司面试问题及解答"><a href="#404科技公司面试问题及解答" class="headerlink" title="404科技公司面试问题及解答"></a>404科技公司面试问题及解答</h2><h3 id="进程之间的通讯-queue"><a href="#进程之间的通讯-queue" class="headerlink" title="进程之间的通讯-queue"></a>进程之间的通讯-queue</h3><ul><li><p>在初始化Queue()对象时，(例如q=Queue()，若在括号中没有指定最大可接受的消息数量，或数量为负值时，那么就代表可接受的消息数量没有上限-直到内存的尽头)</p><blockquote><p>Queue.qsize()：返回当前队列包含的消息数量。</p></blockquote><blockquote><p>Queue.empty()：如果队列为空，返回True,反之False。</p></blockquote><blockquote><p>Queue.full()：如果队列满了，返回True，反之False。</p></blockquote><blockquote><p>Queue.get([block[,timeout]])：获取队列中的一条消息，然后将其从队列中移除，block默认值为True。</p><blockquote><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，</p><p>如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p></blockquote></blockquote><blockquote><blockquote><p>如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p></blockquote></blockquote><blockquote><p>Queue.get_nowait()：相当Queue.get(False)；</p></blockquote><blockquote><p>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</p><blockquote><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，</p><p>如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p></blockquote></blockquote><blockquote><blockquote><p>如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p></blockquote><p>Queue.put_nowait(item)：相当Queue.put(item, False)</p></blockquote></li><li><p>进程间通信demo</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queueimport os, time, random</span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()    </span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    pr.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'所有数据都写入并且读完'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="TCP-UDP-TCP粘包问题"><a href="#TCP-UDP-TCP粘包问题" class="headerlink" title="TCP/UDP(TCP粘包问题)"></a>TCP/UDP(TCP粘包问题)</h3><ul><li><p>套接字</p><p>  位于应用层与传输层之间，用来把传输层以下的协议封装好，并提供一个简单的接口，那么在编写基于网络架构的C/S软件的话，就可以考虑使用套接字及按照套接字的标准去编写。</p><p>  Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p></li><li><p>套接字工作流程</p><p>  先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束</p></li><li><p>TCP 协议  (又称为流式协议)</p><p>  TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务(可靠协议)。收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法：将多次间隔较小且数据量小的数据合并成一个大的数据块，然后进行封包）。这样接收端就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</p><p>  TCP是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机制，防止程序卡住，而udp是基于数据报的，即便是你输入的是空内容（直接回车），那也不是空消息，udp协议会帮你封装上消息头。</p><p>  TCP的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack时才会清除缓冲区内容。数据是可靠的，但是会粘包。</p><p>  TCP协议的数据并不是 “一发(数据发送)” 对应 “一收(数据接收)”，每次发送都是由操作系统决定的，操作系统可能把多个数据合并成一个包发送。</p></li><li><p>UDP 协议</p><p>  UDP（user datagram protocol，用户数据报协议）是无连接的，面向消息的，提供高效率服务(不可靠协议)。不会使用块的合并优化算法，, 由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。 即面向消息的通信是有消息保护边界的。</p><p>  UDP协议在传输层通过本身自带的报头属性，以及一发(发送数据包)一收(接收数据包)的机制解决了数据粘包的问题。UDP协议一般不用来传文件，通常用来做与查询相关的数据包的发送，UDP协议稳定有效的数据包传输量最大为512字节(协议本身的原因造成)。</p><p>  UDP的recvfrom是阻塞的，一个recvfrom(x)必须对唯一一个sendinto(y),收完了x个字节的数据就算完成,若是y&gt;x数据就丢失，这意味着UDP根本不会粘包，但是会丢数据，不可靠。</p><p>  UDP协议一般用在：DNS查询，NTP时间服务器</p></li><li><p>TCP/UDP 协议的可靠性</p><p>  TCP协议在数据传输时，发送端先把数据发送到自己的缓存中，然后协议控制将缓存中的数据发往对端，对端返回一个ack=1，发送端则清理缓存中的数据，对端返回ack=0，则重新发送数据，所以tcp是可靠的，而udp发送数据，对端是不会返回确认信息的，因此不可靠</p></li><li><p>解决粘包现象</p><pre><code>方法：为字节流加上自定义固定长度报头，报头中包含字节流长度，然后一次send到对端，对端在接收时，先从缓存中取出定长的报头，然后再取真实数据(直到收干净为止)。通俗解释：给字节流加上自定义固定长度报头：客户端在接收时，先去读报头的长度，从而拿到数据包的长度。就相当于手动给数据包划分成一段一段的，客户端每次都会接收完一段在接受另外一段。通过在应用层通过封装报头的形式来解决粘包问题，但是并没有改变TCP协议(流式协议)发送数据包的属性。</code></pre></li><li><p>步骤：我们可以把报头做成字典，字典里包含将要发送的真实数据的详细信息，然后json序列化，然后用struck将序列化后的数据长度打包成4个字节（4个自己足够用了）</p><blockquote><p>发送时(服务端)：</p><blockquote><p>先发报头长度。</p><p>再编码报头内容然后发送。</p><p>最后发真实内容。</p></blockquote></blockquote><blockquote><p>接收时(客户端)：</p><blockquote><p>先手报头长度，用struct取出来。</p><p>根据取出的长度收取报头内容，然后解码，反序列化。</p><p>从反序列化的结果中取出待取数据的详细信息，然后去取真实的数据内容。</p></blockquote></blockquote></li><li><p>服务端代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8086</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">'等待连接。。。'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    coon,client_addr=server.accept()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 通信循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd=coon.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">break</span></span><br><span class="line">            obj=subprocess.Popen(cmd.decode(<span class="string">'utf-8'</span>),shell=<span class="literal">True</span>,</span><br><span class="line">                             stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.PIPE,</span><br><span class="line">                             )</span><br><span class="line">            stdout=obj.stdout.read()</span><br><span class="line">            stderr=obj.stderr.read()</span><br><span class="line"> </span><br><span class="line">            <span class="comment">#制作报头</span></span><br><span class="line">            header_dic = &#123;                                   <span class="comment">#设置报头为字典格式</span></span><br><span class="line">                <span class="string">'filenema'</span>: <span class="string">'a.txt'</span>,                         <span class="comment">#文件名</span></span><br><span class="line">                <span class="string">'total_size'</span>: len(stdout) + len(stderr),     <span class="comment">#数据总长度</span></span><br><span class="line">                <span class="string">'md5'</span>: <span class="string">'sssxxxadwc123asd123'</span>,                <span class="comment">#md5值</span></span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            header_json = json.dumps(header_dic)             <span class="comment">#把报头,序列化为json格式</span></span><br><span class="line">            header_bytes = header_json.encode(<span class="string">'utf-8'</span>)       <span class="comment">#在由json格式转化为bytes格式(数据包发送通过bytes形式发送)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">#1、先发送报头的长度(客户端拿到报头的长度后可以知道要接受的数据大小)</span></span><br><span class="line">            coon.send(struct.pack(<span class="string">'i'</span>,len(header_bytes)))    <span class="comment">#struct.pack用法：#i表示：int 整型，len(header_bytes)表示：报头的长度(int类型)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">#2、在发送报头(报头的内容)</span></span><br><span class="line">            coon.send(header_bytes)</span><br><span class="line"> </span><br><span class="line">            <span class="comment">#3、最后发送真实数据</span></span><br><span class="line">            coon.send(stdout)</span><br><span class="line">            coon.send(stderr)</span><br><span class="line">        <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 关闭连接状态  (回收的是操作系统的资源)</span></span><br><span class="line">    coon.close()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#关闭服务端   (回收的是操作系统的资源)</span></span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure><ul><li>客户端代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)              <span class="comment">#SOCK_STREAM==流式协议：指的就是TCP协议</span></span><br><span class="line">client.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8086</span>))              <span class="comment">#这里的IP和端口都是服务端的</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd=input(<span class="string">'&gt;&gt;:'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">'utf-8'</span>))            <span class="comment">#在网络中发送信息需要通过字节(二进制的方式发送),所以需要encode('utf-8')制定字符集的方式发送</span></span><br><span class="line">    print(<span class="string">'send..'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 1、先收报头的长度(服务端先发送的是报头的长度,所有要先接收报头的长度)</span></span><br><span class="line">    obj=client.recv(<span class="number">4</span>)                          <span class="comment">#报头长度</span></span><br><span class="line">    header_size=struct.unpack(<span class="string">'i'</span>,obj)[<span class="number">0</span>]       <span class="comment">#拿到报头长度后，通过struct.unpack拿到报头的大小(即服务端header_dic的大小)</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 2、在接收报头</span></span><br><span class="line">    header_bytes=client.recv(header_size)       <span class="comment">#通过client.recv接收报头</span></span><br><span class="line">    header_json=header_bytes.decode(<span class="string">'utf-8'</span>)    <span class="comment">#接收报头后对报头的格式做反序列化处理(因为报头在服务端被json序列化了)</span></span><br><span class="line">    header_dic=json.loads(header_json)          <span class="comment">#通过json.loads拿到报头的字典格式及内容</span></span><br><span class="line">    print(header_dic)</span><br><span class="line"> </span><br><span class="line">    total_size=header_dic[<span class="string">'total_size'</span>]         <span class="comment">#拿到了真实数据的总长度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 3、循环接收真实数据，直到收完为止</span></span><br><span class="line">    recv_size=<span class="number">0</span>                                 <span class="comment">#接收数据包的大小</span></span><br><span class="line">    res=<span class="string">b''</span>                                     <span class="comment">#把接收到的数据包拼接到一起</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        recv_data=client.recv(<span class="number">1024</span>)             <span class="comment">#循环接收服务端传过来的数据</span></span><br><span class="line">        res+=recv_data                          <span class="comment">#res把接收到的数据全部拼接起来</span></span><br><span class="line">        recv_size+=len(recv_data)               <span class="comment">#接收到的数据的长度直到等于数据的总长度为止</span></span><br><span class="line">    print(res.decode(<span class="string">'gbk'</span>))                    <span class="comment">#就收客户端操作系统(windows默认使用gbk)发过来的数据，想要输出到屏幕得使用gbk解码</span></span><br><span class="line"><span class="comment"># 5、关闭客户端</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><ul><li>套接字编程（基于udp协议通信套接字编程）</li></ul><blockquote><p>服务端代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">server=socket(AF_INET,SOCK_DGRAM)    <span class="comment">#SOCK_DGRAM == 数据报协议(UDP协议) -- 在发送数据库时每一条数据UDP协议都会做报头处理，</span></span><br><span class="line">                                         <span class="comment">#那么在接受端，就会根据数据报的内容接受数据，而不会发生粘包问题。</span></span><br><span class="line"><span class="comment">#1、基于UDP协议每发送的一条数据都自带边界，即UDP协议没有粘包问题，</span></span><br><span class="line"><span class="comment">#2、基于UDP协议的通信，一定是一发对应一收</span></span><br><span class="line"></span><br><span class="line">server.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8092</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg,client_addr=server.recvfrom(<span class="number">1024</span>)    <span class="comment">#server.recvfrom(1024)拿到的就是"客户端发送过来的数据，及IP+端口"</span></span><br><span class="line">    server.sendto(msg.upper(),client_addr)</span><br></pre></td></tr></table></figure><blockquote><p>客户端代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;:'</span>).strip()</span><br><span class="line">    client.sendto(msg.encode(<span class="string">'utf-8'</span>),(<span class="string">'127.0.0.1'</span>,<span class="number">8092</span>))   <span class="comment">#UDP协议没有与服务端建立连接，所以在发送数据时需要指定服务端的IP和端口</span></span><br><span class="line"></span><br><span class="line">    res,server_addr=client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(res)</span><br><span class="line">    <span class="comment"># msg,client_addr=server.recvfrom(1024)</span></span><br><span class="line">    <span class="comment"># server.sendto(msg.upper(),client_addr)</span></span><br></pre></td></tr></table></figure><blockquote><p>基于UDP协议编写的套接字编程中，服务端不能实现并发的效果(看起来像是并发的效果，实际上并不是。因为UDP协议是一发对应一收的,数据发完就删除掉,每次都可以快速执行,所以看起来像是并发的效果。)</p></blockquote><h3 id="python-基于socket进行端口转发"><a href="#python-基于socket进行端口转发" class="headerlink" title="python 基于socket进行端口转发"></a>python 基于socket进行端口转发</h3><ul><li><p>用户正常浏览器访问请求通过8080端口，请求若为http请求，则正常转发到80端口保证网站正常运行。否则转发到8888端口执行系统命令。</p></li><li><p>8888端口监听代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">HOST=<span class="string">'127.0.0.1'</span></span><br><span class="line">PORT=<span class="number">8888</span></span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ADDR=(HOST,PORT)</span><br><span class="line"></span><br><span class="line">tcpSerSock = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcpSerSock.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">tcpSerSock.bind(ADDR)</span><br><span class="line">tcpSerSock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"waiting for connection..."</span>)</span><br><span class="line">    tcpCliSock,addr = tcpSerSock.accept()</span><br><span class="line">    print(<span class="string">"...connected from:"</span>,addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=tcpCliSock.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        info = data.split(<span class="string">'\n'</span>)</span><br><span class="line">        command = info[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.system(command + <span class="string">" &gt; command.txt"</span>);</span><br><span class="line">            file = open(<span class="string">'command.txt'</span>)</span><br><span class="line">            data =<span class="string">""</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">                data=data+line;</span><br><span class="line">            tcpCliSock.send(data)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            tcpCliSock.send(<span class="string">"Nothing to do"</span>)</span><br><span class="line"></span><br><span class="line">    tcpCliSock.close()</span><br><span class="line">tcpSerSock.close()</span><br></pre></td></tr></table></figure><ul><li>8080端口转发</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tcp1 = socket(AF_INET,SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">tcp1.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tcp1.bind((<span class="string">'0.0.0.0'</span>,<span class="number">8080</span>))</span><br><span class="line">tcp1.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">BUFFER_SIZE=<span class="number">2048</span></span><br><span class="line">tcpCliSock,addr = tcp1.accept()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = tcpCliSock.recv(BUFFER_SIZE)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'HTTP'</span> <span class="keyword">in</span> data:</span><br><span class="line">        tcp3 = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">        tcp3.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">        tcp3.connect((<span class="string">'127.0.0.1'</span>,<span class="number">80</span>))</span><br><span class="line">        tcp3.send(data)</span><br><span class="line">        htmlinfo = tcp3.recv(<span class="number">2048</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> htmlinfo:</span><br><span class="line">            tcp3.close()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tcpCliSock.send(htmlinfo)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tcp2 = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">        tcp2.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">        tcp2.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line">        data = data.replace(<span class="string">"\n"</span>,<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">        tcp2.send(data)</span><br><span class="line">        commandinfo = tcp2.recv(<span class="number">1024</span>)</span><br><span class="line">        tcpCliSock.send(commandinfo)</span><br><span class="line">        tcp2.close()</span><br><span class="line">tcpCliSock.close()</span><br><span class="line">tcp1.close()</span><br></pre></td></tr></table></figure><ul><li><p>如何将本地80端口的请求转发到8080端口，当前主机IP为192.168.1.80</p><blockquote><p>iptables -t nat -A PREROUTING -d 192.168.1.80 -p tcp –dport 80 -j DNAT –to-destination 192.168.1.80:8080</p></blockquote></li><li><p>端口映射</p><p>  <a href="http://hutaow.com/blog/2014/09/08/write-tcp-mapping-program-with-python/" target="_blank" rel="noopener">解答链接</a></p></li></ul><h3 id="简述浏览器通过WSGI请求动态资源的过程"><a href="#简述浏览器通过WSGI请求动态资源的过程" class="headerlink" title="简述浏览器通过WSGI请求动态资源的过程?"></a>简述浏览器通过WSGI请求动态资源的过程?</h3><ul><li>1.发送http请求动态资源给web服务器</li><li>2.web服务器收到请求后通过WSGI调用一个属性给应用程序框架</li><li>3.应用程序框架通过引用WSGI调用web服务器的方法，设置返回的状态和头信息。</li><li>4.调用后返回，此时web服务器保存了刚刚设置的信息</li><li>5.应用程序框架查询数据库，生成动态页面的body的信息</li><li>6.把生成的body信息返回给web服务器</li><li>7.web服务器把数据返回给浏览器</li></ul><h3 id="描述用浏览器访问www-baidu-com的过程"><a href="#描述用浏览器访问www-baidu-com的过程" class="headerlink" title="描述用浏览器访问www.baidu.com的过程"></a>描述用浏览器访问<a href="http://www.baidu.com的过程" target="_blank" rel="noopener">www.baidu.com的过程</a></h3><ul><li><p>先要解析出baidu.com对应的ip地址</p><blockquote><p>要先使用arp获取默认网关的mac地址</p><p>组织数据发送给默认网关(ip还是dns服务器的ip，但是mac地址是默认网关的mac地址)</p></blockquote><blockquote><p>默认网关拥有转发数据的能力，把数据转发给路由器</p></blockquote><blockquote><p>路由器根据自己的路由协议，来选择一个合适的较快的路径转发数据给目的网关</p></blockquote><blockquote><p>目的网关(dns服务器所在的网关)，把数据转发给dns服务器</p></blockquote><blockquote><p>dns服务器查询解析出baidu.com对应的ip地址，并原路返回请求这个域名的client</p></blockquote></li><li><p>得到了baidu.com对应的ip地址之后，会发送tcp的3次握手，进行连接</p><blockquote><p>使用http协议发送请求数据给web服务器</p></blockquote><blockquote><p>web服务器收到数据请求之后，通过查询自己的服务器得到相应的结果，原路返回给浏览器。</p></blockquote><blockquote><p>浏览器接收到数据之后通过浏览器自己的渲染功能来显示这个网页。</p></blockquote><blockquote><p>浏览器关闭tcp连接，即4次挥手结束，完成整个访问过程</p></blockquote></li></ul><h3 id="谈一下你对uWSGI和-nginx的理解？"><a href="#谈一下你对uWSGI和-nginx的理解？" class="headerlink" title="谈一下你对uWSGI和 nginx的理解？"></a>谈一下你对uWSGI和 nginx的理解？</h3><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。WSGI是一种Web服务器网关接口。它是一个Web服务器（如nginx，uWSGI等服务器）与web应用（如用Flask框架写的程序）通信的一种规范。<br>要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。</p><ul><li>WSGI是一种通信协议。</li><li>uwsgi是一种线路协议而不是通信协议，在此常用于在uWSGI服务器与其他网络服务器的数据通信。</li><li>uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。</li></ul><p>nginx是一个开源的高性能的HTTP服务器和反向代理：</p><ul><li>1.作为web服务器，它处理静态文件和索引文件效果非常高；</li><li>2.它的设计非常注重效率，最大支持5万个并发连接，但只占用很少的内存空间；</li><li>3.稳定性高，配置简洁；</li><li>4.强大的反向代理和负载均衡功能，平衡集群中各个服务器的负载压力应用。</li></ul><h3 id="nginx和uWISG-服务器之间如何配合工作的？"><a href="#nginx和uWISG-服务器之间如何配合工作的？" class="headerlink" title="nginx和uWISG 服务器之间如何配合工作的？"></a>nginx和uWISG 服务器之间如何配合工作的？</h3><p>首先浏览器发起http请求到nginx服务器，Nginx根据接收到请求包，进行url分析，判断访问的资源类型，如果是静态资源，直接读取静态资源返回给浏览器，如果请求的是动态资源就转交给uwsgi服务器，uwsgi服务器根据自身的uwsgi和WSGI协议，找到对应的Django框架，Django框架下的应用进行逻辑处理后，将返回值发送到uwsgi服务器，然后uwsgi服务器再返回给nginx，最后nginx将返回值返回给浏览器进行渲染显示给用户。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/nginx-uwsgi.jpg" alt="图解"></p><h3 id="Django中哪里用到了线程-哪里用到了协程-哪里用到了进程？"><a href="#Django中哪里用到了线程-哪里用到了协程-哪里用到了进程？" class="headerlink" title="Django中哪里用到了线程?哪里用到了协程?哪里用到了进程？"></a>Django中哪里用到了线程?哪里用到了协程?哪里用到了进程？</h3><ul><li>1.Django 中耗时的任务用一个进程或者线程来执行，比如发邮件，使用celery。</li><li>2.部署 django项目的时候，配置文件中设置了进程和协程的相关配置。</li></ul><h3 id="Celery分布式任务队列？"><a href="#Celery分布式任务队列？" class="headerlink" title="Celery分布式任务队列？"></a>Celery分布式任务队列？</h3><ul><li><p>情景：用户发起request，并等待response返回。在某些views中，可能需要执行一段耗时的程序，那么用户就会等待很长时间，造成不好的用户体验，比如发送邮件、手机验证码等。</p></li><li><p>使用celery后，情况就不一样了。解决：将耗时的程序放到celery中执行。</p><p>   <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/celery.jpg" alt="celery"></p></li></ul><blockquote><p>将多个耗时的任务添加到队列queue中，也就是用redis实现broker中间人，然后用多个worker去监听队列里的任务去执行。</p></blockquote><blockquote><blockquote><p>任务task：就是一个Python函数。</p></blockquote></blockquote><blockquote><blockquote><p>队列queue：将需要执行的任务加入到队列中。</p></blockquote></blockquote><blockquote><blockquote><p>工人worker：在一个新进程中，负责执行队列中的任务。</p></blockquote></blockquote><blockquote><blockquote><p>代理人broker：负责调度，在布置环境中使用redis。</p></blockquote></blockquote><h3 id="ngnix的正向代理与反向代理"><a href="#ngnix的正向代理与反向代理" class="headerlink" title="ngnix的正向代理与反向代理?"></a>ngnix的正向代理与反向代理?</h3><ul><li>web 开发中，部署方式大致类似。简单来说，使用 Nginx 主要是为了实现分流、转发、负载均衡，以及分担服务器的压力。Nginx 部署简单，内存消耗少，成本低。Nginx 既可以做正向代理，也可以做反向代理。</li></ul><blockquote><p>正向代理：请求经过代理服务器从局域网发出，然后到达互联网上的服务器。</p><blockquote><p>特点：服务端并不知道真正的客户端是谁。</p></blockquote></blockquote><blockquote><p>反向代理：请求从互联网发出，先进入代理服务器，再转发给局域网内的服务器。</p><blockquote><p>特点：客户端并不知道真正的服务端是谁。<br>区别：正向代理的对象是客户端。反向代理的对象是服务端。</p></blockquote></blockquote><h3 id="请简述浏览器是如何获取一枚网页的？"><a href="#请简述浏览器是如何获取一枚网页的？" class="headerlink" title="请简述浏览器是如何获取一枚网页的？"></a>请简述浏览器是如何获取一枚网页的？</h3><h3 id="跨域请求问题django怎么解决的（原理）"><a href="#跨域请求问题django怎么解决的（原理）" class="headerlink" title="跨域请求问题django怎么解决的（原理）"></a>跨域请求问题django怎么解决的（原理）</h3><ul><li>启用中间件</li><li>post请求</li><li>验证码</li><li>表单中添加 csrf_token 标签</li></ul><h3 id="访问激增解决办法"><a href="#访问激增解决办法" class="headerlink" title="访问激增解决办法"></a>访问激增解决办法</h3><p>一般团购，秒杀，特价之类的活动，这样会使访问量激增，很多人抢购一个商品，作为活动商品，库存肯定是很有限的。控制库存问题，数据库的事务功能是控制库存超卖的有效方式。</p><ul><li>1.在秒杀的情况下，肯定不能如此频率的去读写数据库，严重影响性能问题，必须使用缓存，将需要秒杀的商品放入缓存中，并使用锁来处理并发情况，先将商品数量增减（加锁、解析）后，再进行其他方面的处理，处理失败再将数据递增（加锁、解析）,否则表示交易成功。</li><li>2.这个肯定不能直接操作数据库的，会挂的。直接读库写库对数据库压力太大了，要用到缓存。</li><li>3.首先，多用户并发修改同一条记录时，肯定是后提交的用户将覆盖掉前者提交的结果了。这个直接可以使用加乐观锁的机制去解决高并发的问题。</li></ul><h3 id="什么是反向解析"><a href="#什么是反向解析" class="headerlink" title="什么是反向解析"></a>什么是反向解析</h3><ul><li>使用场景：模板中的超链接，视图中的重定向</li><li>使用：在定义<code>url</code>时为include定义namespace属性，为url定义name属性</li><li>在模板中使用ur标签：<code>(% ur &#39;namespace_value:name_value&#39;%)</code></li><li>在视图中使用reverse函数：<code>redirect(reverse(&#39;namespce_value:name_value’))</code><br>根据正则表达式动态生成地址，减轻后期维护成本。</li><li>注意反向解析传参数，主要是在我们的反向解析的规则后面添加了两个参数，两个参数之间使用空格隔开：<code>&lt;a href=&quot;(% url &#39;booktest:fan2&#39; 2 3 %)&quot;&gt;位置参数&lt;/a&gt;</code></li></ul><h3 id="Django日志管理："><a href="#Django日志管理：" class="headerlink" title="Django日志管理："></a>Django日志管理：</h3><ul><li><p>配置好之后：</p><pre><code>import logginglogger=logging.getLogger(__name__) # 为loggers中定义的名称logger.info(&quot;some info ...)</code></pre></li><li><p>日志分级可用函数有：logger.debug()   logger.info()   logger.warning()  logger.error()  </p></li><li><p>Django文件管理：对于Django来说，项目中的css，js,图片都属于静态文件，我们一般会将静态文件放到一个单独的目录中，以方便管理，在html页面调用时，也需要指定静态文件的路径。静态文件可以放在项目根目录下，也可以放在应用的目录下，由于这些静态文件在项目中是通用的，所以推荐放在项目的根目录下。</p></li></ul><h3 id="Linux中日志存储路径以及python错误日志等级"><a href="#Linux中日志存储路径以及python错误日志等级" class="headerlink" title="Linux中日志存储路径以及python错误日志等级"></a>Linux中日志存储路径以及python错误日志等级</h3><p>日志存储路径 ～/var/log</p><h3 id="Linux中修改端口号的文件"><a href="#Linux中修改端口号的文件" class="headerlink" title="Linux中修改端口号的文件"></a>Linux中修改端口号的文件</h3><p>~/etc/hosts</p><h3 id="说说下面几个概念：同步，异步，阻塞，非阻塞"><a href="#说说下面几个概念：同步，异步，阻塞，非阻塞" class="headerlink" title="说说下面几个概念：同步，异步，阻塞，非阻塞?"></a>说说下面几个概念：同步，异步，阻塞，非阻塞?</h3><ul><li>同步：多个任务之间有先后顺序执行，一个执行完下个才能执行。</li><li>异步：多个任务之间没有先后顺序，可以同时执行有时候一个任务可能要在必要的时候获取另一个同时执行的任务的结果，这个就叫回调！</li><li>阻塞：如果卡住了调用者，调用者不能继续往下执行，就是说调用者阻塞了。</li><li>非阻塞：如果不会卡住，可以继续执行，就是说非阻塞的。</li><li>同步异步相对于多任务而言，阻塞非阻塞相对于代码执行而言。</li></ul><h3 id="什么csrf攻击原理？如何解决？"><a href="#什么csrf攻击原理？如何解决？" class="headerlink" title="什么csrf攻击原理？如何解决？"></a>什么csrf攻击原理？如何解决？</h3><p>简单来说就是: 你访问了信任网站A，然后A会用保存你的个人信息并返回给你的浏览器一个cookie，然后呢，在cookie的过期时间之内，你去访问了恶意网站B，它给你返回一些恶意请求代码，要求你去访问网站A，而你的浏览器在收到这个恶意请求之后，在你不知情的情况下，会带上保存在本地浏览器的cookie信息去访问网站A，然后网站A误以为是用户本身的操作，导致来自恶意网站C的攻击代码会被执：发邮件，发消息，修改你的密码，购物，转账，偷窥你的个人信息，导致私人信息泄漏和账户财产安全收到威胁</p>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术08--JVM</title>
      <link href="/2019/10/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF08--JVM/"/>
      <url>/2019/10/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF08--JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、 一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接 的交互。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/1.jpg" alt=""></p><h2 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h2><p>我们都知道 Java 源文件，通过编译器，能够生产相应的.Class 文件，也就是字节码文件， 而字节码文件又通过 Java 虚拟机中的解释器，编译成特定机器上的机器码 。<br>也就是如下:</p><ul><li>Java 源文件—-&gt;编译器—-&gt;字节码文件 </li><li>字节码文件—-&gt;JVM—-&gt;机器码</li></ul><blockquote><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是 Java 为什么能够 跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会 存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不 能共享。</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/2.jpg" alt=""></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul><li><p>这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程。</p></li><li><p>Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。<strong>当线程本地存储、缓 冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。 Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可 用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。当线程结束时，会释放原生线程和 Java 线程的所有资源。</strong></p></li><li><p>Hotspot JVM 后台运行的系统线程主要有下面几个:</p></li></ul><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">虚拟机线程 (VM thread)</td><td align="center">这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当 堆修改无法进行时，线程都需要 JVM 位于安全点。这些操作的类型有:stop-the-world 垃圾回收、线程栈 dump、线程暂停、线程偏向锁(biased locking)解除。</td></tr><tr><td align="center">周期性任务线程</td><td align="center">这线程负责定时器事件(也就是中断)，用来调度周期性操作的执行。</td></tr><tr><td align="center">GC 线程</td><td align="center">这些线程支持 JVM 中不同的垃圾回收活动。</td></tr><tr><td align="center">编译器线程</td><td align="center">这些线程在运行时将字节码动态编译成本地平台相关的机器码。</td></tr><tr><td align="center">信号分发线程</td><td align="center">这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理。</td></tr></tbody></table><h2 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/3.jpg" alt=""></p><ul><li>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区 域【JAVA 堆、方法区】、直接内存。</li><li><strong>线程私有数据区域生命周期与线程相同, 依赖用户线程的启动/结束 而 创建/销毁(在 Hotspot VM 内</strong>, 每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的 生/死对应)。</li><li><strong>线程共享区域随虚拟机的启动/关闭而创建/销毁。</strong></li><li><strong>直接内存并不是 JVM 运行时数据区的一部分,</strong> 但也会被频繁的使用: 在 JDK 1.4 引入的 <strong>NIO 提 供了基于 Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用 DirectByteBuffer 对象作为这块内存的引用进行操作(详见: Java I/O 扩展), 这样就避免了在 Java 堆和 Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</strong></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/4.jpg" alt=""></p><h3 id="程序计数器（线程私有）"><a href="#程序计数器（线程私有）" class="headerlink" title="程序计数器（线程私有）"></a>程序计数器（线程私有）</h3><ul><li>一块较小的内存空间,<strong>是当前线程所执行的字节码的行号指示器,</strong>每条线程都要有一个独立的<br>程序计数器，这类内存也称为“线程私有”的内存。</li><li>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址(当前指令的地址)。如 果还是 Native 方法，则为空。</li><li>这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。</li></ul><h3 id="虚拟机栈（线程私有）"><a href="#虚拟机栈（线程私有）" class="headerlink" title="虚拟机栈（线程私有）"></a>虚拟机栈（线程私有）</h3><ul><li><strong>是描述 java 方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧(Stack Frame) 用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</strong>每一个方法从调用直至执行完成 的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</li><li>栈帧( Frame)是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接 (Dynamic Linking)、 方法返回值和异常分派( Dispatch Exception)。栈帧随着方法调用而创建，随着方法结束而销毁——无论方法是正常完成还是异常完成(抛出了在方法内未被捕获的异 常)都算作方法结束。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/5.jpg" alt=""></p><h3 id="本地方法区（线程私有）"><a href="#本地方法区（线程私有）" class="headerlink" title="本地方法区（线程私有）"></a>本地方法区（线程私有）</h3><p>本地方法区和 <strong>Java Stack 作用类似,</strong> 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈 *<em>则为 Native 方法服务, *</em>如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个 C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</p><h3 id="堆（Heap-线程共享）-运行时数据区"><a href="#堆（Heap-线程共享）-运行时数据区" class="headerlink" title="堆（Heap-线程共享）-运行时数据区"></a>堆（Heap-线程共享）-运行时数据区</h3><p>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行 垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以 细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</p><h3 id="方法区-永久代（线程共享）"><a href="#方法区-永久代（线程共享）" class="headerlink" title="方法区/永久代（线程共享）"></a>方法区/永久代（线程共享）</h3><ul><li><p>即我们常说的永久代(Permanent Generation), 用于存储被 JVM 加载的类信息、常量、静 态变量、即时编译器编译后的代码等数据. HotSpot VM 把 GC 分代收集扩展至方法区, 即使用 Java 堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存, 而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型 的卸载, 因此收益一般很小)。</p></li><li><p><strong>运行时常量池(Runtime Constant Pool)</strong>是方法区的一部分。Class 文件中除了有类的版 本、字段、方法、接口等描述等信息外，还有一项信息是常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加 载后存放到方法区的运行时常量池中。 Java 虚拟机对 Class 文件的每一部分(自然也包括常量 池)的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会 被虚拟机认可、装载和执行。</p></li></ul><h2 id="JVM运行时内存"><a href="#JVM运行时内存" class="headerlink" title="JVM运行时内存"></a>JVM运行时内存</h2><p>Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年<br>代。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/6.jpg" alt=""></p><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><p>是用来存放新生的对象。一般占据堆的 1/3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC 进行垃圾回收。新生代又分为 Eden 区、ServivorFrom、ServivorTo 三个区。</p><h4 id="Eden-区"><a href="#Eden-区" class="headerlink" title="Eden 区"></a>Eden 区</h4><p>Java 新对象的出生地(如果新创建的对象占用内存很大，则直接分配到老 年代)。当 Eden 区内存不够的时候就会触发 MinorGC，对新生代区进行 一次垃圾回收。</p><h4 id="ServivorFrom"><a href="#ServivorFrom" class="headerlink" title="ServivorFrom"></a>ServivorFrom</h4><p>上一次 GC 的幸存者，作为这一次 GC 的被扫描者。</p><h4 id="ServivorTo"><a href="#ServivorTo" class="headerlink" title="ServivorTo"></a>ServivorTo</h4><p>保留了一次 MinorGC 过程中的幸存者。</p><h4 id="MinorGC的过程（复制-gt-清空-gt-互换）"><a href="#MinorGC的过程（复制-gt-清空-gt-互换）" class="headerlink" title="MinorGC的过程（复制-&gt;清空-&gt;互换）"></a>MinorGC的过程（复制-&gt;清空-&gt;互换）</h4><p>MinorGC 采用复制算法。</p><ul><li>eden、servicorFrom 复制到 ServicorTo，年龄+1</li></ul><blockquote><p>首先，把 Eden 和 ServivorFrom 区域中存活的对象复制到 ServicorTo 区域(如果有对象的年 龄以及达到了老年的标准，则赋值到老年代区)，同时把这些对象的年龄+1(如果 ServicorTo 不 够位置了就放到老年区);</p></blockquote><ul><li>清空 eden、servicorFrom</li></ul><blockquote><p>然后，清空 Eden 和 ServicorFrom 中的对象;</p></blockquote><ul><li>ServicorTo 和 ServicorFrom 互换</li></ul><blockquote><p>最后，ServicorTo 和 ServicorFrom 互换，原 ServicorTo 成为下一次 GC 时的 ServicorFrom<br>区。</p></blockquote><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><ul><li>主要存放应用程序中生命周期长的内存对象。</li><li>老年代的对象比较稳定，所以 MajorGC 不会频繁执行。在进行 MajorGC 前一般都先进行 了一次 MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足 够大的连续空间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收腾出空间。</li><li>MajorGC 采用<strong>标记清除算法</strong>:首先扫描一次所有老年代，标记出存活的对象，然后回收没 有标记的对象。MajorGC 的耗时比较长，因为要扫描再回收。MajorGC 会产生内存碎片，为了减 少内存损耗，我们一般需要进行合并或者标记出来方便下次直接分配。当老年代也满了装不下的 时候，就会抛出 OOM(Out of Memory)异常。</li></ul><h3 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h3><p>指内存的永久保存区域，主要存放 Class 和 Meta(元数据)的信息,Class 在被加载的时候被 放入永久区域，它和和存放实例的区域不同,<strong>GC 不会在主程序运行期对永久区域进行清理。</strong>所以这 也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出 OOM 异常。</p><h3 id="JAVA8与元数据"><a href="#JAVA8与元数据" class="headerlink" title="JAVA8与元数据"></a>JAVA8与元数据</h3><p>在 Java8 中，<strong>永久代已经被移除，被一个称为“元数据区”(元空间)的区域所取代。</strong>元空间 的本质和永久代类似，元空间与永久代之间最大的区别在于:元空间并不在虚拟机中，而是使用 本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入 native memory, 字符串池和类的静态变量放入 java 堆中，这样可以加载多少类的元数据就不再由 MaxPermSize 控制, 而由系统的实际可用空间来控制。</p><h2 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/7.jpg" alt=""></p><h3 id="垃圾确定"><a href="#垃圾确定" class="headerlink" title="垃圾确定"></a>垃圾确定</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单 的办法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关 联的引用，即他们的引用计数都不为 0，则说明对象不太可能再被用到，那么这个对象就是可回收 对象。</p><h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><p>为了解决引用计数法的循环引用问题，Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作为起点搜索。如果在<strong>“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。</strong>要注意的是，不可达对象不等价于可回收对象，不可达对象变为可回收对象至少要经过两次标记 过程。两次标记后仍然是可回收对象，则将面临回收。</p><h3 id="标记清除算法-Mark-Sweep"><a href="#标记清除算法-Mark-Sweep" class="headerlink" title="标记清除算法(Mark-Sweep)"></a>标记清除算法(Mark-Sweep)</h3><p>最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清 除阶段回收被标记的对象所占用的空间。如图</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/8.jpg" alt=""></p><blockquote><p>从图中我们就可以发现，该算法最大的问题是内存碎片化严重，后续可能发生大对象不能找到可 利用空间的问题。</p></blockquote><h3 id="复制算法（copying）"><a href="#复制算法（copying）" class="headerlink" title="复制算法（copying）"></a>复制算法（copying）</h3><p> 为了解决 Mark-Sweep 算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小 的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用 的内存清掉，如图:</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/9.jpg" alt=""></p><blockquote><p>这种算法虽然实现简单，内存效率高，不易产生碎片，但是最大的问题是可用内存被压缩到了原 本的一半。且存活对象增多的话，Copying 算法的效率会大大降低。</p></blockquote><h3 id="标记整理算法（Mark-Compact）"><a href="#标记整理算法（Mark-Compact）" class="headerlink" title="标记整理算法（Mark-Compact）"></a>标记整理算法（Mark-Compact）</h3><p>结合了以上两个算法，为了避免缺陷而提出。标记阶段和 Mark-Sweep 算法相同，标记后不是清<br>理对象，而是将存活对象移向内存的一端。然后清除端边界外的对象。如图:</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/10.jpg" alt=""></p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存 划分为不同的域，一般情况下将 GC 堆划分为老生代(Tenured/Old Generation)和新生代(Young Generation)。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃 圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</p><h4 id="新生代与复制算法"><a href="#新生代与复制算法" class="headerlink" title="新生代与复制算法"></a>新生代与复制算法</h4><p>目前大部分 JVM 的 GC 对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要 回收大部分对象，即要复制的操作比较少，但通常并不是按照 1:1 来划分新生代。一般将新生代 划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另 一块 Survivor 空间中。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/11.jpg" alt=""></p><h4 id="老年代与标记复制算法"><a href="#老年代与标记复制算法" class="headerlink" title="老年代与标记复制算法"></a>老年代与标记复制算法</h4><p>而老年代因为每次只回收少量对象，因而采用 Mark-Compact 算法。</p><ul><li>JAVA 虚拟机提到过的处于方法区的永生代(Permanet Generation)，它用来存储 class 类，常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。</li><li>对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目前存放对象的那一块)，少数情况会直接分配到老生代。</li><li>当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后，Eden Space 和 From Space 区的活对象会被挪到 To Space，然后将 Eden Space 和 From Space 进行清理。</li><li>如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</li><li>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</li><li>当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被 移到老生代中。</li></ul><h2 id="JAVA四种引用类型"><a href="#JAVA四种引用类型" class="headerlink" title="JAVA四种引用类型"></a>JAVA四种引用类型</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>在 Java 中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引 用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即 使该对象以后永远都不会被用到 JVM 也不会回收。因此强引用是造成 Java 内存泄漏的主要原因之 一。</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用需要用 SoftReference 类来实现，对于只有软引用的对象来说，当系统内存足够时它<br>不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的程序中。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用需要用 WeakReference 类来实现，它比软引用的生存期更短，对于只有弱引用的对象<br>来说，只要垃圾回收机制一运行，不管 JVM 的内存空间是否足够，总会回收该对象占用的内存。</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p> 虚引用需要 PhantomReference 类来实现，它不能单独使用，必须和引用队列联合使用。虚 引用的主要作用是跟踪对象被垃圾回收的状态。</p><h2 id="GC分代收集算法和分区收集算法"><a href="#GC分代收集算法和分区收集算法" class="headerlink" title="GC分代收集算法和分区收集算法"></a>GC分代收集算法和分区收集算法</h2><h3 id="分代收集算法-1"><a href="#分代收集算法-1" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前主流 VM 垃圾收集都采用”分代收集”(Generational Collection)算法, 这种算法会根据 对象存活周期的不同将内存划分为几块, 如 JVM 中的 新生代、老年代、永久代，这样就可以根据 各年代特点分别采用最适当的 GC 算法</p><h4 id="在新生代-复制算法"><a href="#在新生代-复制算法" class="headerlink" title="在新生代-复制算法"></a>在新生代-复制算法</h4><p>每次垃圾收集都能发现大批对象已死, 只有少量存活. 因此选用复制算法, 只需要付出少量 存活对象的复制成本就可以完成收集.</p><h4 id="在老年代-标记整理算法"><a href="#在老年代-标记整理算法" class="headerlink" title="在老年代-标记整理算法"></a>在老年代-标记整理算法</h4><p> 因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用“标记—清理”或“标 记—整理”算法来进行回收, 不必进行内存复制, 且直接腾出空闲内存.</p><h3 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h3><p> 分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间, 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿。</p><h2 id="GC垃圾收集器"><a href="#GC垃圾收集器" class="headerlink" title="GC垃圾收集器"></a>GC垃圾收集器</h2><p>Java堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收<br>年老代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和年老代分别提供了多种不<br>同的垃圾收集器，JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/12.jpg" alt=""></p><h3 id="Serial-垃圾收集器-单线程、复制算法"><a href="#Serial-垃圾收集器-单线程、复制算法" class="headerlink" title="Serial 垃圾收集器(单线程、复制算法)"></a>Serial 垃圾收集器(单线程、复制算法)</h3><ul><li>Serial(英文连续)是最基本垃圾收集器，使用复制算法，曾经是 JDK1.3.1 之前新生代唯一的垃圾 收集器。Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工 作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。</li><li>Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限 定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 Serial<br>垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</li></ul><h3 id="ParNew垃圾收集器-Serial-多线程"><a href="#ParNew垃圾收集器-Serial-多线程" class="headerlink" title="ParNew垃圾收集器(Serial+多线程)"></a>ParNew垃圾收集器(Serial+多线程)</h3><ul><li>ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃 圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也 要暂停所有其他的工作线程。</li><li>ParNew 收集器默认开启和 CPU 数目相同的线程数，可以通过-XX:ParallelGCThreads 参数来限 制垃圾收集器的线程数。【Parallel:平行的】</li><li>ParNew 虽然是除了多线程外和 Serial 收集器几乎完全一样，但是 ParNew 垃圾收集器是很多 java<br>虚拟机运行在 Server 模式下新生代的默认垃圾收集器。</li></ul><h3 id="Parallel-Scavenge-收集器-多线程复制算法、高效"><a href="#Parallel-Scavenge-收集器-多线程复制算法、高效" class="headerlink" title="Parallel Scavenge 收集器(多线程复制算法、高效)"></a>Parallel Scavenge 收集器(多线程复制算法、高效)</h3><p>Parallel Scavenge 收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃 圾收集器，它重点关注的是程序达到一个可控制的吞吐量(Thoughput，CPU 用于运行用户代码 的时间/CPU 总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间))， 高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而<br>不需要太多交互的任务。自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个 重要区别。</p><h3 id="SerialOld收集器-单线程标记整理算法"><a href="#SerialOld收集器-单线程标记整理算法" class="headerlink" title="SerialOld收集器(单线程标记整理算法)"></a>SerialOld收集器(单线程标记整理算法)</h3><p>Serial Old 是 Serial 垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法， 这个收集器也主要是运行在 Client 默认的 java 虚拟机默认的年老代垃圾收集器。<br>在 Server 模式下，主要有两个用途:</p><ol><li>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。</li><li>作为年老代中使用 CMS 收集器的后备垃圾收集方案。</li></ol><ul><li>新生代 Serial 与年老代 Serial Old 搭配垃圾收集过程图:</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/13.jpg" alt=""></p><blockquote><p>新生代 Parallel Scavenge 收集器与 ParNew 收集器工作原理类似，都是多线程的收集器，都使 用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。新生代 Parallel</p></blockquote><ul><li>Scavenge/ParNew 与年老代 Serial Old 搭配垃圾收集过程图:</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/14.jpg" alt=""></p><h3 id="ParallelOld收集器-多线程标记整理算法"><a href="#ParallelOld收集器-多线程标记整理算法" class="headerlink" title="ParallelOld收集器(多线程标记整理算法)"></a>ParallelOld收集器(多线程标记整理算法)</h3><p>Parallel Old 收集器是 Parallel Scavenge 的年老代版本，使用多线程的标记-整理算法，在 JDK1.6 才开始提供。</p><p>在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只 能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge 和年老代 Parallel Old 收集器的搭配策略。</p><ul><li>新生代 Parallel Scavenge 和年老代 Parallel Old 收集器搭配运行过程图</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/15.jpg" alt=""></p><h3 id="CMS收集器-多线程标记清除算法"><a href="#CMS收集器-多线程标记清除算法" class="headerlink" title="CMS收集器(多线程标记清除算法)"></a>CMS收集器(多线程标记清除算法)</h3><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾 回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。<br>最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。<br>CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段:</p><h4 id="初始标记"><a href="#初始标记" class="headerlink" title="初始标记"></a>初始标记</h4><p>只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。</p><h4 id="并发标记"><a href="#并发标记" class="headerlink" title="并发标记"></a>并发标记</h4><p>进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。</p><h4 id="重新标记"><a href="#重新标记" class="headerlink" title="重新标记"></a>重新标记</h4><p> 为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记 记录，仍然需要暂停所有的工作线程。</p><h4 id="并发清除"><a href="#并发清除" class="headerlink" title="并发清除"></a>并发清除</h4><p>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并 发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。</p><ul><li>CMS 收集器工作过程</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/16.jpg" alt=""></p><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收 集器两个最突出的改进是:</p><ul><li>基于标记-整理算法，不产生内存碎片。</li><li>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</li></ul><p>G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域 的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾 最多的区域。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收 集效率。</p><h2 id="JAVA-IO"><a href="#JAVA-IO" class="headerlink" title="JAVA IO"></a>JAVA IO</h2><h3 id="阻塞-IO-模型"><a href="#阻塞-IO-模型" class="headerlink" title="阻塞 IO 模型"></a>阻塞 IO 模型</h3><p>最传统的一种 IO 模型，即在读写数据过程中会发生阻塞现象。当用户线程发出 IO 请求之后，内 核会去查看数据是否就绪，如果没有就绪就会等待数据就绪，而用户线程就会处于阻塞状态，用 户线程交出 CPU。当数据就绪之后，内核会将数据拷贝到用户线程，并返回结果给用户线程，用户线程才解除 block 状态。典型的阻塞 IO 模型的例子为:data = socket.read();如果数据没有就绪，就会一直阻塞在 read 方法。</p><h3 id="非阻塞-IO-模型"><a href="#非阻塞-IO-模型" class="headerlink" title="非阻塞 IO 模型"></a>非阻塞 IO 模型</h3><p>当用户线程发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果。如果结果是一个 error 时，它就知道数据还没有准备好，于是它可以再次发送 read 操作。一旦内核中的数据准备 好了，并且又再次收到了用户线程的请求，那么它马上就将数据拷贝到了用户线程，然后返回。 所以事实上，在非阻塞 IO 模型中，用户线程需要不断地询问内核数据是否就绪，也就说非阻塞 IO 不会交出 CPU，而会一直占用 CPU。典型的非阻塞 IO 模型一般如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">data = socket.read(); </span><br><span class="line"><span class="keyword">if</span>(data!= error)&#123; </span><br><span class="line"># 处理数据</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是对于非阻塞 IO 就有一个非常严重的问题，在 while 循环中需要不断地去询问内核数据是否就<br>绪，这样会导致 CPU 占用率非常高，因此一般情况下很少使用 while 循环这种方式来读取数据。</p></blockquote><h3 id="多路复用-IO-模型"><a href="#多路复用-IO-模型" class="headerlink" title="多路复用 IO 模型"></a>多路复用 IO 模型</h3><ul><li>多路复用 IO 模型是目前使用得比较多的模型。Java NIO 实际上就是多路复用 IO。在多路复用 IO 模型中，会有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真 正调用实际的 IO 读写操作。因为在多路复用 IO 模型中，只需要使用一个线程就可以管理多个 socket，系统不需要建立新的进程或者线程，也不必维护这些线程和进程，并且只有在真正有 socket 读写事件进行时，才会使用 IO 资源，所以它大大减少了资源占用。在 Java NIO 中，是通 过 selector.select()去查询每个通道是否有到达事件，如果没有事件，则一直阻塞在那里，因此这 种方式会导致用户线程的阻塞。多路复用 IO 模式，通过一个线程就可以管理多个 socket，只有当 socket 真正有读写事件发生才会占用资源来进行实际的读写操作。因此，多路复用 IO 比较适合连 接数比较多的情况。</li></ul><ul><li>另外多路复用 IO 为何比非阻塞 IO 模型的效率高是因为在非阻塞 IO 中，不断地询问 socket 状态<br>时通过用户线程去进行的，而在多路复用 IO 中，轮询每个 socket 状态是内核在进行的，这个效 率要比用户线程要高的多。</li></ul><ul><li>不过要注意的是，多路复用 IO 模型是通过轮询的方式来检测是否有事件到达，并且对到达的事件 逐一进行响应。因此对于多路复用 IO 模型来说，一旦事件响应体很大，那么就会导致后续的事件 迟迟得不到处理，并且会影响新的事件轮询。</li></ul><h3 id="信号驱动-IO-模型"><a href="#信号驱动-IO-模型" class="headerlink" title="信号驱动 IO 模型"></a>信号驱动 IO 模型</h3><ul><li>在信号驱动 IO 模型中，当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函 数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到 信号之后，便在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作。</li></ul><h3 id="异步-IO-模型"><a href="#异步-IO-模型" class="headerlink" title="异步 IO 模型"></a>异步 IO 模型</h3><ul><li><p>异步 IO 模型才是最理想的 IO 模型，在异步 IO 模型中，当用户线程发起 read 操作之后，立刻就 可以开始去做其它的事。而另一方面，从内核的角度，当它受到一个 asynchronous read 之后， 它会立刻返回，说明 read 请求已经成功发起了，因此不会对用户线程产生任何 block。然后，内 核会等待数据准备完成，然后将数据拷贝到用户线程，当这一切都完成之后，内核会给用户线程 发送一个信号，告诉它 read 操作完成了。也就说用户线程完全不需要实际的整个 IO 操作是如何<br>进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示 IO 操作已经完成，可以直接<br>去使用数据了。</p></li><li><p>也就说在异步 IO 模型中，IO 操作的两个阶段都不会阻塞用户线程，这两个阶段都是由内核自动完 成，然后发送一个信号告知用户线程操作已完成。用户线程中不需要再次调用 IO 函数进行具体的 读写。这点是和信号驱动模型有所不同的，在信号驱动模型中，当用户线程接收到信号表示数据 已经就绪，然后需要用户线程调用 IO 函数进行实际的读写操作;而在异步 IO 模型中，收到信号 表示 IO 操作已经完成，不需要再在用户线程中调用 IO 函数进行实际的读写操作。</p></li></ul><blockquote><p>注意，异步 IO 是需要操作系统的底层支持，在 Java 7 中，提供了 Asynchronous IO。</p></blockquote><h3 id="JAVA-IO包"><a href="#JAVA-IO包" class="headerlink" title="JAVA IO包"></a>JAVA IO包</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/17.jpg" alt=""></p><h2 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA NIO"></a>JAVA NIO</h2><p>NIO 主要有三大核心部分:Channel(通道)，Buffer(缓冲区), Selector。传统 IO 基于字节流和字 符流进行操作，而 NIO 基于 Channel 和 Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区<br>中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件(比如:连接打开， 数据到达)。因此，单个线程可以监听多个数据通道。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/18.jpg" alt=""></p><blockquote><p>NIO 和传统 IO 之间第一个最大的区别是，IO 是面向流的，NIO 是面向缓冲区的。</p></blockquote><h3 id="NIO-的缓冲区"><a href="#NIO-的缓冲区" class="headerlink" title="NIO 的缓冲区"></a>NIO 的缓冲区</h3><p>Java IO 面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何 地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓 存到一个缓冲区。NIO 的缓冲导向方法不同。数据读取到一个它稍后处理的缓冲区，需要时可在 缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所 有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的 数据。</p><h3 id="NIO-的非阻塞"><a href="#NIO-的非阻塞" class="headerlink" title="NIO 的非阻塞"></a>NIO 的非阻塞</h3><p>IO 的各种流是阻塞的。这意味着，当一个线程调用 read() 或 write()时，该线程被阻塞，直到有 一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 NIO 的非阻塞模式， 使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可 用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以 继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它 完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞 IO 的空闲时间用于在其它通道上<br>执行 IO 操作，所以一个单独的线程现在可以管理多个输入和输出通道(channel)。</p><h3 id="JAVA-NIO包"><a href="#JAVA-NIO包" class="headerlink" title="JAVA NIO包"></a>JAVA NIO包</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/19.jpg" alt=""></p><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>首先说一下 Channel，国内大多翻译成“通道”。Channel 和 IO 中的 Stream(流)是差不多一个 等级的。只不过 Stream 是单向的，譬如:InputStream, OutputStream，而 Channel 是双向的，既可以用来进行读操作，又可以用来进行写操作。 NIO 中的 Channel 的主要实现有:</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>这里看名字就可以猜出个所以然来:分别可以对应文件 IO、UDP 和 TCP(Server 和 Client)。 下面演示的案例基本上就是围绕这 4 个类型的 Channel 进行陈述的。</p><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer，故名思意，缓冲区，实际上是一个容器，是一个连续数组。Channel 提供从文件、 网络读取数据的渠道，但是读取或写入的数据都必须经由 Buffer。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/20.jpg" alt=""></p><ul><li>上面的图描述了从一个客户端向服务端发送数据，然后服务端接收数据的过程。客户端发送 数据时，必须先将数据存入 Buffer 中，然后将 Buffer 中的内容写入通道。服务端这边接收数据必 须通过 Channel 将数据读入到 Buffer 中，然后再从 Buffer 中取出数据来处理。</li><li>在 NIO 中，Buffer 是一个顶层父类，它是一个抽象类，常用的 Buffer 的子类有: ByteBuffer、IntBuffer、 CharBuffer、 LongBuffer、 DoubleBuffer、FloatBuffer、 ShortBuffer</li></ul><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>Selector 类是 NIO 的核心类，Selector 能够检测多个注册的通道上是否有事件发生，如果有事 件发生，便获取事件然后针对每个事件进行相应的响应处理。这样一来，只是用一个单线程就可 以管理多个通道，也就是管理多个连接。这样使得只有在连接真正有读写事件发生时，才会调用 函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护 多个线程，并且避免了多线程之间的上下文切换导致的开销。</p><h2 id="JVM类加载"><a href="#JVM类加载" class="headerlink" title="JVM类加载"></a>JVM类加载</h2><h3 id="JVM类加载机制"><a href="#JVM类加载机制" class="headerlink" title="JVM类加载机制"></a>JVM类加载机制</h3><p>JVM 类加载机制分为五个部分:加载，验证，准备，解析，初始化，下面我们就分别来看一下这<br> 五个过程。</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/21.jpg" alt=""></p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的 java.lang.Class 对<br>象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个 Class 文件获取，这里既 可以从 ZIP 包中读取(比如从 jar 包和 war 包中读取)，也可以在运行时计算生成(动态代理)， 也可以由其它文件生成(比如将 JSP 文件转换成对应的 Class 类)。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p> 这一阶段的主要目的是为了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求，并 且不会危害虚拟机自身的安全。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>  准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使 用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> v = <span class="number">8080</span>;</span><br></pre></td></tr></table></figure><p>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080，将 v 赋值为 8080 的 put static 指令是<br>程序被编译后，存放于类构造器<code>&lt;client&gt;</code>方法之中。 但是注意如果声明为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> v = <span class="number">8080</span>;</span><br></pre></td></tr></table></figure><p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v<br>赋值为 8080。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p> 解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中 的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONSTANT_Class_info</span><br><span class="line">CONSTANT_Field_info</span><br><span class="line">CONSTANT_Method_info</span><br><span class="line">。。。</span><br><span class="line">等类型常量</span><br></pre></td></tr></table></figure><h4 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h4><p>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟<br>机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引 用的字面量形式明确定义在 Java 虚拟机规范的 Class 文件格式中。</p><h4 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h4><p>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有 了直接引用，那引用的目标必定已经在内存中存在。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p> 初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载 器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p><h4 id="类构造器"><a href="#类构造器" class="headerlink" title="类构造器"></a>类构造器</h4><p> 初始化阶段是执行类构造器<code>&lt;client&gt;</code>方法的过程。<code>&lt;client&gt;</code>方法是由编译器自动收集类中的类变 量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证子<code>&lt;client&gt;</code>方法执行之前，父类 的<code>&lt;client&gt;</code>方法已经执行完毕，如果一个类中没有对静态变量赋值也没有静态语句块，那么编译 器可以不为这个类生成<code>&lt;client&gt;()</code>方法。</p><p>注意以下几种情况不会执行类初始化:</p><ol><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触<br>发定义常量所在的类。</li><li>通过类名获取 Class 对象，不会触发类的初始化。</li><li>通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初<br>始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li><li>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作。 </li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>虚拟机设计团队把加载动作放到 JVM 外部实现，以便让应用程序决定如何获取所需的类，JVM 提 供了 3 种类加载器:</p><ul><li>启动类加载器(Bootstrap ClassLoader)</li></ul><p>负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath 参数指定路径中的，且被虚拟机认可(按文件名识别，如 rt.jar)的类。</p><ul><li>扩展类加载器(Extension ClassLoader)</li></ul><p>负责加载 JAVA_HOME\lib\ext 目录中的，或通过 java.ext.dirs 系统变量指定路径中的类 库。</p><ul><li>应用程序类加载器(Application ClassLoader):</li></ul><p>负责加载用户路径(classpath)上的类库。JVM 通过双亲委派模型进行类的加载，当然我们也可以通过继承 java.lang.ClassLoader实现自定义的类加载器。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/22.jpg" alt=""></p><h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><ul><li><p>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父<br>类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，<br>只有当父类加载器反馈自己无法完成这个请求的时候(在它的加载路径下没有找到所需加载的<br>Class)，子类加载器才会尝试自己去加载。</p></li><li><p>采用双亲委派的一个好处是比如加载位于 rt.jar 包中的类 java.lang.Object，不管是哪个加载<br>器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载<br>器最终得到的都是同样一个 Object 对象。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/jvm/23.jpg" alt=""></p></li></ul><h3 id="OSGI-动态模型系统"><a href="#OSGI-动态模型系统" class="headerlink" title="OSGI(动态模型系统)"></a>OSGI(动态模型系统)</h3><p> OSGi(Open Service Gateway Initiative)，是面向 Java 的动态模型系统，是 Java 动态化模块化系 统的一系列规范。</p><h3 id="动态改变构造"><a href="#动态改变构造" class="headerlink" title="动态改变构造"></a>动态改变构造</h3><p> OSGi 服务平台提供在多种网络设备上无需重启的动态改变构造的功能。为了最小化耦合度和促使 这些耦合度可管理，OSGi 技术提供一种面向服务的架构，它能使这些组件动态地发现对方。</p><h3 id="模块化编程与热插拔"><a href="#模块化编程与热插拔" class="headerlink" title="模块化编程与热插拔"></a>模块化编程与热插拔</h3><p>OSGi 旨在为实现 Java 程序的模块化编程提供基础条件，基于 OSGi 的程序很可能可以实现模块级<br>的热插拔功能，当程序升级更新时，可以只停用、重新安装然后启动程序的其中一部分，这对企 业级程序开发来说是非常具有诱惑力的特性。</p><p>OSGi 描绘了一个很美好的模块化开发目标，而且定义了实现这个目标的所需要服务与架构，同时 也有成熟的框架进行实现支持。但并非所有的应用都适合采用 OSGi 作为基础架构，它在提供强大 功能同时，也引入了额外的复杂度，因为它不遵守了类加载的双亲委托模型。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> 系统架构 </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程05 -- 反射机制</title>
      <link href="/2019/09/23/python%E7%BC%96%E7%A8%8B05%20--%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/09/23/python%E7%BC%96%E7%A8%8B05%20--%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>在程序开发中，常常会遇到这样的需求：在执行对象中的某个方法，或者在调用对象的某个变量，但是由于一些原因，我们无法确定或者并不知道该方法或者变量是否存在，这时我们需要一个特殊的方法或者机制来访问或操作该未知的方法或变量，这种机制就被称之为反射。</p><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><p>反射机制：反射就是通过字符串的形式，导入模块；通过字符串的形式，去模块中寻找指定函数，对其进行操作。也就是利用字符串的形式去对象(模块)中操作(查找or获取or删除or添加)成员，一种基于字符串的事件驱动。</p><ul><li><p>反射有四个方法：hasattr、getattr、setattr、delattr，比较常用的是前两种，一般会结合起来用。</p></li><li><p><strong>最最重要的一点：通过字符串去操作对象的属性和方法，是字符串形式！</strong></p></li><li><p>什么对象可以用反射？<br>实例化对象、类、其他模块、本模块<br>只有以上四个才能使用，因为他们都能通过 . 的方式获取或调用，这也算是一种前提</p></li></ul><h2 id="反射机制常用的四个方法"><a href="#反射机制常用的四个方法" class="headerlink" title="反射机制常用的四个方法"></a>反射机制常用的四个方法</h2><h3 id="getattr-函数用于返回一个对象的属性值"><a href="#getattr-函数用于返回一个对象的属性值" class="headerlink" title="getattr()  函数用于返回一个对象的属性值"></a>getattr()  函数用于返回一个对象的属性值</h3><ul><li>获取对象object的属性或者方法，存在则返回其属性，不存在则返回默认值，默认值可选。</li></ul><blockquote><p>注意：如果获取的是方法，存在则返回对象中方法的内存地址，若想运行则需通过”()”方法.</p></blockquote><ul><li>getattr 语法：<code>getattr(object,name[,default])</code></li></ul><blockquote><p>参数</p><blockquote><p>· object – 对象</p><p>· name   – 字符串，对象属性</p><p>· default– 默认返回值，如果不提供该参数，在没有对应属性时，将触发AttrbuteError.</p></blockquote></blockquote><blockquote><p>返回值 ：返回对象属性值 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class test():</span><br><span class="line">    name&#x3D;&quot;david&quot;</span><br><span class="line">    def run(self):</span><br><span class="line">        return &quot;Hello David&quot;</span><br><span class="line">t&#x3D;test()        # t 为一个test对象</span><br><span class="line">getattr(t, &quot;name&quot;) #获取name属性</span><br><span class="line">getattr(t, &quot;run&quot;)  #获取run方法，存在就打印出方法的内存地址。</span><br><span class="line">&lt;bound method test.run of &lt;__main__.test instance at 0x0269C878&gt;&gt;</span><br><span class="line"></span><br><span class="line">getattr(t, &quot;run&quot;)()  #获取run方法，后面加括号可以将这个方法运行。</span><br><span class="line">&#39;Hello David&#39;</span><br><span class="line"></span><br><span class="line">getattr(t, &quot;david&quot;)  #获取一个不存在的属性。</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: test instance has no attribute &#39;david&#39;</span><br><span class="line"></span><br><span class="line">getattr(t, &quot;david&quot;,&quot;18&quot;)  #若属性不存在，返回一个默认值。</span><br></pre></td></tr></table></figure><h3 id="hasattr-函数用于判断对象是够包含对应的属性"><a href="#hasattr-函数用于判断对象是够包含对应的属性" class="headerlink" title="hasattr() 函数用于判断对象是够包含对应的属性"></a>hasattr() 函数用于判断对象是够包含对应的属性</h3><ul><li>判断一个对象里面是否有name属性或者name方法，返回BOOL值，有name特性返回True， 否则返回False。</li></ul><blockquote><p>name是一个字符串字面值或字符串类型变量。</p></blockquote><ul><li>hasattr 语法 ：<code>hasattr(object,name)</code></li></ul><blockquote><p>参数</p><blockquote><p>· object – 对象</p><p> · name   – 字符串，属性名</p></blockquote></blockquote><blockquote><p>返回值 ：如果对象有该属性返回 True，否则返回 False。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t&#x3D;test()           # test 还是上面的那个</span><br><span class="line">hasattr(t, &quot;name&quot;) #判断对象有name属性</span><br><span class="line">True</span><br><span class="line">hasattr(t, &quot;run&quot;)  #判断对象有run方法</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="setattr-函数"><a href="#setattr-函数" class="headerlink" title="setattr() 函数"></a>setattr() 函数</h3><ul><li>对应函数getattr(),用于设置属性值，若属性不存在，则先创建在赋值。</li><li>setattr 语法：<code>setattr(object, name, value)</code></li></ul><blockquote><p>参数</p><blockquote><p>· object – 对象<br>· name   – 字符串，属性名<br>· value  – 属性值。</p></blockquote></blockquote><blockquote><p>返回值 ：无</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t&#x3D;test()</span><br><span class="line">&gt;&gt;&gt; hasattr(t, &quot;hdw&quot;)   #判断属性是否存在</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; setattr(t, &quot;hdw&quot;, &quot;18&quot;)   #为属相赋值，并没有返回值</span><br><span class="line">&gt;&gt;&gt; hasattr(t, &quot;hdw&quot;)    #属性存在了</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="delattr-函数"><a href="#delattr-函数" class="headerlink" title="delattr() 函数"></a>delattr() 函数</h3><ul><li>用来删除指定对象的指定名称的属性，和setattr函数作用相反,属性必须存在，否则抛出AttributeError。只有属性删除不是方法</li><li>delattr语法：<code>delattr(object, name)</code></li></ul><blockquote><p>This is a relative of setattr(). </p><p>The arguments are an object and a string. The string must be the name of one of the object’s attributes. </p><p>The function deletes the named attribute, provided the object allows it. </p><p>For example, delattr(x, ‘foobar’) is equivalent to del x.foobar.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#定义类A</span><br><span class="line">class A:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    def sayHello(self):</span><br><span class="line">        print(&#39;hello&#39;,self.name)</span><br><span class="line">A a;    # a是一个A对象</span><br><span class="line">#测试属性和方法</span><br><span class="line">a.name</span><br><span class="line">&#39;小麦&#39;</span><br><span class="line">a.sayHello()</span><br><span class="line">hello 小麦</span><br><span class="line"> </span><br><span class="line">#删除属性</span><br><span class="line">&gt;&gt;&gt; delattr(a,&#39;name&#39;)</span><br><span class="line">&gt;&gt;&gt; a.name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#47&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    a.name</span><br><span class="line">AttributeError: &#39;A&#39; object has no attribute &#39;name&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a.name #属性name已经删掉，不存在</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#47&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    a.name</span><br><span class="line">AttributeError: &#39;A&#39; object has no attribute &#39;name&#39;</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; delattr(a,&#39;name&#39;) #再删除会报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#48&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    delattr(a,&#39;name&#39;)</span><br><span class="line">AttributeError: name</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a.sayHello</span><br><span class="line">&lt;bound method A.sayHello of &lt;__main__.A object at 0x03F014B0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; delattr(a,&#39;sayHello&#39;) #不能用于删除方法</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#50&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    delattr(a,&#39;sayHello&#39;)</span><br><span class="line">AttributeError: sayHello</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval() 函数"></a>eval() 函数</h3><ul><li><p>用来执行一个字符串表达式，并返回表达式的值。</p></li><li><p>语法：<code>eval(expression[, globals[, locals]])</code></p></li></ul><blockquote><p>参数</p><blockquote><p>expression – 表达式。</p><p> globals      – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p><p> locals     – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p></blockquote></blockquote><blockquote><p>返回值:表达式计算结果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x &#x3D; 7</span><br><span class="line">&gt;&gt;&gt; eval( &#39;3 * x&#39; )</span><br><span class="line">21</span><br><span class="line">&gt;&gt;&gt; eval(&#39;pow(2,2)&#39;)</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="反射机制的用法"><a href="#反射机制的用法" class="headerlink" title="反射机制的用法"></a>反射机制的用法</h2><h3 id="属性的反射操作"><a href="#属性的反射操作" class="headerlink" title="属性的反射操作"></a>属性的反射操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    name &#x3D; &quot;海绵宝宝&quot;</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(666)</span><br><span class="line"></span><br><span class="line">content &#x3D; input(&quot;请输入：&quot;).strip()</span><br><span class="line">ret &#x3D; getattr(A, content)</span><br><span class="line">print(ret)</span><br><span class="line"># 运行结果一：</span><br><span class="line">请输入：name </span><br><span class="line">海绵宝宝</span><br><span class="line"></span><br><span class="line"># 运行结果二：</span><br><span class="line">请输入：func</span><br><span class="line">&lt;function A.func at 0x7f4bdc6710d0&gt;</span><br><span class="line"></span><br><span class="line"># 运行结果三：</span><br><span class="line">请输入：123</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test01.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    ret &#x3D; getattr(A, content)</span><br><span class="line">AttributeError: type object &#39;A&#39; has no attribute &#39;123&#39;</span><br><span class="line"></span><br><span class="line"># 原因解析：报错提示类 A 里面没有这个属性</span><br><span class="line"># 也就是说，只有用户输入的是字符串形式的属于类 A 的属性时才不会报错</span><br></pre></td></tr></table></figure><h3 id="实例化对象的反射操作"><a href="#实例化对象的反射操作" class="headerlink" title="实例化对象的反射操作"></a>实例化对象的反射操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    country &#x3D; &quot;中国&quot;</span><br><span class="line">    area &#x3D; &quot;深圳&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(666)</span><br><span class="line"></span><br><span class="line">a &#x3D; A(&quot;Jane&quot;, 18)</span><br><span class="line"># 对象的属性</span><br><span class="line">print(a.name)                       # Jane</span><br><span class="line"></span><br><span class="line"># 注意这个变量名也要用字符串形式！</span><br><span class="line">print(hasattr(a, &quot;name&quot;))           # True</span><br><span class="line"></span><br><span class="line"># 不是这样用，而是字符串形式的属性名</span><br><span class="line">print(hasattr(a, &quot;Jane&quot;))           # False</span><br><span class="line"></span><br><span class="line"># 一般 hasattr 与 getattr 结合起来使用</span><br><span class="line">if hasattr(a, &quot;name&quot;):</span><br><span class="line">    print(getattr(a, &quot;name&quot;))       # Jane</span><br><span class="line"></span><br><span class="line"># 可以设置一个默认值，目的是防止程序报错</span><br><span class="line"># 如果没有该属性，就返回默认值</span><br><span class="line">print(getattr(a, &quot;sex&quot;, None))      # None</span><br><span class="line"></span><br><span class="line">print(a.country)                    # 中国</span><br><span class="line">print(getattr(a, &quot;country&quot;))        # 中国</span><br><span class="line"></span><br><span class="line">ret &#x3D; getattr(a, &quot;func&quot;)</span><br><span class="line"># 注意这里　ret() 相当于 func()</span><br><span class="line">print(ret())                        # 666</span><br><span class="line"></span><br><span class="line"># 给对象添加一个属性</span><br><span class="line">setattr(a, &quot;sex&quot;, &quot;男&quot;)</span><br><span class="line">print(a.sex)                        # 男</span><br><span class="line"></span><br><span class="line"># 删除对象的某个属性</span><br><span class="line">delattr(a, &quot;name&quot;)</span><br><span class="line">print(a.name)</span><br></pre></td></tr></table></figure><h3 id="类名的反射操作"><a href="#类名的反射操作" class="headerlink" title="类名的反射操作"></a>类名的反射操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    country &#x3D; &quot;中国&quot;</span><br><span class="line">    area &#x3D; &quot;深圳&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(666)</span><br><span class="line"></span><br><span class="line"># 获取类 A 的静态属性 country</span><br><span class="line">print(getattr(A, &quot;country&quot;))    # 中国</span><br><span class="line"># 获取类 A 的静态属性 area</span><br><span class="line">print(getattr(A, &quot;area&quot;))       # 深圳</span><br><span class="line"></span><br><span class="line"># 获取类A 的动态方法并执行</span><br><span class="line">getattr(A, &quot;func&quot;)()          # 666</span><br></pre></td></tr></table></figure><h3 id="其他-py-文件的反射操作"><a href="#其他-py-文件的反射操作" class="headerlink" title="其他 py 文件的反射操作"></a>其他 py 文件的反射操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">####################################</span><br><span class="line"># test02.py</span><br><span class="line">####################################</span><br><span class="line">flag &#x3D; True</span><br><span class="line">def func(a):</span><br><span class="line">    return a + 3</span><br><span class="line">class B:</span><br><span class="line">    name_list &#x3D; [&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;]</span><br><span class="line">    def __init__(self, name, sex):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.sex &#x3D; sex</span><br><span class="line">    def func(self):</span><br><span class="line">        print(666)</span><br><span class="line">####################################</span><br><span class="line"># test.py不用反射的操作方法</span><br><span class="line">####################################</span><br><span class="line">import test02</span><br><span class="line">print(test02.flag)          # True</span><br><span class="line"></span><br><span class="line">ret &#x3D; test02.func</span><br><span class="line">print(ret(10))              # 13</span><br><span class="line"></span><br><span class="line">print(test02.B.name_list)   # [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</span><br><span class="line"></span><br><span class="line">obj &#x3D; test02.B(&quot;barry&quot;, &quot;男&quot;)</span><br><span class="line">print(obj.name_list)        # [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</span><br><span class="line"></span><br><span class="line">####################################</span><br><span class="line"># test.py用反射的操作方法</span><br><span class="line">####################################</span><br><span class="line">import test02</span><br><span class="line"></span><br><span class="line"># 获取 test02 包中的 flag 变量对应的值</span><br><span class="line">print(getattr(test02, &quot;flag&quot;))          # True</span><br><span class="line"></span><br><span class="line"># 执行 test02 包中的 func 方法</span><br><span class="line">ret &#x3D; getattr(test02, &quot;func&quot;)(10)   </span><br><span class="line">print(ret)                              # 13</span><br><span class="line"></span><br><span class="line"># 获取 test02 包中的类 B</span><br><span class="line">print(getattr(test02, &quot;B&quot;))             # &lt;class &#39;test02.B&#39;&gt;</span><br><span class="line"></span><br><span class="line"># 获取 test02 包中的类 B 的 name_list 属性的方式：</span><br><span class="line"># 方式一：</span><br><span class="line">print(getattr(test02, &quot;B&quot;).name_list)   # [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</span><br><span class="line"># 方式二：</span><br><span class="line">print(getattr(test02.B, &quot;name_list&quot;))   # [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</span><br><span class="line"></span><br><span class="line"># 执行 test02 包中的类 B 的 func 方法（同上两种方式)</span><br><span class="line">getattr(test02, &quot;B&quot;).func(111)          # 666</span><br><span class="line">getattr(test02.B, &quot;func&quot;)(1)            # 666</span><br><span class="line"></span><br><span class="line"># 实例化对象</span><br><span class="line">obj &#x3D; getattr(test02, &quot;B&quot;)(&quot;小明&quot;, &quot;男&quot;)</span><br><span class="line"></span><br><span class="line"># 获取实例化对象的属性 name</span><br><span class="line">print(obj.name)                         # 小明</span><br><span class="line"></span><br><span class="line"># 通过实例化对象获取到类 B 中的共享数据之静态属性： name_list</span><br><span class="line">print(obj.name_list)                    # [&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</span><br><span class="line"></span><br><span class="line"># 通过实例化对象执行类 B 中的共享数据之动态方法： func()</span><br><span class="line">obj.func()                              # 666</span><br></pre></td></tr></table></figure><h3 id="本py文件的反射操作：反射的主体是本文件"><a href="#本py文件的反射操作：反射的主体是本文件" class="headerlink" title="本py文件的反射操作：反射的主体是本文件"></a>本py文件的反射操作：反射的主体是本文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    print(666)</span><br><span class="line"></span><br><span class="line">ret &#x3D; input(&quot;请输入: &quot;).strip()</span><br><span class="line">obj &#x3D; sys.modules[__name__]</span><br><span class="line">getattr(obj, ret)()</span><br><span class="line"># 运行结果：只有输入 func 才不会报错</span><br><span class="line">请输入: func</span><br><span class="line">666</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在本文件调用所有的函数</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in func1&quot;)</span><br><span class="line"></span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in func2&quot;)</span><br><span class="line"></span><br><span class="line">def func3():</span><br><span class="line">    print(&quot;in func3&quot;)</span><br><span class="line"></span><br><span class="line">l1 &#x3D; [func1, func2, func3]</span><br><span class="line">for i in l1:</span><br><span class="line">    i()</span><br><span class="line"># 运行结果：</span><br><span class="line">in func1</span><br><span class="line">in func2</span><br><span class="line">in func3</span><br><span class="line"># 要是有100个就不能这样了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">l1 &#x3D; [&quot;func%s&quot; % i for i in range(1, 4)]</span><br><span class="line">print(l1)  # [&#39;func1&#39;, &#39;func2&#39;, &#39;func3&#39;]</span><br><span class="line">obj &#x3D; sys.modules[__name__]</span><br><span class="line">for i in l1:</span><br><span class="line">    getattr(obj, i)()</span><br><span class="line"># 运行结果：</span><br><span class="line">in func1</span><br><span class="line">in func2</span><br><span class="line">in func3</span><br></pre></td></tr></table></figure><h2 id="特殊双下划线方法"><a href="#特殊双下划线方法" class="headerlink" title="特殊双下划线方法"></a>特殊双下划线方法</h2><ul><li>项目中几乎不会自定义一个特殊双下划线方法，因为一般是给 Python 开发者在源码中使用</li></ul><h3 id="len-方法"><a href="#len-方法" class="headerlink" title="__len__ 方法"></a><code>__len__</code> 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        self.sex &#x3D; &quot;男&quot;</span><br><span class="line"></span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.__dict__)</span><br><span class="line"></span><br><span class="line">a1 &#x3D; A(&quot;蓬蓬&quot;, 18)</span><br><span class="line"># 这里假如要计算实例化对象中 a1 的属性个性</span><br><span class="line"># 我们知道，直接使用 len(a1) 是不行的，因为类没有 len 方法</span><br><span class="line"># 这时候，可以在 A 里面添加一个 __len__ 方法，伪装它有 len()</span><br><span class="line">print(len(a1))          # 3</span><br><span class="line"># 通过这个例子可以得知，那些能使用 len()的数据类型内部肯定有 __len__方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hash(a1))         # -9223371957293561519</span><br><span class="line"># 这里的结果是实例化对象(object) 中有 __hash__ ，而不是A的</span><br><span class="line"># 因为 A 里并没有添加一个 __hash__ 方法</span><br></pre></td></tr></table></figure><h3 id="str-方法"><a href="#str-方法" class="headerlink" title="__str__方法"></a><code>__str__</code>方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        self.sex &#x3D; &quot;男&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        print(555)</span><br><span class="line">        return &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">a1 &#x3D; A(&quot;蓬蓬&quot;, 18)</span><br><span class="line"># 对一个对象打印时，自动执行 __str__ 方法</span><br><span class="line">print(a1)</span><br><span class="line"># 运行结果：</span><br><span class="line">555</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h3 id="call-方法"><a href="#call-方法" class="headerlink" title="__call__方法"></a><code>__call__</code>方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;实例化一个对象时自动执行 __init__ 方法&quot;)</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        print(&#39;调用实例化对象时自动触发 __call__ 方法&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj &#x3D; Foo()     # 实例化一个对象时自动执行 __init__ 方法</span><br><span class="line">obj()           # 调用实例化对象时自动触发 __call__ 方法</span><br></pre></td></tr></table></figure><h3 id="new-构造方法"><a href="#new-构造方法" class="headerlink" title="__new__构造方法"></a><code>__new__</code>构造方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        print(&quot;in A __init__&quot;)</span><br><span class="line"></span><br><span class="line">a &#x3D; A(&quot;小明&quot;)</span><br><span class="line"># 实例化一个对象时，发生了三件事</span><br><span class="line"># 1. 在内存中开辟了一个对象空间，注意是 obj (即 a )中 __new__ 开辟的</span><br><span class="line"># 2. 自动执行 __init__ 方法，将空间传给 self</span><br><span class="line"># 3. 在 __init__ 给对象封装属性，并返回给对象</span><br><span class="line"># 也就是说，实例化一个对象的时候，首先执行了 __new__ 方法</span><br><span class="line"># 然后执行了 __init__ 方法</span><br><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        print(&quot;in A __init__&quot;)</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        print(111)</span><br><span class="line"></span><br><span class="line">a &#x3D; A(&quot;小明&quot;)</span><br><span class="line">print(a.name)</span><br><span class="line"># 运行结果：</span><br><span class="line">111</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test01.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    print(a.name)</span><br><span class="line">AttributeError: &#39;NoneType&#39; object has no attribute &#39;name&#39;</span><br><span class="line"></span><br><span class="line"># 原因分析：注意本来实例化一个对象 a 后</span><br><span class="line"># a 的 __new__ 方法会在内存中创建一个空间</span><br><span class="line"># 但是，这里类中有 __new__，此时只会执行 A 中的 __new__，即会打印 111</span><br><span class="line"># 也就是说，内存中并没有 a1 的空间，因此也就没有 a1.name</span><br><span class="line"># 最终，print(a1.name) 会报错</span><br><span class="line"># 为了执行 obj(a1) 的 __new__，可以这样：</span><br><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        print(&quot;in A __init__&quot;)</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        print(&quot;in A __new__&quot;)</span><br><span class="line">        return object.__new__(cls)</span><br><span class="line"></span><br><span class="line">a &#x3D; A(&quot;小明&quot;)</span><br><span class="line">print(a.name)</span><br><span class="line"># 运行结果：</span><br><span class="line">in A __new__</span><br><span class="line">in A __init__</span><br><span class="line">小明</span><br><span class="line"></span><br><span class="line"># 根据上面所写实例化对象时的三个步骤，可以推导出以上打印结果</span><br></pre></td></tr></table></figure><h3 id="单例模式：一个类只能实例化一个对象"><a href="#单例模式：一个类只能实例化一个对象" class="headerlink" title="单例模式：一个类只能实例化一个对象"></a>单例模式：一个类只能实例化一个对象</h3><ul><li>一般情况下，一个类可以有很多的实例化对象，但是每个的内存地址不一样</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">ret1 &#x3D; A()</span><br><span class="line">ret2 &#x3D; A()</span><br><span class="line"></span><br><span class="line">print(ret1)</span><br><span class="line">print(ret2)</span><br><span class="line"></span><br><span class="line"># 运行结果：</span><br><span class="line">&lt;__main__.A object at 0x7f33e2ccab70&gt;</span><br><span class="line">&lt;__main__.A object at 0x7f33e12b1400&gt;</span><br></pre></td></tr></table></figure><ul><li>单例模式示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    __instance &#x3D; None</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        # cls 表示类本身, 这一句表示如果是第一次实例化对象</span><br><span class="line">        if cls.__instance is None:</span><br><span class="line">            obj &#x3D; object.__new__(cls)</span><br><span class="line">            cls.__instance &#x3D; obj</span><br><span class="line">        return cls.__instance</span><br><span class="line"></span><br><span class="line">ret1 &#x3D; A()</span><br><span class="line">ret2 &#x3D; A()</span><br><span class="line"></span><br><span class="line">print(ret1)</span><br><span class="line">print(ret2)</span><br><span class="line"></span><br><span class="line"># 运行结果：</span><br><span class="line">&lt;__main__.A object at 0x7f2fc69493c8&gt;</span><br><span class="line">&lt;__main__.A object at 0x7f2fc69493c8&gt;</span><br><span class="line"></span><br><span class="line"># 可以看出是在同一个内存地址，也就是说单例模式可以节省内存</span><br><span class="line"># 比如有时很多地方要调用这个类，又必须调用实例对象，就用单例模式</span><br></pre></td></tr></table></figure><ul><li>通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D;name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    __instance &#x3D; None</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if cls.__instance is None:</span><br><span class="line">            obj &#x3D; object.__new__(cls)</span><br><span class="line">            cls.__instance &#x3D; obj</span><br><span class="line">        return cls.__instance</span><br><span class="line"></span><br><span class="line">ret1 &#x3D; A(&quot;小明&quot;, 20)</span><br><span class="line">ret2 &#x3D; A(&quot;小花&quot;, 28)</span><br><span class="line"></span><br><span class="line">print(ret1)</span><br><span class="line">print(ret2)</span><br><span class="line"></span><br><span class="line"># 运行结果：</span><br><span class="line">&lt;__main__.A object at 0x7f0b8309f4a8&gt;</span><br><span class="line">&lt;__main__.A object at 0x7f0b8309f4a8&gt;</span><br></pre></td></tr></table></figure><h3 id="item-系列"><a href="#item-系列" class="headerlink" title="item 系列"></a>item 系列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line"></span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(self.__dict__[item])</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        # 这里不能使用 self.key &#x3D; value</span><br><span class="line">        # 因为那样相当于 self.&quot;age&quot; &#x3D; 18</span><br><span class="line">        self.__dict__[key]&#x3D;value</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&#39;del obj[key] 时, 我执行&#39;)</span><br><span class="line">        self.__dict__.pop(key)</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, item):</span><br><span class="line">        print(&#39;del obj.key 时, 我执行&#39;)</span><br><span class="line">        self.__dict__.pop(item)</span><br><span class="line"></span><br><span class="line">f &#x3D; Foo(&#39;abc&#39;)</span><br><span class="line">f[&#39;age&#39;] &#x3D; 18</span><br><span class="line">f[&#39;age1&#39;] &#x3D; 19</span><br><span class="line">del f.age1              # del obj.key时,我执行</span><br><span class="line">del f[&#39;age&#39;]            # del obj[key]时,我执行</span><br><span class="line">f[&#39;name&#39;] &#x3D; &#39;小明&#39;</span><br><span class="line">print(f.__dict__)       # &#123;&#39;name&#39;: &#39;小明&#39;&#125;</span><br></pre></td></tr></table></figure><h2 id="动态导入模块名"><a href="#动态导入模块名" class="headerlink" title="动态导入模块名"></a>动态导入模块名</h2><h3 id="反射实现"><a href="#反射实现" class="headerlink" title="反射实现"></a>反射实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imp &#x3D; input(“请输入你想导入的模块名:”)</span><br><span class="line">CC &#x3D; __import__(imp) 這种方式就是通过输入字符串导入你所想导入的模块 </span><br><span class="line">CC.f1()  # 执行模块中的f1方法</span><br></pre></td></tr></table></figure><ul><li>实现了动态输入模块名，从而可以执行里面的函数，但是有一个缺点, 执行的函数被固定了。那如何动态输入函数名并且来执行呢？这就的通过反射机制。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#dynamic.py</span><br><span class="line">imp &#x3D; input(&quot;请输入模块:&quot;)</span><br><span class="line">dd &#x3D; __import__(imp)    </span><br><span class="line"># 等价于import imp</span><br><span class="line">inp_func &#x3D; input(&quot;请输入要执行的函数：&quot;)</span><br><span class="line"> </span><br><span class="line">f &#x3D; getattr(dd,inp_func，None)    </span><br><span class="line">#作用:从导入模块中找到你需要调用的函数inp_func,</span><br><span class="line">然后返回一个该函数的引用.没有找到就烦会None</span><br><span class="line"> </span><br><span class="line">f() # 执行该函数</span><br></pre></td></tr></table></figure><ul><li>上面实现了，动态导入一个模块，并且动态输入函数名然后执行相应功能。<br>当然，上面还存在一点点小问题:那就是我的模块名有可能不是在本级目录中存放着。有可能是如下图存放方式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dd &#x3D; __import__(&quot;lib.text.commons&quot;)  </span><br><span class="line">#这样仅仅导入了lib模块</span><br><span class="line">dd &#x3D; __import__(&quot;lib.text.commons&quot;,fromlist &#x3D; True)  </span><br><span class="line">#改用这种方式就能导入成功</span><br><span class="line"># 等价于import config</span><br><span class="line">inp_func &#x3D; input(&quot;请输入要执行的函数：&quot;)</span><br><span class="line">f &#x3D; getattr(dd,inp_func)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><ul><li><p>平常可能需要用到上面的四个函数。</p><ul><li><p>r = hasattr(commons,xxx)             </p><blockquote><p>判断某个函数或者变量是否存在</p></blockquote></li><li><p>setattr(commons,’age’,18)            </p><blockquote><p>给commons模块增加一个全局变量age = 18，创建成功返回none</p></blockquote></li><li><p>setattr(config,’age’,lambda  a:a+1)  </p><blockquote><p>给模块添加一个函数</p></blockquote></li><li><p>delattr(commons,’age’)               </p><blockquote><p>删除模块中某个变量或者函数</p></blockquote></li></ul></li><li><p>注释：getattr,hasattr,setattr,delattr对模块的修改都在内存中进行，并不会影响文件中真实内容。</p></li></ul><h3 id="json数据中定义的字符串模块导入"><a href="#json数据中定义的字符串模块导入" class="headerlink" title="json数据中定义的字符串模块导入"></a>json数据中定义的字符串模块导入</h3><ul><li>一般在数据库中我们需要对某一个字段的逻辑进行处理，这时候有一些逻辑性关联表就可以在后端对其某个字段或者内容处理再将该抽象画字段存入逻辑表中，下次直接就可以导入相关的方法，数据量大的时候是最方便的，耦合性更好</li><li>下面将以一个自创的json格式的字段，该字段里存放内容可变，分别为它的类别即模块和相关函数的位置用字符串表示，以及执行该函数需要的值value，就可以将每一个json中的函数进行调用和处理，并且该json内容可以保存在一个数据库表中，随时取用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">##########################</span><br><span class="line">#types.__init__.py</span><br><span class="line">##########################</span><br><span class="line">import ipaddress</span><br><span class="line">import importlib</span><br><span class="line">def get_instance(type:str):</span><br><span class="line">    m, c &#x3D; type.rsplit(&#39;.&#39;, maxsplit&#x3D;1)</span><br><span class="line">    print(m,c)</span><br><span class="line">    # 将类所在包进行导入并使用类</span><br><span class="line">    mod &#x3D; importlib.import_module(m)</span><br><span class="line">    cls &#x3D; getattr(mod, c)</span><br><span class="line">    obj &#x3D; cls()</span><br><span class="line">    if isinstance(obj, BaseType):</span><br><span class="line">        return obj</span><br><span class="line">    raise TypeError(&#39;Wrong Type : &#123;&#125; is not sub of </span><br><span class="line">    class BaseType&#39;.format(cls))</span><br><span class="line"></span><br><span class="line">class BaseType:</span><br><span class="line">    def stringfy(selfs, value):</span><br><span class="line">        raise NotImplementedError()</span><br><span class="line"></span><br><span class="line">    def destringfy(self, value):</span><br><span class="line">        raise NotImplementedError()</span><br><span class="line"></span><br><span class="line">class Int(BaseType):</span><br><span class="line">    def stringfy(selfs, value):</span><br><span class="line">        return str(int(value))</span><br><span class="line"></span><br><span class="line">    def destringfy(self, value):</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line"># IP判断方法，直接用内置,IP转化</span><br><span class="line">class IP(BaseType):</span><br><span class="line">    def stringfy(selfs, value):</span><br><span class="line">        return str(ipaddress.ip_address(value))</span><br><span class="line"></span><br><span class="line">    def destringfy(self, value):</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line">###################################</span><br><span class="line"># app.py</span><br><span class="line">###################################</span><br><span class="line">import json</span><br><span class="line">from types import *</span><br><span class="line"># 建立字典映射--x</span><br><span class="line"># 从放在json中的type动态加载类,使用反射,</span><br><span class="line">import importlib</span><br><span class="line">jsonstr &#x3D; &quot;&quot;&quot;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;:&quot;cmdb.types.IP&quot;,</span><br><span class="line">    &quot;value&quot;:&quot;192.168.0.1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 加载json</span><br><span class="line">obj &#x3D; json.loads(jsonstr)</span><br><span class="line">print(obj)</span><br><span class="line"></span><br><span class="line"># 使用反射实现动态加载类</span><br><span class="line">print(get_instance(obj[&#39;type&#39;]).stringfy(obj[&#39;value&#39;]))</span><br></pre></td></tr></table></figure><h3 id="数据解析中的反射"><a href="#数据解析中的反射" class="headerlink" title="数据解析中的反射"></a>数据解析中的反射</h3><ul><li><p>在做数据解析的时候，发现不同类别的数据解析的流程是一样的，只不过每次去查询获取数据的时候表不相同，为了代码能够简洁一些，想到了先创建一个父类A，每个数据类别对应一个A的子类，在子类中实现数据查询的方法，然后通过获取A的所有子类对象，用反射机制实例化对象，再调用数据查询的方法来完成所有类别的数据解析工作，这样如果再新增一个类别，只需要再添加一个A的子类对象即可。</p></li><li><p>model/m.py ：创建父类A和它的两个子类B和C</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class A(object):</span><br><span class="line">    def print_name(self):</span><br><span class="line">        print(&#39;this is A&#39;)</span><br><span class="line"> </span><br><span class="line">class B(A):</span><br><span class="line">    def print_name(self):</span><br><span class="line">        print(&#39;this is B&#39;)</span><br><span class="line"> </span><br><span class="line">class C(A):</span><br><span class="line">    def print_name(self):</span><br><span class="line">        print(&#39;this is C&#39;)</span><br></pre></td></tr></table></figure><ul><li>reflect.py</li></ul><blockquote><p>（1）首先获取A的所有子类对象</p></blockquote><blockquote><p>（2）利用反射机制实例化子类对象</p></blockquote><blockquote><p>（3）调用子类对象的print_name方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from model.m import A</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 获取A的所有子类</span><br><span class="line">    sub_class_list &#x3D; A.__subclasses__()</span><br><span class="line">    for i in range(len(sub_class_list)):</span><br><span class="line">        # 获取子类的类名</span><br><span class="line">        class_name&#x3D;sub_class_list[i].__name__</span><br><span class="line">        print(class_name)</span><br><span class="line">        # 导入model模块</span><br><span class="line">        model_module &#x3D; __import__(&#39;model&#39;)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        如果模块导入成功，该模块下的所有py文件会作为模块的属性，</span><br><span class="line">        因此使用getattr(模块，文件名)获取即可</span><br><span class="line">        文件名不需要加.py后缀</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        m_py &#x3D; getattr(model_module, &#39;m&#39;)</span><br><span class="line">        # 根据子类名称从m.py中获取该类</span><br><span class="line">        obj_class_name &#x3D; getattr(m_py, class_name)</span><br><span class="line">        # 实例化对象</span><br><span class="line">        obj &#x3D; obj_class_name()</span><br><span class="line">        # 调用print_name方法</span><br><span class="line">        getattr(obj, &#39;print_name&#39;)()</span><br></pre></td></tr></table></figure><h2 id="web框架上的反射机制"><a href="#web框架上的反射机制" class="headerlink" title="web框架上的反射机制"></a>web框架上的反射机制</h2><ul><li>反射机制常常都是使用在web框架上，比如你浏览某个网页，你点网页上的文字或则图片，则会跳转或者说生成新的页面，这是怎么实现的呢？就是采用反射机制实现的，当你点击某个东西是不是就对应不同的url，而url是字符串的形式，穿进去，就可以通过那几个函数找到对应的实现方法。</li></ul><h3 id="一个基于反射机制模拟的web框架路由"><a href="#一个基于反射机制模拟的web框架路由" class="headerlink" title="一个基于反射机制模拟的web框架路由"></a>一个基于反射机制模拟的web框架路由</h3><ul><li>需求：输入<a href="http://www.xxx.com/commons/fun，则返回fun的结果，不存在则返回404" target="_blank" rel="noopener">www.xxx.com/commons/fun，则返回fun的结果，不存在则返回404</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 动态导入模块，并执行其中函数</span><br><span class="line">url &#x3D; input(&quot;url: &quot;)</span><br><span class="line"> </span><br><span class="line">target_module, target_func &#x3D; url.split(&#39;&#x2F;&#39;)</span><br><span class="line">m &#x3D; __import__(&#39;lib.&#39;+target_module, fromlist&#x3D;True)</span><br><span class="line"> </span><br><span class="line">inp &#x3D; url.split(&quot;&#x2F;&quot;)[-1]  # 分割url,并取出url最后一个字符串</span><br><span class="line">if hasattr(m,target_func):  # 判断在commons模块中是否存在inp这个字符串</span><br><span class="line">    target_func &#x3D; getattr(m,target_func)  # 获取inp的引用</span><br><span class="line">    target_func()  # 执行</span><br><span class="line">else:</span><br><span class="line">    print(&quot;404&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python小知识 </tag>
            
            <tag> 反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架07 -- 通用mapper</title>
      <link href="/2019/09/16/JAVA%E6%A1%86%E6%9E%B607%20--%20%E9%80%9A%E7%94%A8mapper/"/>
      <url>/2019/09/16/JAVA%E6%A1%86%E6%9E%B607%20--%20%E9%80%9A%E7%94%A8mapper/</url>
      
        <content type="html"><![CDATA[<h1 id="通用mapper认识和用法"><a href="#通用mapper认识和用法" class="headerlink" title="通用mapper认识和用法"></a>通用mapper认识和用法</h1><h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><h3 id="什么是通用mapper？"><a href="#什么是通用mapper？" class="headerlink" title="什么是通用mapper？"></a>什么是通用mapper？</h3><ul><li>通用mapper 可以极大的方便开发人员进行ORM，提供极其方便的单表增删改查。</li><li>什么是通用mapper，一句话简单说，它就是个辅助mybatis极简单表开发的组件。它不是为了替代mybatis，而是让mybatis的开发更方便。</li><li>可以按照自己的需要选择通用方法，还能很方便的开发自己的通用方法。</li></ul><h3 id="为什么要用通用mapper？"><a href="#为什么要用通用mapper？" class="headerlink" title="为什么要用通用mapper？"></a>为什么要用通用mapper？</h3><h4 id="原生Mybatis的痛点"><a href="#原生Mybatis的痛点" class="headerlink" title="原生Mybatis的痛点"></a>原生Mybatis的痛点</h4><ul><li>mapper.xml文件里有大量的sql，当数据库表字段变动，配置文件就要修改</li><li>需要自己实现sql分页，select * from table where . . . limit 1,3 自己手写分页，除了传参page、pageSize，还需要返回条目总数count。</li><li>数据库可移植性差：如果项目更换数据库，比如oracle–&gt;mysql，mapper.xml中的sql要重新写，因为Oracle的PLSQL 和mysql 支持的函数是不同的。</li><li>生成的代码量过大。</li><li>批量操作，批量插入，批量更新，需要自写。</li></ul><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="mybatis的config文件：mybatis-mapper-config-xml"><a href="#mybatis的config文件：mybatis-mapper-config-xml" class="headerlink" title="mybatis的config文件：mybatis-mapper-config.xml"></a>mybatis的config文件：mybatis-mapper-config.xml</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;plugins&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 分页插件 --&gt;</span><br><span class="line">&lt;plugin interceptor=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dialect"</span> value=<span class="string">"mysql"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"reasonable"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">&lt;plugin interceptor=<span class="string">"tk.mybatis.mapper.mapperhelper.MapperInterceptor"</span>&gt;</span><br><span class="line">&lt;!--================================================--&gt;</span><br><span class="line">&lt;!--可配置参数说明(一般无需修改)--&gt;</span><br><span class="line">&lt;!--================================================--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--UUID生成策略--&gt;</span><br><span class="line">&lt;!--配置UUID生成策略需要使用OGNL表达式--&gt;</span><br><span class="line">&lt;!--默认值<span class="number">32</span>位长度:<span class="meta">@java</span>.util.UUID<span class="meta">@randomUUID</span>().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>)--&gt;</span><br><span class="line">&lt;!--&lt;property name=<span class="string">"UUID"</span> value=<span class="string">"@java.util.UUID@randomUUID().toString()"</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--主键自增回写方法,默认值MYSQL,详细说明请看文档--&gt;</span><br><span class="line">&lt;property name=<span class="string">"IDENTITY"</span> value=<span class="string">"MYSQL"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--序列的获取规则,使用&#123;num&#125;格式化参数，默认值为&#123;<span class="number">0</span>&#125;.nextval，针对Oracle--&gt;</span><br><span class="line">&lt;!--可选参数一共<span class="number">3</span>个，对应<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,分别为SequenceName，ColumnName,PropertyName--&gt;</span><br><span class="line">&lt;property name=<span class="string">"seqFormat"</span> value=<span class="string">"&#123;0&#125;.nextval"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--主键自增回写方法执行顺序,默认AFTER,可选值为(BEFORE|AFTER)--&gt;</span><br><span class="line">&lt;!--&lt;property name=<span class="string">"ORDER"</span> value=<span class="string">"AFTER"</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--通用Mapper接口，多个通用接口用逗号隔开--&gt;</span><br><span class="line">&lt;property name=<span class="string">"mappers"</span> value=<span class="string">"tk.mybatis.mapper.common.Mapper"</span>/&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="spring与mybatis整合配置文件：mybatis-xml"><a href="#spring与mybatis整合配置文件：mybatis-xml" class="headerlink" title="spring与mybatis整合配置文件：mybatis.xml"></a>spring与mybatis整合配置文件：mybatis.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring与mybatis整合配置，扫描所有dao --&gt;</span><br><span class="line">&lt;beans:bean id=<span class="string">"mapperScannerConfigurer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">        &lt;beans:property name=<span class="string">"sqlSessionFactory"</span> ref=<span class="string">"mybatis.sqlSessionFactory"</span>/&gt;</span><br><span class="line">        &lt;beans:property name=<span class="string">"basePackage"</span> value=<span class="string">"自己的dao包"</span>/&gt;</span><br><span class="line"> &lt;/beans:bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- mybatis文件配置，扫描所有mapper文件 --&gt;</span><br><span class="line">    &lt;beans:bean id=<span class="string">"mybatis.sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">        &lt;beans:property name=<span class="string">"dataSource"</span> ref=<span class="string">"shardingDataSource"</span>/&gt;</span><br><span class="line">        &lt;beans:property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis-mapper-config.xml"</span>/&gt;</span><br><span class="line">        &lt;beans:property name=<span class="string">"mapperLocations"</span>&gt;</span><br><span class="line">            &lt;beans:list&gt;</span><br><span class="line">                &lt;beans:value&gt;classpath:mapper<span class="comment">/**/*.xml&lt;/beans:value&gt;</span></span><br><span class="line"><span class="comment">            &lt;/beans:list&gt;</span></span><br><span class="line"><span class="comment">        &lt;/beans:property&gt;</span></span><br><span class="line"><span class="comment">        &lt;beans:property name="failFast" value="true"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/beans:bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;!-- 对数据源进行事务管理 --&gt;</span></span><br><span class="line"><span class="comment">    &lt;beans:bean name="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;</span></span><br><span class="line"><span class="comment">        &lt;beans:property name="dataSource" ref="dataSource"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/beans:bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;tx:annotation-driven transaction-manager="transactionManager" order="5" proxy-target-class="true"/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用通用Mapper"><a href="#使用通用Mapper" class="headerlink" title="使用通用Mapper"></a>使用通用Mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单dao</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;<span class="doctag">@Author</span> hua&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;<span class="doctag">@Date</span> 2018/11/21&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;<span class="doctag">@Version</span>&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">OrderModel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="这里不止可以继承Mapper，还可以继承其他接口"><a href="#这里不止可以继承Mapper，还可以继承其他接口" class="headerlink" title="这里不止可以继承Mapper，还可以继承其他接口"></a>这里不止可以继承Mapper，还可以继承其他接口</h3><ul><li>BaseMapper：纯增删查改接口</li><li>ConditionMapper ： 选择性地按非空条件查询或者删除或者更新</li><li>ExampleMapper ： 非选择性按所有条件查询或者删除或者更新</li><li>RowBoundsMapper ： 配合分页插件PageHelper可以实现物理分页</li></ul><h3 id="调用dao的方法"><a href="#调用dao的方法" class="headerlink" title="调用dao的方法"></a>调用dao的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">orderDao.</span><br><span class="line">        selectOne(OrderModel record) OrderModel</span><br><span class="line">        select(OrderModel. record) List&lt;OrderModet&gt;</span><br><span class="line">        updateByPrimaryKeySetective(OrderModeL record) <span class="keyword">int</span></span><br><span class="line">        updateByPrimaryKey(OrderModel. record) <span class="keyword">int</span></span><br><span class="line">        delete(OrderModel record) <span class="keyword">int</span> </span><br><span class="line">        deleteByExample(Object example) <span class="keyword">int</span></span><br><span class="line">        deLeteByPrimaryKey(Object key) <span class="keyword">int</span> </span><br><span class="line">        insert(OrderModel record) <span class="keyword">int</span> </span><br><span class="line">        insertSelective(OrderModel record) <span class="keyword">int</span></span><br><span class="line">        selectByExample(Object example) List&lt;OrderModel&gt;</span><br><span class="line">        selectByExampleAndRowBounds(Object example, RowBounds rowB... List&lt;OrderModel&gt;</span><br><span class="line">        selectByPrimaryKey(Object key) OrderModel</span><br><span class="line">        selectByRowBounds(OrderModel record, RowBounds rowBounds) List&lt;OrderModel&gt;  </span><br><span class="line">        selectCount(OrderModel record) <span class="keyword">int</span></span><br><span class="line">        selectCountByExample(Object example) <span class="keyword">int</span></span><br><span class="line">        updateByExample(OrderModel record, Object example) <span class="keyword">int</span></span><br><span class="line">        updateByExampleSelective(OrderModel record, Object example) <span class="keyword">int</span></span><br></pre></td></tr></table></figure><h1 id="初识-tk-mybatis-mapper-通用mapper"><a href="#初识-tk-mybatis-mapper-通用mapper" class="headerlink" title="初识 tk.mybatis.mapper 通用mapper"></a>初识 tk.mybatis.mapper 通用mapper</h1><h2 id="MyBatis-通用-Mapper4"><a href="#MyBatis-通用-Mapper4" class="headerlink" title="MyBatis 通用 Mapper4"></a><a href="https://github.com/abel533/Mapper">MyBatis 通用 Mapper4</a></h2><h2 id="传统Mybatis用法"><a href="#传统Mybatis用法" class="headerlink" title="传统Mybatis用法"></a>传统Mybatis用法</h2><h3 id="Spring-boot"><a href="#Spring-boot" class="headerlink" title="Spring boot"></a>Spring boot</h3><h4 id="引用基本的jar到pom"><a href="#引用基本的jar到pom" class="headerlink" title="引用基本的jar到pom"></a>引用基本的jar到pom</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="sql-数据准备"><a href="#sql-数据准备" class="headerlink" title="sql 数据准备"></a>sql 数据准备</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS category;</span><br><span class="line"><span class="function">CREATE TABLE <span class="title">category</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  category_id   INT PRIMARY KEY,</span></span></span><br><span class="line"><span class="function"><span class="params">  category_name VARCHAR (<span class="number">50</span>)</span> NOT NULL,</span></span><br><span class="line"><span class="function">  description   <span class="title">VARCHAR</span> <span class="params">(<span class="number">100</span>)</span></span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line">DROP TABLE IF EXISTS product;</span><br><span class="line"><span class="function">CREATE TABLE <span class="title">product</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  product_id    INT PRIMARY KEY auto_increment,</span></span></span><br><span class="line"><span class="function"><span class="params">  category_id   INT NOT NULL,</span></span></span><br><span class="line"><span class="function"><span class="params">  product_name  VARCHAR (<span class="number">50</span>)</span> NOT NULL,</span></span><br><span class="line"><span class="function">  price         DECIMAL</span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line">DELETE FROM category;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">category</span> <span class="params">(category_id, category_name, description)</span> VALUES</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">1</span>, <span class="string">'Beverages'</span>, <span class="string">'test'</span>)</span>,</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">2</span>, <span class="string">'Condiments'</span>, <span class="string">'test'</span>)</span>,</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">3</span>, <span class="string">'Oil'</span>, <span class="string">'test'</span>)</span></span>;</span><br><span class="line">  DELETE FROM product;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">product</span> <span class="params">(product_id, category_id, product_name, price)</span> VALUES</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'Northwind Traders Chai'</span>, <span class="number">18.0000</span>)</span>,</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">2</span>, <span class="number">2</span>, <span class="string">'Northwind Traders Syrup'</span>, <span class="number">7.5000</span>)</span>,</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">3</span>, <span class="number">2</span>, <span class="string">'Northwind Traders Cajun Seasoning'</span>, <span class="number">16.5000</span>)</span>,</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">4</span>, <span class="number">3</span>, <span class="string">'Northwind Traders Olive Oil'</span>, <span class="number">16.5000</span>)</span>,</span></span><br><span class="line"><span class="function">  <span class="params">(<span class="number">5</span>, <span class="number">3</span>, <span class="string">'Northwind Traders Olive Oil2'</span>, <span class="number">16.5000</span>)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer productID;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer categoryID;</span><br><span class="line">    <span class="comment">// get/set...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"category"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"category_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer categoryID;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">// get /set...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dao-传统mybatis用法"><a href="#Dao-传统mybatis用法" class="headerlink" title="Dao(传统mybatis用法)"></a>Dao(传统mybatis用法)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Product&gt; <span class="title">getProducts</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h4><ul><li>传统mybatis 我们必须有个xml 文件和Dao 对应起来, tk.maybatis.mapper无需此文件。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.github.wz2cool.demo.tk.mybatis.mapper.ProductDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getProducts"</span> resultType=<span class="string">"com.github.wz2cool.demo.tk.mybatis.model.entity.table.Product"</span>&gt;</span><br><span class="line">        SELECT * FROM product</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="设置扫描包"><a href="#设置扫描包" class="headerlink" title="设置扫描包"></a>设置扫描包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.github.wz2cool.demo.tk.mybatis.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application.properies(传统mybatis配置,tk.maybatis.mapper可以省略这里的配置。)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis.type-aliases-<span class="keyword">package</span>=com.github.wz2cool.demo.tk.mybatis.mapper</span><br><span class="line">mybatis.mapper-locations=classpath:com.github.wz2cool.demo.tk.mybatis.mapper<span class="comment">/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= TestApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SimpleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Product&gt; productList = productDao.getProducts();</span><br><span class="line">        assertEquals(<span class="keyword">true</span>, productList.size() &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tk-mybatis-mapper-用法"><a href="#tk-mybatis-mapper-用法" class="headerlink" title="tk.mybatis.mapper 用法"></a>tk.mybatis.mapper 用法</h2><h3 id="添加引用"><a href="#添加引用" class="headerlink" title="添加引用"></a>添加引用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--mapper--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="继承通用mapper-无xml"><a href="#继承通用mapper-无xml" class="headerlink" title="继承通用mapper(无xml)"></a>继承通用mapper(无xml)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryDao</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Category</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试调用"><a href="#测试调用" class="headerlink" title="测试调用"></a>测试调用</h3><ul><li>dao 里面自带很多方法，比如 selectAll(), insert().</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= TestApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SimpleTkMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryDao categoryDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAllTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Category&gt; categories = categoryDao.selectAll();</span><br><span class="line">        assertEquals(<span class="keyword">true</span>, categories.size() &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Category newCategory = <span class="keyword">new</span> Category();</span><br><span class="line">        newCategory.setCategoryID(<span class="number">1000</span>);</span><br><span class="line">        newCategory.setCategoryName(<span class="string">"test"</span>);</span><br><span class="line">        newCategory.setDescription(<span class="string">"for test"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = categoryDao.insert(newCategory);</span><br><span class="line">        assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> 通用mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程04 -- 设计模式简谈</title>
      <link href="/2019/09/03/python%E7%BC%96%E7%A8%8B04%20--%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E8%B0%88/"/>
      <url>/2019/09/03/python%E7%BC%96%E7%A8%8B04%20--%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容：23种设计模式，用python代码实现</p><p>更新      : 暂时更新了6种设计模式，后续会继续更新，若有问题，请在下方留言或者右下角直接联系</p><a id="more"></a><h2 id="python与设计模式"><a href="#python与设计模式" class="headerlink" title="python与设计模式"></a>python与设计模式</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><blockquote><p>设计模式是面对各种问题进行提炼和抽象而形成的解决方案。这些设计方案是前人不断试验，考虑了封装性、复用性、效率、可修改、可移植等各种因素的高度总结。它不限于一种特定的语言，它是一种解决问题的思想和方法。</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>设计模式可以分为三个大类：创建类设计模式、结构类设计模式、行为类设计模式。</p><ul><li><p>创建类设计模式可以分为</p><blockquote><p>单例模式、工厂模式、抽象工厂模式、原型模式、建造者模式；</p></blockquote></li><li><p>结构类设计模式可以分为</p><blockquote><p>装饰器模式、适配器模式、门面模式、组合模式、享元模式、桥梁模式；</p></blockquote></li><li><p>行为类设计模式可以细分为</p><blockquote><p>策略模式、责任链模式、命令模式、中介者模式、模板模式、迭代器模式、访问者模式、观察者模式、解释器模式、备忘录模式、状态模式。</p></blockquote></li></ul><h3 id="设计模式与软件框架"><a href="#设计模式与软件框架" class="headerlink" title="设计模式与软件框架"></a>设计模式与软件框架</h3><p>设计模式和软件框架在软件设计中是两个不同的研究领域：</p><blockquote><p>A、设计模式如前边的定义所讲，它指的是针对一类问题的解决方法，一个设计模式可应用于不同的框架和被不同的语言所实现；而框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体；</p></blockquote><blockquote><p>B、设计模式相较于框架更容易移植，并且可以用各种语言实现，而软件框架则受限于领域大环境。虽然设计模式和软件框架有很多不同，但在某些方面他们二者是统一的，即重视软件复用，提高开发效率。</p></blockquote><h3 id="软件架构和设计模式"><a href="#软件架构和设计模式" class="headerlink" title="软件架构和设计模式"></a>软件架构和设计模式</h3><p>软件架构可以由不同的框架和不同的设计模式，再加上特定的构件组合来实现；</p><p>框架可以根据设计模式结合特定编程语言和环境来实现。</p><p>设计模式就是解决单一问题的设计思路和解决方法。</p><h2 id="python与设计模式–单例模式"><a href="#python与设计模式–单例模式" class="headerlink" title="python与设计模式–单例模式"></a>python与设计模式–单例模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>单例模式是所有设计模式中比较简单的一类，其定义如下：Ensure a class has only one instance, and provide a global point of access to it.（保证某一个类只有一个实例，而且在全局只有一个访问点）</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>模块：</p><blockquote><p>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc<br>文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysingleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">singleton = Singleton()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> singleton</span><br></pre></td></tr></table></figure></li><li><p>装饰器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span><span class="params">(*args, **kargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instance:</span><br><span class="line">            _instance[cls] = cls(*args, **kargs)</span><br><span class="line">        <span class="keyword">return</span> _instance[cls]</span><br><span class="line">    <span class="keyword">return</span> _singleton</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">a1 = A(<span class="number">2</span>)</span><br><span class="line">a2 = A(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>类(多线程)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton, <span class="string">"_instance"</span>):</span><br><span class="line">            <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton, <span class="string">"_instance"</span>):</span><br><span class="line">                    Singleton._instance = </span><br><span class="line">                    Singleton(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    obj = Singleton.instance()</span><br><span class="line">    print(obj)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br><span class="line">time.sleep(<span class="number">20</span>)</span><br><span class="line">obj = Singleton.instance()</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>基于<strong>new</strong>方法</p><blockquote><p>实例化一个对象时，是先执行了类的<strong>new</strong>方法，实例化对象；然后再执行类的<strong>init</strong>方法，对这个对象进行初始化，所有我们可以基于这个，实现单例模式</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton, <span class="string">"_instance"</span>):</span><br><span class="line">            <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton, <span class="string">"_instance"</span>):</span><br><span class="line">                    Singleton._instance = object.__new__(cls)  </span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line">obj1 = Singleton()</span><br><span class="line">obj2 = Singleton()</span><br><span class="line">print(obj1,obj2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    obj = Singleton()</span><br><span class="line">    print(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></li><li><p>元类metaclass</p></li></ul><pre><code>&gt;1.类由type创建，创建类时，type的__init__方法自动执行，类() </code></pre><p>  执行type的 <strong>call</strong>方法(类的<strong>new</strong>方法,类的<strong>init</strong>方法)</p><pre><code>&gt;2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonType</span><span class="params">(type)</span>:</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_instance"</span>):</span><br><span class="line">            <span class="keyword">with</span> SingletonType._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_instance"</span>):</span><br><span class="line">                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=SingletonType)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Foo(<span class="string">'name'</span>)</span><br><span class="line">obj2 = Foo(<span class="string">'name'</span>)</span><br><span class="line">print(obj1,obj2)</span><br></pre></td></tr></table></figure></code></pre><h3 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h3><ul><li><p>由于单例模式要求在全局内只有一个实例，因而可以节省比较多的内存空间；</p></li><li><p>全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用；</p></li><li><p>单例可长驻内存，减少系统开销。</p></li><li><p>单例模式的应用举例：</p><blockquote><p>1、生成全局惟一的序列号；</p></blockquote><blockquote><p>2、访问全局复用的惟一资源，如磁盘、总线等；</p></blockquote><blockquote><p>3、单个对象占用的资源过多，如数据库等；</p></blockquote><blockquote><p>4、系统全局统一管理，如Windows下的Task Manager；</p></blockquote><blockquote><p>5、网站计数器。</p></blockquote></li></ul><h2 id="python设计模式–工厂模式"><a href="#python设计模式–工厂模式" class="headerlink" title="python设计模式–工厂模式"></a>python设计模式–工厂模式</h2><blockquote><p>通过一个指定的“工厂”获得需要的“产品”，在设计模式中主要用于抽象对象的创建过程，让用户可以指定自己想要的对象而不必关心对象的实例化过程。这样做的好处是用户只需通过固定的接口而不是直接去调用类的实例化方法来获得一个对象的实例，隐藏了实例创建过程的复杂度，解耦了生产实例和使用实例的代码，降低了维护的复杂性。</p></blockquote><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><pre><code>#coding=utf-8class Mercedes(object):    &quot;&quot;&quot;梅赛德斯    &quot;&quot;&quot;    def __repr__(self):        return &quot;Mercedes-Benz&quot;class BMW(object):    &quot;&quot;&quot;宝马    &quot;&quot;&quot;    def __repr__(self):        return &quot;BMW&quot; </code></pre><blockquote><p>假设我们有两个“产品”分别是Mercedes和BMW的汽车，如果没有“工厂”来生产它们，<br>我们就要在代码中自己进行实例化，如：</p></blockquote><pre><code>mercedes = Mercedes()bmw = BMW()</code></pre><blockquote><p>但现实中，你可能会面对很多汽车产品，而且每个产品的构造参数还不一样，这样在创<br>建实例时会遇到麻烦。这时就可以构造一个“简单工厂”把所有汽车实例化的过程封装在里面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleCarFactory</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""简单工厂</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span><span class="params">(name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'mb'</span>:</span><br><span class="line">            <span class="keyword">return</span> Mercedes()</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">'bmw'</span>:</span><br><span class="line">            <span class="keyword">return</span> BMW()</span><br><span class="line">SimpleCarFactory类后，就可以通过向固定的接口传入参数获得想要的对象实例</span><br><span class="line"></span><br><span class="line">c1 = SimpleCarFactory.product_car(<span class="string">'mb'</span>)</span><br><span class="line">c2 = SimpleCarFactory.product_car(<span class="string">'bmw'</span>)</span><br></pre></td></tr></table></figure><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><blockquote><p>如果我们要新增一个“产品”，例如Audi的汽车，我们除了新增一个Audi类外还要修改SimpleCarFactory内的product_car方法。这样就违背了软件设计中的开闭原则[1]，即在扩展新的类时，尽量不要修改原有代码。</p><p>所以我们在简单工厂的基础上把SimpleCarFactory抽象成不同的工厂，每个工厂对应生成自己的产品，这就是工厂方法。</p></blockquote><pre><code>#coding=utf-8import abcclass AbstractFactory(object):    &quot;&quot;&quot;抽象工厂    &quot;&quot;&quot;    __metaclass__ = abc.ABCMeta    @abc.abstractmethod    def product_car(self):        passclass MercedesFactory(AbstractFactory):    &quot;&quot;&quot;梅赛德斯工厂    &quot;&quot;&quot;    def product_car(self):        return Mercedes()class BMWFactory(AbstractFactory):    &quot;&quot;&quot;宝马工厂    &quot;&quot;&quot;    def product_car(self):        return BMW()</code></pre><blockquote><p>我们把工厂抽象出来用abc模块[2]实现了一个抽象的基类AbstractFactory，<br>这样就可以通过特定的工厂来获得特定的产品实例了：</p></blockquote><pre><code>c1 = MercedesFactory().product_car()c2 = BMWFactory().product_car()</code></pre><blockquote><p>每个工厂负责生产自己的产品也避免了我们在新增产品时需要修改工厂的代码，<br>而只要增加相应的工厂即可。如新增一个Audi产品，只需新增一个Audi类和AudiFactory类。</p></blockquote><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><blockquote><p>如果我们要生产很多产品，就会发现我们同样需要写很多对应的工厂类。比如如果MercedesFactory和BMWFactory不仅生产小汽车，还要生产SUV，那我们用工厂方法就要再多构造两个生产SUV的工厂类。所以为了解决这个问题，我们就要再更进一步的抽象工厂类，让一个工厂可以生产同一类的多个产品，这就是抽象工厂</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种小汽车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mercedes_C63</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""梅赛德斯 C63</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mercedes-Benz: C63"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW_M3</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""宝马 M3</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BMW: M3"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#　两种SUV</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mercedes_G63</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""梅赛德斯 G63</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mercedes-Benz: G63"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW_X5</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""宝马 X5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BMW: X5"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""抽象工厂</span></span><br><span class="line"><span class="string">    可以生产小汽车外，还可以生产SUV</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __metaclass__ = abc.ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_suv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MercedesFactory</span><span class="params">(AbstractFactory)</span>:</span></span><br><span class="line">    <span class="string">"""梅赛德斯工厂</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Mercedes_C63()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_suv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Mercedes_G63()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWFactory</span><span class="params">(AbstractFactory)</span>:</span></span><br><span class="line">    <span class="string">"""宝马工厂</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BMW_M3()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_suv</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BMW_X5()</span><br></pre></td></tr></table></figure><blockquote><p>让基类AbstractFactory同时可以生产汽车和SUV，然后令MercedesFactory和BMWFactory继承AbstractFactory并重写product_car和product_suv方法即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c1 = MercedesFactory().product_car()</span><br><span class="line">s1 = MercedesFactory().product_suv()</span><br><span class="line">print(c1, s1)</span><br><span class="line">s2 = BMWFactory().product_suv()</span><br><span class="line">c2 = BMWFactory().product_car()</span><br><span class="line">print(c2, s2)</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式与工厂方法模式区别"><a href="#抽象工厂模式与工厂方法模式区别" class="headerlink" title="抽象工厂模式与工厂方法模式区别"></a>抽象工厂模式与工厂方法模式区别</h3><ul><li>抽象工厂中的一个工厂对象可以负责多个不同产品对象的创建 ，这样比工厂方法模式更为简单、有效率。</li></ul><ul><li><p>工厂模式、抽象工厂模式的优点：</p><blockquote><p>1、工厂模式巨有非常好的封装性，代码结构清晰；在抽象工厂模式中，其结构还可以随着需要进行更深或者更浅的抽象层级调整，非常灵活；</p></blockquote><blockquote><p>2、屏蔽产品类，使产品的被使用业务场景和产品的功能细节可以分而开发进行，是比较典型的解耦框架。</p></blockquote></li></ul><ul><li><p>工厂模式、抽象工厂模式的使用场景：</p><blockquote><p>当系统实例要求比较灵活和可扩展时，可以考虑工厂模式或者抽象工厂模式实现。比如，</p></blockquote><blockquote><blockquote><p>在通信系统中，高层通信协议会很多样化，同时，上层协议依赖于下层协议，</p><pre><code>那么就可以对应建立对应层级的抽象工厂，根据不同的“产品需求”去生产定制的实例。</code></pre></blockquote></blockquote></li></ul><h2 id="python与设计模式–建造者模式"><a href="#python与设计模式–建造者模式" class="headerlink" title="python与设计模式–建造者模式"></a>python与设计模式–建造者模式</h2><blockquote><p>建造者模式的定义如下：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><blockquote><p>在建造者模式中，还可以加一个Director类，用以安排已有模块的构造步骤。对于在建造者中有比较严格的顺序要求时，该类会有比较大的用处。</p></blockquote><h3 id="快餐例"><a href="#快餐例" class="headerlink" title="快餐例"></a>快餐例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">主餐</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Burger</span><span class="params">()</span>:</span></span><br><span class="line">    name=<span class="string">""</span></span><br><span class="line">    price=<span class="number">0.0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self,price)</span>:</span></span><br><span class="line">        self.price=price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cheeseBurger</span><span class="params">(Burger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name=<span class="string">"cheese burger"</span></span><br><span class="line">        self.price=<span class="number">10.0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spicyChickenBurger</span><span class="params">(Burger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name=<span class="string">"spicy chicken burger"</span></span><br><span class="line">        self.price=<span class="number">15.0</span></span><br><span class="line">小食</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snack</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">""</span></span><br><span class="line">    price = <span class="number">0.0</span></span><br><span class="line">    type = <span class="string">"SNACK"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.price = price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chips</span><span class="params">(Snack)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"chips"</span></span><br><span class="line">        self.price = <span class="number">6.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chickenWings</span><span class="params">(Snack)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"chicken wings"</span></span><br><span class="line">        self.price = <span class="number">12.0</span></span><br><span class="line">饮料</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beverage</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">""</span></span><br><span class="line">    price = <span class="number">0.0</span></span><br><span class="line">    type = <span class="string">"BEVERAGE"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.price = price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">coke</span><span class="params">(Beverage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"coke"</span></span><br><span class="line">        self.price = <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milk</span><span class="params">(Beverage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"milk"</span></span><br><span class="line">        self.price = <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">一个订单类。假设，一个订单，包括一份主食，一份小食，一种饮料。（省去一些异常判断）</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">order</span><span class="params">()</span>:</span></span><br><span class="line">    burger=<span class="string">""</span></span><br><span class="line">    snack=<span class="string">""</span></span><br><span class="line">    beverage=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,orderBuilder)</span>:</span></span><br><span class="line">        self.burger=orderBuilder.bBurger</span><br><span class="line">        self.snack=orderBuilder.bSnack</span><br><span class="line">        self.beverage=orderBuilder.bBeverage</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Burger:%s"</span>%self.burger.getName()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Snack:%s"</span>%self.snack.getName()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Beverage:%s"</span>%self.beverage.getName()</span><br><span class="line"></span><br><span class="line">orderBuilder就是建造者模式中所谓的“建造者”了</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">orderBuilder</span><span class="params">()</span>:</span></span><br><span class="line">    bBurger=<span class="string">""</span></span><br><span class="line">    bSnack=<span class="string">""</span></span><br><span class="line">    bBeverage=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBurger</span><span class="params">(self,xBurger)</span>:</span></span><br><span class="line">        self.bBurger=xBurger</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addSnack</span><span class="params">(self,xSnack)</span>:</span></span><br><span class="line">        self.bSnack=xSnack</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBeverage</span><span class="params">(self,xBeverage)</span>:</span></span><br><span class="line">        self.bBeverage=xBeverage</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> order(self)</span><br><span class="line">        </span><br><span class="line">订单生成</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    order_builder=orderBuilder()</span><br><span class="line">    order_builder.addBurger(spicyChickenBurger())</span><br><span class="line">    order_builder.addSnack(chips())</span><br><span class="line">    order_builder.addBeverage(milk())</span><br><span class="line">    order_1=order_builder.build()</span><br><span class="line">    order_1.show()</span><br><span class="line">    </span><br><span class="line">构造步骤</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">orderDirector</span><span class="params">()</span>:</span></span><br><span class="line">    order_builder=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,order_builder)</span>:</span></span><br><span class="line">        self.order_builder=order_builder</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createOrder</span><span class="params">(self,burger,snack,beverage)</span>:</span></span><br><span class="line">        self.order_builder.addBurger(burger)</span><br><span class="line">        self.order_builder.addSnack(snack)</span><br><span class="line">        self.order_builder.addBeverage(beverage)</span><br><span class="line">        <span class="keyword">return</span> self.order_builder.build()</span><br></pre></td></tr></table></figure><h3 id="优缺"><a href="#优缺" class="headerlink" title="优缺"></a>优缺</h3><ul><li>封装性好，用户可以不知道对象的内部构造和细节，就可以直接建造对象；</li><li>系统扩展容易；</li><li>建造者模式易于使用，非常灵活。在构造性的场景中很容易实现“流水线”；</li><li>便于控制细节。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>1、 目标对象由组件构成的场景中，很适合建造者模式。例如，在一款赛车游戏中，车辆生成时，需要根据级别、环境等，选择轮胎、悬挂、骨架等部件，构造一辆“赛车”；</p></blockquote><blockquote><p>2、 在具体的场景中，对象内部接口需要根据不同的参数而调用顺序有所不同时，可以使用建造者模式。例如：一个植物养殖器系统，对于某些不同的植物，浇水、施加肥料的顺序要求可能会不同，因而可以在Director中维护一个类似于队列的结构，在实例化时作为参数代入到具体建造者中。</p></blockquote><ul><li>1、“加工工艺”对用户不透明。（封装的两面性）</li></ul><h2 id="python设计模式–原型模式"><a href="#python设计模式–原型模式" class="headerlink" title="python设计模式–原型模式"></a>python设计模式–原型模式</h2><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote><p>原型模式定义如下：用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p><p>需要注意一点的是，进行clone操作后，新对象的构造函数没有被二次执行，新对象的内容是从内存里直接拷贝的。</p></blockquote><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.png?Expires=1583401378&OSSAccessKeyId=TMP.hjzwA1W8gdfwGYQiZhQj532K76mLsnUgxQig1drP5sh5sfu3834QWivvphqsqQvUdTTAwnmfBTwjfGjcmGniQbdsbY1TZ8ekqNKCcN4cFT2FJZ7jaEMrH2anxm9geg.tmp&Signature=ReWJziv80VCXPSmsiC2z2x0ir%2Bk%3D" alt="原型模式"></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><blockquote><p>从简历原型，生成新的简历</p><p>简历类Resume提供的Clone()方法其实并不是真正的Clone，只是为已存在对象增加了一次引用。</p><p>Python为对象提供的copy模块中的copy方法和deepcopy方法已经实现了原型模式，但由于例子的层次较浅，二者看不出区别。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkExp</span>:</span></span><br><span class="line">    place=<span class="string">""</span></span><br><span class="line">    year=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resume</span>:</span></span><br><span class="line">    name = <span class="string">''</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        self.name = n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetAge</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        self.age = a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetWorkExp</span><span class="params">(self,p,y)</span>:</span></span><br><span class="line">        self.place = p</span><br><span class="line">        self.year = y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Display</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.age</span><br><span class="line">        <span class="keyword">print</span> self.place</span><br><span class="line">        <span class="keyword">print</span> self.year</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clone</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment">#实际不是“克隆”，只是返回了自身</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = Resume(<span class="string">"a"</span>)</span><br><span class="line">    b = a.Clone()</span><br><span class="line">    c = copy.copy(a)</span><br><span class="line">    d = copy.deepcopy(a)</span><br><span class="line">    a.SetAge(<span class="number">7</span>)</span><br><span class="line">    b.SetAge(<span class="number">12</span>)</span><br><span class="line">    c.SetAge(<span class="number">15</span>)</span><br><span class="line">    d.SetAge(<span class="number">18</span>)</span><br><span class="line">    a.SetWorkExp(<span class="string">"PrimarySchool"</span>,<span class="number">1996</span>)</span><br><span class="line">    b.SetWorkExp(<span class="string">"MidSchool"</span>,<span class="number">2001</span>)</span><br><span class="line">    c.SetWorkExp(<span class="string">"HighSchool"</span>,<span class="number">2004</span>)</span><br><span class="line">    d.SetWorkExp(<span class="string">"University"</span>,<span class="number">2007</span>)</span><br><span class="line">    a.Display()</span><br><span class="line">    b.Display()</span><br><span class="line">    c.Display()</span><br><span class="line">    d.Display()</span><br></pre></td></tr></table></figure><h3 id="原型模式的优缺点和使用场景"><a href="#原型模式的优缺点和使用场景" class="headerlink" title="原型模式的优缺点和使用场景"></a>原型模式的优缺点和使用场景</h3><ul><li><p>优点：</p><blockquote><p>1、性能极佳，直接拷贝比在内存里直接新建实例节省不少的资源；</p></blockquote><blockquote><p>2、简化对象创建，同时避免了构造函数的约束，不受构造函数的限制直接复制对象，是优点，也有隐患，这一点还是需要多留意一些。</p></blockquote></li><li><p>使用场景：</p><blockquote><p>1、对象在修改过后，需要复制多份的场景。如本例和其它一些涉及到复制、粘贴的场景；</p></blockquote><blockquote><p>2、需要优化资源的情况。如，需要在内存中创建非常多的实例，可以通过原型模式来减少资源消耗。此时，原型模式与工厂模式配合起来，不管在逻辑上还是结构上，都会达到不错的效果；</p></blockquote><blockquote><p>3、某些重复性的复杂工作不需要多次进行。如对于一个设备的访问权限，多个对象不用各申请一遍权限，由一个设备申请后，通过原型模式将权限交给可信赖的对象，既可以提升效率，又可以节约资源。</p></blockquote></li><li><p>原型模式的缺点</p><blockquote><p>1、深拷贝和浅拷贝的使用需要事先考虑周到；</p></blockquote><blockquote><p>2、某些编程语言中，拷贝会影响到静态变量和静态函数的使用。</p></blockquote></li></ul><h2 id="Python与设计模式–代理模式"><a href="#Python与设计模式–代理模式" class="headerlink" title="Python与设计模式–代理模式"></a>Python与设计模式–代理模式</h2><p>代理模式是一种使用频率非常高的模式，在多个著名的开源软件和当前多个著名的互联网产品后台程序中都有所应用。下面我们用一个抽象化的简单例子，来说明代理模式。</p><blockquote><p>首先，构造一个网络服务器：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该服务器接受如下格式数据，addr代表地址，content代表接收的信息内容</span></span><br><span class="line">info_struct=dict()</span><br><span class="line">info_struct[<span class="string">"addr"</span>]=<span class="number">10000</span></span><br><span class="line">info_struct[<span class="string">"content"</span>]=<span class="string">""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    content=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">infoServer</span><span class="params">(Server)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        self.content=info</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"recv OK!"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"SHOW:%s"</span>%self.content</span><br></pre></td></tr></table></figure><blockquote><p>infoServer有接收和发送的功能，发送功能由于暂时用不到，保留。另外新加一个接口show，用来展示服务器接收的内容。接收的数据格式必须如info_struct所示，服务器仅接受info_struct的content字段。</p></blockquote><blockquote><p>那么，如何给这个服务器设置一个白名单，使得只有白名单里的地址可以访问服务器呢？</p></blockquote><blockquote><blockquote><p>修改Server结构是个方法，但这显然不符合软件设计原则中的单一职责原则。</p></blockquote></blockquote><blockquote><p>在此基础之上，使用代理，是个不错的方法。代理配置如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">serverProxy</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">infoServerProxy</span><span class="params">(serverProxy)</span>:</span></span><br><span class="line">    server=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,server)</span>:</span></span><br><span class="line">        self.server=server</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.server.recv(info)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.server.show()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">whiteInfoServerProxy</span><span class="params">(infoServerProxy)</span>:</span></span><br><span class="line">    white_list=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> type(info)==dict</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"info structure is not correct"</span></span><br><span class="line">        addr=info.get(<span class="string">"addr"</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> addr <span class="keyword">in</span> self.white_list:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Your address is not in the white list."</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            content=info.get(<span class="string">"content"</span>,<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">return</span> self.server.recv(content)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWhite</span><span class="params">(self,addr)</span>:</span></span><br><span class="line">        self.white_list.append(addr)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rmvWhite</span><span class="params">(self,addr)</span>:</span></span><br><span class="line">        self.white_list.remove(addr)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearWhite</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.white_list=[]</span><br></pre></td></tr></table></figure><blockquote><p>代理中有一个server字段，控制代理的服务器对象，infoServerProxy充当Server的直接接口代理，而whiteInfoServerProxy直接继承了infoServerProxy对象，同时加入了white_list和对白名单的操作。</p><p>这样，在场景中通过对白名单代理的访问，就可以实现服务器的白名单访问了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    info_struct = dict()</span><br><span class="line">    info_struct[<span class="string">"addr"</span>] = <span class="number">10010</span></span><br><span class="line">    info_struct[<span class="string">"content"</span>] = <span class="string">"Hello World!"</span></span><br><span class="line">    info_server = infoServer()</span><br><span class="line">    info_server_proxy = whiteInfoServerProxy(info_server)</span><br><span class="line">    <span class="keyword">print</span> info_server_proxy.recv(info_struct)</span><br><span class="line">    info_server_proxy.show()</span><br><span class="line">    info_server_proxy.addWhite(<span class="number">10010</span>)</span><br><span class="line">    <span class="keyword">print</span> info_server_proxy.recv(info_struct)</span><br><span class="line">    info_server_proxy.show()</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li>代理模式定义如下：为某对象提供一个代理，以控制对此对象的访问和控制。代理模式在使用过程中，应尽量对抽象主题类进行代理，而尽量不要对加过修饰和方法的子类代理。为其他对象提供一种代理以控制对这个对象的访问。</li></ul><blockquote><p>如上例中，如果有一个xServer继承了Server，并新加了方法xMethod，xServer的代理应以Server为主题进行设计，而尽量不要以xServer为主题，以xServer为主题的代理可以从ServerProxy继承并添加对应的方法.</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png?Expires=1583401426&OSSAccessKeyId=TMP.hjzwA1W8gdfwGYQiZhQj532K76mLsnUgxQig1drP5sh5sfu3834QWivvphqsqQvUdTTAwnmfBTwjfGjcmGniQbdsbY1TZ8ekqNKCcN4cFT2FJZ7jaEMrH2anxm9geg.tmp&Signature=xVaESBwlUkqjZwnqDyJXHO4VCAM%3D" alt="代理模式"></p><blockquote><p>在JAVA中，讲到代理模式，不得不会提到动态代理。动态代理是实现AOP（面向切面编程）的重要实现手段。而在Python中，很少会提到动态代理，而AOP则会以另一种模式实现：装饰模式。有关AOP的相关内容，我们会在装饰模式这一节中进行说明。</p></blockquote><h3 id="代理模式的优缺点和应用场景"><a href="#代理模式的优缺点和应用场景" class="headerlink" title="代理模式的优缺点和应用场景"></a>代理模式的优缺点和应用场景</h3><ul><li><p>优点:</p><blockquote><p>1、职责清晰：非常符合单一职责原则，主题对象实现真实业务逻辑，而非本职责</p><pre><code>的事务，交由代理完成；</code></pre></blockquote><blockquote><p>2、扩展性强：面对主题对象可能会有的改变，代理模式在不改变对外接口的情况</p><pre><code>下，可以实现最大程度的扩展；</code></pre></blockquote><blockquote><p>3、保证主题对象的处理逻辑：代理可以通过检查参数的方式，保证主题对象的处</p><pre><code>理逻辑输入在理想范围内。</code></pre></blockquote></li><li><p>应用场景：</p><blockquote><p>1、针对某特定对象进行功能和增强性扩展。如IP防火墙、远程访问代理等技术的应用；</p></blockquote><blockquote><p>2、对主题对象进行保护。如大流量代理，安全代理等；</p></blockquote><blockquote><p>3、减轻主题对象负载。如权限代理等。</p></blockquote></li><li><p>代理模式的缺点</p><blockquote><p>1、可能会降低整体业务的处理效率和速度。</p></blockquote></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><blockquote><p>同模式特点描述</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interface</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span><span class="params">(Interface)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Real request."</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span><span class="params">(Interface)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.real = RealSubject()</span><br><span class="line">        self.real.Request()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p = Proxy()</span><br><span class="line">    p.Request()</span><br></pre></td></tr></table></figure><h2 id="python与设计模式–装饰器模式"><a href="#python与设计模式–装饰器模式" class="headerlink" title="python与设计模式–装饰器模式"></a>python与设计模式–装饰器模式</h2><h3 id="快餐点餐系统（3）"><a href="#快餐点餐系统（3）" class="headerlink" title="快餐点餐系统（3）"></a>快餐点餐系统（3）</h3><ul><li><p>又提到了那个快餐点餐系统，不过今天我们只以其中的一个类作为主角：饮料类。首先，回忆下饮料类：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beverage</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">""</span></span><br><span class="line">    price = <span class="number">0.0</span></span><br><span class="line">    type = <span class="string">"BEVERAGE"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.price = price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">coke</span><span class="params">(Beverage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"coke"</span></span><br><span class="line">        self.price = <span class="number">4.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milk</span><span class="params">(Beverage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"milk"</span></span><br><span class="line">        self.price = <span class="number">5.0</span></span><br></pre></td></tr></table></figure></li><li><p>除了基本配置，快餐店卖可乐时，可以选择加冰，如果加冰的话，要在原价上加0.3元；卖牛奶时，可以选择加糖，如果加糖的话，要原价上加0.5元。怎么解决这样的问题？可以选择装饰器模式来解决这一类的问题。首先，定义装饰器类：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">drinkDecorator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iceDecorator</span><span class="params">(drinkDecorator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,beverage)</span>:</span></span><br><span class="line">        self.beverage=beverage</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.beverage.getName()+<span class="string">" +ice"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.beverage.getPrice()+<span class="number">0.3</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sugarDecorator</span><span class="params">(drinkDecorator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,beverage)</span>:</span></span><br><span class="line">        self.beverage=beverage</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.beverage.getName()+<span class="string">" +sugar"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.beverage.getPrice()+<span class="number">0.5</span></span><br></pre></td></tr></table></figure></li><li><p>构建好装饰器后，在具体的业务场景中，就可以与饮料类进行关联。以可乐+冰为例，示例业务场景如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    coke_cola=coke()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Name:%s"</span>%coke_cola.getName()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Price:%s"</span>%coke_cola.getPrice()</span><br><span class="line">    ice_coke=iceDecorator(coke_cola)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Name:%s"</span> % ice_coke.getName()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Price:%s"</span> % ice_coke.getPrice()</span><br><span class="line">    </span><br><span class="line">打印结果如下：</span><br><span class="line">Name:coke</span><br><span class="line">Price:<span class="number">4.0</span></span><br><span class="line">Name:coke +ice</span><br><span class="line">Price:<span class="number">4.3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><ul><li><p>装饰器模式定义</p><blockquote><p>动态地给一个对象添加一些额外的职责。在增加功能方面，装饰器模式比生成子类更为灵活。</p></blockquote></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.png?Expires=1583401457&OSSAccessKeyId=TMP.hjzwA1W8gdfwGYQiZhQj532K76mLsnUgxQig1drP5sh5sfu3834QWivvphqsqQvUdTTAwnmfBTwjfGjcmGniQbdsbY1TZ8ekqNKCcN4cFT2FJZ7jaEMrH2anxm9geg.tmp&Signature=Ojmvg9jItDKOODSgU0UTjy92zYM%3D" alt="装饰器模式"></p><blockquote><p>装饰器模式和上一节说到的代理模式非常相似，可以认为，装饰器模式就是代理模式的一个特殊应用，两者的共同点是都具有相同的接口，不同点是侧重对主题类的过程的控制，而装饰模式则侧重对类功能的加强或减弱。动态地为对象增加额外的职责</p></blockquote><blockquote><p>上一次说到，JAVA中的动态代理模式，是实现AOP的重要手段。而在Python中，AOP通过装饰器模式实现更为简洁和方便。</p></blockquote><ul><li><p>AOP</p><blockquote><p>AOP即Aspect Oriented Programming，中文翻译为面向切面的编程，它的含义可以解释为：如果几个或更多个逻辑过程中（这类逻辑过程可能位于不同的对象，不同的接口当中），有重复的操作行为，就可以将这些行为提取出来（即形成切面），进行统一管理和维护。举例子说，系统中需要在各个地方打印日志，就可以将打印日志这一操作提取出来，作为切面进行统一维护。</p></blockquote></li></ul><pre><code>&gt;从编程思想的关系来看，可以认为AOP和OOP（面向对象的编程）是并列关系，二者是可以替换的，也可以结合起来用。&gt;实际上，在Python语言中，是天然支持装饰器的，如下例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call %s():'</span> % func.__name__</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'2016-12-04'</span></span><br><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    now()</span><br><span class="line">打印如下：</span><br><span class="line">call now():</span><br><span class="line"><span class="number">2016</span><span class="number">-12</span><span class="number">-04</span></span><br></pre></td></tr></table></figure>&gt;log接口就是装饰器的定义，而Python的@语法部分则直接支持装饰器的使用。如果要在快餐点餐系统中打印日志，该如何进行AOP改造呢？可以借助类的静态方法或者类方法来实现：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogManager</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Visit Func %s"</span>%func.__name__</span><br><span class="line">            <span class="keyword">return</span> func(*args)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">在需要打印日志的地方直接@LogManager.log，即可打印出访问的日志信息。</span><br><span class="line">如，在beverage类的函数前加上@LogManager.log，场景类保持不变，则打印结果如下：</span><br><span class="line">Visit Func getName</span><br><span class="line">Name:coke</span><br><span class="line">Visit Func getPrice</span><br><span class="line">Price:<span class="number">4.0</span></span><br><span class="line">Visit Func getName</span><br><span class="line">Name:coke +ice</span><br><span class="line">Visit Func getPrice</span><br><span class="line">Price:<span class="number">4.3</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="装饰器模式的优点和应用场景"><a href="#装饰器模式的优点和应用场景" class="headerlink" title="装饰器模式的优点和应用场景"></a>装饰器模式的优点和应用场景</h3><ul><li><p>优点：</p><blockquote><p>1、装饰器模式是继承方式的一个替代方案，可以轻量级的扩展被装饰对象的功能；</p></blockquote><blockquote><p>2、Python的装饰器模式是实现AOP的一种方式，便于相同操作位于不同调用位置的统一管理。</p></blockquote></li><li><p>应用场景：</p><blockquote><p>1、需要扩展、增强或者减弱一个类的功能，如本例。</p></blockquote></li><li><p>装饰器模式的缺点</p><blockquote><p>1、多层装饰器的调试和维护有比较大的困难。</p></blockquote></li></ul><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><ul><li><p>展示一个人一件一件穿衣服的过程。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,tname)</span>:</span></span><br><span class="line">        self.name = tname</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Show</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"dressed %s"</span> %(self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Finery</span><span class="params">(Person)</span>:</span></span><br><span class="line">    componet = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decorate</span><span class="params">(self,ct)</span>:</span></span><br><span class="line">        self.componet = ct</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Show</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(self.componet!=<span class="literal">None</span>):</span><br><span class="line">        self.componet.Show()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TShirts</span><span class="params">(Finery)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Big T-shirt "</span></span><br><span class="line">        self.componet.Show()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigTrouser</span><span class="params">(Finery)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Big Trouser "</span></span><br><span class="line">        self.componet.Show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    p = Person(<span class="string">"somebody"</span>)</span><br><span class="line">    bt = BigTrouser()</span><br><span class="line">    ts = TShirts()</span><br><span class="line">    bt.Decorate(p)</span><br><span class="line">    ts.Decorate(bt)</span><br><span class="line">    ts.Show()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python编程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架10 -- SpringCloud</title>
      <link href="/2019/07/17/JAVA%E6%A1%86%E6%9E%B610%20--%20SpringCloud/"/>
      <url>/2019/07/17/JAVA%E6%A1%86%E6%9E%B610%20--%20SpringCloud/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p>微服务是一种架构方式，最终肯定需要技术架构去实施。</p><p>微服务的实现方式很多，但是最火的莫过于Spring Cloud了。为什么？</p><ul><li>后台硬：作为Spring家族的一员，有整个Spring全家桶靠山，背景十分强大。</li><li>技术强：Spring作为Java领域的前辈，可以说是功力深厚。有强力的技术团队支撑，一般人还真比不了</li><li>群众基础好：可以说大多数程序员的成长都伴随着Spring框架，试问：现在有几家公司开发不用Spring？SpringCloud与Spring的各个框架无缝整合，对大家来说一切都是熟悉的配方，熟悉的味道。</li><li>使用方便：相信大家都体会到了SpringBoot给我们开发带来的便利，而SpringCloud完全支持SpringBoot的开发，用很少的配置就能完成微服务框架的搭建</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringCloud是Spring旗下的项目之一，<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">官网地址：http://projects.spring.io/spring-cloud/</a></p><p>Spring最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。</p><p>SpringCloud也是一样，它将现在非常流行的一些技术整合到一起，实现了诸如：配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态等等功能。其主要涉及的组件包括：</p><p>netflix</p><ul><li>Eureka：注册中心</li><li>Zuul：服务网关</li><li>Ribbon：负载均衡</li><li>Feign：服务调用</li><li>Hystix：熔断器</li></ul><p>以上只是其中一部分，架构图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525575656796.png" alt=""></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>SpringCloud的版本命名比较特殊，因为它不是一个组件，而是许多组件的集合，它的命名是以A到Z的为首字母的一些单词组成：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525575903675.png" alt=""></p><p>后面会是以Finchley的版本。</p><h1 id="微服务场景模拟"><a href="#微服务场景模拟" class="headerlink" title="微服务场景模拟"></a>微服务场景模拟</h1><p>首先，我们需要模拟一个服务调用的场景。方便后面学习微服务架构</p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>我们新建一个项目，对外提供查询用户的服务。</p><h3 id="Spring脚手架创建工程"><a href="#Spring脚手架创建工程" class="headerlink" title="Spring脚手架创建工程"></a>Spring脚手架创建工程</h3><ul><li>借助于Spring提供的快速搭建工具</li><li>添加web依赖</li><li>添加mybatis依赖</li><li>生成的项目结构</li><li>依赖也已经全部自动引入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>user-service-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，因为要使用通用mapper，所以我们需要手动加一条依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>添加一个对外查询的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">tk</span>.<span class="title">mybatis</span>.<span class="title">mapper</span>.<span class="title">common</span>.<span class="title">Mapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    。。。</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 。。。省略getters和setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性文件,这里我们采用了yaml语法，而不是properties：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.userservice.pojo</span></span><br></pre></td></tr></table></figure><p>项目结构：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525577911331.png" alt=""></p><h3 id="启动并测试"><a href="#启动并测试" class="headerlink" title="启动并测试"></a>启动并测试</h3><p>启动项目，访问接口：<a href="http://localhost:8081/user/7" target="_blank" rel="noopener">http://localhost:8081/user/7</a></p><h2 id="服务调用者"><a href="#服务调用者" class="headerlink" title="服务调用者"></a>服务调用者</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>与上面类似，这里不再赘述，需要注意的是，我们调用user-service的功能，因此不需要mybatis相关依赖了。</p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-consumer-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>user-consumer-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加OkHttp支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>首先在启动类中注册<code>RestTemplate</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这次我们使用了OkHttp客户端,只需要注入工厂即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写UserDao，注意，这里不是调用mapper查数据库，而是通过RestTemplate远程查询user-service-demo中的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        String url = <span class="string">"http://localhost:8081/user/"</span> + id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(url, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写user-service，循环查询UserDAO信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">querUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            User user = <span class="keyword">this</span>.userDao.queryUserById(id);</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consume"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">consume</span><span class="params">(@RequestParam(<span class="string">"ids"</span>)</span> List&lt;Long&gt; ids) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.queryUserByIds(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试："><a href="#启动测试：" class="headerlink" title="启动测试："></a>启动测试：</h3><p>因为我们没有配置端口，那么默认就是8080，我们访问：<a href="http://localhost:8080/consume?ids=6,7,8" target="_blank" rel="noopener">http://localhost:8080/consume?ids=6,7,8</a></p><p>一个简单的远程服务调用案例就实现了。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>use-service-demo：一个提供根据id查询用户的微服务</li><li>consumer-demo：一个服务调用者，通过RestTemplate远程调用user-service-demo</li></ul><p>流程如下：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525595012668.png" alt=""></p><p>存在什么问题？</p><ul><li>在consumer中，我们把url地址硬编码到了代码中，不方便后期维护</li><li>consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效</li><li>consumer不清楚user-service的状态，服务宕机也不知道</li><li>user-service只有1台服务，不具备高可用性</li><li>即便user-service形成集群，consumer还需自己实现负载均衡</li></ul><p>其实上面说的问题，概括一下就是分布式服务必然要面临的问题：</p><ul><li>服务管理<ul><li>如何自动注册和发现</li><li>如何实现状态监管</li><li>如何实现动态路由</li></ul></li><li>服务如何实现负载均衡</li><li>服务如何解决容灾问题</li><li>服务如何实现统一配置</li></ul><p>以上的问题，我们都将在SpringCloud中得到答案。</p><h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>首先我们来解决第一问题，服务的管理。</p><blockquote><p>问题分析</p></blockquote><p>在刚才的案例中，user-service对外提供服务，需要对外暴露自己的地址。而consumer（调用者）需要记录服务提供者的地址。将来地址出现变更，还需要及时更新。这在服务较少的时候并不觉得有什么，但是在现在日益复杂的互联网环境，一个项目肯定会拆分出十几，甚至数十个微服务。此时如果还人为管理地址，不仅开发困难，将来测试、发布上线都会非常麻烦，这与DevOps的思想是背道而驰的。</p><blockquote><p>Eureka做什么？</p></blockquote><p>Eureka就好比是滴滴，负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你。</p><p>同时，服务提供方与Eureka之间通过<code>“心跳”</code>机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服务列表中剔除。</p><p>这就实现了服务的自动注册、发现、状态监控。</p><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><blockquote><p>基本架构：</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525597885059.png" alt=""></p><ul><li>Eureka：就是服务注册中心（可以是一个集群），对外暴露自己的地址</li><li>提供者：启动后向Eureka注册自己信息（地址，提供什么服务）</li><li>消费者：向Eureka订阅服务，Eureka会将对应服务的所有提供者地址列表发送给消费者，并且定期更新</li><li>心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="编写EurekaServer"><a href="#编写EurekaServer" class="headerlink" title="编写EurekaServer"></a>编写EurekaServer</h3><p>接下来我们创建一个项目，启动一个EurekaServer：</p><p>依然使用spring提供的快速搭建工具</p><p>选择依赖：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525598312368.png" alt=""></p><p>完整的Pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud版本，是最新的F系列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Eureka服务端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SpringCloud依赖，一定要放到dependencyManagement中，起到管理版本的作用即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 声明这个应用是一个EurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否注册自己的信息到EurekaServer，默认是true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 是否拉取其它服务的信息，默认是true</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer的地址，现在是自己的地址，如果是集群，需要加上其它Server的地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>启动服务，并访问：<a href="http://127.0.0.1:10086/eureka" target="_blank" rel="noopener">http://127.0.0.1:10086/eureka</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525604959508.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525605081129.png" alt=""></p><h3 id="将user-service注册到Eureka"><a href="#将user-service注册到Eureka" class="headerlink" title="将user-service注册到Eureka"></a>将user-service注册到Eureka</h3><p>注册服务，就是在服务上添加Eureka的客户端依赖，客户端代码会自动把服务注册到EurekaServer中。</p><blockquote><p>我们在user-service-demo中添加Eureka客户端依赖：</p></blockquote><p>先添加SpringCloud依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring的仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是Eureka客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在启动类上开启Eureka客户端功能</p></blockquote><p>通过添加<code>@EnableDiscoveryClient</code>来开启Eureka客户端功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启EurekaClient功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceDemoApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(UserServiceDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.leyou.userservice.pojo</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 当调用getHostname获取实例的hostname时，返回ip而不是host名称</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 指定自己的ip信息，不指定的话会自己寻找</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里添加了spring.application.name属性来指定应用名称，将来会作为应用的id使用。</li><li>不用指定register-with-eureka和fetch-registry，因为默认是true</li></ul><blockquote><p>重启项目，访问<a href="http://127.0.0.1:10086/eureka" target="_blank" rel="noopener">Eureka监控页面</a>查看</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525609225152.png" alt=""></p><p>user-service服务已经注册成功了</p><h3 id="消费者从Eureka获取服务"><a href="#消费者从Eureka获取服务" class="headerlink" title="消费者从Eureka获取服务"></a>消费者从Eureka获取服务</h3><p>接下来我们修改consumer-demo，尝试从EurekaServer获取服务。</p><p>方法与消费者类似，只需要在项目中添加EurekaClient依赖，就可以通过服务名称来获取信息了！</p><p>1）添加依赖：</p><p>先添加SpringCloud依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring的仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是Eureka客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）在启动类开启Eureka客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启Eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）修改配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 当其它服务获取地址时提供ip而不是hostname</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 指定自己的ip信息，不指定的话会自己寻找</span></span><br></pre></td></tr></table></figure><p>4）修改代码，用DiscoveryClient类的方法，根据服务名称，获取服务实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;<span class="comment">// Eureka客户端，可以获取到服务实例信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// String baseUrl = "http://localhost:8081/user/";</span></span><br><span class="line">        <span class="comment">// 根据服务名称，获取服务实例</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"user-service"</span>);</span><br><span class="line">        <span class="comment">// 因为只有一个UserService,因此我们直接get(0)获取</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 获取ip和端口信息</span></span><br><span class="line">        String baseUrl = <span class="string">"http://"</span>+instance.getHost() + <span class="string">":"</span> + instance.getPort()+<span class="string">"/user/"</span>;</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">// 每次间隔500毫秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）Debug跟踪运行：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525613025086.png" alt=""></p><p>生成的URL：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525613051210.png" alt=""></p><h2 id="Eureka详解"><a href="#Eureka详解" class="headerlink" title="Eureka详解"></a>Eureka详解</h2><h3 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h3><p>Eureka架构中的三个核心角色：</p><ul><li><p>服务注册中心</p><p>Eureka的服务端应用，提供服务注册和发现功能，就是刚刚我们建立的eureka-demo</p></li><li><p>服务提供者</p><p>提供服务的应用，可以是SpringBoot应用，也可以是其它任意技术实现，只要对外提供的是Rest风格服务即可。本例中就是我们实现的user-service-demo</p></li><li><p>服务消费者</p><p>消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。本例中就是我们实现的consumer-demo</p></li></ul><h3 id="高可用的Eureka-Server"><a href="#高可用的Eureka-Server" class="headerlink" title="高可用的Eureka Server"></a>高可用的Eureka Server</h3><p>Eureka Server即服务的注册中心，在刚才的案例中，我们只有一个EurekaServer，事实上EurekaServer也可以是一个集群，形成高可用的Eureka中心。</p><blockquote><p>服务同步</p></blockquote><p>多个Eureka Server之间也会互相注册为服务，当服务提供者注册到Eureka Server集群中的某个节点时，该节点会把服务的信息同步给集群中的每个节点，从而实现<strong>数据同步</strong>。因此，无论客户端访问到Eureka Server集群中的任意一个节点，都可以获取到完整的服务列表信息。</p><blockquote><p>动手搭建高可用的EurekaServer</p></blockquote><p>我们假设要搭建两条EurekaServer的集群，端口分别为：10086和10087</p><p>1）我们修改原来的EurekaServer配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 配置其他Eureka服务的地址，而不是自己，比如10087</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><p>所谓的高可用注册中心，其实就是把EurekaServer自己也作为一个服务进行注册，这样多个EurekaServer之间就能互相发现对方，从而形成集群。因此我们做了以下修改：</p><ul><li>删除了register-with-eureka=false和fetch-registry=false两个配置。因为默认值是true，这样就会吧自己注册到注册中心了。</li><li>把service-url的值改成了另外一台EurekaServer的地址，而不是自己</li></ul><p>2）另外一台配置恰好相反：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10087</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 配置其他Eureka服务的地址，而不是自己，比如10087</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>注意：idea中一个应用不能启动两次，我们需要重新配置一个启动器：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525615070033.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525615095693.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525615026937.png" alt=""></p><p>然后启动即可。</p><p>3）启动测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525615165157.png" alt=""></p><p>4）客户端注册服务到集群</p><p>因为EurekaServer不止一个，因此注册服务的时候，service-url参数需要变化：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址,多个地址以','隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka,http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><h3 id="服务提供者-1"><a href="#服务提供者-1" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。</p><blockquote><p>服务注册</p></blockquote><p>服务提供者在启动时，会检测配置属性中的：<code>eureka.client.register-with-erueka=true</code>参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。第一层Map的Key就是服务名称，第二层Map的key是服务的实例id。</p><blockquote><p>服务续约</p></blockquote><p>在注册服务完成以后，服务提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）；</p><p>有两个重要参数可以修改服务续约的行为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><ul><li>lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒</li><li>lease-expiration-duration-in-seconds：服务失效时间，默认值90秒</li></ul><p>也就是说，默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。</p><p>但是在开发时，这个值有点太长了，经常我们关掉一个服务，会发现Eureka依然认为服务在活着。所以我们在开发阶段可以适当调小。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒即过期</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 5秒一次心跳</span></span><br></pre></td></tr></table></figure><blockquote><p>实例id</p></blockquote><p>先来看一下服务状态信息：</p><p>在Eureka监控页面，查看服务注册信息：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525617060656.png" alt=""></p><p>在status一列中，显示以下信息：</p><ul><li>UP(1)：代表现在是启动了1个示例，没有集群</li><li>DESKTOP-2MVEC12:user-service:8081：是示例的名称（instance-id），<ul><li>默认格式是：<code>${hostname} + ${spring.application.name} + ${server.port}</code></li><li>instance-id是区分同一服务的不同实例的唯一标准，因此不能重复。</li></ul></li></ul><p>我们可以通过instance-id属性来修改它的构成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>重启服务再试试看：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525617542081.png" alt=""></p><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><blockquote><p>获取服务列表</p></blockquote><p>当服务消费者启动是，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地。并且<code>每隔30秒</code>会重新获取并更新数据。我们可以通过下面的参数来修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>生产环境中，我们不需要修改这个值。</p><p>但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小一点。</p><h3 id="失效剔除和自我保护"><a href="#失效剔除和自我保护" class="headerlink" title="失效剔除和自我保护"></a>失效剔除和自我保护</h3><blockquote><p>失效剔除</p></blockquote><p>有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。因此它会开启一个定时任务，每隔60秒对所有失效的服务（超过90秒未响应）进行剔除。</p><p>可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒，生成环境不要修改。</p><p>这个会对我们开发带来极大的不变，你对服务重启，隔了60秒Eureka才反应过来。开发阶段可以适当调整，比如10S</p><blockquote><p>自我保护</p></blockquote><p>我们关停一个服务，就会在Eureka面板看到一条警告：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525618396076.png" alt=""></p><p>这是触发了Eureka的自我保护机制。当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。</p><p>但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护模式（缺省为打开）</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">1000</span> <span class="comment"># 扫描失效服务的间隔时间（缺省为60*1000ms）</span></span><br></pre></td></tr></table></figure><h1 id="负载均衡Robbin"><a href="#负载均衡Robbin" class="headerlink" title="负载均衡Robbin"></a>负载均衡Robbin</h1><p>在刚才的案例中，我们启动了一个user-service，然后通过DiscoveryClient来获取服务实例信息，然后获取ip和端口来访问。</p><p>但是实际环境中，我们往往会开启很多个user-service的集群。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？</p><p>一般这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。</p><p>不过Eureka中已经帮我们集成了负载均衡组件：Ribbon，简单修改代码即可使用。</p><p>什么是Ribbon：</p><p><img src="assets/1525619257397.png" alt="1525619257397"></p><p>接下来，我们就来使用Ribbon实现负载均衡。</p><h2 id="启动两个服务实例"><a href="#启动两个服务实例" class="headerlink" title="启动两个服务实例"></a>启动两个服务实例</h2><p>首先我们启动两个user-service实例，一个8081，一个8082。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525619257397.png" alt=""></p><p>Eureka监控面板：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525619546904.png" alt=""></p><h2 id="开启负载均衡"><a href="#开启负载均衡" class="headerlink" title="开启负载均衡"></a>开启负载均衡</h2><p>因为Eureka中已经集成了Ribbon，所以我们无需引入新的依赖。直接修改代码：</p><p>在RestTemplate的配置方法上添加<code>@LoadBalanced</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> OkHttp3ClientHttpRequestFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改调用方式，不再手动获取ip和端口，而是直接通过服务名称调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 地址直接写服务名称即可</span></span><br><span class="line">        String baseUrl = <span class="string">"http://user-service/user/"</span>;</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">// 每次间隔500毫秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code></p><p>我们进行源码跟踪：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525620483637.png" alt=""></p><p>继续跟入execute方法：发现获取了8082端口的服务</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525620787090.png" alt=""></p><p>再跟下一次，发现获取的是8081：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525620835911.png" alt=""></p><h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><p>Ribbon默认的负载均衡策略是简单的轮询，我们可以测试一下：</p><p>编写测试类，在刚才的源码中我们看到拦截中是使用RibbonLoadBalanceClient来进行负载均衡的，其中有一个choose方法，是这样介绍的：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622320277.png" alt=""></p><p>现在这个就是负载均衡获取实例的方法。</p><p>我们对注入这个类的对象，然后对其测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoadBalanceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RibbonLoadBalancerClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            ServiceInstance instance = <span class="keyword">this</span>.client.choose(<span class="string">"user-service"</span>);</span><br><span class="line">            System.out.println(instance.getHost() + <span class="string">":"</span> + instance.getPort());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622357371.png" alt=""></p><p>符合了我们的预期推测，确实是轮询方式。</p><p>我们是否可以修改负载均衡的策略呢？</p><p>继续跟踪源码，发现这么一段代码：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622652849.png" alt=""></p><p>我们看看这个rule是谁：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622699666.png" alt=""></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622754316.png" alt=""></p><p>这不就是轮询的意思嘛。</p><p>我们注意到，这个类其实是实现了接口IRule的，查看一下：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622817451.png" alt=""></p><p>定义负载均衡的规则接口。</p><p>它有以下实现：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525622876842.png" alt=""></p><p>SpringBoot也帮我们提供了修改负载均衡规则的配置入口：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>格式是：<code>{服务名称}.ribbon.NFLoadBalancerRuleClassName</code>，值就是IRule的实现类。</p><p>再次测试，发现结果变成了随机：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525623193949.png" alt=""></p><h2 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h2><p>Eureka的服务治理强调了CAP原则中的AP，即可用性和可靠性。它与Zookeeper这一类强调CP（一致性，可靠性）的服务治理框架最大的区别在于：Eureka为了实现更高的服务可用性，牺牲了一定的一致性，极端情况下它宁愿接收故障实例也不愿丢掉健康实例，正如我们上面所说的自我保护机制。</p><p>但是，此时如果我们调用了这些不正常的服务，调用就会失败，从而导致其它服务不能正常工作！这显然不是我们愿意看到的。</p><p>我们现在关闭一个user-service实例：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525653565855.png" alt=""></p><p>因为服务剔除的延迟，consumer并不会立即得到最新的服务列表，此时再次访问你会得到错误提示：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525653715488.png" alt=""></p><p>但是此时，8081服务其实是正常的。</p><p>因此Spring Cloud 整合了Spring Retry 来增强RestTemplate的重试能力，当一次服务调用失败后，不会立即抛出一次，而是再次重试另一个服务。</p><p>只需要简单配置即可实现Ribbon的重试：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Spring Cloud的重试功能</span></span><br><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># Ribbon的连接超时时间</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment"># Ribbon的数据读取超时时间</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作都进行重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 切换实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对当前实例的重试次数</span></span><br></pre></td></tr></table></figure><p>根据如上配置，当访问到某个服务超时后，它会再次尝试访问下一个服务实例，如果不行就再换一个实例，如果不行，则返回失败。切换次数取决于<code>MaxAutoRetriesNextServer</code>参数的值</p><p>引入spring-retry依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们重启user-consumer-demo，测试，发现即使user-service2宕机，也能通过另一台服务实例获取到结果！</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/assets/1525658269456.png" alt=""></p><h1 id="Hystix"><a href="#Hystix" class="headerlink" title="Hystix"></a>Hystix</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Hystix，即熔断器。</p><p><a href="https://github.com/Netflix/Hystrix/">主页</a></p><p>Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525658562507.png" alt=""></p><h2 id="熔断器的工作机制："><a href="#熔断器的工作机制：" class="headerlink" title="熔断器的工作机制："></a>熔断器的工作机制：</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525658640314.png" alt=""></p><p>正常工作的情况下，客户端请求调用服务API接口：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525658906255.png" alt=""></p><p>当有服务出现异常时，直接进行失败回滚，服务降级处理：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525658983518.png" alt=""></p><p>当服务繁忙时，如果服务出现异常，不是粗暴的直接报错，而是返回一个友好的提示，虽然拒绝了用户的访问，但是会返回一个结果。</p><p>这就好比去买鱼，平常超市买鱼会额外赠送杀鱼的服务。等到逢年过节，超时繁忙时，可能就不提供杀鱼服务了，这就是服务的降级。</p><p>系统特别繁忙时，一些次要服务暂时中断，优先保证主要服务的畅通，一切资源优先让给主要服务来使用，在双十一、618时，京东天猫都会采用这样的策略。</p><h2 id="动手实践"><a href="#动手实践" class="headerlink" title="动手实践"></a>动手实践</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>首先在user-consumer中引入Hystix依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开启熔断"><a href="#开启熔断" class="headerlink" title="开启熔断"></a>开启熔断</h3><h3 id="改造消费者"><a href="#改造消费者" class="headerlink" title="改造消费者"></a>改造消费者</h3><p>我们改造user-consumer，添加一个用来访问的user服务的DAO，并且声明一个失败时的回滚处理函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"queryUserByIdFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        String url = <span class="string">"http://user-service/user/"</span> + id;</span><br><span class="line">        User user = <span class="keyword">this</span>.restTemplate.getForObject(url, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 记录访问用时：</span></span><br><span class="line">        logger.info(<span class="string">"访问用时：&#123;&#125;"</span>, end - begin);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByIdFallback</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"用户信息查询出现异常！"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@HystrixCommand(fallbackMethod=&quot;queryUserByIdFallback&quot;)</code>：声明一个失败回滚处理函数queryUserByIdFallback，当queryUserById执行超时（默认是1000毫秒），就会执行fallback函数，返回错误提示。</li><li>为了方便查看熔断的触发时机，我们记录请求访问时间。</li></ul><p>在原来的业务逻辑中调用这个DAO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.userDao.queryUserById(id));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改造服务提供者"><a href="#改造服务提供者" class="headerlink" title="改造服务提供者"></a>改造服务提供者</h3><p>改造服务提供者，随机休眠一段时间，以触发熔断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 为了演示超时现象，我们在这里然线程休眠,时间随机 0~2000毫秒</span></span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>然后运行并查看日志：</p><p>id为9、10、11的访问时间分别是：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525661641660.png" alt=""></p><p>id为12的访问时间：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525661669136.png" alt=""></p><p>因此，只有12是正常访问，其它都会触发熔断，我们来查看结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525661720656.png" alt=""></p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>虽然熔断实现了，但是我们的重试机制似乎没有生效，是这样吗？</p><p>其实这里是因为我们的Ribbon超时时间设置的是1000ms:</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525666632542.png" alt=""></p><p>而Hystix的超时时间默认也是1000ms，因此重试机制没有被触发，而是先触发了熔断。</p><p>所以，Ribbon的超时时间一定要小于Hystix的超时时间。</p><p>我们可以通过<code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</code>来设置Hystrix超时时间。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 设置hystrix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><p>在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String baseUrl = <span class="string">"http://user-service/user/"</span>;</span><br><span class="line">User user = <span class="keyword">this</span>.restTemplate.getForObject(baseUrl + id, User<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><p>如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？</p><p>这就是我们接下来要学的Feign的功能了。</p><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>有道词典的英文解释：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525672070679.png" alt=""></p><p>为什么叫伪装？</p><p>Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。</p><p>项目主页：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525652009416.png" alt=""></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Feign的客户端"><a href="#Feign的客户端" class="headerlink" title="Feign的客户端"></a>Feign的客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"user-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像</li><li><code>@FeignClient</code>，声明这是一个Feign客户端，类似<code>@Mapper</code>注解。同时通过<code>value</code>属性指定服务名称</li><li>接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果</li></ul><p>改造原来的调用逻辑，不再调用UserDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignClient userFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.forEach(id -&gt; &#123;</span><br><span class="line">            <span class="comment">// 我们测试多次查询，</span></span><br><span class="line">            users.add(<span class="keyword">this</span>.userFeignClient.queryUserById(id));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启Feign功能"><a href="#开启Feign功能" class="headerlink" title="开启Feign功能"></a>开启Feign功能</h3><p>我们在启动类上，添加注解，开启Feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启Feign功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserConsumerDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>你会发现RestTemplate的注册被我删除了。Feign中已经自动集成了Ribbon负载均衡，因此我们不需要自己定义RestTemplate了</li></ul><h3 id="启动测试：-1"><a href="#启动测试：-1" class="headerlink" title="启动测试："></a>启动测试：</h3><p>访问接口：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525666476326.png" alt=""></p><p>正常获取到了结果。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Feign中本身已经集成了Ribbon依赖和自动配置：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525672070679.png" alt=""></p><p>因此我们不需要额外引入依赖，也不需要再注册<code>RestTemplate</code>对象。</p><p>另外，我们可以像上节课中讲的那样去配置Ribbon，可以通过<code>ribbon.xx</code>来进行全局配置。也可以通过<code>服务名.ribbon.xx</code>来对指定服务配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">1000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br></pre></td></tr></table></figure><h2 id="Hystix支持"><a href="#Hystix支持" class="headerlink" title="Hystix支持"></a>Hystix支持</h2><p>Feign默认也有对Hystix的集成：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525672466192.png" alt=""></p><p>只不过，默认情况下是关闭的。我们需要通过下面的参数来开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure><p>但是，Feign中的Fallback配置不像Ribbon中那样简单了。</p><p>1）首先，我们要定义一个类，实现刚才编写的UserFeignClient，作为fallback的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFeignClientFallback</span> <span class="keyword">implements</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"用户查询出现异常！"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）然后在UserFeignClient中，指定刚才编写的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, fallback = UserFeignClientFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）重启测试：</p><p>我们关闭user-service服务，然后在页面访问：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525673049875.png" alt=""></p><h2 id="请求压缩"><a href="#请求压缩" class="headerlink" title="请求压缩"></a>请求压缩</h2><p>Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br></pre></td></tr></table></figure><p>同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br></pre></td></tr></table></figure><p>注：上面的数据类型、压缩大小下限均为默认值。</p><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>前面讲过，通过<code>logging.level.xx=debug</code>来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为<code>@FeignClient</code>注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。</p><p>1）设置com.leyou包下的日志级别都为debug</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.leyou:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>2）编写配置类，定义日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定的Level级别是FULL，Feign支持4种级别：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525674373507.png" alt=""></p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>3）在FeignClient中指定配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, fallback = UserFeignClientFallback<span class="class">.<span class="keyword">class</span>, <span class="title">configuration</span> </span>= FeignConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）重启项目，即可看到每次访问的日志：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525674544569.png" alt=""></p><h1 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h1><p>通过前面的学习，使用Spring Cloud实现微服务的架构基本成型，大致是这样的：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525674644660.png" alt=""></p><p>我们使用Spring Cloud Netflix中的Eureka实现了服务注册中心以及服务注册与发现；而服务间通过Ribbon或Feign实现服务的消费以及均衡负载；通过Spring Cloud Config实现了应用多环境的外部化配置以及版本管理。为了使得服务集群更为健壮，使用Hystrix的融断机制来避免在微服务架构中个别服务出现异常时引起的故障蔓延。</p><p>在该架构中，我们的服务集群包含：内部服务Service A和Service B，他们都会注册与订阅服务至Eureka Server，而Open Service是一个对外的服务，通过均衡负载公开至服务调用方。我们把焦点聚集在对外服务这块，直接暴露我们的服务地址，这样的实现是否合理，或者是否有更好的实现方式呢？</p><p>先来说说这样架构需要做的一些事儿以及存在的不足：</p><ul><li>首先，破坏了服务无状态特点。<ul><li>为了保证对外服务的安全性，我们需要实现对服务访问的权限控制，而开放服务的权限控制机制将会贯穿并污染整个开放服务的业务逻辑，这会带来的最直接问题是，破坏了服务集群中REST API无状态的特点。</li><li>从具体开发和测试的角度来说，在工作中除了要考虑实际的业务逻辑之外，还需要额外考虑对接口访问的控制处理。</li></ul></li><li>其次，无法直接复用既有接口。<ul><li>当我们需要对一个即有的集群内访问接口，实现外部服务访问时，我们不得不通过在原有接口上增加校验逻辑，或增加一个代理调用来实现权限控制，无法直接复用原有的接口。</li></ul></li></ul><p>面对类似上面的问题，我们要如何解决呢？答案是：服务网关！</p><p>为了解决上面这些问题，我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器的 服务网关。</p><p>服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了<code>权限控制</code>等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/Netflix/zuul">官网</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525675168152.png" alt=""></p><h2 id="Zuul加入后的架构"><a href="#Zuul加入后的架构" class="headerlink" title="Zuul加入后的架构"></a>Zuul加入后的架构</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525675648881.png" alt=""></p><ul><li>不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。</li></ul><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>添加Zuul依赖：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525675991833.png" alt=""></p><h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><p>通过<code>@EnableZuulProxy</code>注解开启Zuul的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ZuulDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span> <span class="comment">#指定服务名</span></span><br></pre></td></tr></table></figure><h3 id="编写路由规则"><a href="#编写路由规则" class="headerlink" title="编写路由规则"></a>编写路由规则</h3><p>我们需要用Zuul来代理user-service服务，先看一下控制面板中的服务状态：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525676797879.png" alt=""></p><ul><li>ip为：127.0.0.1</li><li>端口为：8081</li></ul><p>映射规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://127.0.0.1:8081</span> <span class="comment"># 映射路径对应的实际url地址</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>path</code> 规则的一切请求，都代理到 <code>url</code>参数指定的地址</p><p>本例中，我们将 <code>/user-service/**</code>开头的请求，代理到<a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a></p><h3 id="启动测试：-2"><a href="#启动测试：-2" class="headerlink" title="启动测试："></a>启动测试：</h3><p>访问的路径中需要加上配置规则的映射路径，我们访问：<a href="http://127.0.0.1:8081/user-service/user/10" target="_blank" rel="noopener">http://127.0.0.1:8081/user-service/user/10</a></p><h2 id="面向服务的路由"><a href="#面向服务的路由" class="headerlink" title="面向服务的路由"></a>面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。</p><p>我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！</p><h3 id="添加Eureka客户端依赖"><a href="#添加Eureka客户端依赖" class="headerlink" title="添加Eureka客户端依赖"></a>添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开启Eureka客户端发现功能"><a href="#开启Eureka客户端发现功能" class="headerlink" title="开启Eureka客户端发现功能"></a>开启Eureka客户端发现功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul的网关功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ZuulDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加Eureka配置，获取服务信息"><a href="#添加Eureka配置，获取服务信息" class="headerlink" title="添加Eureka配置，获取服务信息"></a>添加Eureka配置，获取服务信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 获取服务列表的周期：5s</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="修改映射配置，通过服务名称获取"><a href="#修改映射配置，通过服务名称获取" class="headerlink" title="修改映射配置，通过服务名称获取"></a>修改映射配置，通过服务名称获取</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">user-service</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure><h3 id="启动测试-1"><a href="#启动测试-1" class="headerlink" title="启动测试"></a>启动测试</h3><p>再次启动，这次Zuul进行代理时，会利用Ribbon进行负载均衡访问</p><p>日志中可以看到使用了负载均衡器：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525677891119.png" alt=""></p><h2 id="简化的路由配置"><a href="#简化的路由配置" class="headerlink" title="简化的路由配置"></a>简化的路由配置</h2><p>在刚才的配置中，我们的规则是这样的：</p><ul><li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code>： 来指定映射路径。<code>&lt;route&gt;</code>是自定义的路由名</li><li><code>zuul.routes.&lt;route&gt;.serviceId=/user-service</code>：来指定服务名。</li></ul><p>而大多数情况下，我们的<code>&lt;route&gt;</code>路由名称往往和 服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p><p>比方说上面我们关于user-service的配置可以简化为一条：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br></pre></td></tr></table></figure><p>省去了对服务名称的配置。</p><h2 id="默认的路由规则"><a href="#默认的路由规则" class="headerlink" title="默认的路由规则"></a>默认的路由规则</h2><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p><ul><li>默认情况下，一切服务的映射路径就是服务名本身。<ul><li>例如服务名为：<code>user-service</code>，则默认的映射路径就是：<code>/user-service/**</code></li></ul></li></ul><p>也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。</p><h2 id="路由前缀"><a href="#路由前缀" class="headerlink" title="路由前缀"></a>路由前缀</h2><p>配置示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">      <span class="attr">user-service:</span> <span class="comment"># 这里是路由id，随意写</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/user-service/**</span> <span class="comment"># 这里是映射路径</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">user-service</span> <span class="comment"># 指定服务名称</span></span><br></pre></td></tr></table></figure><p>我们通过<code>zuul.prefix=/api</code>来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。</p><p>路径<code>/api/user-service/user/1</code>将会被代理到<code>/user-service/user/1</code></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。</p><h3 id="ZuulFilter"><a href="#ZuulFilter" class="headerlink" title="ZuulFilter"></a>ZuulFilter</h3><p>ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>shouldFilter</code>：返回一个<code>Boolean</code>值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</li><li><code>run</code>：过滤器的具体业务逻辑。</li><li><code>filterType</code>：返回字符串，代表过滤器的类型。包含以下4种：<ul><li><code>pre</code>：请求在被路由之前执行</li><li><code>routing</code>：在路由请求时调用</li><li><code>post</code>：在routing和errror过滤器之后调用</li><li><code>error</code>：处理请求时发生错误调用</li></ul></li><li><code>filterOrder</code>：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</li></ul><h3 id="过滤器执行生命周期："><a href="#过滤器执行生命周期：" class="headerlink" title="过滤器执行生命周期："></a>过滤器执行生命周期：</h3><p>这张是Zuul官网提供的请求生命周期图，清晰的表现了一个请求在各个过滤器的执行顺序。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525681866862.png" alt=""></p><ul><li>正常流程：<ul><li>请求到达首先会经过pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li></ul></li><li>异常流程：<ul><li>整个过程中，pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li><li>如果是error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。</li><li>如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。</li></ul></li></ul><p>所有内置过滤器列表：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525682427811.png" alt=""></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>场景非常多：</p><ul><li>请求鉴权：一般放在pre类型，如果发现没有访问权限，直接就拦截了</li><li>异常处理：一般会在error类型和post类型过滤器中结合来处理。</li><li>服务调用时长统计：pre和post结合使用。</li></ul><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p><h3 id="定义过滤器类"><a href="#定义过滤器类" class="headerlink" title="定义过滤器类"></a>定义过滤器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验，肯定是在前置拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序设置为1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回true，代表过滤器生效。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验逻辑。</span></span><br><span class="line">        <span class="comment">// 1）获取Zuul提供的请求上下文对象</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 2) 从上下文中获取request对象</span></span><br><span class="line">        HttpServletRequest req = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 3) 从请求中获取token</span></span><br><span class="line">        String token = req.getParameter(<span class="string">"access-token"</span>);</span><br><span class="line">        <span class="comment">// 4) 判断</span></span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span> || <span class="string">""</span>.equals(token.trim()))&#123;</span><br><span class="line">            <span class="comment">// 没有token，登录校验失败，拦截</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 返回401状态码。也可以考虑重定向到登录页。</span></span><br><span class="line">            ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验通过，可以考虑把用户信息放入上下文，继续向后执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>没有token参数时，访问失败：</p><p>​    <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/Springcloud1/ass2/1525683285697.png" alt=""></p><p>添加token参数后成功</p><h2 id="负载均衡和熔断"><a href="#负载均衡和熔断" class="headerlink" title="负载均衡和熔断"></a>负载均衡和熔断</h2><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span> <span class="comment"># 连接超时时间(ms)</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 通信超时时间(ms)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对所有操作重试</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment"># 同一服务不同实例的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 同一实例的重试次数</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMillisecond:</span> <span class="number">6000</span> <span class="comment"># 熔断超时时长：6000ms</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架04 -- SpringMVC</title>
      <link href="/2019/07/16/JAVA%E6%A1%86%E6%9E%B604%20--%20SpringMVC/"/>
      <url>/2019/07/16/JAVA%E6%A1%86%E6%9E%B604%20--%20SpringMVC/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h2 id="三层架构和MVC"><a href="#三层架构和MVC" class="headerlink" title="三层架构和MVC"></a>三层架构和MVC</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序</li><li>Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/01.bmp" alt=""></p><h4 id="三层架构概念"><a href="#三层架构概念" class="headerlink" title="三层架构概念"></a>三层架构概念</h4><ol><li>表现层:WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型 </li><li>业务层:处理公司具体的业务逻辑的</li><li>持久层:用来操作数据库的</li></ol><h3 id="表现层的设计模式–MVC模型"><a href="#表现层的设计模式–MVC模型" class="headerlink" title="表现层的设计模式–MVC模型"></a>表现层的设计模式–MVC模型</h3><ol><li>MVC全名是Model View Controller 模型视图控制器，每个部分各司其职。</li><li>Model:数据模型，JavaBean的类，用来进行数据封装。</li><li>View:指JSP、HTML用来展示数据给用户</li><li>Controller:用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</li></ol><h2 id="SpringMVC-1"><a href="#SpringMVC-1" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>是一种基于Java实现的MVC设计模型的请求驱动类型的轻量级WEB框架。</li><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</li><li>使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的<br>SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="清晰的角色划分"><a href="#清晰的角色划分" class="headerlink" title="清晰的角色划分:"></a>清晰的角色划分:</h4><ul><li>前端控制器(DispatcherServlet)</li><li>请求到处理器映射(HandlerMapping) </li><li>处理器适配器(HandlerAdapter)</li><li>视图解析器(ViewResolver) </li><li>处理器或页面控制器(Controller) </li><li>验证器( Validator)</li><li>命令对象(Command 请求参数绑定到的对象就叫命令对象)</li><li>表单对象(Form Object 提供给表单展示和提交到的对象就叫表单对象)。</li></ul><h4 id="SpringMVC-和-Struts2-的优略分析"><a href="#SpringMVC-和-Struts2-的优略分析" class="headerlink" title="SpringMVC 和 Struts2 的优略分析"></a>SpringMVC 和 Struts2 的优略分析</h4><ul><li>共同点:</li></ul><blockquote><p>它们都是表现层框架，都是基于 MVC 模型编写的。 </p><p>它们的底层都离不开原始 ServletAPI。 </p><p>它们处理请求的机制都是一个核心控制器。</p></blockquote><ul><li>区别:</li></ul><blockquote><p>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</p><p>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所 以 Spring MVC 会稍微比 Struts2 快些。</p></blockquote><blockquote><p>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</p></blockquote><blockquote><p>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提<br>升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</p></blockquote><h2 id="SpringMVC-的入门程序"><a href="#SpringMVC-的入门程序" class="headerlink" title="SpringMVC 的入门程序"></a>SpringMVC 的入门程序</h2><h3 id="创建WEB工程，引入开发的jar包"><a href="#创建WEB工程，引入开发的jar包" class="headerlink" title="创建WEB工程，引入开发的jar包"></a>创建WEB工程，引入开发的jar包</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/02.bmp" alt=""></p><h4 id="具体的坐标"><a href="#具体的坐标" class="headerlink" title="具体的坐标"></a>具体的坐标</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 版本锁定 --&gt; &lt;properties&gt;</span><br><span class="line">&lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt; &lt;/properties&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置核心的控制器-配置DispatcherServlet"><a href="#配置核心的控制器-配置DispatcherServlet" class="headerlink" title="配置核心的控制器(配置DispatcherServlet)"></a>配置核心的控制器(配置DispatcherServlet)</h3><h4 id="在web-xml配置文件中核心控制器DispatcherServlet"><a href="#在web-xml配置文件中核心控制器DispatcherServlet" class="headerlink" title="在web.xml配置文件中核心控制器DispatcherServlet"></a>在web.xml配置文件中核心控制器DispatcherServlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">dispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="resource下编写springmvc-xml的配置文件"><a href="#resource下编写springmvc-xml的配置文件" class="headerlink" title="resource下编写springmvc.xml的配置文件"></a>resource下编写springmvc.xml的配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.jwang"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"internalResourceViewResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启springMVC注解支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="编写index-jsp和HelloController控制器类"><a href="#编写index-jsp和HelloController控制器类" class="headerlink" title="编写index.jsp和HelloController控制器类"></a>编写index.jsp和HelloController控制器类</h3><h4 id="1-index-jsp"><a href="#1-index-jsp" class="headerlink" title="1. index.jsp"></a>1. index.jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门程序&lt;/h3&gt;</span><br><span class="line">    &lt;a href="hello"&gt; 入门&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-HelloController"><a href="#2-HelloController" class="headerlink" title="2. HelloController"></a>2. HelloController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制器类</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>) <span class="comment">//请求映射  路径为/hello</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello StringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在WEB-INF目录下创建pages文件夹，编写success-jsp的成功页面"><a href="#在WEB-INF目录下创建pages文件夹，编写success-jsp的成功页面" class="headerlink" title="在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面"></a>在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; &lt;h3&gt;入门成功!!&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="入门案例的执行过程分析"><a href="#入门案例的执行过程分析" class="headerlink" title="入门案例的执行过程分析"></a>入门案例的执行过程分析</h2><h3 id="入门案例的执行流程"><a href="#入门案例的执行流程" class="headerlink" title="入门案例的执行流程"></a>入门案例的执行流程</h3><ol><li>当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象， 就会加载springmvc.xml配置文件</li><li>开启了注解扫描，那么HelloController对象就会被创建</li><li>从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解找到执行的具体方法</li><li>根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</li><li>Tomcat服务器渲染页面，做出响应</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/03.bmp" alt=""></p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h3><h4 id="RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系"><a href="#RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系" class="headerlink" title="RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系"></a>RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系</h4><h4 id="RequestMapping注解可以作用在方法和类上"><a href="#RequestMapping注解可以作用在方法和类上" class="headerlink" title="RequestMapping注解可以作用在方法和类上"></a>RequestMapping注解可以作用在方法和类上</h4><ol><li>作用在类上:第一级的访问目录</li><li>作用在方法上:第二级的访问目录</li><li>细节:路径可以不编写 / 表示应用的根目录开始</li><li>细节:${ pageContext.request.contextPath }也可以省略不写，但是路径上不能写 /</li></ol><h4 id="RequestMapping的属性"><a href="#RequestMapping的属性" class="headerlink" title="RequestMapping的属性"></a>RequestMapping的属性</h4><ol><li>path：指定请求路径的url</li><li>value：与path属性一样</li><li>mthod：指定该方法的请求方式 枚举类</li><li>params：指定限定请求参数的条件. 请求参数需要有该指定名称的属性 {“username”}</li><li>headers 发送的请求中必须包含的请求头 {“Accept”}</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/04.bmp" alt=""></p><h2 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h2><h3 id="请求参数的绑定说明"><a href="#请求参数的绑定说明" class="headerlink" title="请求参数的绑定说明"></a>请求参数的绑定说明</h3><h4 id="绑定机制"><a href="#绑定机制" class="headerlink" title="绑定机制"></a>绑定机制</h4><ol><li>表单提交的数据都是k=v格式的 username=haha&amp;password=123</li><li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的 </li><li>要求:提交表单的name和参数的名称是相同的</li></ol><h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><ol><li>基本数据类型和字符串类型</li><li>实体类型(JavaBean)</li><li>集合数据类型(List、map集合等)</li></ol><h4 id="基本数据类型和字符串类型"><a href="#基本数据类型和字符串类型" class="headerlink" title="基本数据类型和字符串类型"></a>基本数据类型和字符串类型</h4><ol><li>提交表单的name和参数的名称是相同的</li><li>区分大小写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/testrequest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequest</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"requestmapping。。。"</span>+ username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;a href="user/testrequest?username=aaa"&gt;requestmapping&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;http:<span class="comment">//localhost:8080/jwang/user/testrequest?username=aaa    </span></span><br><span class="line">&gt;&gt;&gt;requestmapping。。。aaa</span><br></pre></td></tr></table></figure><h4 id="实体类型-JavaBean"><a href="#实体类型-JavaBean" class="headerlink" title="实体类型(JavaBean)"></a>实体类型(JavaBean)</h4><ol><li>提交表单的name和JavaBean中的属性名称需要一致</li><li>如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成:对象.属性 例如:<br>address.name</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">## Domain</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">## controller</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/saveAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> ## index.jsp</span><br><span class="line">     &lt;form action=<span class="string">"user/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户地址：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.address"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Account&#123;username=<span class="string">'jwang'</span>, id=<span class="keyword">null</span>, password=<span class="string">'xxx'</span>, money=<span class="number">10.0</span>, </span><br><span class="line">&gt;&gt;&gt;user=User&#123;username=<span class="string">'jkh'</span>, address=<span class="string">'kjhhk'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="给集合属性数据封装"><a href="#给集合属性数据封装" class="headerlink" title="给集合属性数据封装"></a>给集合属性数据封装</h4><ol><li>JSP页面编写方式:list[0].属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">       用户姓名<span class="number">1</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       用户地址<span class="number">1</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].address"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">       用户姓名<span class="number">2</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       用户地址<span class="number">2</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].address"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span>&gt;</span><br><span class="line">       </span><br><span class="line">## domain    </span><br><span class="line">   <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;String,User&gt; map;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Account&#123;username=<span class="string">'jwang'</span>, id=<span class="keyword">null</span>, password=<span class="string">'xxx'</span>, money=<span class="number">10.0</span>, </span><br><span class="line">user=User&#123;username=<span class="string">'娃说的是'</span>, address=<span class="string">'阿萨'</span>&#125;, </span><br><span class="line">users=[User&#123;username=<span class="string">'sad'</span>, address=<span class="string">'asdas'</span>&#125;], </span><br><span class="line">map=&#123;one=User&#123;username=<span class="string">'asdas'</span>, address=<span class="string">'asdad'</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="请求参数中文乱码的解决"><a href="#请求参数中文乱码的解决" class="headerlink" title="请求参数中文乱码的解决"></a>请求参数中文乱码的解决</h4><ul><li>在web.xml中配置Spring提供的过滤器类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置过滤器，解决post中文乱码问题--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">UTF</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">characterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在控制器中使用原生的ServletAPI对象"><a href="#在控制器中使用原生的ServletAPI对象" class="headerlink" title="在控制器中使用原生的ServletAPI对象"></a>在控制器中使用原生的ServletAPI对象</h4><ol><li>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>) <span class="comment">//请求映射  路径为/hello</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello StringMVC"</span>);</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    System.out.println(session);</span><br><span class="line"></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><ol><li>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明<br>Spring框架内部会默认进行数据类型转换。</li><li>如果想自定义数据类型转换，可以实现Converter的接口</li></ol><h4 id="自定义类型转换器-1"><a href="#自定义类型转换器-1" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h4><ul><li>自定义数据类型转换，可以实现Converter的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请传入一个数据"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-MM-dd"</span>);</span><br><span class="line">        <span class="comment">//字符串转换为日期</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> df.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据类型转换失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启springMVC注解支持 默认配置了处理适配器，映射器，视图解析器 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService2"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置自定义类型转换器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"conversionService2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;bean class="com.jwang.utils.StringToDateConverter"&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h2><h3 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>把请求中的指定名称的参数传递给控制器中的形参赋值 </li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ol><li><p>value:请求参数中的名称</p></li><li><p>required:请求参数中是否必须提供此参数，默认值是true，必须提供@RequestParam(value=”username”,required=false)</p></li><li><p>代码如下</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="anno/testRequestParam?name=haha"&gt;RequestParam&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String username)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RequestParam...."</span>+username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用:"></a>作用:</h4><ul><li>用于获取请求体的内容(注意:get方法不可以) </li></ul><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>required:是否必须有请求体，默认值是true </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="PathVariable注解"></a>PathVariable注解</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用:"></a>作用:</h4><ul><li>拥有绑定url中的占位符的。例如:url中有<code>/delete/{id}，{id}</code>就是占位符 方法:findById</li></ul><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><ol><li>value:指定url中的占位符名称 </li></ol><h4 id="Restful风格的URL"><a href="#Restful风格的URL" class="headerlink" title="Restful风格的URL"></a>Restful风格的URL</h4><ol><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法 </li><li>restful风格的URL优点<ol><li>结构清晰 </li><li>符合标准 </li><li>易于理解 </li><li>扩展方便</li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/01-restful%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.bmp" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"user/saveAccount/4"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/saveAccount/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> Integer id,Account account)</span>&#123;</span><br><span class="line">    account.setId(id);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h3><ol><li>作用:获取指定请求头的值 </li></ol><h4 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h4><ol><li>value:请求头的名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestHeader(value=<span class="string">"Accept"</span>)</span> String header)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h3><ol><li>作用:用于获取指定cookie的名称的值 </li></ol><h4 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h4><ol><li>value:cookie的名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>)</span> String cookieValue) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="ModelAttribute注解"></a>ModelAttribute注解</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><ol><li>出现在方法上:表示当前方法会在控制器方法执行前先执行。</li><li>出现在参数上:获取指定的数据给参数赋值。</li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。</li></ol><ul><li>修饰的方法有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用在方法，先执行 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"showUser执行了..."</span>); </span><br><span class="line"><span class="comment">// 模拟从数据库中查询对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setName(<span class="string">"哈哈"</span>); </span><br><span class="line">user.setPassword(<span class="string">"123"</span>); </span><br><span class="line">user.setMoney(<span class="number">100</span>d);</span><br><span class="line">   <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改用户的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cookieValue </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/updateUser"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修饰的方法没有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用在方法，先执行 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(String name,Map&lt;String, User&gt; map)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"showUser执行了..."</span>); </span><br><span class="line"><span class="comment">// 模拟从数据库中查询对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setName(<span class="string">"哈哈"</span>); </span><br><span class="line">user.setPassword(<span class="string">"123"</span>); </span><br><span class="line">user.setMoney(<span class="number">100</span>d);</span><br><span class="line">map.put(<span class="string">"abc"</span>, user); &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改用户的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cookieValue * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@ModelAttribute(value=<span class="string">"abc"</span>)</span> User user) </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SessionAttributes注解"><a href="#SessionAttributes注解" class="headerlink" title="SessionAttributes注解"></a>SessionAttributes注解</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><ul><li>用于多次执行控制器方法间的参数共享 </li></ul><h4 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h4><ol><li>value:指定存入属性的名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value= &#123;<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"age"</span>&#125;,types=&#123;String<span class="class">.<span class="keyword">class</span>,<span class="title">Integer</span>.<span class="title">class</span>&#125;) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 向session中存入值 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 把数据存入到session域对象中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/save"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"向session域中保存数据"</span>); </span><br><span class="line">model.addAttribute(<span class="string">"username"</span>, <span class="string">"root"</span>); </span><br><span class="line">model.addAttribute(<span class="string">"password"</span>, <span class="string">"123"</span>); </span><br><span class="line">model.addAttribute(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从session中获取值 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/find"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">String username = (String) modelMap.get(<span class="string">"username"</span>); </span><br><span class="line">String password = (String) modelMap.get(<span class="string">"password"</span>); </span><br><span class="line">Integer age = (Integer) modelMap.get(<span class="string">"age"</span>); </span><br><span class="line">System.out.println(username + <span class="string">" : "</span>+password +<span class="string">" : "</span>+age); </span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清除值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(SessionStatus status)</span> </span>&#123;</span><br><span class="line">status.setComplete();</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC-响应数据和结果视图"><a href="#SpringMVC-响应数据和结果视图" class="headerlink" title="SpringMVC 响应数据和结果视图"></a>SpringMVC 响应数据和结果视图</h2><h3 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h3><h4 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h4><ul><li>Controller方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 视图解析器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"internalResourceViewResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello SpringMVC!!"</span>); </span><br><span class="line"><span class="comment">// 跳转到XX页面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体的应用场景</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 请求参数的绑定 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/initUpdate"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">initUpdate</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 模拟从数据库中查询的数据</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setUsername(<span class="string">"张三"</span>); </span><br><span class="line">user.setPassword(<span class="string">"123"</span>); </span><br><span class="line">user.setMoney(<span class="number">100</span>d); </span><br><span class="line">user.setBirthday(<span class="keyword">new</span> Date()); </span><br><span class="line">model.addAttribute(<span class="string">"user"</span>, user); </span><br><span class="line"><span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;修改用户&lt;/h3&gt;</span><br><span class="line">$&#123; requestScope &#125;</span><br><span class="line">&lt;form action=<span class="string">"user/update"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123; user.username &#125;"</span>&gt;&lt;br&gt; </span><br><span class="line">密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span> value=<span class="string">"$&#123; user.password &#125;"</span>&gt;&lt;br&gt; </span><br><span class="line">金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> value=<span class="string">"$&#123; user.money &#125;"</span>&gt;&lt;br&gt; </span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="返回值是void"><a href="#返回值是void" class="headerlink" title="返回值是void"></a>返回值是void</h3><ul><li>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。<ul><li>默认会跳转到@RequestMapping(value=”/initUpdate”) initUpdate的页面。 自动找视图解析器中配置的/WEB-INF/pages/initUpdate.jsp</li></ul></li><li>可以使用请求转发或者重定向跳转到指定的页面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(value=<span class="string">"/initAdd"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAdd</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">Exception </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"请求转发或者重定向"</span>);</span><br><span class="line"><span class="comment">// 请求转发</span></span><br><span class="line"><span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/add.jsp").forward(request,response);</span></span><br><span class="line"><span class="comment">// 重定向</span></span><br><span class="line"><span class="comment">// response.sendRedirect(request.getContextPath()+"/add2.jsp");</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 直接响应数据 </span></span><br><span class="line">response.getWriter().print(<span class="string">"你好"</span>); </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值是ModelAndView对象"><a href="#返回值是ModelAndView对象" class="headerlink" title="返回值是ModelAndView对象"></a>返回值是ModelAndView对象</h3><ol><li>ModelAndView对象是Spring提供的一个对象，可以用来调整具体的JSP视图</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回ModelAndView对象</span></span><br><span class="line"><span class="comment">* 可以传入视图的名称(即跳转的页面)，还可以传入对象。 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/findAll"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView(); </span><br><span class="line"><span class="comment">// 跳转到list.jsp的页面 </span></span><br><span class="line">mv.setViewName(<span class="string">"list"</span>);</span><br><span class="line"><span class="comment">// 模拟从数据库中查询所有的用户信息 </span></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">User user1 = <span class="keyword">new</span> User(); </span><br><span class="line">user1.setUsername(<span class="string">"张三"</span>); </span><br><span class="line">user1.setPassword(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">User user2 = <span class="keyword">new</span> User(); </span><br><span class="line">user2.setUsername(<span class="string">"赵四"</span>);</span><br><span class="line">user2.setPassword(<span class="string">"456"</span>);</span><br><span class="line">users.add(user1); </span><br><span class="line">users.add(user2);</span><br><span class="line"><span class="comment">// 添加对象 </span></span><br><span class="line">mv.addObject(<span class="string">"users"</span>, users);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt; </span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;查询所有的数据&lt;/h3&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123; users &#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">$&#123; user.username &#125; </span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC框架提供的转发和重定向"><a href="#SpringMVC框架提供的转发和重定向" class="headerlink" title="SpringMVC框架提供的转发和重定向"></a>SpringMVC框架提供的转发和重定向</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/02-%E5%93%8D%E5%BA%94%E7%9A%84%E6%96%B9%E5%BC%8F.bmp" alt=""></p><h3 id="forward请求转发"><a href="#forward请求转发" class="headerlink" title="forward请求转发"></a>forward请求转发</h3><h4 id="controller方法返回String类型"><a href="#controller方法返回String类型" class="headerlink" title="controller方法返回String类型"></a>controller方法返回String类型</h4><ul><li>想进行请求转发也可以编写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用forward关键字进行请求转发</span></span><br><span class="line"><span class="comment">* "forward:转发的JSP路径"，不走视图解析器了，所以需要编写完整的路径 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"delete方法执行了..."</span>);</span><br><span class="line"><span class="comment">// return "forward:/WEB-INF/pages/success.jsp"; </span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/user/findAll"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h3><h4 id="controller方法返回String类型-1"><a href="#controller方法返回String类型-1" class="headerlink" title="controller方法返回String类型"></a>controller方法返回String类型</h4><ul><li>进行重定向可以编写(项目名称框架默认加上的)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 重定向</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/count"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">count</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"count方法执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/add.jsp"</span>;</span><br><span class="line"><span class="comment">// return "redirect:/user/findAll";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseBody响应json数据"><a href="#ResponseBody响应json数据" class="headerlink" title="ResponseBody响应json数据"></a>ResponseBody响应json数据</h2><ol><li>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源(img、css、js)也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置  </li></ol><h3 id="mvc-resources标签配置不过滤"><a href="#mvc-resources标签配置不过滤" class="headerlink" title="mvc:resources标签配置不过滤"></a>mvc:resources标签配置不过滤</h3><ol><li>location元素表示webapp目录下的包下的所有文件</li><li>mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 设置静态资源不过滤 --&gt;</span><br><span class="line">&lt;mvc:resources location=<span class="string">"/css/"</span> mapping=<span class="string">"/css/**"</span>/&gt; &lt;!-- 样式 --&gt; </span><br><span class="line">&lt;mvc:resources location=<span class="string">"/images/"</span> mapping=<span class="string">"/images/**"</span>/&gt; &lt;!-- 图片 --&gt; </span><br><span class="line">&lt;mvc:resources location=<span class="string">"/js/"</span> mapping=<span class="string">"/js/**"</span>/&gt; &lt;!-- javascript --&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestBody获取请求体数据"><a href="#使用-RequestBody获取请求体数据" class="headerlink" title="使用@RequestBody获取请求体数据"></a>使用@RequestBody获取请求体数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载</span></span><br><span class="line"><span class="comment">// 页面加载 </span></span><br><span class="line">$(function()&#123;</span><br><span class="line"><span class="comment">// 绑定点击事件 </span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"user/testJson"</span>, </span><br><span class="line">contentType:<span class="string">"application/json;charset=UTF-8"</span>, data:<span class="string">'&#123;"addressName":"aa","addressNum":100&#125;'</span>, </span><br><span class="line">dataType:<span class="string">"json"</span>,</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">alert(data.addressName); </span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取请求体的数据 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">(@RequestBody String body)</span> </span>&#123;</span><br><span class="line">System.out.println(body); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestBody注解把json的字符串转换成JavaBean的对象"><a href="#使用-RequestBody注解把json的字符串转换成JavaBean的对象" class="headerlink" title="使用@RequestBody注解把json的字符串转换成JavaBean的对象"></a>使用@RequestBody注解把json的字符串转换成JavaBean的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 页面加载</span></span><br><span class="line"><span class="comment">// 页面加载 </span></span><br><span class="line">$(function()&#123;</span><br><span class="line"><span class="comment">// 绑定点击事件 </span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"user/testJson"</span>, </span><br><span class="line">contentType:<span class="string">"application/json;charset=UTF-8"</span>, data:<span class="string">'&#123;"addressName":"aa","addressNum":100&#125;'</span>, </span><br><span class="line">dataType:<span class="string">"json"</span>,</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">alert(data.addressName); </span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取请求体的数据 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">(@RequestBody Address address)</span> </span>&#123;</span><br><span class="line">System.out.println(address); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ResponseBody注解把JavaBean对象转换成json字符串，直接响应"><a href="#使用-ResponseBody注解把JavaBean对象转换成json字符串，直接响应" class="headerlink" title="使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应"></a>使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</h3><ol><li>要求方法需要返回JavaBean的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载 </span></span><br><span class="line">$(function()&#123;</span><br><span class="line"><span class="comment">// 绑定点击事件 </span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"user/testJson"</span>, </span><br><span class="line">contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">data:<span class="string">'&#123;"addressName":"哈哈","addressNum":100&#125;'</span>,</span><br><span class="line">dataType:<span class="string">"json"</span>, type:<span class="string">"post"</span>, </span><br><span class="line">success:function(data)&#123;</span><br><span class="line">               alert(data);</span><br><span class="line">alert(data.addressName); </span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Address <span class="title">testJson</span><span class="params">(@RequestBody Address address)</span> </span>&#123;</span><br><span class="line">System.out.println(address); </span><br><span class="line">address.setAddressName(<span class="string">"上海"</span>); </span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包"><a href="#json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包" class="headerlink" title="json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包"></a>json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h2><h3 id="以前文件上传方式"><a href="#以前文件上传方式" class="headerlink" title="以前文件上传方式"></a>以前文件上传方式</h3><h4 id="导入文件上传的jar包"><a href="#导入文件上传的jar包" class="headerlink" title="导入文件上传的jar包"></a>导入文件上传的jar包</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt; </span><br><span class="line">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; </span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-io&lt;/groupId&gt; </span><br><span class="line">&lt;artifactId&gt;commons-io&lt;/artifactId&gt; </span><br><span class="line">&lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="编写文件上传的JSP页面"><a href="#编写文件上传的JSP页面" class="headerlink" title="编写文件上传的JSP页面"></a>编写文件上传的JSP页面</h4><ul><li>form表单的 enctype值必须是：multipart/form-data</li><li>method属性必须是：post</li><li>需提供一个文件域：input type=”file”</li></ul><pre><code class="java">&lt;h3&gt;文件上传&lt;/h3&gt;&lt;form action=<span class="string">"user/fileupload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;     选择文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传文件"</span>/&gt;&lt;/form&gt;&lt;!--￼<span class="number">34</span>--&gt;![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/03-%E5%8E%9F%E7%90%86.bmp)</span>### SpringMVC传统方式文件上传* SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的name属性名称相同。* MultipartFile upload 的upload这个名字与表单的name值需要一样，识别&lt;!--￼<span class="number">35</span>--&gt;* 配置文件解析器对象&lt;!--￼<span class="number">36</span>--&gt;### SpringMVC跨服务器方式文件上传#### 搭建图片服务器<span class="number">1</span>. 根据文档配置tomcat9的服务器，现在是<span class="number">2</span>个服务器<span class="number">2</span>. 导入资料中day02_springmvc5_02image项目，作为图片服务器使用![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/04.bmp)</span>#### 实现SpringMVC跨服务器方式文件上传* 导入开发需要的jar包&lt;!--￼<span class="number">37</span>--&gt;* 编写文件上传的JSP页面&lt;!--￼<span class="number">38</span>--&gt;*  编写控制器&lt;!--￼<span class="number">39</span>--&gt;## SpringMVC的异常处理### 异常处理思路* Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进 行异常的处理。![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/05.bmp)</span>### SpringMVC的异常处理#### 自定义异常类&lt;!--￼<span class="number">40</span>--&gt;#### 自定义异常处理器```java <span class="keyword">package</span> cn.itcast.exception;<span class="keyword">import</span> javax.servlet.http.HttpServletRequest; <span class="keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver; <span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="comment">/**</span><span class="comment">* 异常处理器 * <span class="doctag">@author</span> rt */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>{    <span class="comment">/**</span><span class="comment">    * 跳转到具体的错误页面的方法 </span><span class="comment">    */</span>    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span><span class="function"><span class="params">response, Object handler,Exception ex)</span> </span>{     ex.printStackTrace();     SysException e = <span class="keyword">null</span>;     <span class="comment">// 获取到异常对象</span>    <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SysException) {         e = (SysException) ex;    }<span class="keyword">else</span> {        e = <span class="keyword">new</span> SysException(<span class="string">"请联系管理员"</span>);    }    ModelAndView mv = <span class="keyword">new</span> ModelAndView();     <span class="comment">// 存入错误的提示信息 </span>    mv.addObject(<span class="string">"message"</span>, e.getMessage());     <span class="comment">// 跳转的Jsp页面</span>    mv.setViewName(<span class="string">"error"</span>);    <span class="keyword">return</span> mv;    } }&lt;!--￼<span class="number">41</span>--&gt;## SpringMVC框架中的拦截器### 拦截器的概述![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/06.bmp)</span><span class="number">1</span>. SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。<span class="number">2</span>. 可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行。<span class="number">3</span>. 拦截器和过滤器的功能比较类似，有区别    <span class="number">1</span>. 过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。     <span class="number">2</span>. 拦截器是SpringMVC框架独有的。    <span class="number">3</span>. 过滤器配置了<span class="comment">/*，可以拦截任何资源。</span><span class="comment">    4. 拦截器只会对控制器中的方法进行拦截。</span><span class="comment">4. 拦截器也是AOP思想的一种实现方式</span><span class="comment">5. 想要自定义拦截器，需要实现HandlerInterceptor接口。</span><span class="comment"></span><span class="comment">### 自定义拦截器步骤</span><span class="comment"></span><span class="comment">#### 创建拦截器类，实现HandlerInterceptor接口，重写需要的方法</span><span class="comment"></span><span class="comment"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo1;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest; </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义拦截器1 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> rt </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* controller方法执行前，进行拦截的方法</span></span><br><span class="line"><span class="comment">* return true放行, 执行下一个拦截器，没有就实现controller的方法</span></span><br><span class="line"><span class="comment">* return false拦截</span></span><br><span class="line"><span class="comment">* 可以使用转发或者重定向直接跳转到指定的页面。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"拦截器执行了..."</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span><span class="comment"></span><span class="comment">#### 在springmvc.xml中配置拦截器类</span><span class="comment"></span><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 配置拦截器 --&gt; </span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!-- 哪些方法进行拦截 --&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/user/*"</span>/&gt;</span><br><span class="line">&lt;!-- 哪些方法不进行拦截</span><br><span class="line">&lt;mvc:exclude-mapping path=<span class="string">""</span>/&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 注册拦截器对象 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.demo1.MyInterceptor1"</span>/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></span><span class="comment"></span><span class="comment">### HandlerInterceptor接口中的方法</span><span class="comment"></span><span class="comment">####  preHandle方法是controller方法执行前拦截的方法</span><span class="comment"></span><span class="comment">1. 可以使用request或者response跳转到指定的页面</span><span class="comment">2. return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。 </span><span class="comment">3. return false不放行，不会执行controller中的方法。</span><span class="comment"></span><span class="comment">#### postHandle是controller方法执行后执行的方法，在JSP视图执行前。 </span><span class="comment"></span><span class="comment">1. 可以使用request或者response跳转到指定的页面</span><span class="comment">2. 如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。 </span><span class="comment"></span><span class="comment">#### postHandle方法是在JSP执行后执行</span><span class="comment"></span><span class="comment">1. request或者response不能再跳转页面了</span><span class="comment"></span><span class="comment">### 配置多个拦截器</span><span class="comment"></span><span class="comment">1. 再编写一个拦截器的类 </span><span class="comment">2. 配置2个拦截器</span><span class="comment"></span><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 配置拦截器 --&gt; </span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!-- 哪些方法进行拦截 --&gt; </span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/user/*"</span>/&gt; </span><br><span class="line">&lt;!-- 哪些方法不进行拦截 &lt;mvc:exclude-mapping path=<span class="string">""</span>/&gt;--&gt;  &lt;!-- 注册拦截器对象 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.demo1.MyInterceptor1"</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!-- 哪些方法进行拦截 --&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;!-- 注册拦截器对象 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.demo1.MyInterceptor2"</span>/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术01--Tomcat</title>
      <link href="/2019/07/05/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF01--Tomcat/"/>
      <url>/2019/07/05/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF01--Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="web相关概念"><a href="#web相关概念" class="headerlink" title="web相关概念"></a>web相关概念</h2><h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol><h3 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h3><ol><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析<ul><li>如： html,css,JavaScript</li></ul></li><li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul><li>如：servlet/jsp,php,asp….</li></ul></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB.bmp" alt="">            </p><ol start="3"><li>网络通信三要素<ol><li>IP：电子设备(计算机)在网络中的唯一标识。</li><li>端口：应用程序在计算机中的唯一标识。 0~65536</li><li>传输协议：规定了数据传输的规则<ol><li>基础协议：<ol><li>tcp:安全协议，三次握手。 速度稍慢</li><li>udp：不安全协议。 速度快</li></ol></li></ol></li></ol></li></ol><h2 id="web服务器软件："><a href="#web服务器软件：" class="headerlink" title="web服务器软件："></a>web服务器软件：</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li><li>web服务器软件：接收用户的请求，处理请求，做出响应。<ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li></ul><h3 id="常见的java相关的web服务器软件："><a href="#常见的java相关的web服务器软件：" class="headerlink" title="常见的java相关的web服务器软件："></a>常见的java相关的web服务器软件：</h3><ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul><h3 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h3><ul><li>Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</li></ul><h2 id="Tomcat：web服务器软件"><a href="#Tomcat：web服务器软件" class="headerlink" title="Tomcat：web服务器软件"></a>Tomcat：web服务器软件</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt=""></p><ol><li><p>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p></li><li><p>安装：解压压缩包即可。</p><ul><li>注意：安装目录建议不要有中文和空格</li></ul></li><li><p>卸载：删除目录就行了</p></li><li><p>启动：</p><ul><li><p>bin/startup.bat ,<code>sudo sh startup.sh</code> 双击运行该文件即可</p></li><li><p>访问：浏览器输入：</p><ul><li><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 回车访问自己</li><li>http://别人的ip:8080 访问别人</li></ul></li><li><p>可能遇到的问题：</p><ol><li><p>黑窗口一闪而过：</p><ul><li>原因： 没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ul></li><li><p>启动报错：</p><ol><li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程<ul><li>netstat -ano</li></ul></li><li>温柔：修改自身的端口号<ul><li>conf/server.xml</li><li>`&lt;Connector port=”8888” protocol=”HTTP/1.1”<pre><code>connectionTimeout=&quot;20000&quot;redirectPort=&quot;8445&quot; /&gt;`</code></pre></li><li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</li><li>好处：在访问时，就不用输入端口号</li></ul></li></ol></li></ol></li></ul></li><li><p>关闭：</p><ol><li>正常关闭：<ul><li>bin/shutdown.bat <code>sudo sh shutdown.bat</code></li><li>ctrl+c</li></ul></li><li>强制关闭：<ul><li>点击启动窗口的×</li></ul></li></ol></li><li><p>配置:</p><ul><li><p>部署项目的方式：</p><ol><li>直接将项目放到webapps目录下即可。<ul><li>/hello：项目的访问路径–&gt;虚拟目录</li></ul></li></ol></li><li><p>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</p><ul><li>war包会自动解压缩</li></ul><ol start="2"><li><p>配置conf/server.xml文件在<Host>标签体中配置<br> <code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code></p><ul><li>docBase:项目存放的路径</li><li>path：虚拟目录</li></ul></li><li><p>在<code>conf\Catalina\localhost</code>创建任意名称的xml文件。在文件中编写</p><pre><code>`&lt;Context docBase=&quot;D:\hello&quot; /&gt;`</code></pre><ul><li><p>虚拟目录：xml文件的名称</p></li><li><p>静态项目和动态项目：</p><ul><li><p>目录结构</p><ul><li><p>java动态项目的目录结构：</p><pre><code>-- 项目的根目录    -- WEB-INF目录：        -- web.xml：web项目的核心配置文件        -- classes目录：放置字节码文件的目录        -- lib目录：放置依赖的jar包</code></pre></li></ul></li></ul></li></ul></li></ol></li></ul></li></ol><pre><code>* 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</code></pre><h2 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h2><h3 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h3><ol><li><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</p><ul><li><p>查看控制台的log：</p><p><code>CATALINA_BASE：[/Users/jwang/Library/Caches/JetBrains/IntelliJIdea2020.1/tomcat/Tomcat_9_0_34_servletstu_2]</code></p></li></ul></li><li><p>工作空间项目 和 tomcat部署的web项目</p><ul><li>tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li><p>断点调试：使用”小虫子”启动 dubug 启动</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程05 -- 面向对象</title>
      <link href="/2019/07/02/Java%E7%BC%96%E7%A8%8B05%20--%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/02/Java%E7%BC%96%E7%A8%8B05%20--%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-面向对象思想"><a href="#第1章-面向对象思想" class="headerlink" title="第1章 面向对象思想"></a>第1章 面向对象思想</h1><h2 id="1-1-面向对象思想概述"><a href="#1-1-面向对象思想概述" class="headerlink" title="1.1 面向对象思想概述"></a>1.1 面向对象思想概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下， 使用Java语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面 向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算 机事件的设计思想。 它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去 操作实现。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>洗衣服:</p><ul><li>面向过程:把衣服脱下来–&gt;找一个盆–&gt;放点洗衣粉–&gt;加点水–&gt;浸泡10分钟–&gt;揉一揉–&gt;清洗衣服–&gt;拧干–&gt;晾 起来</li><li>面向对象:把衣服脱下来–&gt;打开全自动洗衣机–&gt;扔衣服–&gt;按钮–&gt;晾起来</li></ul><p>区别:</p><ul><li><p>面向过程:强调步骤。 </p></li><li><p>面向对象:强调对象，这里的对象就是洗衣机。</p></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。 面向对象的语言中，包含了三大基本特征，即封装、继承和多态。</p><h2 id="1-2-类和对象"><a href="#1-2-类和对象" class="headerlink" title="1.2 类和对象"></a>1.2 类和对象</h2><p>环顾周围，你会发现很多对象，比如桌子，椅子，同学，老师等。桌椅属于办公用品，师生都是人类。那么什么是类呢?什么是对象呢? </p><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><ul><li>类:是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该 类事物。</li></ul><p>现实中，描述一类事物:</p><ul><li><p>属性:就是该事物的状态信息。 行为:就是该事物能够做什么。<br>举例:小猫。</p></li><li><p>属性:名字、体重、年龄、颜色。 行为:走、跑、叫。</p></li></ul><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><ul><li>对象:是一类事物的具体体现。对象是类的一个实例(对象并不是找个女朋友)，必然具备该类事物的属性和行为。</li></ul><p>现实中，一类事物的一个实例:一只小猫。 </p><p>举例:  一只小猫。</p><p>属性:tom、5kg、2 years、yellow。 行为:溜墙根走、蹦跶的跑、喵喵叫。 </p><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li>类是对一类事物的描述，是抽象的。 </li><li>对象是一类事物的实例，是具体的。 </li><li>类是对象的模板，对象是类的实体。</li></ul><h2 id="1-3-类的定义"><a href="#1-3-类的定义" class="headerlink" title="1.3 类的定义"></a>1.3 类的定义</h2><h3 id="事物与类的对比"><a href="#事物与类的对比" class="headerlink" title="事物与类的对比"></a>事物与类的对比</h3><p>现实世界的一类事物:</p><ul><li><p>属性:事物的状态信息。 </p></li><li><p>行为:事物能够做什么。 </p></li></ul><p>Java中用class描述事物也是如此:</p><ul><li>成员变量:对应事物的属性 </li><li>成员方法:对应事物的行为 </li></ul><h3 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h3><ul><li><p>定义类:就是定义类的成员，包括成员变量和成员方法。 </p></li><li><p>成员变量:和以前定义变量几乎是一样的。只不过位置发生了改变。在类中，方法外。 </p></li><li><p>成员方法:和以前定义方法几乎是一样的。只不过把static去掉。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的定义格式举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">String name;<span class="comment">//姓名 </span></span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="comment">//学习的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//吃饭的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学习饿了要吃饭"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-对象的使用"><a href="#1-4-对象的使用" class="headerlink" title="1.4 对象的使用"></a>1.4 对象的使用</h2><h3 id="对象的使用格式"><a href="#对象的使用格式" class="headerlink" title="对象的使用格式"></a>对象的使用格式</h3><ul><li>创建对象:</li></ul><p><code>类名 对象名 = new 类名();</code></p><ul><li><p>使用对象访问类中的成员:</p><pre><code>对象名.成员变量; 对象名.成员方法();</code></pre></li><li><p>对象的使用格式举例:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01_Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象格式:类名 对象名 = new 类名();</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(<span class="string">"s:"</span>+s); <span class="comment">//cn.itcast.Student@100363</span></span><br><span class="line"><span class="comment">//直接输出成员变量值 </span></span><br><span class="line">System.out.println(<span class="string">"姓名:"</span>+s.name); <span class="comment">//null </span></span><br><span class="line">System.out.println(<span class="string">"年龄:"</span>+s.age); <span class="comment">//0 </span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"><span class="comment">//给成员变量赋值 </span></span><br><span class="line">s.name = <span class="string">"赵丽颖"</span>; </span><br><span class="line">s.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次输出成员变量的值 </span></span><br><span class="line">System.out.println(<span class="string">"姓名:"</span>+s.name); <span class="comment">//赵丽颖 </span></span><br><span class="line">System.out.println(<span class="string">"年龄:"</span>+s.age); <span class="comment">//18 </span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"><span class="comment">//调用成员方法</span></span><br><span class="line">s.study(); <span class="comment">// "好好学习，天天向上" </span></span><br><span class="line">s.eat(); <span class="comment">// "学习饿了要吃饭"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h3><table><thead><tr><th align="center"></th><th align="center">数据类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">基本类型</td><td align="center">整数(byte，short，int，long)</td><td align="center">0</td></tr><tr><td align="center"></td><td align="center">浮点数(float，double)</td><td align="center">0.0</td></tr><tr><td align="center"></td><td align="center">字符(char)</td><td align="center">‘\u0000’</td></tr><tr><td align="center"></td><td align="center">布尔(boolean)</td><td align="center">false</td></tr><tr><td align="center">引用类型</td><td align="center">数组，类，接口</td><td align="center">null</td></tr></tbody></table><h2 id="1-5-类与对象的练习"><a href="#1-5-类与对象的练习" class="headerlink" title="1.5 类与对象的练习"></a>1.5 类与对象的练习</h2><h3 id="定义手机类"><a href="#定义手机类" class="headerlink" title="定义手机类"></a>定义手机类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123; </span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">String brand; <span class="comment">//品牌 </span></span><br><span class="line"><span class="keyword">int</span> price; <span class="comment">//价格 </span></span><br><span class="line">String color; <span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="comment">//打电话</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发短信</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"群发短信"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义测试类"><a href="#定义测试类" class="headerlink" title="定义测试类"></a>定义测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//输出成员变量值 System.out.println("品牌:"+p.brand);//null </span></span><br><span class="line">System.out.println(<span class="string">"价格:"</span>+p.price);<span class="comment">//0 </span></span><br><span class="line">System.out.println(<span class="string">"颜色:"</span>+p.color);<span class="comment">//null</span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"></span><br><span class="line">p.brand = <span class="string">"锤子"</span>; </span><br><span class="line">p.price = <span class="number">2999</span>; </span><br><span class="line">p.color = <span class="string">"棕色"</span>;</span><br><span class="line"><span class="comment">//再次输出成员变量值 </span></span><br><span class="line">System.out.println(<span class="string">"品牌:"</span>+p.brand);<span class="comment">//锤子 </span></span><br><span class="line">System.out.println(<span class="string">"价格:"</span>+p.price);<span class="comment">//2999 </span></span><br><span class="line">System.out.println(<span class="string">"颜色:"</span>+p.color);<span class="comment">//棕色 </span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"><span class="comment">//调用成员方法 </span></span><br><span class="line">p.call(<span class="string">"紫霞"</span>); </span><br><span class="line">p.sendMessage();</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-对象内存图"><a href="#1-6-对象内存图" class="headerlink" title="1.6 对象内存图"></a>1.6 对象内存图</h2><h3 id="只有一个对象的内存图"><a href="#只有一个对象的内存图" class="headerlink" title="只有一个对象的内存图"></a>只有一个对象的内存图</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/01-%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="只有一个对象的内存图"></p><h3 id="两个对象使用同一个方法的内存图"><a href="#两个对象使用同一个方法的内存图" class="headerlink" title="两个对象使用同一个方法的内存图"></a>两个对象使用同一个方法的内存图</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/02-%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="两个对象使用同一个方法的内存图"></p><h3 id="两个引用指向同一个对象的内存图"><a href="#两个引用指向同一个对象的内存图" class="headerlink" title="两个引用指向同一个对象的内存图"></a>两个引用指向同一个对象的内存图</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/03-%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="两个引用指向同一个对象的内存图"></p><h3 id="使用对象类型作为方法的参数"><a href="#使用对象类型作为方法的参数" class="headerlink" title="使用对象类型作为方法的参数"></a>使用对象类型作为方法的参数</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/04-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="使用对象类型作为方法的参数"></p><h3 id="使用对象类型作为方法的返回值"><a href="#使用对象类型作为方法的返回值" class="headerlink" title="使用对象类型作为方法的返回值"></a>使用对象类型作为方法的返回值</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/05-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="使用对象类型作为方法的返回值"></p><h2 id="1-7-成员变量和局部变量区别"><a href="#1-7-成员变量和局部变量区别" class="headerlink" title="1.7 成员变量和局部变量区别"></a>1.7 成员变量和局部变量区别</h2><p>变量根据定义位置的不同，我们给变量起了不同的名字。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String color;  <span class="comment">//成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> speed = <span class="number">80</span>; <span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(<span class="string">"时速"</span>+speed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在类中的位置不同"><a href="#在类中的位置不同" class="headerlink" title="在类中的位置不同"></a>在类中的位置不同</h3><ul><li>成员变量:类中，方法外</li><li>局部变量:方法中或者方法声明上(形式参数) </li></ul><h3 id="作用范围不一样"><a href="#作用范围不一样" class="headerlink" title="作用范围不一样"></a>作用范围不一样</h3><ul><li>成员变量:类中 </li><li>局部变量:方法中</li></ul><h3 id="初始化值的不同"><a href="#初始化值的不同" class="headerlink" title="初始化值的不同"></a>初始化值的不同</h3><ul><li>成员变量:有默认值 </li><li>局部变量:没有默认值。必须先定义，赋值，最后使用</li></ul><h3 id="在内存中的位置不同"><a href="#在内存中的位置不同" class="headerlink" title="在内存中的位置不同"></a>在内存中的位置不同</h3><ul><li>成员变量:堆内存 </li><li>局部变量:栈内存</li></ul><h3 id="生命周期不同"><a href="#生命周期不同" class="headerlink" title="生命周期不同"></a>生命周期不同</h3><ul><li>成员变量:随着对象的创建而存在，随着对象的消失而消失 </li><li>局部变量:随着方法的调用而存在，随着方法的调用完毕而消失</li></ul><h1 id="第二章-封装"><a href="#第二章-封装" class="headerlink" title="第二章 封装"></a>第二章 封装</h1><h2 id="2-1-封装概述"><a href="#2-1-封装概述" class="headerlink" title="2.1 封装概述"></a>2.1 封装概述</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。 封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的 方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>将属性隐藏起来，若需要访问某个属性，提供公共方法对其访问。</p><h2 id="2-2-封装的步骤"><a href="#2-2-封装的步骤" class="headerlink" title="2.2 封装的步骤"></a>2.2 封装的步骤</h2><ul><li>使用 private 关键字来修饰成员变量。</li><li>对需要访问的成员变量，提供对应的一对 getXxx 方法 、 setXxx 方法。 </li></ul><h2 id="2-3-封装的操作——private关键字"><a href="#2-3-封装的操作——private关键字" class="headerlink" title="2.3 封装的操作——private关键字"></a>2.3 封装的操作——private关键字</h2><h3 id="private的含义"><a href="#private的含义" class="headerlink" title="private的含义"></a>private的含义</h3><ol><li>private是一个权限修饰符，代表最小权限。</li><li>可以修饰成员变量和成员方法。</li><li>被private修饰后的成员变量和成员方法，只在本类中才能访问。</li></ol><h3 id="private的使用格式"><a href="#private的使用格式" class="headerlink" title="private的使用格式"></a>private的使用格式</h3><ul><li>使用 private 修饰成员变量，代码如下</li></ul><p><code>private 数据类型 变量名 ;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提供 getXxx 方法 / setXxx 方法，可以访问成员变量，代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123; </span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-封装优化1——this关键字"><a href="#2-4-封装优化1——this关键字" class="headerlink" title="2.4 封装优化1——this关键字"></a>2.4 封装优化1——this关键字</h2><p>发现 setXxx 方法中的形参名字并不符合见名知意的规定，那么如果修改与成员变量名一致，是否就见名知意 了呢?代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        name = name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">        age = age;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过修改和测试，我们发现新的问题，成员变量赋值失败了。也就是说，在修改了 setXxx() 的形参变量名后，方 法并没有给成员变量赋值!这是由于形参变量名与成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无 法访问到成员变量，从而赋值失败。所以，我们只能使用this关键字，来解决这个重名问题。</p><h3 id="this的含义"><a href="#this的含义" class="headerlink" title="this的含义"></a>this的含义</h3><ul><li>this代表所在类的当前对象的引用(地址值)，即对象自己的引用。</li></ul><blockquote><p>记住 :方法被哪个对象调用，方法中的this就代表那个对象。即谁在调用，this就代表谁。</p></blockquote><h3 id="this使用格式"><a href="#this使用格式" class="headerlink" title="this使用格式"></a>this使用格式</h3><p><code>this.成员变量名</code></p><ul><li><p>使用 this 修饰方法中的变量，解决成员变量被隐藏的问题，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//name = name;</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//age = age;</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>小贴士:方法中只有一个变量名时，默认也是使用 this 修饰，可以省略不写。</p></blockquote><h2 id="2-5-封装优化2——构造方法"><a href="#2-5-封装优化2——构造方法" class="headerlink" title="2.5 封装优化2——构造方法"></a>2.5 封装优化2——构造方法</h2><ul><li>当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</li></ul><blockquote><p>小贴士:无论你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数构造方法， 一旦自己定义了构造方法，Java自动提供的默认无参数构造方法就会失效。</p></blockquote><h3 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 构造方法名(参数列表)&#123; </span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，甚至不需要void。使用 构造方法后，代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>如果你不提供构造方法，系统会给出无参数构造方法。</li><li>如果你提供了构造方法，系统将不再提供无参数构造方法。</li><li>构造方法是可以重载的，既可以定义参数，也可以不定义参数。</li></ol><h2 id="2-6-标准代码——JavaBean"><a href="#2-6-标准代码——JavaBean" class="headerlink" title="2.6 标准代码——JavaBean"></a>2.6 标准代码——JavaBean</h2><p>JavaBean 是 Java语言编写类的一种标准规范。符合 JavaBean 的类，要求类必须是具体的和公共的，并且具有无参数的构造方法，提供用来操作成员变量的 set 和 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123; </span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//构造方法 </span></span><br><span class="line">    <span class="comment">// 无参构造方法【必须】 </span></span><br><span class="line">    <span class="comment">// 有参构造方法【建议】 </span></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="comment">//getXxx()</span></span><br><span class="line">    <span class="comment">//setXxx()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写符合 JavaBean 规范的类，以学生类为例，标准代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类，代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造使用</span></span><br><span class="line">        Student s= <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>); System.out.println(s.getName()+<span class="string">"‐‐‐"</span>+s.getAge());</span><br><span class="line">        <span class="comment">//带参构造使用</span></span><br><span class="line">        Student s2= <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>,<span class="number">18</span>); </span><br><span class="line">        System.out.println(s2.getName()+<span class="string">"‐‐‐"</span>+s2.getAge());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端开发02 -- 请求方法区别</title>
      <link href="/2019/06/26/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%9102%20--%20%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/06/26/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%9102%20--%20%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容： 对DRF中的请求头进行解释，方便查阅</p><a id="more"></a><h2 id="get-put-post-delete含义与区别"><a href="#get-put-post-delete含义与区别" class="headerlink" title="get,put,post,delete含义与区别"></a>get,put,post,delete含义与区别</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><table><thead><tr><th>名称</th><th>url</th><th>含义</th></tr></thead><tbody><tr><td>POST</td><td>/uri</td><td>创建</td></tr><tr><td>DELETE</td><td>/uri/xxx</td><td>删除</td></tr><tr><td>PUT</td><td>/uri/xxx</td><td>更新或创建</td></tr><tr><td>GET</td><td>/uri/xxx</td><td>查看</td></tr></tbody></table><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>GET操作是安全的。</p><p>  所谓安全是指不管进行多少次操作，资源的状态都不会改变。比如我用GET浏览文章，不管浏览多少次，那篇文章还在那，没有变化。当然，你可能说每浏览一次文章，文章的浏览数就加一，这不也改变了资源的状态么？这并不矛盾，因为这个改变不是GET操作引起的，而是用户自己设定的服务端逻辑造成的。</p></li><li><p>PUT，DELETE操作是幂等的。</p><p>  所谓幂等是指不管进行多少次操作，结果都一样。比如我用PUT修改一篇文章，然后在做同样的操作，每次操作后的结果并没有不同，<br>  DELETE也是一样。顺便说一句，因为GET操作是安全的，所以它自然也是幂等的。</p></li><li><p>POST操作既不是安全的，也不是幂等。</p><p>  比如常见的POST重复加载问题：当我们多次发出同样的POST请求后，其结果是创建出了若干的资源。</p></li><li><p>安全和幂等的意义在于：</p><p>  当操作没有达到预期的目标时，我们可以不停的重试，而不会对资源产生副作用。从这个意义上说，POST操作往往是有害的，但很多时候我们还是不得不使用它。还有一点需要注意的就是，创建操作可以使用POST，也可以使用PUT，区别在于POST 是作用在一个集合资源之上的（/uri），而PUT操作是作用在一个具体资源之上的（/uri/xxx），再通俗点说，如果URL可以在客户端确定，那么就使用PUT，如果是在服务端确定，那么就使用POST，比如说很多资源使用数据库自增主键作为标识信息，而创建的资源的标识信息到底是什么只能由服务端提供，这个时候就必须使用POST。</p></li></ul><h3 id="关于GET-POST-的混淆"><a href="#关于GET-POST-的混淆" class="headerlink" title="关于GET POST 的混淆"></a>关于GET POST 的混淆</h3><ul><li><p>先说相同点，只有了解了相同点之后才能理解为什么会发生混淆。两者都能向服务器发送数据，提交的“内容”[注1]的格式相同，都是</p><blockquote><p>param1=value1&amp;param2=value2&amp;….  </p></blockquote></li><li><p>get 和 post 区别如字面，一个是get（获取），一个是post（发送）。</p><blockquote><p>get用来告诉服务器需要获取哪些内容（uri+query），向静态页面（uri）请求则直接返回文件内容给浏览器，向一个动态页面请求时<br>  可以提供查询参数（query）以获得相应内容。</p></blockquote><blockquote><p>post用来向服务器提交内容，主要是为了提交，而不是为了请求内容，就是说post的初衷并不要求服务器返回内容[注2]，只是提交内<br>  容让服务器处理（主要是存储或者处理之后再存储）。</p></blockquote></li><li><p>get和post出现混淆是因为对提交的数据处理方法的滥用造成的，数据是无辜的。</p><blockquote><p>混淆之一：</p></blockquote><blockquote><blockquote><p>将get提交的用来查询的字段当作是存储数据存入了服务器端文件或者数据库。然后就误以为get是用来提交用于存储的数据的。</p></blockquote></blockquote><blockquote><p>混淆之二：</p></blockquote><blockquote><blockquote><p>编写脚本在服务器端通过处理post提交的数据并返回内容。只要有数据，就能用来进行判断，脚本怎写是程序员的事，而不在乎数据来源的形<br>  式（post、get，或者是自己预设值的常量）。这点功能上确实没问题，只是背离的其初始目的而已。</p></blockquote></blockquote></li></ul><pre><code>由于都是要传送数据，且数据格式相同（即使数据格式不同，只要能提取出相应数据）。使用的时候难免出现张冠李戴，将get数据用来存储、将post数据用来检索返回数据。</code></pre><ul><li><p>二者区别（用途而“人为”造成）：</p><p>  get的长度限制在2048字节（由浏览器和服务器限制的，这是目前IE的数据，曾经是1024字节），很大程度上限制了get用来传递“存储数据”的数据的能力，所以还是老老实实用来做检索吧；post则无此限制（只是HTTP协议规范没有进行大小限制，但受限于服务器的处理能力），因此对于大的数据（一般来说需要存储的数据可能会比较大，比2048字节大）的传递有天然的优势，谁让它是 nature born post 呢。</p></li></ul><pre><code>get提交的数据是放在url里，目的是灵活的向服务其提交检索请求，可以在地址栏随时修改数据以变更需要获取的内容，比如直接修改分页的编号就跳到另外一个分页了（当然也可能是 404）。post提交的数据放在http请求的正文里，目的在于提交数据并用于服务器端的存储，而不允许用户过多的更改相应数据（主要是相对于在url 修改要麻烦很多，url的修改只要点击地址栏输入字符就可以了），除非是专门跑来编辑数据的。post和get的安全性在传输的层面上区别不大，但是采用url提交数据的get方式容易被人肉眼看到，或者出现在历史纪录里，还是可能被肉眼看到，都是一些本地的问题。注：get方式主要是为了获得预期内容，即uri+query相同时所得到的内容应该是相同的。而post主要是提交内容，至于是否有必要返回页面可</code></pre><p>能只是出于用户体验，比如注册时返回你的注册id，但是如果只是返回一个“您已注册成功”的相同页面（即使你post的数据不一样）也没什么好奇怪的。</p><h3 id="HTTP-POST-GET-本质区别"><a href="#HTTP-POST-GET-本质区别" class="headerlink" title="HTTP POST GET 本质区别"></a>HTTP POST GET 本质区别</h3><ul><li><p>原理区别</p><p>  一般在浏览器中输入网址访问资源都是通过GET方式；在FORM提交中，可以通过Method指定提交方式为GET或者POST，默认为GET提交<br>  Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE URL 全称是资源描述符，我们可以这样认<br>  为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查 ，改 ，增 ，删 4个<br>  操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询 资源信息，而POST一般用于更新 资源信息(个人认为这是GET和POST<br>  的本质区别，也是协议设计者的本意，其它区别都是具体表现形式的差异 )。 　　</p></li><li><p>根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的 。 　　</p></li><li><p>所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数<br>  据库查询一样，不会修改，增加数据，不会影响资源的状态。   　　</p><blockquote><p>注意：这里安全的含义仅仅是指是非修改信息。 　　</p></blockquote></li><li><p>幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等 这个概念： 　　</p><blockquote><p>幂等 （idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。 　　</p></blockquote><blockquote><p>幂等有以下几种定义</p><blockquote><p>对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a) = abs(abs(a)) 。</p></blockquote></blockquote><blockquote><blockquote><p>对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x 。 看完上述解释后，应该可以理解GET幂等的含义了。 　　</p></blockquote></blockquote><blockquote><p>但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。 </p></blockquote><blockquote><p>根据HTTP规范，POST表示可能修改变服务器上的资源的请求 。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。 　　</p></blockquote></li></ul><ul><li><p>上面大概说了一下HTTP规范中，GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p><blockquote><p>1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。　　</p></blockquote><blockquote><p>2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。 　　</p></blockquote><blockquote><p>3.另外一个是，早期的但是Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计 。还有一个较为严重的问题是</p><pre><code>传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</code></pre></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Rest_Framework </tag>
            
            <tag> 请求方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架08 -- Spring Data JPA</title>
      <link href="/2019/06/20/JAVA%E6%A1%86%E6%9E%B608%20--%20Spring%20Data%20JPA/"/>
      <url>/2019/06/20/JAVA%E6%A1%86%E6%9E%B608%20--%20Spring%20Data%20JPA/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h1><h2 id="Spring-Data-JPA概述"><a href="#Spring-Data-JPA概述" class="headerlink" title="Spring Data JPA概述"></a>Spring Data JPA概述</h2><ul><li>Spring Data JPA 让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现,在实际的工作工程中，推荐使用Spring Data JPA + ORM（如：hibernate）完成操作，这样在切换不同的ORM框架时提供了极大的方便，同时也使数据库层操作更加简单，方便解耦</li></ul><h2 id="Spring-Data-JPA的特性"><a href="#Spring-Data-JPA的特性" class="headerlink" title="Spring Data JPA的特性"></a>Spring Data JPA的特性</h2><ul><li>SpringData Jpa 极大简化了数据库访问层代码。 如何简化的呢？ 使用了SpringDataJpa，我们的dao层中只需要写接口，就自动具有了增删改查、分页查询等方法。</li></ul><h2 id="Spring-Data-JPA-与-JPA和hibernate之间的关系"><a href="#Spring-Data-JPA-与-JPA和hibernate之间的关系" class="headerlink" title="Spring Data JPA 与 JPA和hibernate之间的关系"></a>Spring Data JPA 与 JPA和hibernate之间的关系</h2><ul><li>JPA是一套规范，内部是有接口和抽象类组成的。hibernate是一套成熟的ORM框架，而且Hibernate实现了JPA规范，所以也可以称hibernate为JPA的一种实现方式，我们使用JPA的API编程，意味着站在更高的角度上看待问题（面向接口编程）</li><li>Spring Data JPA是Spring提供的一套对JPA操作更加高级的封装，是在JPA规范下的专门用来进行数据持久化的解决方案。</li></ul><h1 id="Spring-Data-JPA的快速入门"><a href="#Spring-Data-JPA的快速入门" class="headerlink" title="Spring Data JPA的快速入门"></a>Spring Data JPA的快速入门</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>Spring Data JPA完成客户的基本CRUD操作</li></ul><h2 id="搭建Spring-Data-JPA的开发环境"><a href="#搭建Spring-Data-JPA的开发环境" class="headerlink" title="搭建Spring Data JPA的开发环境"></a>搭建Spring Data JPA的开发环境</h2><h3 id="引入Spring-Data-JPA的坐标"><a href="#引入Spring-Data-JPA的坐标" class="headerlink" title="引入Spring Data JPA的坐标"></a>引入Spring Data JPA的坐标</h3><ul><li>使用Spring Data JPA，需要整合Spring与Spring Data JPA，并且需要提供JPA的服务提供者hibernate，所以需要导入spring相关坐标，hibernate坐标，数据库驱动坐标等</li></ul><h3 id="整合Spring-Data-JPA与Spring"><a href="#整合Spring-Data-JPA与Spring" class="headerlink" title="整合Spring Data JPA与Spring"></a>整合Spring Data JPA与Spring</h3><ul><li>applicationContext.xml</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--spring 和 spring data jpa的配置--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span>.创建entityManagerFactory对象交给spring容器管理--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"entityManagerFactoty"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">    &lt;!--配置的扫描的包（实体类所在的包） --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"packagesToScan"</span> value=<span class="string">"cn.itcast.domain"</span> /&gt;</span><br><span class="line">    &lt;!-- jpa的实现厂家 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"persistenceProvider"</span>&gt;</span><br><span class="line">        &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--jpa的供应商适配器 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"jpaVendorAdapter"</span>&gt;</span><br><span class="line">        &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span><br><span class="line">            &lt;!--配置是否自动创建数据库表 --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"generateDdl"</span> value=<span class="string">"false"</span> /&gt;</span><br><span class="line">            &lt;!--指定数据库类型 --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"database"</span> value=<span class="string">"MYSQL"</span> /&gt;</span><br><span class="line">            &lt;!--数据库方言：支持的特有语法 --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"databasePlatform"</span> value=<span class="string">"org.hibernate.dialect.MySQLDialect"</span> /&gt;</span><br><span class="line">            &lt;!--是否显示sql --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"showSql"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--jpa的方言 ：高级的特性(hibernate的一级缓存二级缓存等) --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"jpaDialect"</span> &gt;</span><br><span class="line">        &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaDialect"</span> /&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">2</span>.创建数据库连接池 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line">    &lt;property name="user" value="root"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="password" value="111111"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="jdbcUrl" value="jdbc:mysql:///jpa" &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="driverClass" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">3</span>.整合spring dataJpa--&gt;</span><br><span class="line">&lt;jpa:repositories base-<span class="keyword">package</span>=<span class="string">"cn.itcast.dao"</span> transaction-manager-ref=<span class="string">"transactionManager"</span></span><br><span class="line">               entity-manager-factory-ref="entityManagerFactoty" &gt;&lt;/jpa:repositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">4</span>.配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span><br><span class="line">    &lt;property name="entityManagerFactory" ref="entityManagerFactoty"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">4</span>.txAdvice--&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"save*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"insert*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"update*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"delete*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"get*"</span> read-only=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"find*"</span> read-only=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;tx:method name=<span class="string">"*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">5</span>.aop--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id=<span class="string">"pointcut"</span> expression=<span class="string">"execution(* cn.itcast.service.*.*(..))"</span> /&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"pointcut"</span> /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">5</span>.声明式事务 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">6</span>. 配置包扫描 注解--&gt;</span><br><span class="line">&lt;context:component-scan base-package="cn.itcast" &gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><h3 id="使用JPA注解配置映射关系-编写一个实体类使用注解"><a href="#使用JPA注解配置映射关系-编写一个实体类使用注解" class="headerlink" title="使用JPA注解配置映射关系(编写一个实体类使用注解)"></a>使用JPA注解配置映射关系(编写一个实体类使用注解)</h3><ul><li>所有注解使用jpa的规范提供的注解（都在javax下的引用）</li></ul><h2 id="使用Spring-Data-JPA完成需求"><a href="#使用Spring-Data-JPA完成需求" class="headerlink" title="使用Spring Data JPA完成需求"></a>使用Spring Data JPA完成需求</h2><h3 id="编写符合Spring-Data-JPA规范的Dao层接口"><a href="#编写符合Spring-Data-JPA规范的Dao层接口" class="headerlink" title="编写符合Spring Data JPA规范的Dao层接口"></a>编写符合Spring Data JPA规范的Dao层接口</h3><ul><li>Spring Data JPA是spring提供的一款对于数据访问层（Dao层）的框架，使用Spring Data JPA，只需要按照框架的规范提供dao接口，不需要实现类就可以完成数据库的增删改查、分页查询等方法的定义，极大的简化了我们的开发过程</li><li>在Spring Data JPA中，对于定义符合规范的Dao层接口，我们只需要遵循以下几点就可以了：<ol><li>创建一个Dao层接口，并实现JpaRepository和JpaSpecificationExecutor</li><li>提供相应的泛型</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.entity.Customer;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本CRUD操作</span></span><br><span class="line"><span class="comment"> * JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成基本CRUD操作"><a href="#完成基本CRUD操作" class="headerlink" title="完成基本CRUD操作"></a>完成基本CRUD操作</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>findOne（id） ：根据id查询</li><li>save(customer):保存或者更新（依据：传递的实体类对象中，是否包含id属性）</li><li>delete（id） ：根据id删除</li><li>findAll() : 查询全部</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>完成了Spring Data JPA的环境搭建，并且编写了符合Spring Data JPA 规范的Dao层接口之后，就可以使用定义好的Dao层接口进行客户的基本CRUD操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>). //声明<span class="title">spring</span>提供的单元测试环境</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=<span class="string">"classpath:applicationContext.xml"</span>) <span class="comment">//指定spring容器的配置信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存客户：调用save(obj)方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setCustName(<span class="string">"传智"</span>);</span><br><span class="line">        customerDao.save(c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改客户：调用save(obj)方法</span></span><br><span class="line"><span class="comment">     *      对于save方法的解释：如果执行此方法是对象中存在id属性，即为更新操作会先根据id查询，再更新    </span></span><br><span class="line"><span class="comment">     *                      如果执行此方法中对象中不存在id属性，即为保存操作</span></span><br><span class="line"><span class="comment">     *          </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据id查询id为1的客户</span></span><br><span class="line">        Customer customer = customerDao.findOne(<span class="number">1l</span>);</span><br><span class="line">        <span class="comment">//修改客户名称</span></span><br><span class="line">        customer.setCustName(<span class="string">"aa"</span>);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除：调用delete(id)方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        customerDao.delete(<span class="number">1l</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id从数据库查询</span></span><br><span class="line"><span class="comment">     *      <span class="doctag">@Transactional</span> : 保证getOne正常运行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  findOne：</span></span><br><span class="line"><span class="comment">     *      em.find()           :立即加载</span></span><br><span class="line"><span class="comment">     *  getOne：</span></span><br><span class="line"><span class="comment">     *      em.getReference     :延迟加载</span></span><br><span class="line"><span class="comment">     *      * 返回的是一个客户的动态代理对象</span></span><br><span class="line"><span class="comment">     *      * 什么时候用，什么时候查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testGetOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = customerDao.getOne(<span class="number">4l</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试统计查询：查询客户的总数量</span></span><br><span class="line"><span class="comment">     *      count:统计总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count = customerDao.count();<span class="comment">//查询全部的客户数量</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试：判断id为4的客户是否存在</span></span><br><span class="line"><span class="comment">     *      1. 可以查询以下id为4的客户</span></span><br><span class="line"><span class="comment">     *          如果值为空，代表不存在，如果不为空，代表存在</span></span><br><span class="line"><span class="comment">     *      2. 判断数据库中id为4的客户的数量</span></span><br><span class="line"><span class="comment">     *          如果数量为0，代表不存在，如果大于0，代表存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testExists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exists = customerDao.exists(<span class="number">4l</span>);</span><br><span class="line">        System.out.println(<span class="string">"id为4的客户 是否存在："</span>+exists);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springDataJpa的运行过程和原理剖析"><a href="#springDataJpa的运行过程和原理剖析" class="headerlink" title="springDataJpa的运行过程和原理剖析"></a>springDataJpa的运行过程和原理剖析</h2><ol><li>通过JdkDynamicAopProxy的invoke方法创建了一个动态代理对象</li><li>SimpleJpaRepository当中封装了JPA的操作（借助JPA的api完成数据库的CRUD）</li><li>通过hibernate完成数据库操作（封装了jdbc）</li></ol><h1 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h1><h2 id="借助接口中的定义好的方法完成查询"><a href="#借助接口中的定义好的方法完成查询" class="headerlink" title="借助接口中的定义好的方法完成查询"></a>借助接口中的定义好的方法完成查询</h2><ul><li>在继承JpaRepository，和JpaRepository接口后,我们就可以使用接口中定义的方法进行查询</li></ul><h3 id="继承JpaRepository后的方法列表"><a href="#继承JpaRepository后的方法列表" class="headerlink" title="继承JpaRepository后的方法列表"></a>继承JpaRepository后的方法列表</h3><h3 id="继承JpaSpecificationExecutor的方法列表"><a href="#继承JpaSpecificationExecutor的方法列表" class="headerlink" title="继承JpaSpecificationExecutor的方法列表"></a>继承JpaSpecificationExecutor的方法列表</h3><h2 id="jpql的查询方式"><a href="#jpql的查询方式" class="headerlink" title="jpql的查询方式"></a>jpql的查询方式</h2><ul><li>使用Spring Data JPA提供的查询方法已经可以解决大部分的应用场景，但是对于某些业务来说，我们还需要灵活的构造查询条件，这时就可以使用@Query注解，结合JPQL的语句方式完成查询</li><li>@Query 注解的使用非常简单，只需在方法上面标注该注解，同时提供一个JPQL查询语句即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>, <span class="title">Long</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;    </span><br><span class="line">    <span class="comment">//@Query 使用jpql的方式查询。</span></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"from Customer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllCustomer</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Query 使用jpql的方式查询。?1代表参数的占位符，其中1对应方法中的参数索引</span></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"from Customer where custName = ?1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findCustomer</span><span class="params">(String custName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此外，也可以通过使用 @Query 来执行一个更新操作，为此，我们需要在使用 @Query 的同时，用 @Modifying 来将该操作标识为修改查询，这样框架最终会生成一个更新的操作，而非查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value=<span class="string">"update Customer set custName = ?1 where custId = ?2"</span>)</span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(String custName,Long custId)</span></span>;<span class="string">"</span></span><br></pre></td></tr></table></figure><h2 id="使用SQL语句查询"><a href="#使用SQL语句查询" class="headerlink" title="使用SQL语句查询"></a>使用SQL语句查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nativeQuery : 使用本地sql的方式查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"select * from cst_customer"</span>,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findSql</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="方法命名规则查询"><a href="#方法命名规则查询" class="headerlink" title="方法命名规则查询"></a>方法命名规则查询</h2><ul><li>方法命名规则查询就是根据方法的名字，就能创建查询。只需要按照Spring Data JPA提供的方法命名规则定义方法的名称，就可以完成查询工作。Spring Data JPA在程序执行的时候会根据方法名称进行解析，并自动生成查询语句进行查询</li><li>按照Spring Data JPA 定义的规则，查询方法以findBy开头，涉及条件查询时，条件的属性用条件关键字连接，要注意的是：条件属性首字母需大写。框架在进行方法名解析时，会先把方法名多余的前缀截取掉，然后对剩下部分进行解析。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法命名方式查询（根据客户名称查询客户）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustName</span><span class="params">(String custName)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="具体的关键字，使用方法和生产成SQL如下表所示"><a href="#具体的关键字，使用方法和生产成SQL如下表所示" class="headerlink" title="具体的关键字，使用方法和生产成SQL如下表所示"></a>具体的关键字，使用方法和生产成SQL如下表所示</h3><h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt; ,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 案例：根据客户名称查询客户</span></span><br><span class="line"><span class="comment">     *      使用jpql的形式查询</span></span><br><span class="line"><span class="comment">     *  jpql：from Customer where custName = ?</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  配置jpql语句，使用的<span class="doctag">@Query</span>注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"from Customer where custName = ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findJpql</span><span class="params">(String custName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 案例：根据客户名称和客户id查询客户</span></span><br><span class="line"><span class="comment">     *      jpql： from Customer where custName = ? and custId = ?</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  对于多个占位符参数</span></span><br><span class="line"><span class="comment">     *      赋值的时候，默认的情况下，占位符的位置需要和方法参数中的位置保持一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  可以指定占位符参数的位置</span></span><br><span class="line"><span class="comment">     *      ? 索引的方式，指定此占位的取值来源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"from Customer where custName = ?2 and custId = ?1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findCustNameAndId</span><span class="params">(Long id,String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用jpql完成更新操作</span></span><br><span class="line"><span class="comment">     *      案例 ： 根据id更新，客户的名称</span></span><br><span class="line"><span class="comment">     *          更新4号客户的名称，将名称改为“aaa”</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  sql  ：update cst_customer set cust_name = ? where cust_id = ?</span></span><br><span class="line"><span class="comment">     *  jpql : update Customer set custName = ? where custId = ?</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Query</span> : 代表的是进行查询</span></span><br><span class="line"><span class="comment">     *      * 声明此方法是用来进行更新操作</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Modifying</span></span></span><br><span class="line"><span class="comment">     *      * 当前执行的是一个更新操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">" update Customer set custName = ?2 where custId = ?1 "</span>)</span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(<span class="keyword">long</span> custId,String custName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用sql的形式查询：</span></span><br><span class="line"><span class="comment">     *     查询全部的客户</span></span><br><span class="line"><span class="comment">     *  sql ： select * from cst_customer;</span></span><br><span class="line"><span class="comment">     *  Query : 配置sql查询</span></span><br><span class="line"><span class="comment">     *      value ： sql语句</span></span><br><span class="line"><span class="comment">     *      nativeQuery ： 查询方式</span></span><br><span class="line"><span class="comment">     *          true ： sql查询</span></span><br><span class="line"><span class="comment">     *          false：jpql查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Query(value = " select * from cst_customer" ,nativeQuery = true)</span></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"select * from cst_customer where cust_name like ?1"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Object [] &gt; findSql(String name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名的约定：</span></span><br><span class="line"><span class="comment">     *      findBy : 查询</span></span><br><span class="line"><span class="comment">     *            对象中的属性名（首字母大写） ： 查询的条件</span></span><br><span class="line"><span class="comment">     *            CustName</span></span><br><span class="line"><span class="comment">     *            * 默认情况 ： 使用 等于的方式查询</span></span><br><span class="line"><span class="comment">     *                  特殊的查询方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  findByCustName   --   根据客户名称查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  再springdataJpa的运行阶段</span></span><br><span class="line"><span class="comment">     *          会根据方法名称进行解析  findBy    from  xxx(实体类)</span></span><br><span class="line"><span class="comment">     *                                      属性名称      where  custName =</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      1.findBy  + 属性名称 （根据属性名称进行完成匹配的查询=）</span></span><br><span class="line"><span class="comment">     *      2.findBy  + 属性名称 + “查询方式（Like | isnull）”</span></span><br><span class="line"><span class="comment">     *          findByCustNameLike</span></span><br><span class="line"><span class="comment">     *      3.多条件查询</span></span><br><span class="line"><span class="comment">     *          findBy + 属性名 + “查询方式”   + “多条件的连接符（and|or）”  + 属性名 + “查询方式”</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustName</span><span class="params">(String custName)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findByCustNameLike</span><span class="params">(String custName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用客户名称模糊匹配和客户所属行业精准匹配的查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustNameLikeAndCustIndustry</span><span class="params">(String custName,String custIndustry)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>) //声明<span class="title">spring</span>提供的单元测试环境</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)<span class="comment">//指定spring容器的配置信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpqlTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testFindJPQL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = customerDao.findJpql(<span class="string">"aaa"</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCustNameAndId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Customer customer =  customerDao.findCustNameAndId("aaa",1l);</span></span><br><span class="line">        Customer customer =  customerDao.findCustNameAndId(<span class="number">1l</span>,<span class="string">"aaa"</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试jpql的更新操作</span></span><br><span class="line"><span class="comment">     *  * springDataJpa中使用jpql完成 更新/删除操作</span></span><br><span class="line"><span class="comment">     *         * 需要手动添加事务的支持</span></span><br><span class="line"><span class="comment">     *         * 默认会执行结束之后，回滚事务</span></span><br><span class="line"><span class="comment">     *   <span class="doctag">@Rollback</span> : 设置是否自动回滚</span></span><br><span class="line"><span class="comment">     *          false | true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//添加事务的支持</span></span><br><span class="line">    <span class="meta">@Rollback</span>(value = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        customerDao.updateCustomer(<span class="number">4l</span>,<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试sql查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Object[]&gt; list = customerDao.findSql(<span class="string">"aaa%"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Object [] obj : list) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(obj));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试方法命名规则的查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNaming</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = customerDao.findByCustName(<span class="string">"aaa"</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试方法命名规则的查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustNameLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findByCustNameLike(<span class="string">"aaa%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试方法命名规则的查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustNameLikeAndCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = customerDao.findByCustNameLikeAndCustIndustry(<span class="string">"aaa1%"</span>, <span class="string">"it"</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Specifications动态查询"><a href="#Specifications动态查询" class="headerlink" title="Specifications动态查询"></a>Specifications动态查询</h2><ul><li>有时我们在查询某个实体的时候，给定的条件是不固定的，这时就需要动态构建相应的查询语句，在Spring Data JPA中可以通过JpaSpecificationExecutor接口查询。相比JPQL,其优势是类型安全,更加的面向对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.domain.Specification;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *JpaSpecificationExecutor中定义的方法</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="comment">//根据条件查询一个对象</span></span><br><span class="line"> <span class="function">T <span class="title">findOne</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">   <span class="comment">//根据条件查询集合</span></span><br><span class="line"> <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">   <span class="comment">//根据条件分页查询</span></span><br><span class="line">   <span class="comment">//Pageable:分页参数对象</span></span><br><span class="line"> <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec, Pageable pageable)</span></span>;</span><br><span class="line">   <span class="comment">//排序查询查询</span></span><br><span class="line"> <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec, Sort sort)</span></span>;</span><br><span class="line">   <span class="comment">//统计查询</span></span><br><span class="line"> <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>对于JpaSpecificationExecutor，这个接口基本是围绕着Specification接口来定义的。我们可以简单的理解为，Specification构造的就是查询条件。</p></li><li><p>Specification接口中只定义了如下一个方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造查询条件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*root：Root接口，代表查询的根对象，可以通过root获取实体中的属性 （查询的任何属性都可以从根对象中获取）</span></span><br><span class="line"><span class="comment">*query：代表一个顶层查询对象，用来自定义查询(一般不用)</span></span><br><span class="line"><span class="comment">*cb：用来构建查询，此对象里有很多查询条件方法</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="使用Specifications完成条件查询"><a href="#使用Specifications完成条件查询" class="headerlink" title="使用Specifications完成条件查询"></a>使用Specifications完成条件查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件，查询单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 自定义查询条件</span></span><br><span class="line"><span class="comment">         *      1.实现Specification接口（提供泛型：查询的对象类型）</span></span><br><span class="line"><span class="comment">         *      2.实现toPredicate方法（构造查询条件）</span></span><br><span class="line"><span class="comment">         *      3.需要借助方法参数中的两个参数（</span></span><br><span class="line"><span class="comment">         *          root：获取需要查询的对象属性</span></span><br><span class="line"><span class="comment">         *          CriteriaBuilder：构造查询条件的，内部封装了很多的查询条件（模糊匹配，精准匹配）</span></span><br><span class="line"><span class="comment">         *       ）</span></span><br><span class="line"><span class="comment">         *  案例：根据客户名称查询，查询客户名为传智播客的客户</span></span><br><span class="line"><span class="comment">         *          查询条件</span></span><br><span class="line"><span class="comment">         *              1.查询方式</span></span><br><span class="line"><span class="comment">         *                  cb对象</span></span><br><span class="line"><span class="comment">         *              2.比较的属性名称</span></span><br><span class="line"><span class="comment">         *                  root对象</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//1.获取比较的属性</span></span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custId"</span>);</span><br><span class="line">                <span class="comment">//2.构造查询条件  ：    select * from cst_customer where cust_name = '传智播客'</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 第一个参数：需要比较的属性（path对象）</span></span><br><span class="line"><span class="comment">                 * 第二个参数：当前需要比较的取值</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Predicate predicate = cb.equal(custName, <span class="string">"aaa"</span>);<span class="comment">//进行精准的匹配  （比较的属性，比较的属性的取值）</span></span><br><span class="line">                <span class="keyword">return</span> predicate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Customer customer = customerDao.findOne(spec);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条件查询</span></span><br><span class="line"><span class="comment">     *      案例：根据客户名（aaa）和客户所属行业查询（it）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  root:获取属性</span></span><br><span class="line"><span class="comment">         *      客户名</span></span><br><span class="line"><span class="comment">         *      所属行业</span></span><br><span class="line"><span class="comment">         *  cb：构造查询</span></span><br><span class="line"><span class="comment">         *      1.构造客户名的精准匹配查询</span></span><br><span class="line"><span class="comment">         *      2.构造所属行业的精准匹配查询</span></span><br><span class="line"><span class="comment">         *      3.将以上两个查询联系起来</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);<span class="comment">//客户名</span></span><br><span class="line">                Path&lt;Object&gt; custIndustry = root.get(<span class="string">"custIndustry"</span>);<span class="comment">//所属行业</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//构造查询</span></span><br><span class="line">                <span class="comment">//1.构造客户名的精准匹配查询</span></span><br><span class="line">                Predicate p1 = cb.equal(custName, <span class="string">"aaa"</span>);<span class="comment">//第一个参数，path（属性），第二个参数，属性的取值</span></span><br><span class="line">                <span class="comment">//2..构造所属行业的精准匹配查询</span></span><br><span class="line">                Predicate p2 = cb.equal(custIndustry, <span class="string">"it"</span>);</span><br><span class="line">                <span class="comment">//3.将多个查询条件组合到一起：组合（满足条件一并且满足条件二：与关系，满足条件一或满足条件二即可：或关系）</span></span><br><span class="line">                Predicate and = cb.and(p1, p2);<span class="comment">//以与的形式拼接多个查询条件</span></span><br><span class="line">                <span class="comment">// cb.or();//以或的形式拼接多个查询条件</span></span><br><span class="line">                <span class="keyword">return</span> and;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Customer customer = customerDao.findOne(spec);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 案例：完成根据客户名称的模糊匹配，返回客户列表</span></span><br><span class="line"><span class="comment">     *      客户名称以 ’aaa‘ 开头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * equal ：直接得到path对象（属性），然后进行比较即可</span></span><br><span class="line"><span class="comment">     * gt，lt,ge,le,like : 得到path对象，根据path指定比较的参数类型，再去进行比较</span></span><br><span class="line"><span class="comment">     *      指定参数类型：path.as(类型的字节码对象)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造查询条件</span></span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//查询属性：客户名</span></span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);</span><br><span class="line">                <span class="comment">//查询方式：模糊匹配</span></span><br><span class="line">                Predicate like = cb.like(custName.as(String.class), "aaa%");</span><br><span class="line">                <span class="keyword">return</span> like;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        List&lt;Customer&gt; list = customerDao.findAll(spec);</span></span><br><span class="line"><span class="comment">//        for (Customer customer : list) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(customer);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//添加排序</span></span><br><span class="line">        <span class="comment">//创建排序对象,需要调用构造方法实例化sort对象</span></span><br><span class="line">        <span class="comment">//第一个参数：排序的顺序（倒序，正序）</span></span><br><span class="line">        <span class="comment">//   Sort.Direction.DESC:倒序</span></span><br><span class="line">        <span class="comment">//   Sort.Direction.ASC ： 升序</span></span><br><span class="line">        <span class="comment">//第二个参数：排序的属性名称</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">"custId"</span>);</span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findAll(spec, sort);</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     *      Specification: 查询条件</span></span><br><span class="line"><span class="comment">     *      Pageable：分页参数</span></span><br><span class="line"><span class="comment">     *          分页参数：查询的页码，每页查询的条数</span></span><br><span class="line"><span class="comment">     *          findAll(Specification,Pageable)：带有条件的分页</span></span><br><span class="line"><span class="comment">     *          findAll(Pageable)：没有条件的分页</span></span><br><span class="line"><span class="comment">     *  返回：Page（springDataJpa为我们封装好的pageBean对象，数据列表，总条数）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Specification spec = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//PageRequest对象是Pageable接口的实现类</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建PageRequest的过程中，需要调用他的构造方法传入两个参数</span></span><br><span class="line"><span class="comment">         *      第一个参数：当前查询的页数（从0开始）</span></span><br><span class="line"><span class="comment">         *      第二个参数：每页查询的数量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Customer&gt; page = customerDao.findAll(<span class="keyword">null</span>, pageable);</span><br><span class="line">        System.out.println(page.getContent()); <span class="comment">//得到数据集合列表</span></span><br><span class="line">        System.out.println(page.getTotalElements());<span class="comment">//得到总条数</span></span><br><span class="line">        System.out.println(page.getTotalPages());<span class="comment">//得到总页数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于Specifications的分页查询"><a href="#基于Specifications的分页查询" class="headerlink" title="基于Specifications的分页查询"></a>基于Specifications的分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//构造查询条件</span></span><br><span class="line">Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">return cb.like(root.get("custName").as(String.class), "a%");</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造分页参数</span></span><br><span class="line"><span class="comment"> * Pageable : 接口</span></span><br><span class="line"><span class="comment"> * PageRequest实现了Pageable接口，调用构造方法的形式构造</span></span><br><span class="line"><span class="comment"> * 第一个参数：页码（从0开始）</span></span><br><span class="line"><span class="comment"> * 第二个参数：每页查询条数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询，封装为Spring Data Jpa 内部的page bean</span></span><br><span class="line"><span class="comment"> * 此重载的findAll方法为分页方法需要两个参数</span></span><br><span class="line"><span class="comment"> * 第一个参数：查询条件Specification</span></span><br><span class="line"><span class="comment"> * 第二个参数：分页参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Page&lt;Customer&gt; page = customerDao.findAll(spec,pageable);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于Spring Data JPA中的分页查询，是其内部自动实现的封装过程，返回的是一个Spring Data JPA提供的pageBean对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//获取总页数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTotalPages</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="comment">//获取总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getTotalElements</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取列表数据</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">getContent</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="方法对应关系"><a href="#方法对应关系" class="headerlink" title="方法对应关系"></a>方法对应关系</h3><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">方法名称</td><td align="center">Sql对应关系</td></tr><tr><td align="center">equle</td><td align="center">filed = value</td></tr><tr><td align="center">gt（greaterThan ）</td><td align="center">filed &gt; value</td></tr><tr><td align="center">lt（lessThan ）</td><td align="center">filed &lt; value</td></tr><tr><td align="center">ge（greaterThanOrEqualTo ）</td><td align="center">filed &gt;= value</td></tr><tr><td align="center">le（ lessThanOrEqualTo）</td><td align="center">filed &lt;= value</td></tr><tr><td align="center">notEqule</td><td align="center">filed != value</td></tr><tr><td align="center">like</td><td align="center">filed like value</td></tr><tr><td align="center">notLike</td><td align="center">filed not like value</td></tr></tbody></table><h1 id="JPA中的一对多"><a href="#JPA中的一对多" class="headerlink" title="JPA中的一对多"></a>JPA中的一对多</h1><h2 id="在JPA框架中表关系的分析步骤"><a href="#在JPA框架中表关系的分析步骤" class="headerlink" title="在JPA框架中表关系的分析步骤"></a>在JPA框架中表关系的分析步骤</h2><ul><li>第一步：首先确定两张表之间的关系。<ul><li>如果关系确定错了，后面做的所有操作就都不可能正确。</li></ul></li><li>第二步：在数据库中实现两张表的关系（外键｜中间表）</li><li>第三步：在实体类中描述出两个实体的关系（包含关系）</li><li>第四步：配置出实体类和数据库表的关系映射</li></ul><h2 id="实体类关系建立以及映射配置"><a href="#实体类关系建立以及映射配置" class="headerlink" title="实体类关系建立以及映射配置"></a>实体类关系建立以及映射配置</h2><ul><li>例如：在实体类中，由于客户是少的一方，它应该包含多个联系人，所以实体类要体现出客户中有多个联系人的信息，代码如下：</li></ul><h3 id="domain和dao"><a href="#domain和dao" class="headerlink" title="domain和dao"></a>domain和dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">### customer.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置客户和联系人之间的关系（一对多关系）</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解的形式配置多表关系</span></span><br><span class="line"><span class="comment">     *      1.声明关系</span></span><br><span class="line"><span class="comment">     *          <span class="doctag">@OneToMany</span> : 配置一对多关系</span></span><br><span class="line"><span class="comment">     *              targetEntity ：对方对象的字节码对象</span></span><br><span class="line"><span class="comment">     *      2.配置外键（中间表）</span></span><br><span class="line"><span class="comment">     *              <span class="doctag">@JoinColumn</span> : 配置外键</span></span><br><span class="line"><span class="comment">     *                  name：外键字段名称</span></span><br><span class="line"><span class="comment">     *                  referencedColumnName：参照的主表的主键字段名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  * 在客户实体类上（一的一方）添加了外键了配置，所以对于客户而言，也具备了维护外键的作用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(targetEntity = LinkMan<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JoinColumn</span>(<span class="title">name</span> </span>= <span class="string">"lkm_cust_id"</span>,referencedColumnName = <span class="string">"cust_id"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"customer"</span>,cascade = CascadeType.ALL)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;LinkMan&gt; linkMans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### linkman.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_linkman"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long lkmId; <span class="comment">//联系人编号(主键)</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmName;<span class="comment">//联系人姓名</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置联系人到客户的多对一关系</span></span><br><span class="line"><span class="comment">     *     使用注解的形式配置多对一关系</span></span><br><span class="line"><span class="comment">     *      1.配置表关系</span></span><br><span class="line"><span class="comment">     *          <span class="doctag">@ManyToOne</span> : 配置多对一关系</span></span><br><span class="line"><span class="comment">     *              targetEntity：对方的实体类字节码</span></span><br><span class="line"><span class="comment">     *      2.配置外键（中间表）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * * 配置外键的过程，配置到了多的一方，就会在多的一方维护外键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToOne</span>(targetEntity = Customer<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span> </span>= FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"lkm_cust_id"</span>,referencedColumnName = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人的dao接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LinkManDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">LinkMan</span>,<span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">LinkMan</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="application-xml添加代码"><a href="#application-xml添加代码" class="headerlink" title="application.xml添加代码"></a>application.xml添加代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注入jpa的配置信息</span><br><span class="line">    加载jpa的基本配置信息和jpa实现方式（hibernate）的配置信息</span><br><span class="line">    hibernate.hbm2ddl.auto : 自动创建数据库表</span><br><span class="line">        create ： 每次都会重新创建数据库表</span><br><span class="line">        update：有表不会重新创建，没有表会重新创建表</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name=<span class="string">"jpaProperties"</span> &gt;</span><br><span class="line">    &lt;props&gt;</span><br><span class="line">        &lt;prop key="hibernate.hbm2ddl.auto"&gt;update&lt;/prop&gt;</span><br><span class="line">    &lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h3 id="映射的注解说明"><a href="#映射的注解说明" class="headerlink" title="映射的注解说明"></a>映射的注解说明</h3><h4 id="OneToMany"><a href="#OneToMany" class="headerlink" title="@OneToMany:"></a>@OneToMany:</h4><ul><li>作用：建立一对多的关系映射</li><li>属性：<ul><li>targetEntityClass：指定多的多方的类的字节码</li><li>mappedBy：指定从表实体类中引用主表对象的名称。</li><li>cascade：指定要使用的级联操作</li><li>fetch：指定是否采用延迟加载</li><li>orphanRemoval：是否使用孤儿删除</li></ul></li></ul><h4 id="ManyToOne"><a href="#ManyToOne" class="headerlink" title="@ManyToOne"></a>@ManyToOne</h4><ul><li>作用：建立多对一的关系</li><li>属性：<ul><li>targetEntityClass：指定一的一方实体类字节码</li><li>cascade：指定要使用的级联操作</li><li>fetch：指定是否采用延迟加载</li><li>optional：关联是否可选。如果设置为false，则必须始终存在非空关系。</li></ul></li></ul><h4 id="JoinColumn"><a href="#JoinColumn" class="headerlink" title="@JoinColumn"></a>@JoinColumn</h4><ul><li>作用：用于定义主键字段和外键字段的对应关系。</li><li>属性：<ul><li>name：指定外键字段的名称</li><li>referencedColumnName：指定引用主表的主键字段名称</li><li>unique：是否唯一。默认值不唯一</li><li>nullable：是否允许为空。默认值允许。</li><li>insertable：是否允许插入。默认值允许。</li><li>updatable：是否允许更新。默认值允许。</li><li>columnDefinition：列的定义信息。</li></ul></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p>从表数据：可以随时任意删除。</p></li><li><p>主表数据：</p></li><li><p>有从表数据</p><ol><li>在默认情况下，它会把外键字段置为null，然后删除主表数据。如果在数据库的表 结构上，外键字段有非空约束，默认情况就会报错了。</li><li>如果配置了放弃维护关联关系的权利，则不能删除（与外键字段是否允许为null,没有关系）因为在删除时，它根本不会去更新从表的外键字段了。</li><li>如果还想删除，使用级联删除引用</li></ol></li><li><p>没有从表数据引用：随便删</p></li></ul><h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LinkManDao linkManDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一个客户，保存一个联系人</span></span><br><span class="line"><span class="comment">     *  效果：客户和联系人作为独立的数据保存到数据库中</span></span><br><span class="line"><span class="comment">     *      联系人的外键为空</span></span><br><span class="line"><span class="comment">     *  原因？</span></span><br><span class="line"><span class="comment">     *      实体类中没有配置关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//配置事务</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>) <span class="comment">//不自动回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个客户，创建一个联系人</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"百度"</span>);</span><br><span class="line"></span><br><span class="line">        LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">        linkMan.setLkmName(<span class="string">"小李"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 配置了客户到联系人的关系</span></span><br><span class="line"><span class="comment">         *      从客户的角度上：发送两条insert语句，发送一条更新语句更新数据库（更新外键）</span></span><br><span class="line"><span class="comment">         * 由于我们配置了客户到联系人的关系：客户可以对外键进行维护</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">        linkManDao.save(linkMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//配置事务</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>) <span class="comment">//不自动回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个客户，创建一个联系人</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"百度"</span>);</span><br><span class="line"></span><br><span class="line">        LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">        linkMan.setLkmName(<span class="string">"小李"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 配置联系人到客户的关系（多对一）</span></span><br><span class="line"><span class="comment">         *    只发送了两条insert语句</span></span><br><span class="line"><span class="comment">         * 由于配置了联系人到客户的映射关系（多对一）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        linkMan.setCustomer(customer);</span><br><span class="line"></span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">        linkManDao.save(linkMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会有一条多余的update语句</span></span><br><span class="line"><span class="comment">     *      * 由于一的一方可以维护外键：会发送update语句</span></span><br><span class="line"><span class="comment">     *      * 解决此问题：只需要在一的一方放弃维护权即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//配置事务</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>) <span class="comment">//不自动回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个客户，创建一个联系人</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"百度"</span>);</span><br><span class="line"></span><br><span class="line">        LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">        linkMan.setLkmName(<span class="string">"小李"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        linkMan.setCustomer(customer);<span class="comment">//由于配置了多的一方到一的一方的关联关系（当保存的时候，就已经对外键赋值）</span></span><br><span class="line">        customer.getLinkMans().add(linkMan);<span class="comment">//由于配置了一的一方到多的一方的关联关系（发送一条update语句）</span></span><br><span class="line"></span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">        linkManDao.save(linkMan);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><ul><li><p>级联操作：指操作一个对象同时操作它的关联对象</p></li><li><p>使用方法：只需要在操作主体的注解上配置cascade</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cascade:配置级联操作</span></span><br><span class="line"><span class="comment"> * CascadeType.MERGE级联更新</span></span><br><span class="line"><span class="comment"> * CascadeType.PERSIST级联保存：</span></span><br><span class="line"><span class="comment"> * CascadeType.REFRESH 级联刷新：</span></span><br><span class="line"><span class="comment"> * CascadeType.REMOVE级联删除：</span></span><br><span class="line"><span class="comment"> * CascadeType.ALL包含所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"customer"</span>,cascade=CascadeType.ALL)</span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkMans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><h1 id="JPA中的多对多"><a href="#JPA中的多对多" class="headerlink" title="JPA中的多对多"></a>JPA中的多对多</h1><h2 id="映射的注解说明-1"><a href="#映射的注解说明-1" class="headerlink" title="映射的注解说明"></a>映射的注解说明</h2><h3 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="@ManyToMany"></a>@ManyToMany</h3><ul><li>作用：用于映射多对多关系</li><li>属性：<ul><li>cascade：配置级联操作。</li><li>fetch：配置是否采用延迟加载。</li><li>targetEntity：配置目标的实体类。映射多对多的时候不用写。</li></ul></li></ul><h3 id="JoinTable"><a href="#JoinTable" class="headerlink" title="@JoinTable"></a>@JoinTable</h3><ul><li>作用：针对中间表的配置</li><li>属性：<ul><li>nam：配置中间表的名称</li><li>joinColumns：中间表的外键字段关联当前实体类所对应表的主键</li><li>inverseJoinColumn：中间表的外键字段关联对方表的主键字段</li></ul></li></ul><h3 id="JoinColumn-1"><a href="#JoinColumn-1" class="headerlink" title="@JoinColumn"></a>@JoinColumn</h3><ul><li>作用：用于定义主键字段和外键字段的对应关系。</li><li>属性：<ul><li>name：指定外键字段的名称</li><li>referencedColumnName：指定引用主表的主键字段名称</li><li>unique：是否唯一。默认值不唯一</li><li>nullable：是否允许为空。默认值允许。</li><li>insertable：是否允许插入。默认值允许。</li><li>updatable：是否允许更新。默认值允许。</li><li>columnDefinition：列的定义信息。</li></ul></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">### user.java</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置用户到角色的多对多关系</span></span><br><span class="line"><span class="comment">     *      配置多对多的映射关系</span></span><br><span class="line"><span class="comment">     *          1.声明表关系的配置</span></span><br><span class="line"><span class="comment">     *              <span class="doctag">@ManyToMany</span>(targetEntity = Role.class)  //多对多</span></span><br><span class="line"><span class="comment">     *                  targetEntity：代表对方的实体类字节码</span></span><br><span class="line"><span class="comment">     *          2.配置中间表（包含两个外键）</span></span><br><span class="line"><span class="comment">     *                <span class="doctag">@JoinTable</span></span></span><br><span class="line"><span class="comment">     *                  name : 中间表的名称</span></span><br><span class="line"><span class="comment">     *                  joinColumns：配置当前对象在中间表的外键</span></span><br><span class="line"><span class="comment">     *                      <span class="doctag">@JoinColumn</span>的数组</span></span><br><span class="line"><span class="comment">     *                          name：外键名</span></span><br><span class="line"><span class="comment">     *                          referencedColumnName：参照的主表的主键名</span></span><br><span class="line"><span class="comment">     *                  inverseJoinColumns：配置对方对象在中间表的外键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(targetEntity = Role<span class="class">.<span class="keyword">class</span>,<span class="title">cascade</span> </span>= CascadeType.ALL)</span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"sys_user_role"</span>,</span><br><span class="line">            <span class="comment">//joinColumns,当前对象在中间表中的外键</span></span><br><span class="line">            joinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"sys_user_id"</span>,referencedColumnName = <span class="string">"user_id"</span>)&#125;,</span><br><span class="line">            <span class="comment">//inverseJoinColumns，对方对象在中间表的外键</span></span><br><span class="line">            inverseJoinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"sys_role_id"</span>,referencedColumnName = <span class="string">"role_id"</span>)&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">### role.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"sys_user_role"</span>,</span><br><span class="line">            <span class="comment">//joinColumns,当前对象在中间表中的外键</span></span><br><span class="line">            joinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"sys_role_id"</span>,referencedColumnName = <span class="string">"role_id"</span>)&#125;,</span><br><span class="line">            <span class="comment">//inverseJoinColumns，对方对象在中间表的外键</span></span><br><span class="line">            inverseJoinColumns = &#123;<span class="meta">@JoinColumn</span>(name = <span class="string">"sys_user_id"</span>,referencedColumnName = <span class="string">"user_id"</span>)&#125;  </span><br><span class="line">     <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManyToManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一个用户，保存一个角色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  多对多放弃维护权：被动的一方放弃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"小李"</span>);</span><br><span class="line"></span><br><span class="line">        Role role = <span class="keyword">new</span> Role();</span><br><span class="line">        role.setRoleName(<span class="string">"java程序员"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置用户到角色关系，可以对中间表中的数据进行维护     1-1</span></span><br><span class="line">        user.getRoles().add(role);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置角色到用户的关系，可以对中间表的数据进行维护     1-1</span></span><br><span class="line">        role.getUsers().add(user);</span><br><span class="line"></span><br><span class="line">        userDao.save(user);</span><br><span class="line">        roleDao.save(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试级联添加（保存一个用户的同时保存用户的关联角色）</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testCasCadeAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"小李"</span>);</span><br><span class="line"></span><br><span class="line">        Role role = <span class="keyword">new</span> Role();</span><br><span class="line">        role.setRoleName(<span class="string">"java程序员"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置用户到角色关系，可以对中间表中的数据进行维护     1-1</span></span><br><span class="line">        user.getRoles().add(role);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置角色到用户的关系，可以对中间表的数据进行维护     1-1</span></span><br><span class="line">        role.getUsers().add(user);</span><br><span class="line"></span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 案例：删除id为1的用户，同时删除他的关联对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testCasCadeRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询1号用户</span></span><br><span class="line">        User user = userDao.findOne(<span class="number">1l</span>);</span><br><span class="line">        <span class="comment">//删除1号用户</span></span><br><span class="line">        userDao.delete(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在多对多（保存）中，如果双向都设置关系，意味着双方都维护中间表，都会往中间表插入数据，中间表的2个字段又作为联合主键，所以报错，主键重复，解决保存失败的问题：只需要在任意一方放弃对中间表的维护权即可，推荐在被动的一方放弃</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放弃对中间表的维护权，解决保存中主键冲突的问题</span></span><br><span class="line"><span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"roles"</span>)</span><br><span class="line"><span class="keyword">private</span> Set&lt;SysUser&gt; users = <span class="keyword">new</span> HashSet&lt;SysUser&gt;(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> * 在多对多的删除时，双向级联删除根本不能配置</span></span><br><span class="line"><span class="comment"> * 禁用</span></span><br><span class="line"><span class="comment"> *如果配了的话，如果数据之间有相互引用关系，可能会清空所有数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)<span class="comment">//设置为不回滚</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userDao.delete(<span class="number">1l</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-Data-JPA中的多表查询"><a href="#Spring-Data-JPA中的多表查询" class="headerlink" title="Spring Data JPA中的多表查询"></a>Spring Data JPA中的多表查询</h1><h2 id="对象导航查询"><a href="#对象导航查询" class="headerlink" title="对象导航查询"></a>对象导航查询</h2><ul><li><p>对象图导航检索方式是根据已经加载的对象，导航到他的关联对象。它利用类与类之间的关系来检索对象。例如：我们通过ID查询方式查出一个客户，可以调用Customer类中的getLinkMans()方法来获取该客户的所有联系人。对象导航查询的使用要求是：两个对象之间必须存在关联关系</p></li><li><p>查询一个客户，获取该客户下的所有联系人</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//由于是在java代码中测试，为了解决no session问题，将操作配置到同一个事务中</span></span><br><span class="line"><span class="meta">@Transactional</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Customer customer = customerDao.findOne(<span class="number">5l</span>);</span><br><span class="line">Set&lt;LinkMan&gt; linkMans = customer.getLinkMans();<span class="comment">//对象导航查询</span></span><br><span class="line"><span class="keyword">for</span>(LinkMan linkMan : linkMans) &#123;</span><br><span class="line">System.out.println(linkMan);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查询一个联系人，获取该联系人的所有客户</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LinkManDao linkManDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkMan linkMan = linkManDao.findOne(<span class="number">4l</span>);</span><br><span class="line">Customer customer = linkMan.getCustomer(); <span class="comment">//对象导航查询</span></span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul><li>延迟加载的思想。通过配置的方式来设定当我们在需要使用时，发起真正的查询。</li><li>对象导航查询默认使用的是延迟加载的形式查询的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在客户对象的<span class="doctag">@OneToMany</span>注解中添加fetch属性</span></span><br><span class="line"><span class="comment"> * FetchType.EAGER：立即加载</span></span><br><span class="line"><span class="comment"> * FetchType.LAZY：延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"customer"</span>,fetch=FetchType.EAGER)</span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkMans = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="使用Specification查询"><a href="#使用Specification查询" class="headerlink" title="使用Specification查询"></a>使用Specification查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Specification的多表查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Specification&lt;LinkMan&gt; spec = <span class="keyword">new</span> Specification&lt;LinkMan&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;LinkMan&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Join代表链接查询，通过root对象获取</span></span><br><span class="line"><span class="comment">//创建的过程中，第一个参数为关联对象的属性名称，第二个参数为连接查询的方式（left，inner，right）</span></span><br><span class="line"><span class="comment">//JoinType.LEFT : 左外连接,JoinType.INNER：内连接,JoinType.RIGHT：右外连接</span></span><br><span class="line">Join&lt;LinkMan, Customer&gt; join = root.join(<span class="string">"customer"</span>,JoinType.INNER);</span><br><span class="line">return cb.like(join.get("custName").as(String.class),"传智播客1");</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">List&lt;LinkMan&gt; list = linkManDao.findAll(spec);</span><br><span class="line"><span class="keyword">for</span> (LinkMan linkMan : list) &#123;</span><br><span class="line">System.out.println(linkMan);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Spring Data JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术03--hadoop运用</title>
      <link href="/2019/06/18/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF03--hadoop%E8%BF%90%E7%94%A8/"/>
      <url>/2019/06/18/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF03--hadoop%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容：Hadoop伪分布式配置、常用操作命令</p><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><blockquote><p>jdk下载:<br>最好下载以前的稳定版本，此次使用的jdk版本为1.8</p><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载地址</a></p></blockquote><blockquote><p>hadoop下载：下载稳定版本， 此次使用Hadoop版本为2.7.7</p><p><a href="https://hadoop.apache.org/releases.html" target="_blank" rel="noopener">下载地址</a></p></blockquote><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim ~/.bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Setting PATH for hadoop 2.7.7</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/Users/rimi/Desktop/hadoop-2.7.7</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_HOME/bin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment">#Setting JAVA_HOME for jdk 1.8</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br></pre></td></tr></table></figure><blockquote><p>编辑保存完成后，执行命令： source .bash_profile </p><p>查看是否配置成功：echo $JAVA_HOME  /  echo $HADOOOP_HOME</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改hadoop-env.sh配置文件(可不用)</span></span><br><span class="line"><span class="comment">#hadoop-2.7.7/etc/hadoop</span></span><br><span class="line"><span class="comment">#vim hadoop-env.sh</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br></pre></td></tr></table></figure><h2 id="hadoop伪分布式配置"><a href="#hadoop伪分布式配置" class="headerlink" title="hadoop伪分布式配置"></a>hadoop伪分布式配置</h2><h3 id="hadoop-etc-hadoop-core-site"><a href="#hadoop-etc-hadoop-core-site" class="headerlink" title="hadoop/etc/hadoop/core-site"></a>hadoop/etc/hadoop/core-site</h3><table><thead><tr><th align="center">No.</th><th align="center">参数名</th><th align="center">默认值</th><th align="center">参数解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">fs.defaultFS</td><td align="center">file:///</td><td align="center">文件系统主机和端口</td></tr><tr><td align="center">2</td><td align="center">io.file.buffer.size</td><td align="center">4096</td><td align="center">流文件的缓冲区大小</td></tr><tr><td align="center">3</td><td align="center">hadoop.tmp.dir</td><td align="center"><code>/tmp/hadoop-${user.name }</code></td><td align="center">临时文件夹</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># vim core-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--指定namenode的地址(必须)--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://10.2.0.104<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--用来指定使用hadoop时产生文件的存放目录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/data/hadoop/hadoop-2.6.0/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--用来指定使用hadoop时的节点数（需要）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来设置检查点备份日志的最长时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hadoop-ect-hadoop-hdfs-site"><a href="#hadoop-ect-hadoop-hdfs-site" class="headerlink" title="hadoop/ect/hadoop/hdfs-site"></a>hadoop/ect/hadoop/hdfs-site</h3><table><thead><tr><th align="center">No.</th><th align="center">参数名</th><th align="center">默认值</th><th align="center">参数解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">dfs.namenode.secondary.http-address</td><td align="center">0.0.0.0:50090</td><td align="center">定义HDFS对应的HTTP服务器地址和端口</td></tr><tr><td align="center">2</td><td align="center">dfs.namenode.name,dir</td><td align="center">file://<code>$</code>{hadoop.tmp.dir}/dfs/name</td><td align="center">定义DFS的名称节点在本地文件系统的位置</td></tr><tr><td align="center">3</td><td align="center">dfs,datanode.data.dir</td><td align="center">file://<code>$</code>{hadoop.tmp.dir}/dfs/data</td><td align="center">定义DFS数据节点存储数据块时存储在本地文件系统的位置</td></tr><tr><td align="center">4</td><td align="center">dfs.replication</td><td align="center">3</td><td align="center">缺省的块复制数量</td></tr><tr><td align="center">5</td><td align="center">dfs.webhdfs.enabled</td><td align="center">true</td><td align="center">是否通过http协议读取hdfs文件，如果选是，则集群安全性较差</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># vim hdfs-site.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hdfs保存数据的副本数量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hdfs中namenode的存储位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///Users/rimi/Desktop/bigdata/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hdfs中datanode的存储位置--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///Users/rimi/Desktop/bigdata/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重新格式化： hdfs namenode -format</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>1.查看集群上所有文件：</p><blockquote><p>hdfs dfs -ls /</p></blockquote><p>2.分别启动namenode/datanode: </p><blockquote><p>hdfs –daemon start namenode / hdfs –daemon start datanode</p></blockquote><p>3.查看该集群此ip下的文件：</p><blockquote><p>hdfs dfs -ls hdfs://10.2.0.104/</p></blockquote><p>4.创建文件夹：</p><blockquote><p>hdfs dfs -mkdirs hdfs://10.2.0.104/text</p></blockquote><p>5.logs 中可以查看日志 查看错误</p><blockquote><p>cd hadoop-2.7.7/logs/</p></blockquote><p>6.hadoop 2.* 版本可以网页查看所有namenode datanode</p><blockquote><p>浏览器输入：10.2.0.104:50070  </p></blockquote><p>7.停止namenode/datanode</p><blockquote><p>hdfs stop namenode(datanode)</p></blockquote><p>8.对地址统一管理：</p><blockquote><p>hadoop/etc/hadoop/  </p><p>编辑workers: vim workers   注意：前面版本名字为slaves  </p></blockquote><p>9.停止和开始所有hadoop服务：</p><blockquote><p>sbin/</p><p>stop-dfs.sh  停止</p></blockquote><blockquote><p>start-dfs.sh 开始</p></blockquote><p>10.从集群下载文件</p><blockquote><p>hdfs dfs -get hdfs://10.0.0.252:9000/data/hadoop-2.7.7.tar.gz ./  下载</p></blockquote><p>11.实现域名重定向</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="number">127.0.0.1</span>       localhost</span><br><span class="line"><span class="number">255.255.255.255</span> broadcasthost</span><br><span class="line">::<span class="number">1</span>             localhost</span><br><span class="line"><span class="number">0.0.0.0</span> <span class="number">1020104</span>.local</span><br></pre></td></tr></table></figure><p>12.配置Hadoop的主要5个文件</p><table><thead><tr><th align="center">序号</th><th align="center">配置文件名</th><th align="center">配置对象</th><th align="center">主要内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">hadoop-env.sh</td><td align="center">hadoop运行环境</td><td align="center">用来定义hadoop运行环境相关的配置信息</td></tr><tr><td align="center">2</td><td align="center">core-site.xml</td><td align="center">集群全局参数</td><td align="center">用于定义系统级别的参数，如HDFS URL 、Hadoop的临时目录等</td></tr><tr><td align="center">3</td><td align="center">hdfs-site.xml</td><td align="center">HDFS</td><td align="center">如名称节点和数据节点的存放位置、文件副本的个数、文件的读取权限等</td></tr><tr><td align="center">4</td><td align="center">mapred-site.xml</td><td align="center">Mapreduce参数</td><td align="center">包括JobHistory Server 和应用程序参数两部分，如reduce任务的默认个数、任务所能够使用内存的默认上下限等</td></tr><tr><td align="center">5</td><td align="center">yarn-site.xml</td><td align="center">集群资源管理系统参数</td><td align="center">配置ResourceManager ，nodeManager的通信端口，web监控端口等</td></tr></tbody></table><h2 id="分布式配置："><a href="#分布式配置：" class="headerlink" title="分布式配置："></a>分布式配置：</h2><h3 id="分配ip"><a href="#分配ip" class="headerlink" title="分配ip"></a>分配ip</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># etc/hadoop/ </span><br><span class="line"># vim workers(或者slaves) </span><br><span class="line"></span><br><span class="line"><span class="number">10.2.0.104</span>      <span class="number">1020104</span>.local     namenode（存储的是文件属性）  datanode</span><br><span class="line"><span class="number">10.2.0.195</span>      Mac-of-Jack.local  datanode （存储文件数据）</span><br><span class="line"><span class="number">10.2.0.166</span>      rimideiMac-<span class="number">5</span>.local  datanode （存储文件数据）</span><br></pre></td></tr></table></figure><h3 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h3><ul><li><p>重要参数</p><table><thead><tr><th align="center">No.</th><th align="center">参数名</th><th align="center">默认值</th><th align="center">参数解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">yarn.resourcemanager.address</td><td align="center">0.0.0.0:8032</td><td align="center">ResourceManager（以下简称RM） 提供客户端访问的地址。客户端通过该地址向RM提交应用程序，杀死应用程序等</td></tr><tr><td align="center">2</td><td align="center">yarn.resourcemanager.scheduler.address</td><td align="center">0.0.0.0:8030</td><td align="center">RM提供给ApplicationMaster的访问地址。ApplicationMaster同通过该地址向RM申请资源、释放资源等</td></tr><tr><td align="center">3</td><td align="center">yarn,resoucemanager.resource.resource-tracker.address</td><td align="center">0.0.0.0:8031</td><td align="center">RM提供NodeManager的地址。NodeManager通过该地址向RM汇报心跳，领取任务等</td></tr><tr><td align="center">4</td><td align="center">yarn.resourcemanager.admin.address</td><td align="center">0.0.0.0:8033</td><td align="center">RM提供管理员的访问地址。管理员通过该地址向RM发送管理命令等</td></tr><tr><td align="center">5</td><td align="center">yarn.resourcemanager.webapp.address</td><td align="center">0.0.0.0:8088</td><td align="center">RM对web服务提供地址。用户可通过该地址在浏览器中查看集群各类信息</td></tr><tr><td align="center">6</td><td align="center">yarn.nodemanager.aux-services</td><td align="center"></td><td align="center">通过该配置项，用户可以自定义一些服务，例如Map-Reduce的shuffle功能就是采用这种方式实现的，这样就可以在NodeManager上扩展自己的服务</td></tr></tbody></table></li></ul><pre><code>&gt;注意：不同版本配置可能不同<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#hadoop 3.1</span><br><span class="line">#etc/hadoop</span><br><span class="line">#vim yarn-site.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>a,b,c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The queues at the this level (root is the root queue).</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.a.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>a1,a2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The queues at the this level (root is the root queue).</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.b.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>b1,b2,b3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The queues at the this level (root is the root queue).</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#hadoop 2.7</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>mapred-site.xml  </p><blockquote><p>注意hadoop 2.7 需要将 mapre-site.xml.template 重新命名为 mapred-site.xml </p></blockquote> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#etc/hadoop</span></span><br><span class="line"><span class="meta">#mv mapre-site.xml.template mapred-site.xml </span></span><br><span class="line"><span class="meta">#vim mapred-site.xml</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">configuration</span>&gt;</span><br><span class="line">        &lt;<span class="type">name</span>&gt;mapreduce.framework.name&lt;/<span class="type">name</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">value</span>&gt;yarn&lt;/<span class="keyword">value</span>&gt;&gt;</span><br><span class="line">&lt;/<span class="keyword">configuration</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>mapred-site.xml 重要参数说明</p><table><thead><tr><th align="center">No.</th><th align="center">参数名</th><th align="center">默认值</th><th align="center">参数解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">mapreduce.framework.name</td><td align="center">local</td><td align="center">取值local、classic或yarn其中之一，如果不是yarn，则不会使用yarn集群来实现资源的分配</td></tr><tr><td align="center">2</td><td align="center">mapreduce.jobhistory.address</td><td align="center">0.0.0.0:10020</td><td align="center">定义历史服务器的地址和端口，通过历史服务器查看已经运行完的Mapreduce作业记录</td></tr><tr><td align="center">3</td><td align="center">mapreduce.jobhistory.webapp.address</td><td align="center">0.0.0.0:19888</td><td align="center">定义历史服务器web应用访问的地址和端口</td></tr></tbody></table></li><li><p>启动资源管理器：</p><blockquote><p>yarn –daemon start resourcemanager </p><p>hadoop 2.7版本：sbin/yarn-daemon.sh start resourcemanager</p></blockquote></li></ul><h3 id="完整步骤（错误解决-127-99999）"><a href="#完整步骤（错误解决-127-99999）" class="headerlink" title="完整步骤（错误解决/127 99999）"></a>完整步骤（错误解决/127 99999）</h3><ul><li><p>jdk环境变量  </p></li><li><p>Hadoop环境变量</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Setting PATH for Python 3.7</span></span><br><span class="line"><span class="comment"># The original version is saved in .bash_profile.pysave</span></span><br><span class="line"><span class="attribute">PATH</span>=<span class="string">"/Library/Frameworks/Python.framework/Versions/3.7/bin:<span class="variable">$&#123;PATH&#125;</span>"</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/usr/local/bin:$PATH</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:Desktop/bs4/chrom/chromedriver</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> #Setting PATH <span class="keyword">for</span> hadoop 2.7.7</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/Users/rimi/Desktop/hadoop-2.7.7</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_HOME/bin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk-12.jdk/Contents/Home</span><br></pre></td></tr></table></figure></li><li><p>停止所有：sbin/stop-all.sh</p></li><li><p>开始所有：sbin/start-all.sh</p></li><li><p>查看是否存在进程：jps 存在则杀死该进程  kill 6163</p></li><li><p>脚本启动：sbin/hadoop-daemon.sh –script hdfs start namenode(datanode)</p></li><li><p>查看是否启动：jps</p></li><li><p>开启resourcemanager:sbin/yarn-daemon.sh start resourcemanager(nodemanager) 重复7</p></li><li><p>hdfs dfs -mkdirs hdfs://10.2.0.104/text hdfs创建文件</p></li><li><p>推送数据到hdfs：hdfs dfs -put 本地路径 上传路径</p></li><li><p>hdfs dfs -ls hdfs://10.2.0.104/</p></li><li><p>执行某一个分析 </p><blockquote><p>hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.7.7.jar -input hdfs://10.2.0.104/mewas/data.txt -mapper ~/Desktop/mewas/map.py -reducer ~/Desktop/mevas/reduce.py  -output /data-output</p></blockquote><blockquote><p>出现错误： builtin-java classes where applicable </p><p>解释：文件必须是可执行的 并且数据在hdfs中存在(ls -l查看文件权限)</p><p>解决：本地检查map运行是否正确：运行： cat data.txt | python ./map.py </p><p>在.py中加入注释：#!/usr/bin/env python  表面这是一个python文件使用python编码解释器</p></blockquote></li><li><p>数据处理方法编写：map/reduce (详细请看 :  <a href="https://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html" target="_blank" rel="noopener">MapReduce Tutorial</a>)</p></li><li><p>若运行过12则需要删除output再重新运行：</p><blockquote><p>hdfs dfs -rm -r /data-output</p><p>hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.7.7.jar -input hdfs://10.2.0.104/mewas/data.txt -mapper ~/Desktop/mewas/map.py -reducer ~/Desktop/mevas/reduce.py  -output /data-output</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架09 -- Elasticsearch</title>
      <link href="/2019/06/17/JAVA%E6%A1%86%E6%9E%B609%20--%20Elasticsearch/"/>
      <url>/2019/06/17/JAVA%E6%A1%86%E6%9E%B609%20--%20Elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch介绍和安装"><a href="#Elasticsearch介绍和安装" class="headerlink" title="Elasticsearch介绍和安装"></a>Elasticsearch介绍和安装</h1><p>用户访问我们的首页，一般都会直接搜索来寻找自己想要购买的商品。</p><p>而商品的数量非常多，而且分类繁杂。如果能正确的显示出用户想要的商品，并进行合理的过滤，尽快促成交易，是搜索系统要研究的核心。</p><p>面对这样复杂的搜索业务和数据量，使用传统数据库搜索就显得力不从心，一般我们都会使用全文检索技术，比如之前大家学习过的Solr。</p><p>不过今天，我们要讲的是另一个全文检索技术：Elasticsearch。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Elastic"><a href="#Elastic" class="headerlink" title="Elastic"></a>Elastic</h3><p><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elastic官网</a></p><p>Elastic有一条完整的产品线及解决方案：Elasticsearch、Kibana、Logstash等，前面说的三个就是大家常说的ELK技术栈。</p><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p><a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch官网</a></p><p>Elasticsearch具备以下特点：</p><ul><li>分布式，无需人工搭建集群（solr就需要人为配置，使用Zookeeper作为注册中心）</li><li>Restful风格，一切API都遵循Rest原则，容易上手</li><li>近实时搜索，数据更新在Elasticsearch中几乎是完全同步的。</li></ul><h3 id="1-1-3-版本"><a href="#1-1-3-版本" class="headerlink" title="1.1.3.版本"></a>1.1.3.版本</h3><p>目前Elasticsearch最新的版本是6.3.1，此文章使用6.3.0</p><p>需要虚拟机JDK1.8及以上</p><h2 id="安装和配置-–-在linux下安装Elasticsearch。"><a href="#安装和配置-–-在linux下安装Elasticsearch。" class="headerlink" title="安装和配置 – 在linux下安装Elasticsearch。"></a>安装和配置 – 在linux下安装Elasticsearch。</h2><h3 id="新建一个用户leyou"><a href="#新建一个用户leyou" class="headerlink" title="新建一个用户leyou"></a>新建一个用户leyou</h3><p>出于安全考虑，elasticsearch默认不允许以root账号运行。</p><p>创建用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd leyou</span><br></pre></td></tr></table></figure><p>设置密码：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">passwd leyou</span></span><br></pre></td></tr></table></figure><p>切换用户：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">su - leyou</span></span><br></pre></td></tr></table></figure><h3 id="上传安装包-并解压"><a href="#上传安装包-并解压" class="headerlink" title="上传安装包,并解压"></a>上传安装包,并解压</h3><p>我们将安装包上传到：/home/leyou目录</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528551162835.png" alt=""></p><p>解压缩：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">elasticsearch-6</span><span class="selector-class">.2</span><span class="selector-class">.4</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>我们把目录重命名：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv elasticsearch<span class="number">-6.2</span><span class="number">.4</span>/ elasticsearch</span><br></pre></td></tr></table></figure><p>进入，查看目录结构：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528551465373.png" alt=""></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>我们进入config目录：<code>cd config</code></p><p>需要修改的配置文件有两个：elasticsearch.yml和jvm.options</p><ol><li><strong>jvm.options</strong></li></ol><p>Elasticsearch基于Lucene的，而Lucene底层是java实现，因此我们需要配置jvm参数。</p><p>编辑jvm.options：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> jvm.<span class="keyword">options</span></span><br></pre></td></tr></table></figure><p>默认配置如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xms1g</span></span><br><span class="line"><span class="deletion">-Xmx1g</span></span><br></pre></td></tr></table></figure><p>内存占用太多了，我们调小一些：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xms512m</span></span><br><span class="line"><span class="deletion">-Xmx512m</span></span><br></pre></td></tr></table></figure><ol><li><strong>elasticsearch.yml</strong></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">elasticsearch</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><ul><li>修改数据和日志目录：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path.data:</span> <span class="string">/home/leyou/elasticsearch/data</span> <span class="comment"># 数据目录位置</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/home/leyou/elasticsearch/logs</span> <span class="comment"># 日志目录位置</span></span><br></pre></td></tr></table></figure><p>我们把data和logs目录修改指向了elasticsearch的安装目录。但是这两个目录并不存在，因此我们需要创建出来。</p><p>进入elasticsearch的根目录，然后创建：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br></pre></td></tr></table></figure><ul><li>修改绑定的ip：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">network</span><span class="selector-class">.host</span>: 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span> # 绑定到0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>，允许任何<span class="selector-tag">ip</span>来访问</span><br></pre></td></tr></table></figure><p>默认只允许本机访问，修改为0.0.0.0后则可以远程访问</p><p>目前我们是做的单机安装，如果要做集群，只需要在这个配置文件中添加其它节点信息即可。</p><blockquote><p>elasticsearch.yml的其它可配置信息：</p></blockquote><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</td></tr><tr><td>node.name</td><td>节点名，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</td></tr><tr><td>path.conf</td><td>设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/ elasticsearch</td></tr><tr><td>path.data</td><td>设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开</td></tr><tr><td>path.logs</td><td>设置日志文件的存储路径，默认是es根目录下的logs文件夹</td></tr><tr><td>path.plugins</td><td>设置插件的存放路径，默认是es根目录下的plugins文件夹</td></tr><tr><td>bootstrap.memory_lock</td><td>设置为true可以锁住ES使用的内存，避免内存进行swap</td></tr><tr><td>network.host</td><td>设置bind_host和publish_host，设置为0.0.0.0允许外网访问</td></tr><tr><td>http.port</td><td>设置对外服务的http端口，默认为9200。</td></tr><tr><td>transport.tcp.port</td><td>集群结点之间通信端口</td></tr><tr><td>discovery.zen.ping.timeout</td><td>设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>主结点数量的最少值 ,此值的公式为：(master_eligible_nodes / 2) + 1 ，比如：有3个符合要求的主结点，那么这里要设置为2</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>进入elasticsearch/bin目录</p><p>然后输入命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./elasticsearch</span></span><br></pre></td></tr></table></figure><p>发现报错了，启动失败：</p><h3 id="错误1：内核过低"><a href="#错误1：内核过低" class="headerlink" title="错误1：内核过低"></a>错误1：内核过低</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528598315714.png" alt=""></p><p>我们使用的是centos6，其linux内核版本为2.6。而Elasticsearch的插件要求至少3.5以上版本。不过没关系，我们禁用这个插件即可。</p><p>修改elasticsearch.yml文件，在最下面添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bootstrap.system_call_filter:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>然后重启</p><h3 id="错误2：文件权限不足"><a href="#错误2：文件权限不足" class="headerlink" title="错误2：文件权限不足"></a>错误2：文件权限不足</h3><p>再次启动，又出错了：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528599116836.png" alt=""></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]: max file descriptors [<span class="number">4096</span>] <span class="keyword">for</span> elasticsearch process likely too low, increase to at least [<span class="number">65536</span>]</span><br></pre></td></tr></table></figure><p>我们用的是leyou用户，而不是root，所以文件权限不足。</p><p><strong>首先用root用户登录。</strong></p><p>然后修改配置文件:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/security/limits.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>添加下面的内容：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile <span class="number">65536</span></span><br><span class="line"></span><br><span class="line">* hard nofile <span class="number">131072</span></span><br><span class="line"></span><br><span class="line">* soft nproc <span class="number">4096</span></span><br><span class="line"></span><br><span class="line">* hard nproc <span class="number">4096</span></span><br></pre></td></tr></table></figure><h3 id="错误3：线程数不够"><a href="#错误3：线程数不够" class="headerlink" title="错误3：线程数不够"></a>错误3：线程数不够</h3><p>刚才报错中，还有一行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1]: max number of threads [1024] <span class="keyword">for</span><span class="built_in"> user </span>[leyou] is too low, increase <span class="keyword">to</span> at least [4096]</span><br></pre></td></tr></table></figure><p>这是线程数不够。</p><p>继续修改配置：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>security<span class="regexp">/limits.d/</span><span class="number">90</span>-nproc.conf</span><br></pre></td></tr></table></figure><p>修改下面的内容：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* soft nproc <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* soft nproc <span class="number">4096</span></span><br></pre></td></tr></table></figure><h3 id="错误4：进程虚拟内存"><a href="#错误4：进程虚拟内存" class="headerlink" title="错误4：进程虚拟内存"></a>错误4：进程虚拟内存</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[3]</span>: <span class="selector-tag">max</span> <span class="selector-tag">virtual</span> <span class="selector-tag">memory</span> <span class="selector-tag">areas</span> <span class="selector-tag">vm</span><span class="selector-class">.max_map_count</span> <span class="selector-attr">[65530]</span> <span class="selector-tag">likely</span> <span class="selector-tag">too</span> <span class="selector-tag">low</span>, <span class="selector-tag">increase</span> <span class="selector-tag">to</span> <span class="selector-tag">at</span> <span class="selector-tag">least</span> <span class="selector-attr">[262144]</span></span><br></pre></td></tr></table></figure><p>vm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量，继续修改配置文件， ：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/sysctl.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>添加下面内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vm.max_map_count</span>=<span class="number">655360</span></span><br></pre></td></tr></table></figure><p>然后执行命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sysctl -p</span></span><br></pre></td></tr></table></figure><h3 id="重启终端窗口"><a href="#重启终端窗口" class="headerlink" title="重启终端窗口"></a>重启终端窗口</h3><p>所有错误修改完毕，一定要重启你的 Xshell终端，否则配置无效。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>再次启动，终于成功了！</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528603044862.png" alt=""></p><p>可以看到绑定了两个端口:</p><ul><li>9300：集群节点间通讯接口</li><li>9200：客户端访问接口</li></ul><p>我们在浏览器中访问：<a href="http://192.168.56.101:9200" target="_blank" rel="noopener">http://192.168.56.101:9200</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528611090621.png" alt=""></p><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><h3 id="什么是Kibana？"><a href="#什么是Kibana？" class="headerlink" title="什么是Kibana？"></a>什么是Kibana？</h3><p>Kibana是一个基于Node.js的Elasticsearch索引库数据统计工具，可以利用Elasticsearch的聚合功能，生成各种图表，如柱形图，线状图，饼图等。</p><p>而且还提供了操作Elasticsearch索引数据的控制台，并且提供了一定的API提示，非常有利于我们学习Elasticsearch的语法。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为Kibana依赖于node，我们的虚拟机没有安装node，而window中安装过。所以我们选择在window下使用kibana。</p><p>最新版本与elasticsearch保持一致，也是6.3.0</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528611218599.png" alt=""></p><p>解压到特定目录即可</p><h3 id="配置运行"><a href="#配置运行" class="headerlink" title="配置运行"></a>配置运行</h3><blockquote><p>配置</p></blockquote><p>进入安装目录下的config目录，修改kibana.yml文件：</p><p>修改elasticsearch服务器的地址：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">elasticsearch.url:</span> <span class="string">"http://192.168.56.101:9200"</span></span><br></pre></td></tr></table></figure><blockquote><p>运行</p></blockquote><p>进入安装目录下的bin目录, 双击运行kibana.bat：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528612216033.png" alt=""></p><p>发现kibana的监听端口是5601</p><p>我们访问：<a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a></p><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><p>选择左侧的DevTools菜单，即可进入控制台页面：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528612350020.png" alt=""></p><p>在页面右侧，我们就可以输入请求，访问Elasticsearch了。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528612514556.png" alt=""></p><h2 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h2><p>Lucene的IK分词器早在2012年已经没有维护了，现在我们要使用的是在其基础上维护升级的版本，并且开发为ElasticSearch的集成插件了，与Elasticsearch一起维护升级，版本也保持一致，最新版本：6.3.0</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>解压到Elasticsearch目录的plugins目录中, 使用unzip命令解压：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">unzip</span> <span class="selector-tag">elasticsearch-analysis-ik-6</span><span class="selector-class">.3</span><span class="selector-class">.0</span><span class="selector-class">.zip</span> <span class="selector-tag">-d</span> <span class="selector-tag">ik-analyzer</span></span><br></pre></td></tr></table></figure><p>然后重启elasticsearch：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528612928524.png" alt=""></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在kibana控制台输入下面的请求：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="string">"text"</span>:     <span class="string">"我是中国人"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"是"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"中国人"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"中国"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"国人"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Elasticsearch提供了Rest风格的API，即http请求接口，而且也提供了各种语言的客户端API</p><h3 id="Rest风格API"><a href="#Rest风格API" class="headerlink" title="Rest风格API"></a>Rest风格API</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">文档地址</a></p><h3 id="客户端API"><a href="#客户端API" class="headerlink" title="客户端API"></a>客户端API</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">Elasticsearch支持的客户端非常多</a></p><p>点击Java Rest Client后，你会发现又有两个：</p><ul><li><p>Low Level Rest Client是低级别封装，提供一些基础功能，但更灵活</p></li><li><p>High Level Rest Client，是在Low  Level Rest Client基础上进行的高级别封装，功能更丰富和完善，而且API会变的简单</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526518875072.png" alt=""></p><h1 id="操作索引"><a href="#操作索引" class="headerlink" title="操作索引"></a>操作索引</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。</p><p>对比关系：</p><p>索引（indices）——————————–Databases 数据库</p><p>​    类型（type）—————————–Table 数据表</p><p>​         文档（Document）—————-Row 行</p><p>​           字段（Field）——————-Columns 列 </p><p>详细说明：</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>索引库（indices)</td><td>indices是index的复数，代表许多的索引，</td></tr><tr><td>类型（type）</td><td>类型是模拟mysql中的table概念，一个索引库下可以有不同类型的索引，比如商品索引，订单索引，其数据格式不同。不过这会导致索引库混乱，因此未来版本中会移除这个概念</td></tr><tr><td>文档（document）</td><td>存入索引库原始的数据。比如每一条商品信息，就是一个文档</td></tr><tr><td>字段（field）</td><td>文档中的属性</td></tr><tr><td>映射配置（mappings）</td><td>字段的数据类型、属性、是否索引、是否存储等特性</td></tr></tbody></table><p>是不是与Lucene和solr中的概念类似。</p><p>另外，在SolrCloud中，有一些集群相关的概念，在Elasticsearch也有类似的：</p><ul><li>索引集（Indices，index的复数）：逻辑上的完整索引</li><li>分片（shard）：数据拆分后的各个部分</li><li>副本（replica）：每个分片的复制</li></ul><p>要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。</p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求</p><p>创建索引的请求格式：</p><ul><li><p>请求方式：PUT</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：json格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>settings：索引库的设置<ul><li>number_of_shards：分片数量</li><li>number_of_replicas：副本数量</li></ul></li></ul></li></ul><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>我们先用RestClient来试试</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528615921930.png" alt=""></p><p>响应：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528615945473.png" alt=""></p><p>可以看到索引创建成功了。</p><h3 id="使用kibana创建"><a href="#使用kibana创建" class="headerlink" title="使用kibana创建"></a>使用kibana创建</h3><p>kibana的控制台，可以对http请求进行简化，示例：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1528616088691.png" alt=""></p><p>相当于是省去了elasticsearch的服务器地址</p><p>而且还有语法提示，非常舒服。</p><h2 id="查看索引设置"><a href="#查看索引设置" class="headerlink" title="查看索引设置"></a>查看索引设置</h2><blockquote><p>语法</p></blockquote><p>Get请求可以帮我们查看索引信息，格式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名</span><br></pre></td></tr></table></figure><p>或者，我们可以使用*来查询所有索引库配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> *</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>删除索引使用DELETE请求</p><blockquote><p>语法</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> /索引库名</span><br></pre></td></tr></table></figure><p>当然，我们也可以用HEAD请求，查看索引是否存在：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HEAD</span> 索引库名</span><br></pre></td></tr></table></figure><h2 id="映射配置"><a href="#映射配置" class="headerlink" title="映射配置"></a>映射配置</h2><p>索引有了，接下来肯定是添加数据。但是，在添加数据之前必须定义映射。</p><p>什么是映射？</p><p>​    映射是定义文档的过程，文档包含哪些字段，这些字段是否保存，是否索引，是否分词等</p><p>只有配置清楚，Elasticsearch才会帮我们进行索引库的创建（不一定）</p><h3 id="创建映射字段"><a href="#创建映射字段" class="headerlink" title="创建映射字段"></a>创建映射字段</h3><blockquote><p>语法</p></blockquote><p>请求方式依然是PUT</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="regexp">/索引库名/_mapping/</span>类型名称</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"字段名"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"类型"</span>,</span><br><span class="line">      <span class="string">"index"</span>: <span class="literal">true</span>，</span><br><span class="line">      <span class="string">"store"</span>: <span class="literal">true</span>，</span><br><span class="line">      <span class="string">"analyzer"</span>: <span class="string">"分词器"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型名称：就是前面将的type的概念，类似于数据库中的不同表<br>字段名：任意填写    ，可以指定许多属性，例如：</li><li>type：类型，可以是text、long、short、date、integer、object等</li><li>index：是否索引，默认为true</li><li>store：是否存储，默认为false</li><li>analyzer：分词器，这里的<code>ik_max_word</code>即使用ik分词器</li></ul><blockquote><p>示例</p></blockquote><p>发起请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT h/_mapping/goods</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"images"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"false"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看映射关系"><a href="#查看映射关系" class="headerlink" title="查看映射关系"></a>查看映射关系</h3><blockquote><p>语法：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名/_mapping</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /heima/_mapping</span><br></pre></td></tr></table></figure><blockquote><p>响应：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"heima"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段属性详解"><a href="#字段属性详解" class="headerlink" title="字段属性详解"></a>字段属性详解</h3><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>Elasticsearch中支持的数据类型非常丰富：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531712631982.png" alt=""></p><p>我们说几个关键的：</p><ul><li><p>String类型，又分两种：</p><ul><li>text：可分词，不可参与聚合</li><li>keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合</li></ul></li><li><p>Numerical：数值类型，分两类</p><ul><li>基本数据类型：long、interger、short、byte、double、float、half_float</li><li>浮点数的高精度类型：scaled_float<ul><li>需要指定一个精度因子，比如10或100。elasticsearch会把真实值乘以这个因子后存储，取出时再还原。</li></ul></li></ul></li><li><p>Date：日期类型</p><p>elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间。</p><ul><li>存储为对象：{girl:{name: “rose”, age:19}}</li></ul><p>会处理成两个字段：girl.name和girl.age。</p></li></ul><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>index影响字段的索引情况。</p><ul><li>true：字段会被索引，则可以用来进行搜索。默认值就是true</li><li>false：字段不会被索引，不能用来搜索</li></ul><p>index的默认值就是true，也就是说你不进行任何配置，所有字段都会被索引。</p><p>但是有些字段是我们不希望被索引的，比如商品的图片信息，就需要手动设置index为false。</p><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><p>是否将数据进行额外存储。</p><p>在学习lucene和solr时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户的搜索结果中不会显示出来。</p><p>但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。</p><p>原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做<code>_source</code>的属性中。而且我们可以通过过滤<code>_source</code>来选择哪些要显示，哪些不显示。</p><p>而如果设置store为true，就会在<code>_source</code>以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事实上，<strong>store的默认值就是false。</strong></p><h4 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h4><p>激励因子，这个与lucene中一样</p><p>其它的不再一一讲解，用的不多，参考官方文档：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531713176079.png" alt=""></p><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><h3 id="随机生成id"><a href="#随机生成id" class="headerlink" title="随机生成id"></a>随机生成id</h3><p>通过POST请求，可以向一个已经存在的索引库中添加数据。</p><blockquote><p>语法：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="regexp">/索引库名/</span>类型名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /h/goods/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"小米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过kibana查看数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>:&#123;</span><br><span class="line">        <span class="string">"match_all"</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_source</code>：源文档信息，所有的数据都在里面。</li><li><code>_id</code>：这条文档的唯一标示，与文档自己的id字段没有关联</li></ul><h3 id="自定义id"><a href="#自定义id" class="headerlink" title="自定义id"></a>自定义id</h3><p>如果我们想要自己新增的时候指定id，可以这么做：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/类型<span class="string">/id</span>值</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /h/goods/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="智能判断"><a href="#智能判断" class="headerlink" title="智能判断"></a>智能判断</h3><p>在学习Solr时我们发现，我们在新增数据时，只能使用提前配置好映射属性的字段，否则就会报错。</p><p>不过在Elasticsearch中并没有这样的规定。</p><p>事实上Elasticsearch非常智能，你不需要给索引库设置任何mapping映射，它也可以根据你输入的数据来判断类型，动态添加数据映射。</p><p>测试一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /h/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2899.00</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们额外添加了stock库存，和saleable是否上架两个字段。</p><p>来看结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"超米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2899</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在看下索引库的映射关系:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"h"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"saleable"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"stock"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stock和saleable都被成功映射了。</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>把刚才新增的请求方式改为PUT，就是修改了。不过修改必须指定id，</p><ul><li>id对应文档存在，则修改</li><li>id对应文档不存在，则新增</li></ul><p>比如，我们把id为3的数据进行修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /h/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3899.00</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"超大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span>,</span><br><span class="line">          <span class="attr">"stock"</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">"saleable"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p><blockquote><p>语法</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/索引库名/</span>类型名<span class="regexp">/id值</span></span><br></pre></td></tr></table></figure><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="基本查询："><a href="#基本查询：" class="headerlink" title="基本查询："></a>基本查询：</h2><blockquote><p>基本语法</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"查询类型"</span>:&#123;</span><br><span class="line">            <span class="attr">"查询条件"</span>:<span class="string">"查询条件值"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的query代表一个查询对象，里面可以有不同的查询属性</p><ul><li>查询类型：<ul><li>例如：<code>match_all</code>， <code>match</code>，<code>term</code> ， <code>range</code> 等等</li></ul></li><li>查询条件：查询条件会根据类型的不同，写法也有差异，后面详细讲解</li></ul><h3 id="查询所有（match-all"><a href="#查询所有（match-all" class="headerlink" title="查询所有（match_all)"></a>查询所有（match_all)</h3><blockquote><p>示例：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>query</code>：代表查询对象</li><li><code>match_all</code>：代表查询所有</li></ul><blockquote><p>结果：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>took：查询花费时间，单位是毫秒</li><li>time_out：是否超时</li><li>_shards：分片信息</li><li>hits：搜索结果总览对象<ul><li>total：搜索到的总条数</li><li>max_score：所有结果中文档得分的最高分</li><li>hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息<ul><li>_index：索引库</li><li>_type：文档类型</li><li>_id：文档id</li><li>_score：文档得分</li><li>_source：文档的源数据</li></ul></li></ul></li></ul><h3 id="匹配查询（match）"><a href="#匹配查询（match）" class="headerlink" title="匹配查询（match）"></a>匹配查询（match）</h3><p>我们先加入一条数据，便于测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /h/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"小米电视4A"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，索引库中有2部手机，1台电视</p><ul><li>or关系</li></ul><p><code>match</code>类型查询，会把查询条件进行分词，然后进行查询,多个词条之间是or的关系</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"title"</span>:<span class="string">"小米电视"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">"hits": &#123;</span><br><span class="line">    "total": 2,</span><br><span class="line">    "max_score": 0.6931472,</span><br><span class="line">    "hits": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">            <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">            <span class="attr">"_id"</span>: <span class="string">"tmUBomQB_mwm6wH_EC1-"</span>,</span><br><span class="line">            <span class="attr">"_score"</span>: <span class="number">0.6931472</span>,</span><br><span class="line">            <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">                <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">                <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">            <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">            <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">            <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">                <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">                <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的案例中，不仅会查询到电视，而且与小米相关的都会查询到，多个词之间是<code>or</code>的关系。</p><ul><li>and关系</li></ul><p>某些情况下，我们需要更精确查找，我们希望这个关系变成<code>and</code>，可以这样做：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"小米电视"</span>,</span><br><span class="line">            <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中，只有同时包含<code>小米</code>和<code>电视</code>的词条才会被搜索到。</p><ul><li>or和and之间？</li></ul><p>在 <code>or</code> 与 <code>and</code> 间二选一有点过于非黑即白。 如果用户给定的条件分词后有 5 个查询词项，想查找只包含其中 4 个词的文档，该如何处理？将 operator 操作符参数设置成 <code>and</code> 只会将此文档排除。</p><p>有时候这正是我们期望的，但在全文搜索的大多数应用场景下，我们既想包含那些可能相关的文档，同时又排除那些不太相关的。换句话说，我们想要处于中间某种结果。</p><p><code>match</code> 查询支持 <code>minimum_should_match</code> 最小匹配参数， 这让我们可以指定必须匹配的词项数用来表示一个文档是否相关。我们可以将其设置为某个具体数字，更常用的做法是将其设置为一个<code>百分数</code>，因为我们无法控制用户搜索时输入的单词数量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"title"</span>:&#123;</span><br><span class="line">            <span class="attr">"query"</span>:<span class="string">"小米曲面电视"</span>,</span><br><span class="line">            <span class="attr">"minimum_should_match"</span>: <span class="string">"75%"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中，搜索语句可以分为3个词，如果使用and关系，需要同时满足3个词才会被搜索到。这里我们采用最小品牌数：75%，那么也就是说只要匹配到总词条数量的75%即可，这里3*75% 约等于2。所以只要包含2个词条就算满足条件了。</p><p>结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531730367614.png" alt=""></p><h3 id="多字段查询（multi-match）"><a href="#多字段查询（multi-match）" class="headerlink" title="多字段查询（multi_match）"></a>多字段查询（multi_match）</h3><p><code>multi_match</code>与<code>match</code>类似，不同的是它可以在多个字段中查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>:    <span class="string">"小米"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>:   [ <span class="string">"title"</span>, <span class="string">"subTitle"</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例中，我们会在title字段和subtitle字段中查询<code>小米</code>这个词</p><h3 id="3-1-4-词条匹配-term"><a href="#3-1-4-词条匹配-term" class="headerlink" title="3.1.4 词条匹配(term)"></a>3.1.4 词条匹配(term)</h3><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些<strong>未分词</strong>的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"term"</span>:&#123;</span><br><span class="line">            <span class="attr">"price"</span>:<span class="number">2699.00</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多词条精确匹配-terms"><a href="#多词条精确匹配-terms" class="headerlink" title="多词条精确匹配(terms)"></a>多词条精确匹配(terms)</h3><p><code>terms</code> 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"terms"</span>:&#123;</span><br><span class="line">            <span class="attr">"price"</span>:[<span class="number">2699.00</span>,<span class="number">2899.00</span>,<span class="number">3899.00</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果过滤"><a href="#结果过滤" class="headerlink" title="结果过滤"></a>结果过滤</h2><p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在<code>_source</code>的所有字段都返回。</p><p>如果我们只想获取其中的部分字段，我们可以添加<code>_source</code>的过滤</p><h3 id="直接指定字段"><a href="#直接指定字段" class="headerlink" title="直接指定字段"></a>直接指定字段</h3><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"title"</span>,<span class="string">"price"</span>],</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"r9c1KGMBIhaxtY5rlRKv"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定includes和excludes"><a href="#指定includes和excludes" class="headerlink" title="指定includes和excludes"></a>指定includes和excludes</h3><p>我们也可以通过：</p><ul><li>includes：来指定想要显示的字段</li><li>excludes：来指定不想要显示的字段</li></ul><p>二者都是可选的。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"includes"</span>:[<span class="string">"title"</span>,<span class="string">"price"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与下面的结果将是一样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">     <span class="attr">"excludes"</span>: [<span class="string">"images"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="布尔组合（bool"><a href="#布尔组合（bool" class="headerlink" title="布尔组合（bool)"></a>布尔组合（bool)</h3><p><code>bool</code>把各种其它查询通过<code>must</code>（与）、<code>must_not</code>（非）、<code>should</code>（或）的方式进行组合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"大米"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>:  <span class="string">"电视"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"should"</span>:   &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"手机"</span> &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"h"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2899</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范围查询-range"><a href="#范围查询-range" class="headerlink" title="范围查询(range)"></a>范围查询(range)</h3><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"range"</span>: &#123;</span><br><span class="line">            <span class="attr">"price"</span>: &#123;</span><br><span class="line">                <span class="attr">"gte"</span>:  <span class="number">1000.0</span>,</span><br><span class="line">                <span class="attr">"lt"</span>:   <span class="number">2800.00</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>range</code>查询允许以下字符：</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">gt</td><td align="center">大于</td></tr><tr><td align="center">gte</td><td align="center">大于等于</td></tr><tr><td align="center">lt</td><td align="center">小于</td></tr><tr><td align="center">lte</td><td align="center">小于等于</td></tr></tbody></table><h3 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询(fuzzy)"></a>模糊查询(fuzzy)</h3><p>我们新增一个商品：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /h/goods/4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"apple手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">6899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fuzzy</code> 查询是 <code>term</code> 查询的模糊等价。它允许用户搜索词条与实际词条的拼写出现偏差，但是偏差的编辑距离不得超过2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"appla"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的查询，也能查询到apple手机</p><p>我们可以通过<code>fuzziness</code>来指定允许的编辑距离：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"fuzzy"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"appla"</span>,</span><br><span class="line">            <span class="attr">"fuzziness"</span>:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤-filter"><a href="#过滤-filter" class="headerlink" title="过滤(filter)"></a>过滤(filter)</h2><blockquote><p><strong>条件查询中进行过滤</strong></p></blockquote><p>所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用<code>filter</code>方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3800.00</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>filter</code>中还可以再次进行<code>bool</code>组合条件过滤。</p><blockquote><p><strong>无查询条件，直接过滤</strong></p></blockquote><p>如果一次查询只有过滤，没有查询条件，不希望进行评分，我们可以使用<code>constant_score</code>取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"constant_score"</span>:   &#123;</span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">             <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3000.00</span>&#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="单字段排序"><a href="#单字段排序" class="headerlink" title="单字段排序"></a>单字段排序</h3><p><code>sort</code> 可以让我们按照不同的字段进行排序，并且通过<code>order</code>指定排序的方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /h/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多字段排序"><a href="#多字段排序" class="headerlink" title="多字段排序"></a>多字段排序</h3><p>假定我们想要结合使用 price和 _score（得分） 进行查询，并且匹配的结果首先按照价格排序，然后按照相关性得分排序：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /goods/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">200000</span>,<span class="attr">"lt"</span>:<span class="number">300000</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">      &#123; <span class="attr">"price"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;,</span><br><span class="line">      &#123; <span class="attr">"_score"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聚合aggregations"><a href="#聚合aggregations" class="headerlink" title="聚合aggregations"></a>聚合aggregations</h1><p>聚合可以让我们极其方便的实现对数据的统计、分析。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现实时搜索效果。</p><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫<code>桶</code>，一个叫<code>度量</code>：</p><blockquote><p><strong>桶（bucket）</strong></p></blockquote><p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个<code>桶</code>，例如我们根据国籍对人划分，可以得到<code>中国桶</code>、<code>英国桶</code>，<code>日本桶</code>……或者我们按照年龄段对人进行划分：0<del>10,10</del>20,20<del>30,30</del>40等。</p><p>Elasticsearch中提供的划分桶的方式有很多：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li><li>……</li></ul><p>综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p><blockquote><p><strong>度量（metrics）</strong></p></blockquote><p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为<code>度量</code></p><p>比较常用的一些度量聚合方式：</p><ul><li>Avg Aggregation：求平均值</li><li>Max Aggregation：求最大值</li><li>Min Aggregation：求最小值</li><li>Percentiles Aggregation：求百分比</li><li>Stats Aggregation：同时返回avg、max、min、sum、count等</li><li>Sum Aggregation：求和</li><li>Top hits Aggregation：求前几</li><li>Value Count Aggregation：求总数</li><li>……</li></ul><p>为了测试聚合，我们先批量导入一些数据</p><p>创建索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /cars</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"number_of_shards"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number_of_replicas"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"transactions"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"color"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"make"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在ES中，需要进行聚合、排序、过滤的字段其处理方式比较特殊，因此不能被分词。这里我们将color和make这两个文字类型的字段设置为keyword类型，这个类型不会被分词，将来就可以参与聚合</p><p>导入数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /cars/transactions/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">10000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-10-28"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">30000</span>, <span class="attr">"color"</span> : <span class="string">"green"</span>, <span class="attr">"make"</span> : <span class="string">"ford"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-05-18"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">15000</span>, <span class="attr">"color"</span> : <span class="string">"blue"</span>, <span class="attr">"make"</span> : <span class="string">"toyota"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-07-02"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">12000</span>, <span class="attr">"color"</span> : <span class="string">"green"</span>, <span class="attr">"make"</span> : <span class="string">"toyota"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-08-19"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"honda"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">80000</span>, <span class="attr">"color"</span> : <span class="string">"red"</span>, <span class="attr">"make"</span> : <span class="string">"bmw"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-01-01"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">25000</span>, <span class="attr">"color"</span> : <span class="string">"blue"</span>, <span class="attr">"make"</span> : <span class="string">"ford"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-02-12"</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="聚合为桶"><a href="#聚合为桶" class="headerlink" title="聚合为桶"></a>聚合为桶</h2><p>首先，我们按照 汽车的颜色<code>color</code>来划分<code>桶</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_colors"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"color"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>size： 查询条数，这里设置为0，因为我们不关心搜索到的数据，只关心聚合结果，提高效率</li><li>aggs：声明这是一个聚合查询，是aggregations的缩写<ul><li>popular_colors：给这次聚合起一个名字，任意。<ul><li>terms：划分桶的方式，这里是根据词条划分<ul><li>field：划分桶的字段</li></ul></li></ul></li></ul></li></ul><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hits：查询结果为空，因为我们设置了size为0</li><li>aggregations：聚合的结果</li><li>popular_colors：我们定义的聚合名称</li><li>buckets：查找到的桶，每个不同的color字段值都会形成一个桶<ul><li>key：这个桶对应的color字段的值</li><li>doc_count：这个桶中的文档数量</li></ul></li></ul><p>通过聚合的结果我们发现，目前红色的小车比较畅销！</p><h2 id="桶内度量"><a href="#桶内度量" class="headerlink" title="桶内度量"></a>桶内度量</h2><p>前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？</p><p>因此，我们需要告诉Elasticsearch<code>使用哪个字段</code>，<code>使用何种度量方式</code>进行运算，这些信息要嵌套在<code>桶</code>内，<code>度量</code>的运算会基于<code>桶</code>内的文档进行</p><p>现在，我们为刚刚的聚合结果添加 求价格平均值的度量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_colors"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"color"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">                <span class="attr">"avg_price"</span>: &#123; </span><br><span class="line">                   <span class="attr">"avg"</span>: &#123;</span><br><span class="line">                      <span class="attr">"field"</span>: <span class="string">"price"</span> </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见<code>度量</code>也是一个聚合,度量是在桶内的聚合</li><li>avg_price：聚合的名称</li><li>avg：度量的类型，这里是求平均值</li><li>field：度量运算的字段</li></ul><p>结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "aggregations": &#123;</span><br><span class="line">    "popular_colors": &#123;</span><br><span class="line">      "doc_count_error_upper_bound": 0,</span><br><span class="line">      "sum_other_doc_count": 0,</span><br><span class="line">      "buckets": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">32500</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">21000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到每个桶中都有自己的<code>avg_price</code>字段，这是度量聚合的结果</p><h2 id="桶内嵌套桶"><a href="#桶内嵌套桶" class="headerlink" title="桶内嵌套桶"></a>桶内嵌套桶</h2><p>刚刚的案例中，我们在桶内嵌套度量运算。事实上桶不仅可以嵌套运算， 还可以再嵌套其它桶。也就是说在每个分组中，再分更多组。</p><p>比如：我们想统计每种颜色的汽车中，分别属于哪个制造商，按照<code>make</code>字段再进行分桶</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"size"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"aggs"</span> : &#123; </span><br><span class="line">        <span class="attr">"popular_colors"</span> : &#123; </span><br><span class="line">            <span class="attr">"terms"</span> : &#123; </span><br><span class="line">              <span class="attr">"field"</span> : <span class="string">"color"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">                <span class="attr">"avg_price"</span>: &#123; </span><br><span class="line">                   <span class="attr">"avg"</span>: &#123;</span><br><span class="line">                      <span class="attr">"field"</span>: <span class="string">"price"</span> </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"maker"</span>:&#123;</span><br><span class="line">                    <span class="attr">"terms"</span>:&#123;</span><br><span class="line">                        <span class="attr">"field"</span>:<span class="string">"make"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>原来的color桶和avg计算我们不变</li><li>maker：在嵌套的aggs下新添一个桶，叫做maker</li><li>terms：桶的划分类型依然是词条</li><li>filed：这里根据make字段进行划分</li></ul><p>部分结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;<span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"red"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"maker"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"honda"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">3</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"bmw"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">32500</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"blue"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"maker"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"ford"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"toyota"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"green"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"maker"</span>: &#123;</span><br><span class="line">            <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"buckets"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"ford"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"key"</span>: <span class="string">"toyota"</span>,</span><br><span class="line">                <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">21000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>我们可以看到，新的聚合<code>maker</code>被嵌套在原来每一个<code>color</code>的桶中。</li><li>每个颜色下面都根据 <code>make</code>字段进行了分组</li><li>我们能读取到的信息：<ul><li>红色车共有4辆</li><li>红色车的平均售价是 $32，500 美元。</li><li>其中3辆是 Honda 本田制造，1辆是 BMW 宝马制造。</li></ul></li></ul><h2 id="划分桶的其它方式"><a href="#划分桶的其它方式" class="headerlink" title="划分桶的其它方式"></a>划分桶的其它方式</h2><p>前面讲了，划分桶的方式有很多，例如：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li></ul><p>刚刚的案例中，我们采用的是Terms Aggregation，即根据词条划分桶。</p><p>接下来，我们再学习几个比较实用的：</p><h3 id="阶梯分桶Histogram"><a href="#阶梯分桶Histogram" class="headerlink" title="阶梯分桶Histogram"></a>阶梯分桶Histogram</h3><blockquote><p>原理：</p></blockquote><p>histogram是把数值类型的字段，按照一定的阶梯大小进行分组。你需要指定一个阶梯值（interval）来划分阶梯大小。</p><p>举例：</p><p>比如你有价格字段，如果你设定interval的值为200，那么阶梯就会是这样的：</p><p>0，200，400，600，…</p><p>上面列出的是每个阶梯的key，也是区间的启点。</p><p>如果一件商品的价格是450，会落入哪个阶梯区间呢？计算公式如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bucket_key = Math.floor((<span class="keyword">value</span> - <span class="keyword">offset</span>) / <span class="type">interval</span>) * <span class="type">interval</span> + <span class="keyword">offset</span></span><br></pre></td></tr></table></figure><p>value：就是当前数据的值，本例中是450</p><p>offset：起始偏移量，默认为0</p><p>interval：阶梯间隔，比如200</p><p>因此你得到的key = Math.floor((450 - 0) / 200) * 200 + 0 = 400</p><blockquote><p>操作一下：</p></blockquote><p>比如，我们对汽车的价格进行分组，指定间隔interval为5000：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"price"</span>:&#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">5000</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">10000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">15000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">20000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">25000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">30000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">35000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">40000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">45000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">50000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">55000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">60000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">65000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">70000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">75000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">80000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现，中间有大量的文档数量为0 的桶，看起来很丑。</p><p>我们可以增加一个参数min_doc_count为1，来约束最少文档数量为1，这样文档数量为0的桶会被过滤</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">    <span class="attr">"price"</span>:&#123;</span><br><span class="line">      <span class="attr">"histogram"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="attr">"interval"</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="attr">"min_doc_count"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">10000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">15000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">20000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">25000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">30000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="number">80000</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美，！</p><p>如果你用kibana将结果变为柱形图，会更好看：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531752558505.png" alt=""></p><h3 id="范围分桶range"><a href="#范围分桶range" class="headerlink" title="范围分桶range"></a>范围分桶range</h3><p>范围分桶与阶梯分桶类似，也是把数字按照阶段进行分组，只不过range方式需要你自己指定每一组的起始和结束大小。</p><h1 id="Spring-Data-Elasticsearch"><a href="#Spring-Data-Elasticsearch" class="headerlink" title="Spring Data Elasticsearch"></a>Spring Data Elasticsearch</h1><p>Elasticsearch提供的Java客户端有一些不太方便的地方：</p><ul><li>很多地方需要拼接Json字符串，在java中拼接字符串有多恐怖你应该懂的</li><li>需要自己把对象序列化为json存储</li><li>查询到结果也需要自己反序列化为对象</li></ul><p>因此，我们这里就不讲解原生的Elasticsearch客户端API了。</p><p>而是学习Spring提供的套件：Spring Data Elasticsearch。</p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Spring Data Elasticsearch是Spring Data项目下的一个子模块。</p><p><a href="http://projects.spring.io/spring-data/" target="_blank" rel="noopener">查看 Spring Data的官网</a></p><blockquote><p>Spring Data的使命是为数据访问提供熟悉且一致的基于Spring的编程模型，同时仍保留底层数据存储的特殊特性。</p><p>它使得使用数据访问技术，关系数据库和非关系数据库，map-reduce框架和基于云的数据服务变得容易。这是一个总括项目，其中包含许多特定于给定数据库的子项目。这些令人兴奋的技术项目背后，是由许多公司和开发人员合作开发的。</p></blockquote><p>Spring Data 的使命是给各种数据访问提供统一的编程接口，不管是关系型数据库（如MySQL），还是非关系数据库（如Redis），或者类似Elasticsearch这样的索引数据库。从而简化开发人员的代码，提高开发效率。</p><p>包含很多不同数据操作的模块：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531753715580.png" alt=""></p><p><a href="https://projects.spring.io/spring-data-elasticsearch/" target="_blank" rel="noopener">Spring Data Elasticsearch的页面</a></p><p>特征：</p><ul><li>支持Spring的基于<code>@Configuration</code>的java配置方式，或者XML配置方式</li><li>提供了用于操作ES的便捷工具类<strong><code>ElasticsearchTemplate</code></strong>。包括实现文档到POJO之间的自动智能映射。</li><li>利用Spring的数据转换服务实现的功能丰富的对象映射</li><li>基于注解的元数据映射方式，而且可扩展以支持更多不同的数据格式</li><li>根据持久层接口自动生成对应实现方法，无需人工编写基本操作代码（类似mybatis，根据接口自动得到实现）。当然，也支持人工定制查询</li></ul><h2 id="Elasticsearch应用"><a href="#Elasticsearch应用" class="headerlink" title="Elasticsearch应用"></a>Elasticsearch应用</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531973082475.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531974312212.png" alt=""></p><p>pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure><h2 id="实体类及注解"><a href="#实体类及注解" class="headerlink" title="实体类及注解"></a>实体类及注解</h2><p>首先我们准备好实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    Long id;</span><br><span class="line">    String title; <span class="comment">//标题</span></span><br><span class="line">    String category;<span class="comment">// 分类</span></span><br><span class="line">    String brand; <span class="comment">// 品牌</span></span><br><span class="line">    Double price; <span class="comment">// 价格</span></span><br><span class="line">    String images; <span class="comment">// 图片地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>映射</p></blockquote><p>Spring Data通过注解来声明字段的映射属性，有下面的三个注解：</p><ul><li><code>@Document</code> 作用在类，标记实体类为文档对象，一般有两个属性<ul><li>indexName：对应索引库名称</li><li>type：对应在索引库中的类型</li><li>shards：分片数量，默认5</li><li>replicas：副本数量，默认1</li></ul></li><li><code>@Id</code> 作用在成员变量，标记一个字段作为id主键</li><li><code>@Field</code> 作用在成员变量，标记为文档的字段，并指定字段映射属性：<ul><li>type：字段类型，取值是枚举：FieldType</li><li>index：是否索引，布尔类型，默认是true</li><li>store：是否存储，布尔类型，默认是false</li><li>analyzer：分词器名称</li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"item"</span>,type = <span class="string">"docs"</span>, shards = <span class="number">1</span>, replicas = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title; <span class="comment">//标题</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">// 分类</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Double)</span><br><span class="line">    <span class="keyword">private</span> Double price; <span class="comment">// 价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field</span>(index = <span class="keyword">false</span>, type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String images; <span class="comment">// 图片地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Template索引操作"><a href="#Template索引操作" class="headerlink" title="Template索引操作"></a>Template索引操作</h2><h3 id="创建索引和映射"><a href="#创建索引和映射" class="headerlink" title="创建索引和映射"></a>创建索引和映射</h3><blockquote><p>创建索引</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531985485904.png" alt=""></p><p>ElasticsearchTemplate中提供了创建索引的API：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531984923727.png" alt=""></p><p>可以根据类的信息自动生成，也可以手动指定indexName和Settings</p><blockquote><p>映射</p></blockquote><p>映射相关的API：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531985337698.png" alt=""></p><p>可以根据类的字节码信息（注解配置）来生成映射，或者手动编写映射</p><p>我们这里采用类的字节码信息创建索引并映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= ItcastElasticsearchApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">IndexTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建索引，会根据Item类的@Document注解信息来创建</span></span><br><span class="line">        elasticsearchTemplate.createIndex(Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 配置映射，会根据Item类中的id、Field等字段来自动完成映射</span></span><br><span class="line">        elasticsearchTemplate.putMapping(Item<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">GET /item</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"item"</span>: &#123;</span><br><span class="line">    <span class="attr">"aliases"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"docs"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"brand"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"category"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"index"</span>: &#123;</span><br><span class="line">        <span class="attr">"refresh_interval"</span>: <span class="string">"1s"</span>,</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"provided_name"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"creation_date"</span>: <span class="string">"1525405022589"</span>,</span><br><span class="line">        <span class="attr">"store"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"fs"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="attr">"uuid"</span>: <span class="string">"4sE9SAw3Sqq1aAPz5F6OEg"</span>,</span><br><span class="line">        <span class="attr">"version"</span>: &#123;</span><br><span class="line">          <span class="attr">"created"</span>: <span class="string">"6020499"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h3><p>删除索引的API：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531986474606.png" alt=""></p><p>可以根据类名或索引名删除。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    esTemplate.deleteIndex(<span class="string">"h"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Repository文档操作"><a href="#Repository文档操作" class="headerlink" title="Repository文档操作"></a>Repository文档操作</h2><p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p><p>我们只需要定义接口，然后继承它就OK了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看下Repository的继承关系：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531986965570.png" alt=""></p><p>我们看到有一个ElasticsearchRepository接口：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531987044693.png" alt=""></p><h3 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemRepository itemRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Item item = <span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">"小米手机7"</span>, <span class="string">" 手机"</span>,</span><br><span class="line">                         <span class="string">"小米"</span>, <span class="number">3499.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>);</span><br><span class="line">    itemRepository.save(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去页面查询看看：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /item/_search</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机7"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"小米"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3499</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">"坚果手机R1"</span>, <span class="string">" 手机"</span>, <span class="string">"锤子"</span>, <span class="number">3699.00</span>, <span class="string">"http://image.leyou.com/123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">"华为META10"</span>, <span class="string">" 手机"</span>, <span class="string">"华为"</span>, <span class="number">4499.00</span>, <span class="string">"http://image.leyou.com/3.jpg"</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次去页面查询：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"坚果手机R1"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"锤子"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"华为META10"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"华为"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">4499</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"item"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"docs"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机7"</span>,</span><br><span class="line">          <span class="attr">"category"</span>: <span class="string">" 手机"</span>,</span><br><span class="line">          <span class="attr">"brand"</span>: <span class="string">"小米"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3499</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/13123.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><p>修改和新增是同一个接口，区分的依据就是id，这一点跟我们在页面发起PUT请求是类似的。</p><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><p>ElasticsearchRepository提供了一些基本的查询方法：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531989728869.png" alt=""></p><p>我们来试试查询所有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询全部，并安装价格降序排序</span></span><br><span class="line">    Iterable&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="string">"price"</span>));</span><br><span class="line">    items.forEach(item-&gt; System.out.println(item));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531990510740.png" alt=""></p><h3 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h3><p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。</p><p>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。</p><p>当然，方法名称要符合一定的约定：</p><table><thead><tr><th>Keyword</th><th>Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByNameAndPrice</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td></tr><tr><td><code>Or</code></td><td><code>findByNameOrPrice</code></td><td><code>{&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;price&quot; : &quot;?&quot;}} ]}}</code></td></tr><tr><td><code>Is</code></td><td><code>findByName</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td></tr><tr><td><code>Not</code></td><td><code>findByNameNot</code></td><td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}</code></td></tr><tr><td><code>Between</code></td><td><code>findByPriceBetween</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByPriceLessThan</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByPriceGreaterThan</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>Before</code></td><td><code>findByPriceBefore</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>After</code></td><td><code>findByPriceAfter</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;range&quot; : {&quot;price&quot; : {&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true}}}}}</code></td></tr><tr><td><code>Like</code></td><td><code>findByNameLike</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByNameStartingWith</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>EndingWith</code></td><td><code>findByNameEndingWith</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>Contains/Containing</code></td><td><code>findByNameContaining</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;name&quot; : {&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true}}}}}</code></td></tr><tr><td><code>In</code></td><td><code>findByNameIn(Collection&lt;String&gt;names)</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;bool&quot; : {&quot;should&quot; : [ {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}, {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}} ]}}}}</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td><td><code>{&quot;bool&quot; : {&quot;must_not&quot; : {&quot;bool&quot; : {&quot;should&quot; : {&quot;field&quot; : {&quot;name&quot; : &quot;?&quot;}}}}}}</code></td></tr><tr><td><code>Near</code></td><td><code>findByStoreNear</code></td><td><code>Not Supported Yet !</code></td></tr><tr><td><code>True</code></td><td><code>findByAvailableTrue</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td></tr><tr><td><code>False</code></td><td><code>findByAvailableFalse</code></td><td><code>{&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : false}}}}</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByAvailableTrueOrderByNameDesc</code></td><td><code>{&quot;sort&quot; : [{ &quot;name&quot; : {&quot;order&quot; : &quot;desc&quot;} }],&quot;bool&quot; : {&quot;must&quot; : {&quot;field&quot; : {&quot;available&quot; : true}}}}</code></td></tr></tbody></table><p>例如，我们来按照价格区间查询，定义这样的一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据价格区间查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Item&gt; <span class="title">findByPriceBetween</span><span class="params">(<span class="keyword">double</span> price1, <span class="keyword">double</span> price2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加一些测试数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">"小米手机7"</span>, <span class="string">"手机"</span>, <span class="string">"小米"</span>, <span class="number">3299.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">"坚果手机R1"</span>, <span class="string">"手机"</span>, <span class="string">"锤子"</span>, <span class="number">3699.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">"华为META10"</span>, <span class="string">"手机"</span>, <span class="string">"华为"</span>, <span class="number">4499.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">4L</span>, <span class="string">"小米Mix2S"</span>, <span class="string">"手机"</span>, <span class="string">"小米"</span>, <span class="number">4299.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">5L</span>, <span class="string">"荣耀V10"</span>, <span class="string">"手机"</span>, <span class="string">"华为"</span>, <span class="number">2799.00</span>, <span class="string">"http://image.leyou.com/13123.jpg"</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要写实现类，然后我们直接去运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByPriceBetween</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">this</span>.itemRepository.findByPriceBetween(<span class="number">2000.00</span>, <span class="number">3500.00</span>);</span><br><span class="line">    <span class="keyword">for</span> (Item item : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">"item = "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1531993518230.png" alt=""></p><p>虽然基本查询和自定义方法已经很强大了，但是如果是复杂查询（模糊、通配符、词条查询等）就显得力不从心了。此时，我们只能使用原生查询。</p><h2 id="高级查询-1"><a href="#高级查询-1" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="基本查询-1"><a href="#基本查询-1" class="headerlink" title="基本查询"></a>基本查询</h3><p>先看看基本玩法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 词条查询</span></span><br><span class="line">    MatchQueryBuilder queryBuilder = QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"小米"</span>);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    Iterable&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder);</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Repository的search方法需要QueryBuilder参数，elasticSearch为我们提供了一个对象QueryBuilders：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1532008212626.png" alt=""></p><p>QueryBuilders提供了大量的静态方法，用于生成各种不同类型的查询对象，例如：词条、模糊、通配符等QueryBuilder对象。</p><p>elasticsearch提供很多可用的查询方式，但是不够灵活。如果想玩过滤或者聚合查询等就很难了。</p><h3 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h3><p>先来看最基本的match query：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">"title"</span>, <span class="string">"小米"</span>));</span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体</p><p><code>Page&lt;item&gt;</code>：默认是分页查询，因此返回的是一个分页的结果对象，包含属性：</p><ul><li>totalElements：总条数</li><li>totalPages：总页数</li><li>Iterator：迭代器，本身实现了Iterator接口，因此可直接迭代得到当前页的数据</li><li>其它属性：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1532009679148.png" alt=""></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>利用<code>NativeSearchQueryBuilder</code>可以方便的实现分页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">"category"</span>, <span class="string">"手机"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化分页参数</span></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page, size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    System.out.println(items.getSize());</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    System.out.println(items.getNumber());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Elasticsearch中的分页是从第0页开始</strong>。</p></blockquote><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><p>排序也通用通过<code>NativeSearchQueryBuilder</code>完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">"category"</span>, <span class="string">"手机"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    queryBuilder.withSort(SortBuilders.fieldSort(<span class="string">"price"</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><h3 id="聚合为桶-1"><a href="#聚合为桶-1" class="headerlink" title="聚合为桶"></a>聚合为桶</h3><p>桶就是分组，比如这里我们按照品牌brand进行分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">""</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"brands"</span>).field(<span class="string">"brand"</span>));</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">"brands"</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString());</span><br><span class="line">        <span class="comment">// 3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getDocCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示的结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1532012598213.png" alt=""></p><p>关键API：</p><ul><li><p><code>AggregationBuilders</code>：聚合的构建工厂类。所有聚合都由这个类来构建，看看他的静态方法：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526567597724.png" alt=""></p></li><li><p><code>AggregatedPage</code>：聚合查询的结果类。它是<code>Page&lt;T&gt;</code>的子接口：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526567748355.png" alt=""></p><p><code>AggregatedPage</code>在<code>Page</code>功能的基础上，拓展了与聚合相关的功能，它其实就是对聚合结果的一种封装，大家可以对照聚合结果的JSON结构来看。</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526567889455.png" alt=""></p><p>而返回的结果都是Aggregation类型对象，不过根据字段类型不同，又有不同的子类表示</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526568128210.png" alt=""></p></li></ul><p>我们看下页面的查询的JSON结果与Java类的对照关系：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526571200130.png" alt=""></p><h3 id="嵌套聚合，求平均值"><a href="#嵌套聚合，求平均值" class="headerlink" title="嵌套聚合，求平均值"></a>嵌套聚合，求平均值</h3><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">""</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">"brands"</span>).field(<span class="string">"brand"</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.avg(<span class="string">"priceAvg"</span>).field(<span class="string">"price"</span>)) <span class="comment">// 在品牌聚合桶内进行嵌套聚合，求平均值</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">"brands"</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString() + <span class="string">"，共"</span> + bucket.getDocCount() + <span class="string">"台"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.6.获取子聚合结果：</span></span><br><span class="line">        InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(<span class="string">"priceAvg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"平均售价："</span> + avg.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/es/assets/1526572198447.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架11 -- Shiro权限系统</title>
      <link href="/2019/06/17/JAVA%E6%A1%86%E6%9E%B611%20--%20Shiro%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/06/17/JAVA%E6%A1%86%E6%9E%B611%20--%20Shiro%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="权限系统设计概述"><a href="#权限系统设计概述" class="headerlink" title="权限系统设计概述"></a>权限系统设计概述</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>权限系统实际上就是判断访问用户的合法性，有效性以及对访问资源权限的检查。</p><h2 id="权限系统要素"><a href="#权限系统要素" class="headerlink" title="权限系统要素"></a>权限系统要素</h2><ul><li>资源：授权访问。</li><li>角色：访问资源的证书，定义了资源访问的界限，作为一个粗粒度的资源访问权限控制。</li><li>主体：访问资源的对象，通常为登录用户。</li><li>权限：访问资源的具体限定，权限可以细分为操作权限和数据权限。<ul><li>操作权限：体现在2个方面，其一：通过界面来体现，具备操作权限的人才可以在界面上看到对应资源；其二：访问指定资源时进行权限检查。</li><li>数据权限：主体只能看到/操作他具备访问权限的资源，数据权限的设计可以通过数据库字段管关联来实现。</li></ul></li></ul><p>另外，可以根据权限系统设计的复杂性来决定权限控制粒度。可以将权限独立出来和角色进行组合，理解为通过角色和权限双重身份来限定主体授权访问资源；也可以将权限与角色关联，通过角色来定义主体/分组的权限。</p><ul><li>分组：通常对应于现实事物中的部门，主体属于分组，为分组定义角色。</li></ul><h2 id="常用权限框架"><a href="#常用权限框架" class="headerlink" title="常用权限框架"></a>常用权限框架</h2><ul><li><p><a href="http://shiro.apache.org/index.html" target="_blank" rel="noopener">shiro</a><br>JAVA实现的开源通用权限框架，不与特定框架进行绑定。功能全面，使用非常灵活。</p></li><li><p><a href="https://projects.spring.io/spring-security/" target="_blank" rel="noopener">Spring Security</a><br>Java实现开源权限框架，与Spring框架绑定。功能强大，但是只能在Spring框架中使用。</p></li></ul><h1 id="shiro简介"><a href="#shiro简介" class="headerlink" title="shiro简介"></a>shiro简介</h1><p><a href="https://shiro.apache.org/" target="_blank" rel="noopener">官网</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/722072-20170427184652412-55947396.png" alt=""></p><h2 id="Shiro是什么"><a href="#Shiro是什么" class="headerlink" title="Shiro是什么"></a>Shiro是什么</h2><p>Shiro是一个Java平台的开源权限框架，用于认证和访问授权。具体来说，满足对如下元素的支持：</p><ul><li>用户，角色，权限（仅仅是操作权限，数据权限必须与业务需求紧密结合），资源（url）。</li><li>用户分配角色，角色定义权限。</li><li>访问授权时支持角色或者权限，并且支持多级的权限定义。</li></ul><h3 id="对组的支持？"><a href="#对组的支持？" class="headerlink" title="对组的支持？"></a>对组的支持？</h3><ul><li>shiro默认不支持对组设置权限。</li></ul><h3 id="是否可以满足对组进行角色分配的需求？"><a href="#是否可以满足对组进行角色分配的需求？" class="headerlink" title="是否可以满足对组进行角色分配的需求？"></a>是否可以满足对组进行角色分配的需求？</h3><ul><li>扩展Realm，可以支持对组进行分配角色，其实就是给该组下的所有用户分配权限。</li></ul><h3 id="对数据权限的支持？-在业务系统中定义？"><a href="#对数据权限的支持？-在业务系统中定义？" class="headerlink" title="对数据权限的支持？ 在业务系统中定义？"></a>对数据权限的支持？ 在业务系统中定义？</h3><ul><li>shiro仅仅实现对操作权限的控制，用于在前端控制元素隐藏或者显示，以及对资源访问权限进行检查。数据权限与具体的业务需求紧密关联，shiro本身无法实现对数据权限的控制。</li></ul><h3 id="动态权限分配？"><a href="#动态权限分配？" class="headerlink" title="动态权限分配？"></a>动态权限分配？</h3><ul><li>扩展org.apache.shiro.realm.Realm，支持动态权限分配。</li></ul><h3 id="与Spring集成？"><a href="#与Spring集成？" class="headerlink" title="与Spring集成？"></a>与Spring集成？</h3><ul><li>可以支持与Spring集成，shiro还支持jsp标签。</li></ul><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>在shiro架构中，有3个最主要的组件：Subject，SecurityManager，Realm。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/722072-20170427184627350-52578544.png" alt=""></p><ul><li>Subject本质上就是当前访问用户的抽象描述。</li><li>SecurityManager是Shiro架构中最核心的组件，通过它可以协调其他组件完成用户认证和授权。实际上，SecurityManager就是Shiro框架的控制器。</li><li>Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。</li></ul><h2 id="Shiro原理"><a href="#Shiro原理" class="headerlink" title="Shiro原理"></a>Shiro原理</h2><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li>通过调用Subject.login(token)方法开始用户认证流程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">　　currentUser.login(token);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">　　logger.error(String.format(<span class="string">"user not found: %s"</span>, username), e); <span class="comment">// 用户不存在</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">　　logger.error(String.format(<span class="string">"incorrent credentials: %s"</span>, username), e); <span class="comment">// 密码不正确</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ConcurrentAccessException e) &#123;</span><br><span class="line">　　logger.error(String.format(<span class="string">"user has been authenticated: %s"</span>, username), e); <span class="comment">// 用户重复登录</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (AccountException e) &#123;</span><br><span class="line">　　logger.error(String.format(<span class="string">"account except: %s"</span>, username), e); <span class="comment">// 其他账户异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>shiro用户认证时序图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/3.png" alt=""></p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>shiro访问授权有3种实现方式：api调用，java注解，jsp标签。</p><h4 id="在独立应用程序中访问授权通过api调用实现"><a href="#在独立应用程序中访问授权通过api调用实现" class="headerlink" title="在独立应用程序中访问授权通过api调用实现"></a>在独立应用程序中访问授权通过api调用实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String role = <span class="string">"schwartz"</span>;</span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(currentUser.hasRole(role)) &#123;</span><br><span class="line">　　<span class="comment">//用户属于角色schwartz</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">　　<span class="comment">//用户不属于角色schwartz</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在spring框架中可以通过java注解"><a href="#在spring框架中可以通过java注解" class="headerlink" title="在spring框架中可以通过java注解"></a>在spring框架中可以通过java注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions</span>(value=&#123;<span class="string">"log:manage:*"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">home</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">　　ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"home"</span>);</span><br><span class="line">　　<span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在JSP页面中还可以直接使用jsp标签"><a href="#在JSP页面中还可以直接使用jsp标签" class="headerlink" title="在JSP页面中还可以直接使用jsp标签"></a>在JSP页面中还可以直接使用jsp标签</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用shiro标签 --&gt;</span><br><span class="line">&lt;shiro:hasPermission name=<span class="string">"log:manage:*"</span>&gt;</span><br><span class="line">　　&lt;a href="&lt;%=request.getContextPath()%&gt;/user/home"&gt;操作日志审计&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;/shiro:hasPermission&gt;</span><br></pre></td></tr></table></figure><h4 id="shiro访问授权时序图"><a href="#shiro访问授权时序图" class="headerlink" title="shiro访问授权时序图"></a>shiro访问授权时序图</h4><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/4.png" alt=""></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>org.apache.shiro.realm.jdbc.JdbcRealm如果需要在授权时开启权限检查，必须设置permissionsLookupEnabled为true，否则只检查角色。</p></li><li><p>用户退出登录时，Shiro用户必须执行logout()，必须要注销Session信息，避免影响下一次用户认证和授权。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SecurityUtils.getSubject().logout();</span><br><span class="line">req.getSession().invalidate();</span><br></pre></td></tr></table></figure></li><li><p>如果在数据库中存储的用户密码为编码值（如MD5加密），则在发送登录请求时传递的密码参数也必须是MD5加密结果，否则认证失败。</p></li><li><p>shiro框架只能控制操作权限，不能控制数据权限。数据权限与具体的业务紧密关联，无法通过一个通用的框架完成，通常都是利用关系数据库查询过滤实现。</p><blockquote><p>对操作权限的控制有2层含义，其一：用户在前端只能看到对应权限的元素；其二：在后端对用户操作进行权限检查。</p></blockquote></li></ol><h2 id="组件架构"><a href="#组件架构" class="headerlink" title="组件架构"></a>组件架构</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/5.png" alt=""></p><p>Shiro主要组件包括：Subject，SecurityManager，Authenticator，Authorizer，SessionManager，CacheManager，Cryptography，Realms。</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><ul><li>Subject表示与系统交互的对象，可以是登录系统的操作用户，也可能是另外一个软件系统。</li><li>Subject类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/6.png" alt=""></p><h3 id="SecurityManager"><a href="#SecurityManager" class="headerlink" title="SecurityManager"></a>SecurityManager</h3><ul><li>SecurityManager是Shiro架构最核心的组件。实际上，SecurityManager就是Shiro框架的控制器，协调其他组件一起完成认证和授权，如下图所示：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/7.png" alt=""></p><ul><li>SecurityManager类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/8.png" alt=""></p><h3 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h3><ul><li>Authenticator用于认证，协调一个或者多个Realm，从Realm指定的数据源取得数据之后进行执行具体的认证。见org.apache.shiro.authc.pam.ModularRealmAuthenticator源码：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/9.png" alt=""></p><ul><li>Authenticator类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/10.png" alt=""></p><h3 id="Authorizer"><a href="#Authorizer" class="headerlink" title="Authorizer"></a>Authorizer</h3><ul><li>Authorizer用户访问控制授权，决定用户是否拥有执行指定操作的权限。<br>见org.apache.shiro.authz.ModularRealmAuthorizer源码：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/11.png" alt=""></p><ul><li>Authorizer类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/12.png" alt=""></p><h3 id="SessionManager"><a href="#SessionManager" class="headerlink" title="SessionManager"></a>SessionManager</h3><ul><li>Shiro与生俱来就支持会话管理，这在安全类框架中都是独一无二的功能。即便不存在web容器环境，shiro都可以使用自己的会话管理机制，提供相同的会话API。</li><li>13SessionManager类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/13.png" alt=""></p><h3 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h3><ul><li>缓存组件，用于缓存认证信息等。</li><li>CacheManager类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/14.png" alt=""></p><h3 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h3><ul><li>Shiro提供了一个加解密的命令行工具jar包，需要单独下载使用。</li><li>详见：<a href="https://shiro.apache.org/download.html" target="_blank" rel="noopener">https://shiro.apache.org/download.html</a></li></ul><h3 id="Realms"><a href="#Realms" class="headerlink" title="Realms"></a>Realms</h3><ul><li>Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。</li><li>Realm类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/15.png" alt=""></p><h1 id="使用shiro"><a href="#使用shiro" class="headerlink" title="使用shiro"></a>使用shiro</h1><h2 id="在独立应用中使用shiro"><a href="#在独立应用中使用shiro" class="headerlink" title="在独立应用中使用shiro"></a>在独立应用中使用shiro</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>在非Web环境的独立应用中使用Shiro时，只需要shiro-core组件。</li><li>在Maven项目中的依赖配置如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">　　&lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">　　&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Shiro uses SLF4J <span class="keyword">for</span> logging. We<span class="string">'ll use the '</span>simple<span class="string">' binding in this example app. See http://www.slf4j.org for more info. --&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line"><span class="string">　　&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">　　&lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">　　&lt;version&gt;1.6.1&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>特别地！Shiro使用了日志框架slf4j，因此需要对应配置指定的日志实现组件，如：log4j，logback等。<br>在此，使用slf4j的简单日志实现slf4j-simple。</p></blockquote><h3 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h3><ul><li>在Shiro中，Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。</li><li>Realm类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/16.png" alt=""></p><blockquote><p>也就是说，可以根据实际需求及应用的权限管理复杂度灵活选择指定数据源。</p></blockquote><p>在此，以org.apache.shiro.realm.text.IniRealm为例，具体配置如下：</p><ul><li>shiro.ini：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># =============================================================================</span><br><span class="line"># Tutorial INI configuration</span><br><span class="line">#</span><br><span class="line"># Usernames/passwords are based on the classic Mel Brooks' film "Spaceballs" :)</span><br><span class="line"># =============================================================================</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># Users and their (optional) assigned roles</span><br><span class="line"># username = password, role1, role2, ..., roleN</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[users]</span><br><span class="line">root = secret, admin</span><br><span class="line">guest = guest, guest</span><br><span class="line">presidentskroob = <span class="number">12345</span>, president</span><br><span class="line">darkhelmet = ludicrousspeed, darklord, schwartz</span><br><span class="line">lonestarr = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># Roles with assigned permissions</span><br><span class="line"># roleName = perm1, perm2, ..., permN</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[roles]</span><br><span class="line">admin = *</span><br><span class="line">schwartz = lightsaber:*</span><br><span class="line">goodguy = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><h3 id="认证-1"><a href="#认证-1" class="headerlink" title="认证"></a>认证</h3><ul><li>在Shiro中，认证即执行用户登录，读取指定Realm连接的数据源，以验证用户身份的有效性与合法性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"lonestarr"</span>;</span><br><span class="line">String pass = <span class="string">"vespa"</span>;</span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(!currentUser.isAuthenticated()) &#123;</span><br><span class="line">　　UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name, pass);</span><br><span class="line">　　token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">　　<span class="keyword">try</span> &#123;</span><br><span class="line">　　　　currentUser.login(token);</span><br><span class="line">　　&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"user not found: %s"</span>, name), e);</span><br><span class="line">　　&#125; <span class="keyword">catch</span>(IncorrectCredentialsException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"user: %s pwd: %s error"</span>, name, pass), e);</span><br><span class="line">　　&#125; <span class="keyword">catch</span> (ConcurrentAccessException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"user has been authenticated: %s"</span>, name), e);</span><br><span class="line">　　&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"account except: %s"</span>, name), e);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">logger.info( <span class="string">"User ["</span> + currentUser.getPrincipal() + <span class="string">"] logged in successfully."</span> );</span><br></pre></td></tr></table></figure><h3 id="访问授权"><a href="#访问授权" class="headerlink" title="访问授权"></a>访问授权</h3><ul><li>在Shiro中，访问授权即验证用户是否具备执行指定操作的权限（角色或权限验证）。<br>特别地！在执行访问授权验证之前，必须执行用户认证。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String role = <span class="string">"schwartz"</span>;</span><br><span class="line"><span class="keyword">if</span>(currentUser.hasRole(role)) &#123;</span><br><span class="line">　　logger.info(String.format(<span class="string">"用户: %s 属于角色：%s"</span>, name, role));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">　　logger.error(String.format(<span class="string">"用户: %s 不属于角色：%s"</span>, name, role));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String perm = <span class="string">"lightsaber:cc"</span>;</span><br><span class="line"><span class="keyword">if</span>(currentUser.isPermitted(perm)) &#123;</span><br><span class="line">　　logger.info(String.format(<span class="string">"用户： %s 拥有权限：%s"</span>, name, perm));</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">　　logger.error(String.format(<span class="string">"用户：%s 没有权限：%s"</span>, name, perm));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在web应用中使用shiro"><a href="#在web应用中使用shiro" class="headerlink" title="在web应用中使用shiro"></a>在web应用中使用shiro</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><ul><li>在Maven项目中的依赖配置如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- shiro配置 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置日志组件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;slf4j-jcl&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">　　&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;　　&lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别地！Shiro使用了日志框架slf4j，因此需要对应配置指定的日志实现组件，如：log4j，logback等。<br>而且，由于shiro-web组件使用apache commons logging组件中的工具类，所以在项目中必须添加commongs logging组件。<br>否则，程序启动时将会报错：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory</span><br><span class="line">at org.apache.commons.beanutils.ConvertUtilsBean.&lt;init&gt;(ConvertUtilsBean.java:<span class="number">157</span>)</span><br><span class="line">at org.apache.commons.beanutils.BeanUtilsBean.&lt;init&gt;(BeanUtilsBean.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.commons.beanutils.BeanUtilsBean$<span class="number">1</span>.initialValue(BeanUtilsBean.java:<span class="number">68</span>)</span><br><span class="line">at org.apache.commons.beanutils.ContextClassLoaderLocal.get(ContextClassLoaderLocal.java:<span class="number">153</span>)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="集成Shiro"><a href="#集成Shiro" class="headerlink" title="集成Shiro"></a>集成Shiro</h3><ul><li>在Java Web应用中使用Shiro，需要特别的集成方式，不再像在非Web环境的独立应用中使用Shiro那么简单（只需要下载Shiro并添加到项目即可）。</li><li>通常，在Java Web应用中集成框架都是从配置web.xml开始的，集成Shiro也不例外。</li></ul><p>web.xml：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">shiro</span>.<span class="title">web</span>.<span class="title">env</span>.<span class="title">EnvironmentLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">ShiroFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">shiro</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">ShiroFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">ShiroFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">dispatcher</span>&gt;<span class="title">REQUEST</span>&lt;/<span class="title">dispatcher</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">dispatcher</span>&gt;<span class="title">FORWARD</span>&lt;/<span class="title">dispatcher</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">dispatcher</span>&gt;<span class="title">INCLUDE</span>&lt;/<span class="title">dispatcher</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">dispatcher</span>&gt;<span class="title">ERROR</span>&lt;/<span class="title">dispatcher</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通常，在Java Web应用中集成第三方框架，都是从Filter开始。Shiro也是如此，即需要将所有请求都经过Shiro指定的Filter进行拦截，这样才能完成用户对指定资源访问的授权验证。</p></blockquote><blockquote><p>特别地，从Shiro 1.2+版本之后，在Java Web应用中集成Shiro非常简单，甚至都不需要明确指定shiro配置文件的路径，而是直接在web.xml中添加org.apache.shiro.web.env.EnvironmentLoaderListener即可（只需要保证在${webapp}/WEB-INF/目录下存在文件shiro.ini）。</p></blockquote><h3 id="数据源配置-1"><a href="#数据源配置-1" class="headerlink" title="数据源配置"></a>数据源配置</h3><ul><li>在Shiro中，Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。</li><li>Realm类图：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/17.png" alt=""></p><ul><li><p>也就是说，可以根据实际需求及应用的权限管理复杂度灵活选择指定数据源。</p></li><li><p>在此，以org.apache.shiro.realm.text.IniRealm为例，具体配置如下：<br>shiro.ini：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line"># 自定义过滤器sessionFilter = org.chench.test.shiroweb.filter.SessionFilter</span><br><span class="line">authc.loginUrl = /index</span><br><span class="line">ssl.enabled = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># Users and their (optional) assigned roles</span><br><span class="line"># username = password, role1, role2, ..., roleN</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[users]</span><br><span class="line">root = secret, admin</span><br><span class="line">guest = guest, guest</span><br><span class="line">presidentskroob = <span class="number">12345</span>, president</span><br><span class="line">darkhelmet = ludicrousspeed, darklord, schwartz</span><br><span class="line">lonestarr = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># Roles with assigned permissions</span><br><span class="line"># roleName = perm1, perm2, ..., permN</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[roles]</span><br><span class="line">admin = *</span><br><span class="line">schwartz = lightsaber:*</span><br><span class="line">goodguy = winnebago:drive:eagle5</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># The format of each line in the urls section is as follows:</span><br><span class="line"># _URL_Ant_Path_Expression_ = _Path_Specific_Filter_Chain_</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[urls]</span><br><span class="line">/index = anon, sessionFilter</span><br><span class="line">/user/signin = anon</span><br><span class="line">/user/login = anon</span><br><span class="line">/user<span class="comment">/** = authc</span></span><br><span class="line"><span class="comment">/home/** = authc</span></span><br><span class="line"><span class="comment">#/admin/** = authc, roles[administrator]</span></span><br><span class="line"><span class="comment">#/rest/** = authc, rest</span></span><br><span class="line"><span class="comment">#/remoting/rpc/** = authc, perms["remote:invoke"]</span></span><br></pre></td></tr></table></figure><h3 id="认证-2"><a href="#认证-2" class="headerlink" title="认证"></a>认证</h3><ul><li>在Shiro中，认证即执行用户登录，读取指定Realm连接的数据源，以验证用户身份的有效性与合法性。<br>关于Shiro在Web应用中的认证流程，与Shiro在非Web环境的独立应用中的认证流程一样，都需要执行用户登录，即</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(!currentUser.isAuthenticated()) &#123;</span><br><span class="line">　　UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name, password);</span><br><span class="line">　　<span class="keyword">try</span> &#123;</span><br><span class="line">　　　　currentUser.login(token);　　&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">       exception = e;</span><br><span class="line">       logger.error(String.format(<span class="string">"user not found: %s"</span>, name), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IncorrectCredentialsException e) &#123;</span><br><span class="line">       exception = e;</span><br><span class="line">       logger.error(String.format(<span class="string">"user: %s pwd: %s error"</span>, name, password), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ConcurrentAccessException e) &#123;</span><br><span class="line">       exception = e;</span><br><span class="line">       logger.error(String.format(<span class="string">"user has been authenticated: %s"</span>, name), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">       exception = e;</span><br><span class="line">       logger.error(String.format(<span class="string">"account except: %s"</span>, name), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>唯一的区别就是，在Java Web环境中，用户名和密码参数是通过前端页面进行传递。</p></blockquote><h3 id="授权-1"><a href="#授权-1" class="headerlink" title="授权"></a>授权</h3><ul><li><strong>需要再三强调！！！</strong> Shiro作为权限框架，仅仅只能控制对资源的操作权限，并不能完成对数据权限的业务需求。</li><li>而对于Java Web环境下Shiro授权，包含个方面的含义。</li></ul><p>其一，对于前端来说，用户只能看到他对应访问权限的元素。在Java Web环境下，通过Shiro提供的JSP标签实现。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">    &lt;a&gt;用户管理&lt;/a&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;shiro:hasPermission name=<span class="string">"winnebago:drive:eagle5"</span>&gt;</span><br><span class="line">    &lt;a&gt;操作审计&lt;/a&gt;</span><br><span class="line">&lt;/shiro:hasPermission&gt;</span><br></pre></td></tr></table></figure><blockquote><p>必须在jsp页面中引入shiro标签库：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span><br></pre></td></tr></table></figure><p>其二，当用户执行指定操作（即：访问某个uri资源）时，需要验证用户是否具备对应权限。与在非Java Web环境下一样，需要在后端调用API进行权限（或者角色）检验。如果在Spring框架中集成Shiro，还可以直接通过Java注解方式实现。</p><blockquote><p>api调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String roleAdmin = <span class="string">"admin"</span>;</span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(!currentUser.hasRole(roleAdmin)) &#123;</span><br><span class="line">    <span class="comment">//todo something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在spring框架中集成shiro"><a href="#在spring框架中集成shiro" class="headerlink" title="在spring框架中集成shiro"></a>在spring框架中集成shiro</h2><h3 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h3><ul><li>在Maven项目中的依赖配置如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- shiro配置 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;version.shiro&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Enables support <span class="keyword">for</span> web-based applications. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;version.shiro&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Enables AspectJ support <span class="keyword">for</span> Shiro AOP and Annotations. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-aspectj&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;version.shiro&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Enables Ehcache-based famework caching. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;version.shiro&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Enables Spring Framework integration. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;$&#123;version.shiro&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别地！Shiro使用了日志框架slf4j，因此需要对应配置指定的日志实现组件，如：log4j，logback等。<br>在此，以使用log4j为日志实现为例</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日志工具 --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">shiro使用slf4j作为日志框架，所以必需配置slf4j。</span><br><span class="line">同时，使用log4j作为底层的日志实现框架。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">　　&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">　　&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">　　&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">　　&lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">　　&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">　　&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">　　&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="集成Shiro-1"><a href="#集成Shiro-1" class="headerlink" title="集成Shiro"></a>集成Shiro</h3><p>在Spring框架中集成Shiro，本质上是与Spring IoC容器和Spring MVC框架集成，所以应该分为2部分来说。</p><ul><li>与Spring IoC容器集成</li></ul><p>Spring IoC容器提供了一个非常重要的功能，就是依赖注入，将Bean的定义以及Bean之间关系的耦合通过容器来处理。也就是说，在Spring中集成Shiro时，Shiro中的相应Bean的定义以及他们的关系也需要通过Spring IoC容器实现，配置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"shiroFilter"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">"securityManager"</span> ref=<span class="string">"securityManager"</span>/&gt;</span><br><span class="line">  &lt;property name=<span class="string">"loginUrl"</span> value=<span class="string">"/index"</span>/&gt;</span><br><span class="line">  &lt;property name=<span class="string">"successUrl"</span> value=<span class="string">"/home"</span>/&gt;</span><br><span class="line">  &lt;property name=<span class="string">"unauthorizedUrl"</span> value=<span class="string">"/unauthorized.jsp"</span>/&gt;</span><br><span class="line">  &lt;!-- The <span class="string">'filters'</span> property is not necessary since any declared javax.servlet.Filter bean  --&gt;</span><br><span class="line">  &lt;!-- defined will be automatically acquired and available via its beanName in chain        --&gt;</span><br><span class="line">  &lt;!-- definitions, but you can perform instance overrides or name aliases here <span class="keyword">if</span> you like: --&gt;</span><br><span class="line">  &lt;!-- &lt;property name=<span class="string">"filters"</span>&gt;</span><br><span class="line">      &lt;util:map&gt;</span><br><span class="line">          &lt;entry key=<span class="string">"logout"</span> value-ref=<span class="string">"logoutFilter"</span> /&gt;</span><br><span class="line">      &lt;/util:map&gt;</span><br><span class="line">  &lt;/property&gt; --&gt;</span><br><span class="line">  &lt;property name=<span class="string">"filterChainDefinitions"</span>&gt;</span><br><span class="line">      &lt;value&gt;</span><br><span class="line">          # some example chain definitions:</span><br><span class="line">          # /admin/** = authc, roles[admin]</span><br><span class="line">          # /docs/** = authc, perms[document:read]</span><br><span class="line">          /login = anon</span><br><span class="line">          /logout = anon</span><br><span class="line">          /error = anon</span><br><span class="line">          <span class="comment">/** = user</span></span><br><span class="line"><span class="comment">          # more URL-to-FilterChain definitions here</span></span><br><span class="line"><span class="comment">      &lt;/value&gt;</span></span><br><span class="line"><span class="comment">  &lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt;</span></span><br><span class="line"><span class="comment">  &lt;!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. --&gt;</span></span><br><span class="line"><span class="comment">  &lt;property name="realm" ref="myRealm" /&gt;</span></span><br><span class="line"><span class="comment">  &lt;!-- By default the servlet container sessions will be used.  Uncomment this line</span></span><br><span class="line"><span class="comment">       to use shiro's native sessions (see the JavaDoc for more): --&gt;</span></span><br><span class="line"><span class="comment">  &lt;!-- &lt;property name="sessionMode" value="native"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">&lt;bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!-- Define the Shiro Realm implementation you want to use to connect to your back-end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- security datasource: --&gt;</span></span><br><span class="line"><span class="comment">&lt;bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm"&gt;</span></span><br><span class="line"><span class="comment">  &lt;property name="dataSource" ref="dataSource"/&gt;</span></span><br><span class="line"><span class="comment">  &lt;property name="permissionsLookupEnabled" value="true"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!-- Enable Shiro Annotations for Spring-configured beans.  Only run after --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- the lifecycleBeanProcessor has run: --&gt;</span></span><br><span class="line"><span class="comment">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/&gt;</span></span><br><span class="line"><span class="comment">&lt;bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"&gt;</span></span><br><span class="line"><span class="comment">  &lt;property name="securityManager" ref="securityManager"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure><ul><li>与Spring MVC集成</li></ul><p>跟在普通Java Web应用中使用Shiro一样，集成Shiro到Spring MVC时，实际上就是通过在web.xml中添加指定Filter实现。配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The filter-name matches name of a <span class="string">'shiroFilter'</span> bean inside applicationContext.xml --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">DelegatingFilterProxy</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">targetFilterLifecycle</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">true</span>&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">Make</span> <span class="title">sure</span> <span class="title">any</span> <span class="title">request</span> <span class="title">you</span> <span class="title">want</span> <span class="title">accessible</span> <span class="title">to</span> <span class="title">Shiro</span> <span class="title">is</span> <span class="title">filtered</span>. /* <span class="title">catches</span> <span class="title">all</span> --&gt;</span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">requests</span>.  <span class="title">Usually</span> <span class="title">this</span> <span class="title">filter</span> <span class="title">mapping</span> <span class="title">is</span> <span class="title">defined</span> <span class="title">first</span> (<span class="title">before</span> <span class="title">all</span> <span class="title">others</span>) <span class="title">to</span> --&gt;</span></span><br><span class="line">&lt;!-- ensure that Shiro works in subsequent filters in the filter chain:             --&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也就是说，其实在Spring中集成Shiro的原理就是：通过在web.xml中配置的Shiro Filter与Spring IoC中定义的相应的Shiro Bean定义建立关系，从而实现在Spring框架集成Shiro。实际上，通常就是在web.xml添加的Filter与某个Shiro Spring Bean的定义name是相同的，参见示例。</p></blockquote><p>Shiro Filter类图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/18.png" alt=""></p><h3 id="数据源配置-2"><a href="#数据源配置-2" class="headerlink" title="数据源配置"></a>数据源配置</h3><ul><li>在Shiro中，Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。</li></ul><p>Realm类图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/19.png" alt=""></p><blockquote><p>也就是说，可以根据实际需求及应用的权限管理复杂度灵活选择指定数据源。<br>在此，以org.apache.shiro.realm.jdbc.JdbcRealm为例，将用户信息存放在关系型数据库中。</p></blockquote><ul><li><p>在使用org.apache.shiro.realm.jdbc.JdbcRealm时，必须要在关系型数据库中存在3张表，分别是：</p><ul><li><p>users表，存放认证用户基本信息，在该表中必须存在2个字段：username，password。</p></li><li><p>roles_permissions表，存放角色和权限定义，在该表中必须存在2个字段：role_name，permission。</p></li><li><p>user_roles表，存放用户角色对应关系，在该表中必须存在2个字段：username，role_name。<br>实际上，在更加复杂的应用场景下，通常需要扩展org.apache.shiro.realm.jdbc.JdbcRealm。</p></li></ul></li></ul><h3 id="认证-3"><a href="#认证-3" class="headerlink" title="认证"></a>认证</h3><p>在Shiro中，认证即执行用户登录，读取指定Realm连接的数据源，以验证用户身份的有效性与合法性。<br>关于Shiro在Web应用中的认证流程，与Shiro在非Web环境的独立应用中的认证流程一样，都需要执行用户登录，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(!currentUser.isAuthenticated()) &#123;</span><br><span class="line">　　UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name, password);</span><br><span class="line">　　<span class="keyword">try</span> &#123;</span><br><span class="line">　　　　currentUser.login(token);</span><br><span class="line">　　&#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"user not found: %s"</span>, name), e);</span><br><span class="line">　　&#125; <span class="keyword">catch</span>(IncorrectCredentialsException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"user: %s pwd: %s error"</span>, name, password), e);</span><br><span class="line">　　&#125; <span class="keyword">catch</span> (ConcurrentAccessException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"user has been authenticated: %s"</span>, name), e);</span><br><span class="line">　　&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">　　　　logger.error(String.format(<span class="string">"account except: %s"</span>, name), e);</span><br><span class="line">　　&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Java Web环境中，用户名和密码参数是通过前端页面进行传递。</p></blockquote><h3 id="授权-2"><a href="#授权-2" class="headerlink" title="授权"></a>授权</h3><ul><li><p>操作与web上述一样</p></li><li><p>在Spring框架中集成Shiro，还可以直接通过Java注解方式实现:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">　　<span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)</span><br><span class="line">　　<span class="meta">@RequiresPermissions</span>(value=&#123;<span class="string">"log:manage:*"</span>&#125;)</span><br><span class="line">　　<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">home</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">　　　　ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"home"</span>);</span><br><span class="line">　　　　<span class="keyword">return</span> mv;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring集成Shiro注意事项"><a href="#Spring集成Shiro注意事项" class="headerlink" title="Spring集成Shiro注意事项"></a>Spring集成Shiro注意事项</h3><ul><li>假设存在如下几个配置文件，分别是：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">springDAO</span><span class="selector-class">.xml</span>：数据源定义</span><br><span class="line"><span class="selector-tag">springMVC</span><span class="selector-class">.xml</span>：<span class="selector-tag">Spring</span> <span class="selector-tag">MVC</span>配置</span><br><span class="line"><span class="selector-tag">springService</span><span class="selector-class">.xml</span>：其他<span class="selector-tag">Spring</span>组件配置</span><br><span class="line"><span class="selector-tag">springShiro</span><span class="selector-class">.xml</span>：<span class="selector-tag">Shiro</span>相关<span class="selector-tag">Bean</span>配置</span><br></pre></td></tr></table></figure><ul><li>第一，在不同版本的Spring中集成Shiro，实现方式不同。</li></ul><p>（1）在Spring 4.2.0 RELEASE+版本中集成Shiro(web.xml):</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">　　&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">　　&lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">　　&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">　　　　&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">　　　　&lt;param-value&gt;classpath:/spring*.xml&lt;/param-value&gt;</span><br><span class="line">　　&lt;/init-param&gt;</span><br><span class="line">　　&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">　　&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">　　&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>（2）在Spring 4.1.9 RELEASE-版本中集成Shiro(web.xml)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">　　&lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">context</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">　　&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">　　&lt;param-value&gt;classpath:/springDAO.xml,classpath:/springService.xml,classpath:/springShiro.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">　　&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">　　&lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">　　&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">　　　　&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">　　　　&lt;param-value&gt;classpath:/springMVC.xml&lt;/param-value&gt;</span><br><span class="line">　　&lt;/init-param&gt;</span><br><span class="line">　　&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">　　&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">　　&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>同时，还需要将在springShiro.xml中配置的org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator放到springMVC.xml中，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 解决在spring <span class="number">4.1</span><span class="number">.9</span> RELEASE及以下版本，集成shiro时注解不生效的问题 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span><br><span class="line">depends-on=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>第二，虽然shiro的注解定义是在Class级别的，但是实际验证只能支持方法级别：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresAuthentication</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span></span><br><span class="line"><span class="meta">@RequiresRoles</span></span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/20.png" alt=""><br><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/21.png" alt=""><br><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/shiro/image/22.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程02 -- IO编程</title>
      <link href="/2019/06/03/python%E7%BC%96%E7%A8%8B02%20--%20IO%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/06/03/python%E7%BC%96%E7%A8%8B02%20--%20IO%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>主要内容：IO定义、stream、同步IO（读写文件）、stringIO和BytesIO、操作文件和目录、序列化、异步IO、协程、asyncio、asyna/await、aiohttp、多用户高并发</p><p>更新      ：不定期对内容更新、有任何错误或者问题可以在下方留言或者右下角直接联系</p><a id="more"></a><h1 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h1><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p><blockquote><p>比如你打开浏览器，访问新浪首页，浏览器这个程序就需要通过网络IO获取新浪的网页。浏览器首先会发送数据给新浪服务器，告诉它我想要首页的HTML，这个动作是往外发数据，叫Output</p><p>随后新浪服务器把网页发过来，这个动作是从外面接收数据，叫Input。</p><p>通常，程序完成IO操作会有Input和Output两个数据流。当然也有只用一个的情况，比如，从磁盘读取文件到内存，就只有Input操作，反过来，把数据写到磁盘文件里，就只是一个Output操作。</p></blockquote><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。</p><blockquote><p>Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。</p><p>对于浏览网页来说，浏览器和新浪服务器之间至少需要建立两根水管，才可以既能发数据，又能收数据。</p></blockquote><p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><p><strong>1. 第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</p><p>2.另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</strong></p><h3 id="同步与异步区别"><a href="#同步与异步区别" class="headerlink" title="同步与异步区别"></a>同步与异步区别</h3><p>同步和异步的区别就在于是否等待IO执行的结果。</p><blockquote><p>好比你去麦当劳点餐，你说“来个汉堡”，服务员告诉你，对不起，汉堡要现做，需要等5分钟，于是你站在收银台前面等了5分钟，拿到汉堡再去逛商场，这是同步IO。</p></blockquote><blockquote><p>你说“来个汉堡”，服务员告诉你，汉堡需要等5分钟，你可以先去逛商场，等做好了，我们再通知你，这样你可以立刻去干别的事情（逛商场），这是异步IO。</p></blockquote><p>使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。想想看，你得知道什么时候通知你“汉堡做好了”，而通知你的方法也各不相同。如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。</p><blockquote><p>总之，异步IO的复杂度远远高于同步IO。</p></blockquote><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p><h1 id="同步IO"><a href="#同步IO" class="headerlink" title="同步IO"></a>同步IO</h1><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p><p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><h4 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h4><ol><li><p>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">f</span> = open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p></blockquote></li><li><p>如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">f</span>=<span class="keyword">open</span>(<span class="string">'/Users/michael/notfound.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such <span class="keyword">file</span> <span class="built_in">or</span> directory: <span class="string">'/Users/michael/notfound.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.read()</span><br><span class="line"><span class="string">'Hello, world!'</span></span><br></pre></td></tr></table></figure></li><li><p>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.close()</span><br></pre></td></tr></table></figure></li><li><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">f</span> = <span class="keyword">open</span>(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">f</span>.<span class="keyword">read</span>())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">f</span>:</span><br><span class="line">        <span class="keyword">f</span>.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure></li><li><p>但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：</p> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure><blockquote><p>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p></blockquote></li><li><p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p><blockquote><p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p></blockquote> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="type">line</span> <span class="keyword">in</span> f.readlines():</span><br><span class="line">    print(<span class="type">line</span>.strip()) # 把末尾的<span class="string">'\n'</span>删掉</span><br><span class="line">file-<span class="keyword">like</span> <span class="keyword">Object</span></span><br></pre></td></tr></table></figure></li><li><p>像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</p><blockquote><p>StringIO就是在内存中创建的file-like Object，常用作临时缓冲。</p></blockquote></li></ol><h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><ol><li><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = open(<span class="string">'/Users/michael/test.jpg'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.read()</span><br><span class="line">b<span class="string">'\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...'</span> <span class="comment"># 十六进制表示的字节</span></span><br></pre></td></tr></table></figure></li><li><p>字符编码<br>要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = open(<span class="string">'/Users/michael/gbk.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.read()</span><br><span class="line"><span class="string">'测试'</span></span><br></pre></td></tr></table></figure></li><li><p>遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = open(<span class="string">'/Users/michael/gbk.txt'</span>, <span class="string">'r'</span>, <span class="attribute">encoding</span>=<span class="string">'gbk'</span>, <span class="attribute">errors</span>=<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><ol><li><p>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.write(<span class="string">'Hello, world!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.close()</span><br></pre></td></tr></table></figure><blockquote><p>你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。</p></blockquote><p> 所以，还是用with语句来得保险：</p> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.<span class="built_in">write</span>(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>要写入特定编码的文本文件，请给open()函数传入encoding参数，将字符串自动转换成指定编码。</p></blockquote></li></ol><ol start="2"><li><p>以’w’模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入’a’以追加（append）模式写入。</p><blockquote><p>所有模式的定义及含义可以参考Python的<a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener">官方文档</a>。</p></blockquote></li></ol><h2 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h2><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>很多时候，数据读写不一定是文件，也可以在内存中读写。</p><p>StringIO顾名思义就是在内存中读写str。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from io import StringIO</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.write(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.write(<span class="string">' '</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.write(<span class="string">'world!'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(f.getvalue())</span><br><span class="line">hello world!</span><br><span class="line">getvalue()方法用于获得写入后的str。</span><br></pre></td></tr></table></figure></li><li><p>要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO(<span class="string">'Hello!\nHi!\nGoodbye!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    s = f.readline()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> s == <span class="string">''</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    print(s.strip())</span><br><span class="line">...</span><br><span class="line">Hello!</span><br><span class="line">Hi!</span><br><span class="line">Goodbye!</span><br><span class="line">BytesIO</span><br></pre></td></tr></table></figure></li><li><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><blockquote><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p></blockquote> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from io import BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(f.getvalue())</span><br><span class="line">b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure><blockquote><p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p></blockquote></li></ol><ol start="4"><li><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p> <figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f = BytesIO(b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87')</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">b'<span class="symbol">\x</span>e4<span class="symbol">\x</span>b8<span class="symbol">\x</span>ad<span class="symbol">\x</span>e6<span class="symbol">\x</span>96<span class="symbol">\x</span>87'</span><br></pre></td></tr></table></figure></li><li><p>代码</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env <span class="keyword">python3</span></span><br><span class="line"># -*- codin<span class="variable">g:</span> utf-<span class="number">8</span> -*-</span><br><span class="line"></span><br><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line"># <span class="keyword">write</span> <span class="keyword">to</span> StringIO:</span><br><span class="line"><span class="keyword">f</span> = StringIO()</span><br><span class="line"><span class="keyword">f</span>.<span class="keyword">write</span>(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">f</span>.<span class="keyword">write</span>(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">f</span>.<span class="keyword">write</span>(<span class="string">'world!'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">f</span>.getvalue())</span><br><span class="line"></span><br><span class="line"># <span class="keyword">read</span> from StringIO:</span><br><span class="line"><span class="keyword">f</span> = StringIO(<span class="string">'水面细风生，\n菱歌慢慢声。\n客亭临小市，\n灯火夜妆明。'</span>)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    s = <span class="keyword">f</span>.readline()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span>(s.strip())</span><br></pre></td></tr></table></figure> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env <span class="keyword">python3</span></span><br><span class="line"># -*- codin<span class="variable">g:</span> utf-<span class="number">8</span> -*-</span><br><span class="line"></span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line"># <span class="keyword">write</span> <span class="keyword">to</span> BytesIO:</span><br><span class="line"><span class="keyword">f</span> = BytesIO()</span><br><span class="line"><span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">b</span><span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">b</span><span class="string">' '</span>)</span><br><span class="line"><span class="keyword">f</span>.<span class="keyword">write</span>(<span class="keyword">b</span><span class="string">'world!'</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">f</span>.getvalue())</span><br><span class="line"></span><br><span class="line"># <span class="keyword">read</span> from BytesIO:</span><br><span class="line">data = <span class="string">'人闲桂花落，夜静春山空。月出惊山鸟，时鸣春涧中。'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">f</span> = BytesIO(data)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">f</span>.<span class="keyword">read</span>())</span><br></pre></td></tr></table></figure></li></ol><h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如dir、cp等命令。</p><p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的os模块也可以直接调用操作系统提供的接口函数。</p><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ol><li><p>打开Python交互式命令行，我们来看看如何使用os模块的基本功能：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import os</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.name <span class="comment"># 操作系统类型</span></span><br><span class="line"><span class="string">'posix'</span></span><br></pre></td></tr></table></figure><blockquote><p>如果是posix，说明系统是Linux、Unix或Mac OS X，如果是nt，就是Windows系统。</p></blockquote></li><li><p>要获取详细的系统信息，可以调用uname()函数：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.uname()</span><br><span class="line">posix.uname_result(<span class="attribute">sysname</span>=<span class="string">'Darwin'</span>, <span class="attribute">nodename</span>=<span class="string">'MichaelMacPro.local'</span>, <span class="attribute">release</span>=<span class="string">'14.3.0'</span>, </span><br><span class="line"><span class="attribute">version</span>=<span class="string">'Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; </span></span><br><span class="line"><span class="string">root:xnu-2782.20.48~5/RELEASE_X86_64'</span>, <span class="attribute">machine</span>=<span class="string">'x86_64'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意uname()函数在Windows上不提供，也就是说，os模块的某些函数是跟操作系统相关的。</p></blockquote></li><li><p>环境变量</p><p> 在操作系统中定义的环境变量，全部保存在os.environ这个变量中，可以直接查看：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.environ</span><br><span class="line">environ(&#123;<span class="string">'VERSIONER_PYTHON_PREFER_32_BIT'</span>: <span class="string">'no'</span>, <span class="string">'TERM_PROGRAM_VERSION'</span>: <span class="string">'326'</span>, <span class="string">'LOGNAME'</span>: </span><br><span class="line"><span class="string">'michael'</span>, <span class="string">'USER'</span>: <span class="string">'michael'</span>, <span class="string">'PATH'</span>: <span class="string">'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:</span></span><br><span class="line"><span class="string">/opt/X11/bin:/usr/local/mysql/bin'</span>, ...&#125;)</span><br></pre></td></tr></table></figure><p> 要获取某个环境变量的值，可以调用os.environ.get(‘key’)：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.environ.get(<span class="string">'PATH'</span>)</span><br><span class="line"><span class="string">'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.environ.get(<span class="string">'x'</span>, <span class="string">'default'</span>)</span><br><span class="line"><span class="string">'default'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><ol><li><p>操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录的绝对路径:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line"><span class="string">'/Users/michael'</span></span><br><span class="line"><span class="comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.path.join(<span class="string">'/Users/michael'</span>, <span class="string">'testdir'</span>)</span><br><span class="line"><span class="string">'/Users/michael/testdir'</span></span><br><span class="line"><span class="comment"># 然后创建一个目录:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.mkdir(<span class="string">'/Users/michael/testdir'</span>)</span><br><span class="line"><span class="comment"># 删掉一个目录:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.rmdir(<span class="string">'/Users/michael/testdir'</span>)</span><br></pre></td></tr></table></figure></li><li><p>把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。在Linux/Unix/Mac下，os.path.join()返回这样的字符串：</p> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">part<span class="number">-1</span>/part<span class="number">-2</span></span><br><span class="line">而Windows下会返回这样的字符串：</span><br><span class="line"></span><br><span class="line">part<span class="number">-1</span>\part<span class="number">-2</span></span><br></pre></td></tr></table></figure></li><li><p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="string">'/Users/michael/testdir/file.txt'</span>)</span><br><span class="line">(<span class="string">'/Users/michael/testdir'</span>, <span class="string">'file.txt'</span>)</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">os</span>.<span class="built_in">path</span>.splitext(<span class="string">'/path/to/file.txt'</span>)</span><br><span class="line">(<span class="string">'/path/to/file'</span>, <span class="string">'.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</p></blockquote></li><li><p>文件操作使用下面的函数。假定当前目录下有一个test.txt文件：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对文件重命名:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.rename(<span class="string">'test.txt'</span>, <span class="string">'test.py'</span>)</span><br><span class="line"><span class="comment"># 删掉文件:</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.remove(<span class="string">'test.py'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</p></blockquote><blockquote><p>幸运的是shutil模块提供了copyfile()的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是os模块的补充。</p></blockquote></li><li><p>利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">os</span>.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">path</span>.isdir(x)]</span><br><span class="line">[<span class="string">'.lein'</span>, <span class="string">'.local'</span>, <span class="string">'.m2'</span>, <span class="string">'.npm'</span>, <span class="string">'.ssh'</span>, <span class="string">'.Trash'</span>, <span class="string">'.vim'</span>, <span class="string">'Applications'</span>, <span class="string">'Desktop'</span>, ...]</span><br><span class="line">要列出所有的.py文件，也只需一行代码：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">os</span>.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">path</span>.isfile(x) <span class="keyword">and</span> <span class="built_in">os</span>.<span class="built_in">path</span>.splitext(x)[<span class="number">1</span>]==<span class="string">'.py'</span>]</span><br><span class="line">[<span class="string">'apis.py'</span>, <span class="string">'config.py'</span>, <span class="string">'models.py'</span>, <span class="string">'pymonitor.py'</span>, <span class="string">'test_db.py'</span>, <span class="string">'urls.py'</span>, <span class="string">'wsgiapp.py'</span>]</span><br><span class="line">是不是非常简洁？</span><br></pre></td></tr></table></figure><p>小结</p></li></ol><p>Python的os模块封装了操作系统的目录和文件操作，要注意这些函数有的在os模块中，有的在os.path模块中。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line">from datetime import datetime</span><br><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">pwd = <span class="built_in">os</span>.<span class="built_in">path</span>.abspath(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'      Size     Last Modified  Name'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'------------------------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">os</span>.listdir(pwd):</span><br><span class="line">    fsize = <span class="built_in">os</span>.<span class="built_in">path</span>.getsize(f)</span><br><span class="line">    mtime = datetime.fromtimestamp(<span class="built_in">os</span>.<span class="built_in">path</span>.getmtime(f)).strftime(<span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">    flag = <span class="string">'/'</span> <span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">path</span>.isdir(f) <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%10d  %s  %s%s'</span> % (fsize, mtime, f, flag))</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ol><li>在程序运行的过程中，所有的变量都是在内存中，比如，定义一个dict：</li></ol><pre><code>&gt;d = dict(name=&apos;Bob&apos;, age=20, score=88)&gt;&gt;可以随时修改变量，比如把name改成&apos;Bill&apos;，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果没有把修改后的&apos;Bill&apos;存储到磁盘上，下次重新运行程序，变量又被初始化为&apos;Bob&apos;。</code></pre><ol start="2"><li><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p></li><li><p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</p></li><li><p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p></li></ol><h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><blockquote><p>Python提供了pickle模块来实现序列化。</p></blockquote><ol><li><p>首先，我们尝试把一个对象序列化并写入文件：</p> <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pickle</span><br><span class="line">&gt;&gt;&gt; d = dict(name='Bob', age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line">&gt;&gt;&gt; pickle.dumps(d)</span><br><span class="line">b'\<span class="keyword">x</span><span class="number">80</span>\<span class="keyword">x</span><span class="number">03</span>&#125;q\<span class="keyword">x</span><span class="number">00</span>(X\<span class="keyword">x</span><span class="number">03</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>ageq\<span class="keyword">x</span><span class="number">01</span>K\<span class="keyword">x</span><span class="number">14</span>X\<span class="keyword">x</span><span class="number">05</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>scoreq</span><br><span class="line">\<span class="keyword">x</span><span class="number">02</span>KXX\<span class="keyword">x</span><span class="number">04</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>nameq\<span class="keyword">x</span><span class="number">03</span>X\<span class="keyword">x</span><span class="number">03</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>\<span class="keyword">x</span><span class="number">00</span>Bobq\<span class="keyword">x</span><span class="number">04</span>u.'</span><br></pre></td></tr></table></figure></li><li><p>pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = open(<span class="string">'dump.txt'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; pickle.dump(d, f)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.close()</span><br></pre></td></tr></table></figure><blockquote><p>看看写入的dump.txt文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。</p></blockquote></li><li><p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; f = open(<span class="string">'dump.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d = pickle.load(f)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; f.close()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'score'</span>: <span class="number">88</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个变量和原来的变量是完全不相干的对象，它们只是内容相同而已。</p></blockquote><blockquote><p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p></blockquote></li></ol><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><ol><li>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</li></ol><pre><code>|JSON类型|    Python类型|:-:|:-:|{}    |dict[]    |list&quot;string&quot;|    str1234.56    |int或floattrue/false    |True/Falsenull|    None</code></pre><ol start="2"><li><p>Python内置的json模块提供了非常完善的Python对象到JSON格式的转换。我们先看看如何把Python对象变成一个JSON：</p> <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">import</span> json</span><br><span class="line">&gt;&gt;&gt; <span class="attr">d</span> = dict(<span class="attr">name='Bob',</span> <span class="attr">age=20,</span> <span class="attr">score=88)</span></span><br><span class="line">&gt;&gt;&gt; json.dumps(d)</span><br><span class="line">'&#123;<span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"score"</span>: <span class="number">88</span>, <span class="string">"name"</span>: <span class="string">"Bob"</span>&#125;'</span><br></pre></td></tr></table></figure><blockquote><p>dumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。</p></blockquote></li><li><p>要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; json_str = <span class="string">'&#123;"age": 20, "score": 88, "name": "Bob"&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; json.loads(json_str)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'score'</span>: <span class="number">88</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于JSON标准规定JSON编码是UTF-8，所以我们总是能正确地在Python的str与JSON的字符串之间转换。</p></blockquote></li></ol><h4 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h4><ol><li><p>Python的dict对象可以直接序列化为JSON的{}，不过，很多时候，我们更喜欢用class表示对象，比如定义Student类，然后序列化：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age, score)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="number">20</span>, <span class="number">88</span>)</span><br><span class="line">print(json.dumps(s))</span><br></pre></td></tr></table></figure><blockquote><p>运行代码，毫不留情地得到一个TypeError：</p></blockquote><blockquote><p>Traceback (most recent call last):</p><p>…</p><p>TypeError: &lt;<strong>main</strong>.Student object at 0x10603cc50&gt; is not JSON serializable</p></blockquote><blockquote><p>错误的原因是Student对象不是一个可序列化为JSON的对象。</p></blockquote></li></ol><ol start="2"><li><p>dumps()方法的参数列表,除了第一个必须的obj参数外，dumps()方法还提供了一大堆的可选参数：</p><p> <a href="https://docs.python.org/3/library/json.html#json.dumps" target="_blank" rel="noopener">https://docs.python.org/3/library/json.html#json.dumps</a></p></li></ol><p>这些可选参数就是让我们来定制JSON序列化。前面的代码之所以无法把Student类实例序列化为JSON，是因为默认情况下，dumps()方法不知道如何将Student实例变为一个JSON的{}对象。</p><p>可选参数default就是把任意一个对象变成一个可序列为JSON的对象，我们只需要为Student专门写一个转换函数，再把函数传进去即可：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student2dict</span><span class="params">(std)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'name'</span>: std.name,</span><br><span class="line">        <span class="string">'age'</span>: std.age,</span><br><span class="line">        <span class="string">'score'</span>: std.score</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样，Student实例首先被student2dict()函数转换成dict，然后再被顺利序列化为JSON：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="builtin-name">print</span>(json.dumps(s, <span class="attribute">default</span>=student2dict))</span><br><span class="line">&#123;<span class="string">"age"</span>: 20, <span class="string">"name"</span>: <span class="string">"Bob"</span>, <span class="string">"score"</span>: 88&#125;</span><br></pre></td></tr></table></figure><p>不过，下次如果遇到一个Teacher类的实例，照样无法序列化为JSON。我们可以偷个懒，把任意class的实例变为dict：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">json</span>.dumps(<span class="name">s</span>, default=lambda obj: obj.__dict__))</span><br></pre></td></tr></table></figure><p>因为通常class的实例都有一个<strong>dict</strong>属性，它就是一个dict，用来存储实例变量。也有少数例外，比如定义了<strong>slots</strong>的class。</p><ol start="3"><li><p>同样的道理，如果我们要把JSON反序列化为一个Student对象实例，loads()方法首先转换出一个dict对象，然后，我们传入的object_hook函数负责把dict转换为Student实例：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2student</span><span class="params">(d)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> Student(d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'score'</span>])</span><br><span class="line">运行结果如下：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; json_str = <span class="string">'&#123;"age": 20, "score": 88, "name": "Bob"&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; print(json.loads(json_str, object_hook=dict2student))</span><br><span class="line">&lt;__main_<span class="number">_</span>.Student object at <span class="number">0x10cd3c190</span>&gt;</span><br><span class="line">打印出的是反序列化的Student实例对象。</span><br></pre></td></tr></table></figure></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。</p></li><li><p>json模块的dumps()和loads()函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。</p></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre><code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">d = dict(<span class="attribute">name</span>=<span class="string">'Bob'</span>, <span class="attribute">age</span>=20, <span class="attribute">score</span>=88)</span><br><span class="line">data = pickle.dumps(d)</span><br><span class="line"><span class="builtin-name">print</span>(data)</span><br><span class="line"></span><br><span class="line">reborn = pickle.loads(data)</span><br><span class="line"><span class="builtin-name">print</span>(reborn)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">d = dict(<span class="attribute">name</span>=<span class="string">'Bob'</span>, <span class="attribute">age</span>=20, <span class="attribute">score</span>=88)</span><br><span class="line">data = json.dumps(d)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'JSON Data is a str:'</span>, data)</span><br><span class="line">reborn = json.loads(data)</span><br><span class="line"><span class="builtin-name">print</span>(reborn)</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return <span class="string">'Student object (%s, %s, %s)'</span> % (self.name, self.age, self.score)</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, 20, 88)</span><br><span class="line">std_data = json.dumps(s, <span class="attribute">default</span>=lambda obj: obj.__dict__)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'Dump Student:'</span>, std_data)</span><br><span class="line">rebuild = json.loads(std_data, <span class="attribute">object_hook</span>=lambda d: Student(d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'score'</span>]))</span><br><span class="line"><span class="builtin-name">print</span>(rebuild)</span><br></pre></td></tr></table></figure></code></pre><p>#异步IO</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ol><li><p>CPU的速度远远快于磁盘、网络等IO。在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。</p><blockquote><p>在IO操作的过程中，当前线程被挂起，而其他需要CPU执行的代码就无法被当前线程执行了。</p></blockquote><blockquote><p>因为一个IO操作就阻塞了当前线程，导致其他代码无法执行，所以我们必须使用多线程或者多进程来并发执行代码，为多个用户服务。每个用户都会分配一个线程，如果遇到IO导致线程被挂起，其他用户的线程不受影响。</p></blockquote></li><li><p>多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就少了，结果导致性能严重下降。</p><p> 由于我们要解决的问题是CPU高速执行能力和IO设备的龟速严重不匹配，多线程和多进程只是解决这一问题的一种方法。</p><p> 另一种解决IO问题的方法是异步IO。当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。</p></li><li><p>如果按普通顺序写出的代码实际上是没法完成异步IO的：</p> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span><span class="constructor">_some_code()</span></span><br><span class="line">f = <span class="keyword">open</span>('/path/<span class="keyword">to</span>/file', <span class="character">'r'</span>)</span><br><span class="line">r = f.read<span class="literal">()</span> # &lt;== 线程停在此处等待IO操作结果</span><br><span class="line"># IO操作完成后线程才能继续执行:</span><br><span class="line"><span class="keyword">do</span><span class="constructor">_some_code(<span class="params">r</span>)</span></span><br><span class="line">所以，同步IO模型的代码是无法实现异步IO模型的。</span><br></pre></td></tr></table></figure></li><li><p>异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程：</p> <figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">loop</span> = <span class="function"><span class="title">get_event_loop</span>()</span></span><br><span class="line"><span class="variable"><span class="keyword">while</span></span> <span class="variable"><span class="literal">True</span></span>:</span><br><span class="line">    <span class="variable">event</span> = <span class="variable">loop.get_event</span>()</span><br><span class="line">    <span class="function"><span class="title">process_event</span>(<span class="variable">event</span>)</span></span><br></pre></td></tr></table></figure></li><li><p>消息模型其实早在应用在桌面应用程序中了。一个GUI程序的主线程就负责不停地读取消息并处理消息。所有的键盘、鼠标等消息都被发送到GUI程序的消息队列中，然后由GUI程序的主线程处理。</p></li><li><p>由于GUI线程处理键盘、鼠标等消息的速度非常快，所以用户感觉不到延迟。某些时候，GUI线程在一个消息处理的过程中遇到问题导致一次消息处理时间过长，此时，用户会感觉到整个GUI程序停止响应了，敲键盘、点鼠标都没有反应。这种情况说明在消息模型中，处理一个消息必须非常迅速，否则，主线程将无法及时处理消息队列中的其他消息，导致程序看上去停止响应。</p></li><li><p>消息模型是如何解决同步IO必须等待IO操作这一问题的呢？当遇到IO操作时，代码只负责发出IO请求，不等待IO结果，然后直接结束本轮消息处理，进入下一轮消息处理过程。当IO操作完成后，将收到一条“IO完成”的消息，处理该消息时就可以直接获取IO操作结果。</p></li><li><p>在“发出IO请求”到收到“IO完成”的这段时间里，同步IO模型下，主线程只能挂起，但异步IO模型下，主线程并没有休息，而是在消息循环中继续处理其他消息。这样，在异步IO模型下，一个线程就可以同时处理多个IO请求，并且没有切换线程的操作。对于大多数IO密集型的应用程序，使用异步IO将大大提升系统的多任务处理能力。</p></li></ol><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ol><li><p>协程，又称微线程，纤程。英文名Coroutine。</p></li><li><p>子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。</p><blockquote><p>所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。</p></blockquote><blockquote><p>子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同。</p></blockquote><blockquote><p>协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</p></blockquote></li></ol><ol start="3"><li><p>注意，在一个子程序中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断。比如子程序A、B：</p> <figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">def</span> <span class="function"><span class="title">A</span>():</span></span><br><span class="line"><span class="function">   <span class="title">print</span>(<span class="string">'1'</span>)</span></span><br><span class="line">   <span class="function"><span class="title">print</span>(<span class="string">'2'</span>)</span></span><br><span class="line">   <span class="function"><span class="title">print</span>(<span class="string">'3'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">def</span> <span class="function"><span class="title">B</span>():</span></span><br><span class="line"><span class="function">   <span class="title">print</span>(<span class="string">'x'</span>)</span></span><br><span class="line">   <span class="function"><span class="title">print</span>(<span class="string">'y'</span>)</span></span><br><span class="line">   <span class="function"><span class="title">print</span>(<span class="string">'z'</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>假设由协程执行，在执行A的过程中，可以随时中断，去执行B，B也可能在执行过程中中断再去执行A，结果可能是：</p></blockquote> <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line"><span class="number">3</span></span><br><span class="line">z</span><br></pre></td></tr></table></figure><blockquote><p>但是在A中是没有调用B的，所以协程的调用比函数调用理解起来要难一些。</p></blockquote><blockquote><p>看起来A、B的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？</p></blockquote></li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li><p>最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p></li><li><p>第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p><blockquote><p>因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p></blockquote></li></ol><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ol><li><p>Python对协程的支持是通过generator实现的。</p><blockquote><p>在generator中，我们不但可以通过for循环来迭代，还可以不断调用next()函数获取由yield语句返回的下一个值。</p></blockquote></li><li><p>Python的yield不但可以返回一个值，它还可以接收调用者发出的参数。</p><blockquote><p>来看例子：</p></blockquote><blockquote><p>传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。</p></blockquote><blockquote><p>如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高：</p></blockquote> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">consumer</span>(<span class="params"></span>):</span></span><br><span class="line"><span class="function">    r</span> = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> not n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">'[CONSUMER] Consuming %s...'</span> % n)</span><br><span class="line">        r = <span class="string">'200 OK'</span></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">produce</span>(<span class="params">c</span>):</span></span><br><span class="line"><span class="function">    c.<span class="title">send</span>(<span class="params">None</span>)</span></span><br><span class="line"><span class="function">    n</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'[PRODUCER] Producing %s...'</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        print(<span class="string">'[PRODUCER] Consumer return: %s'</span> % r)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">c = consumer()</span><br><span class="line">produce(c)</span><br><span class="line">执行结果：</span><br><span class="line"></span><br><span class="line">[<span class="meta">PRODUCER</span>] Producing <span class="number">1.</span>..</span><br><span class="line">[<span class="meta">CONSUMER</span>] Consuming <span class="number">1.</span>..</span><br><span class="line">[<span class="meta">PRODUCER</span>] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[<span class="meta">PRODUCER</span>] Producing <span class="number">2.</span>..</span><br><span class="line">[<span class="meta">CONSUMER</span>] Consuming <span class="number">2.</span>..</span><br><span class="line">[<span class="meta">PRODUCER</span>] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[<span class="meta">PRODUCER</span>] Producing <span class="number">3.</span>..</span><br><span class="line">[<span class="meta">CONSUMER</span>] Consuming <span class="number">3.</span>..</span><br><span class="line">[<span class="meta">PRODUCER</span>] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[<span class="meta">PRODUCER</span>] Producing <span class="number">4.</span>..</span><br><span class="line">[<span class="meta">CONSUMER</span>] Consuming <span class="number">4.</span>..</span><br><span class="line">[<span class="meta">PRODUCER</span>] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br><span class="line">[<span class="meta">PRODUCER</span>] Producing <span class="number">5.</span>..</span><br><span class="line">[<span class="meta">CONSUMER</span>] Consuming <span class="number">5.</span>..</span><br><span class="line">[<span class="meta">PRODUCER</span>] Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</span><br></pre></td></tr></table></figure></li><li><p>注意到consumer函数是一个generator，把一个consumer传入produce后：</p><blockquote><ol><li>首先调用c.send(None)启动生成器；</li></ol></blockquote><blockquote><ol start="2"><li>然后，一旦生产了东西，通过c.send(n)切换到consumer执行；</li></ol></blockquote><blockquote><ol start="3"><li>consumer通过yield拿到消息，处理，又通过yield把结果传回；</li></ol></blockquote><blockquote><ol start="4"><li>produce拿到consumer处理的结果，继续生产下一条消息；</li></ol></blockquote><blockquote><ol start="5"><li>produce决定不生产了，通过c.close()关闭consumer，整个过程结束。</li></ol></blockquote><blockquote><p>整个流程无锁，由一个线程执行，produce和consumer协作完成任务，所以称为“协程”，而非线程的抢占式多任务。</p></blockquote></li></ol><p><s>协程的特点：“子程序就是协程的一种特例。”</s></p><h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>asyncio是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。</p><p>asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个EventLoop的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO。</p><h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><ol><li>用asyncio实现Hello world代码如下：</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello world!"</span>)</span><br><span class="line">    <span class="comment"># 异步调用asyncio.sleep(1):</span></span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello again!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取EventLoop:</span></span><br><span class="line"><span class="keyword">loop</span> = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 执行coroutine</span></span><br><span class="line"><span class="keyword">loop</span>.run_until_complete(hello())</span><br><span class="line"><span class="keyword">loop</span>.close()</span><br></pre></td></tr></table></figure><blockquote><p>@asyncio.coroutine把一个generator标记为coroutine类型，然后，我们就把这个coroutine扔到EventLoop中执行。</p></blockquote><p>hello()会首先打印出Hello world!，然后，yield from语法可以让我们方便地调用另一个generator。</p><p>由于asyncio.sleep()也是一个coroutine，所以线程不会等待asyncio.sleep()，而是直接中断并执行下一个消息循环。当asyncio.sleep()返回时，线程就可以从yield from拿到返回值（此处是None），然后接着执行下一行语句。</p><p>把asyncio.sleep(1)看成是一个耗时1秒的IO操作，在此期间，主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p><ol start="2"><li>我们用Task封装两个coroutine试试：</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello<span class="literal">()</span>:</span><br><span class="line">    print('Hello world! (%s)' % threading.current<span class="constructor">Thread()</span>)</span><br><span class="line">    yield from asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print('Hello again! (%s)' % threading.current<span class="constructor">Thread()</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get<span class="constructor">_event_loop()</span></span><br><span class="line">tasks = <span class="literal">[<span class="identifier">hello</span>(), <span class="identifier">hello</span>()]</span></span><br><span class="line">loop.run<span class="constructor">_until_complete(<span class="params">asyncio</span>.<span class="params">wait</span>(<span class="params">tasks</span>)</span>)</span><br><span class="line">loop.close<span class="literal">()</span></span><br><span class="line">观察执行过程：</span><br><span class="line"></span><br><span class="line">Hello world! (&lt;<span class="constructor">_MainThread(MainThread, <span class="params">started</span> 140735195337472)</span>&gt;)</span><br><span class="line">Hello world! (&lt;<span class="constructor">_MainThread(MainThread, <span class="params">started</span> 140735195337472)</span>&gt;)</span><br><span class="line">(暂停约<span class="number">1</span>秒)</span><br><span class="line">Hello again! (&lt;<span class="constructor">_MainThread(MainThread, <span class="params">started</span> 140735195337472)</span>&gt;)</span><br><span class="line">Hello again! (&lt;<span class="constructor">_MainThread(MainThread, <span class="params">started</span> 140735195337472)</span>&gt;)</span><br><span class="line">由打印的当前线程名称可以看出，两个coroutine是由同一个线程并发执行的。</span><br></pre></td></tr></table></figure><blockquote><p>如果把asyncio.sleep()换成真正的IO操作，则多个coroutine就可以由一个线程并发执行。</p></blockquote><ol start="3"><li>我们用asyncio的异步网络连接来获取sina、sohu和163的网站首页：</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def wget(host):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">'wget %s...'</span> % host)</span><br><span class="line">    connect = asyncio.open_connection(host, <span class="number">80</span>)</span><br><span class="line">    reader, writer = yield from connect</span><br><span class="line">    header = <span class="string">'GET / HTTP/1.0\r\nHost: %s\r\n\r\n'</span> % host</span><br><span class="line">    writer.<span class="keyword">write</span>(header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    yield from writer.drain()</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="built_in">line</span> = yield from reader.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">line</span> == <span class="keyword">b</span><span class="string">'\r\n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">'%s header &gt; %s'</span> % (host, <span class="built_in">line</span>.decode(<span class="string">'utf-8'</span>).rstrip()))</span><br><span class="line">    # Ignore the body, <span class="keyword">close</span> the socket</span><br><span class="line">    writer.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [wget(host) <span class="keyword">for</span> host in [<span class="string">'www.sina.com.cn'</span>, <span class="string">'www.sohu.com'</span>, <span class="string">'www.163.com'</span>]]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.<span class="keyword">close</span>()</span><br><span class="line">执行结果如下：</span><br><span class="line"></span><br><span class="line">wget www.sohu.<span class="keyword">com</span>...</span><br><span class="line">wget www.sina.<span class="keyword">com</span>.<span class="keyword">cn</span>...</span><br><span class="line">wget www.<span class="number">163</span>.<span class="keyword">com</span>...</span><br><span class="line">(等待一段时间)</span><br><span class="line">(打印出sohu的header)</span><br><span class="line">www.sohu.<span class="keyword">com</span> header &gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">www.sohu.<span class="keyword">com</span> header &gt; Content-Type: text/html</span><br><span class="line">...</span><br><span class="line">(打印出sina的header)</span><br><span class="line">www.sina.<span class="keyword">com</span>.<span class="keyword">cn</span> header &gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">www.sina.<span class="keyword">com</span>.<span class="keyword">cn</span> header &gt; Date: Wed, <span class="number">20</span> May <span class="number">2015</span> <span class="number">04</span>:<span class="number">56</span>:<span class="number">33</span> GMT</span><br><span class="line">...</span><br><span class="line">(打印出<span class="number">163</span>的header)</span><br><span class="line">www.<span class="number">163</span>.<span class="keyword">com</span> header &gt; HTTP/<span class="number">1.0</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line">www.<span class="number">163</span>.<span class="keyword">com</span> header &gt; Server: Cdn Cache Server V2.<span class="number">0</span></span><br><span class="line">...</span><br><span class="line">可见<span class="number">3</span>个连接由一个线程通过coroutine并发完成。</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li><p>asyncio提供了完善的异步IO支持；</p></li><li><p>异步操作需要在coroutine中通过yield from完成；</p></li><li><p>多个coroutine可以封装成一组Task然后并发执行。</p></li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Hello world! (%s)'</span> % threading.currentThread())</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Hello again! (%s)'</span> % threading.currentThread())</span><br><span class="line"></span><br><span class="line"><span class="keyword">loop</span> = asyncio.get_event_loop()</span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line"><span class="keyword">loop</span>.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"><span class="keyword">loop</span>.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wget</span><span class="params">(host)</span>:</span></span><br><span class="line">    print(<span class="string">'wget %s...'</span> % host)</span><br><span class="line">    connect = asyncio.open_connection(host, <span class="number">80</span>)</span><br><span class="line">    reader, writer = <span class="keyword">yield</span> <span class="keyword">from</span> connect</span><br><span class="line">    header = <span class="string">'GET / HTTP/1.0\r\nHost: %s\r\n\r\n'</span> % host</span><br><span class="line">    writer.write(header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> writer.drain()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = <span class="keyword">yield</span> <span class="keyword">from</span> reader.readline()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">b'\r\n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'%s header &gt; %s'</span> % (host, line.decode(<span class="string">'utf-8'</span>).rstrip()))</span><br><span class="line">    <span class="comment"># Ignore the body, close the socket</span></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [wget(host) <span class="keyword">for</span> host <span class="keyword">in</span> [<span class="string">'www.sina.com.cn'</span>, <span class="string">'www.sohu.com'</span>, <span class="string">'www.163.com'</span>]]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><ol><li><p>用asyncio提供的@asyncio.coroutine可以把一个generator标记为coroutine类型，然后在coroutine内部用yield from调用另一个coroutine实现异步操作。</p></li><li><p>为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。</p></li><li><p>注意，async和await是针对coroutine的新语法，要使用新的语法，只需要做两步简单的替换：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">把@asyncio.coroutine替换为<span class="keyword">async</span>；</span><br><span class="line">把<span class="keyword">yield</span> <span class="keyword">from</span>替换为<span class="keyword">await</span>。</span><br><span class="line">让我们对比一下上一节的代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Hello again!"</span>)</span><br><span class="line">用新语法重新编写如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">    r = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Hello again!"</span>)</span><br><span class="line">剩下的代码保持不变。</span><br></pre></td></tr></table></figure></li></ol><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>Python从3.5版本开始为asyncio提供了async和await的新语法；</p><p>注意新语法只能用在Python 3.5以及后续版本，如果使用3.4版本，则仍需使用上一节的方案。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello world! (%s)'</span> % threading.currentThread())</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Hello again! (%s)'</span> % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello world! (%s)'</span> % threading.currentThread())</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Hello again! (%s)'</span> % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h2 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><ol><li><p>asyncio可以实现单线程并发IO操作。如果仅用在客户端，发挥的威力不大。如果把asyncio用在服务器端，例如Web服务器，由于HTTP连接就是IO操作，因此可以用单线程+coroutine实现多用户的高并发支持。</p></li><li><p>asyncio实现了TCP、UDP、SSL等协议，aiohttp则是基于asyncio实现的HTTP框架。</p></li></ol><h3 id="操作-4"><a href="#操作-4" class="headerlink" title="操作"></a>操作</h3><ol><li><p>安装aiohttp：</p><pre><code>pip install aiohttp</code></pre></li><li><p>然后编写一个HTTP服务器，分别处理以下URL：</p><pre><code>/ - 首页返回b&apos;&lt;h1&gt;Index&lt;/h1&gt;&apos;；/hello/{name} - 根据URL参数返回文本hello, %s!。</code></pre> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> web.Response(body=<span class="string">b'&lt;h1&gt;Index&lt;/h1&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">    text = <span class="string">'&lt;h1&gt;hello, %s!&lt;/h1&gt;'</span> % request.match_info[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">return</span> web.Response(body=text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(loop)</span>:</span></span><br><span class="line">    app = web.Application(loop=loop)</span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/'</span>, index)</span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/hello/&#123;name&#125;'</span>, hello)</span><br><span class="line">    srv = <span class="keyword">await</span> loop.create_server(app.make_handler(), <span class="string">'127.0.0.1'</span>, <span class="number">8000</span>)</span><br><span class="line">    print(<span class="string">'Server started at http://127.0.0.1:8000...'</span>)</span><br><span class="line">    <span class="keyword">return</span> srv</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(init(loop))</span><br><span class="line">loop.run_forever()</span><br></pre></td></tr></table></figure><blockquote><p>注意aiohttp的初始化函数init()也是一个coroutine，loop.create_server()则利用asyncio创建TCP服务。</p></blockquote></li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Michael Liao'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">async web application.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> web.Response(body=<span class="string">b'&lt;h1&gt;Index&lt;/h1&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">    text = <span class="string">'&lt;h1&gt;hello, %s!&lt;/h1&gt;'</span> % request.match_info[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">return</span> web.Response(body=text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(loop)</span>:</span></span><br><span class="line">    app = web.Application(loop=loop)</span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/'</span>, index)</span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/hello/&#123;name&#125;'</span>, hello)</span><br><span class="line">    srv = <span class="keyword">await</span> loop.create_server(app.make_handler(), <span class="string">'127.0.0.1'</span>, <span class="number">8000</span>)</span><br><span class="line">    print(<span class="string">'Server started at http://127.0.0.1:8000...'</span>)</span><br><span class="line">    <span class="keyword">return</span> srv</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(init(loop))</span><br><span class="line">loop.run_forever()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程06 -- Thymeleaf</title>
      <link href="/2019/06/02/Java%E7%BC%96%E7%A8%8B06%20--%20Thymeleaf/"/>
      <url>/2019/06/02/Java%E7%BC%96%E7%A8%8B06%20--%20Thymeleaf/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf简介"><a href="#Thymeleaf简介" class="headerlink" title="Thymeleaf简介"></a>Thymeleaf简介</h1><p><a href="https://www.thymeleaf.org/index.html" target="_blank" rel="noopener">官方网站</a></p><p><strong>Thymeleaf</strong>是用来开发Web和独立环境项目的现代服务器端Java模板引擎。</p><p>Thymeleaf的主要目标是为您的开发工作流程带来优雅的<em>自然模板</em> - HTML。可以在直接浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。</p><p>借助Spring Framework的模块，可以根据自己的喜好进行自由选择，可插拔功能组件，Thymeleaf是现代HTML5 JVM Web开发的理想选择 - 尽管它可以做的更多。</p><p>Spring官方支持的服务的渲染模板中，并不包含jsp。而是Thymeleaf和Freemarker等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="创建module"><a href="#创建module" class="headerlink" title="创建module"></a>创建module</h2><p>使用spring 脚手架创建module</p><h2 id="添加web和Thymeleaf的依赖："><a href="#添加web和Thymeleaf的依赖：" class="headerlink" title="添加web和Thymeleaf的依赖："></a>添加web和Thymeleaf的依赖：</h2><h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>不需要做任何配置，启动器已经帮我们把Thymeleaf的视图器配置完成：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/thymeleaf/1526435647041.png" alt=""></p><p>而且，还配置了模板文件（html）的位置，与jsp类似的前缀+ 视图名 + 后缀风格：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/thymeleaf/1526435706301.png" alt=""></p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p><p>Thymeleaf默认会开启页面缓存，提高页面并发能力。但会导致我们修改页面不会立即被展现，因此我们关闭缓存：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭Thymeleaf的缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>另外，修改完毕页面，需要使用快捷键：<code>Ctrl + Shift + F9</code>来刷新工程。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>我们准备一个controller，控制视图跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"show1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Hello, Thymeleaf!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个html模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span>大家好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量案例"><a href="#变量案例" class="headerlink" title="变量案例"></a>变量案例</h3><p>我们先新建一个实体类：User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    User friend;<span class="comment">// 对象类型属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在模型中添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"show2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"Jack Chen"</span>);</span><br><span class="line">    user.setFriend(<span class="keyword">new</span> User(<span class="string">"李小龙"</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"show2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>语法说明：</p></blockquote><p>Thymeleaf通过<code>${}</code>来获取model中的变量，注意这不是el表达式，而是ognl表达式，但是语法非常像。</p><blockquote><p>示例：</p></blockquote><p>我们在页面获取user数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    欢迎您：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>感觉跟el表达式几乎是一样的。不过区别在于，我们的表达式写在一个名为：<code>th:text</code>的标签属性中，这个叫做<code>指令</code></p><h3 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a>动静结合</h3><blockquote><p>指令：</p></blockquote><p>Thymeleaf崇尚<code>自然模板</code>，意思就是模板是纯正的html代码，脱离模板引擎，在纯静态环境也可以直接运行。现在如果我们直接在html中编写 <code>${}</code>这样的表达式，显然在静态环境下就会出错，这不符合Thymeleaf的理念。</p><p>Thymeleaf中所有的表达式都需要写在<code>指令</code>中，指令是HTML5中的自定义属性，在Thymeleaf中所有指令都是以<code>th:</code>开头。因为表达式<code>${user.name}</code>是写在自定义属性中，因此在静态环境下，表达式的内容会被当做是普通字符串，浏览器会自动忽略这些指令，这样就不会报错了！</p><ul><li>静态页面中，<code>th</code>指令不被识别，但是浏览器也不会报错，把它当做一个普通属性处理。这样<code>span</code>的默认值<code>请登录</code>就会展现在页面</li><li>如果是在Thymeleaf环境下，<code>th</code>指令就会被识别和解析，而<code>th:text</code>的含义就是替<strong>换所在标签中的文本内容</strong>，于是<code>user.name</code>的值就替代了 <code>span</code>中默认的请登录</li></ul><p>指令的设计，正是Thymeleaf的高明之处，也是它优于其它模板引擎的原因。动静结合的设计，使得无论是前端开发人员还是后端开发人员可以完美契合。</p><blockquote><p>向下兼容</p></blockquote><p>但是要注意，如果浏览器不支持Html5怎么办？</p><p>如果不支持这种<code>th:</code>的命名空间写法，那么可以把<code>th:text</code>换成 <code>data-th-text</code>，Thymeleaf也可以兼容。</p><blockquote><p>escape</p></blockquote><p>另外，<code>th:text</code>指令出于安全考虑，会把表达式读取到的值进行处理，防止html的注入。</p><p>例如，<code>&lt;p&gt;你好&lt;/p&gt;</code>将会被格式化输出为<code>$lt;p$gt;你好$lt;/p$lt;</code>。</p><p>如果想要不进行格式化输出，而是要输出原始内容，则使用<code>th:utext</code>来代替.</p><h3 id="ognl表达式的语法糖"><a href="#ognl表达式的语法糖" class="headerlink" title="ognl表达式的语法糖"></a>ognl表达式的语法糖</h3><p>刚才获取变量值，我们使用的是经典的<code>对象.属性名</code>方式。但有些情况下，我们的属性名可能本身也是变量，怎么办？</p><p>ognl提供了类似js的语法方式：</p><p>例如：<code>${user.name}</code> 可以写作<code>${user[&#39;name&#39;]}</code></p><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><blockquote><p>场景</p></blockquote><p>看下面的案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.friend.name&#125;"</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们获取用户的所有信息，分别展示。</p><p>当数据量比较多的时候，频繁的写<code>user.</code>就会非常麻烦。</p><p>因此，Thymeleaf提供了自定义变量来解决：</p><blockquote><p>示例：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;friend.name&#125;"</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>首先在 <code>h2</code>上 用 <code>th:object=&quot;${user}&quot;</code>获取user的值，并且保存</li><li>然后，在<code>h2</code>内部的任意元素上，可以通过 <code>*{属性名}</code>的方式，来获取user中的属性，这样就省去了大量的<code>user.</code>前缀了</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>ognl表达式中的方法调用</p></blockquote><p>ognl表达式本身就支持方法调用，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>FirstName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name.split(' ')[0]&#125;"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>LastName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name.split(' ')[1]&#125;"</span>&gt;</span>Li<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里我们调用了name（是一个字符串）的split方法。</li></ul><blockquote><p>Thymeleaf内置对象</p></blockquote><p>Thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用<code>#对象名</code>来引用。</p><ul><li>一些环境相关对象</li></ul><table><thead><tr><th align="center">对象</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>#ctx</code></td><td align="left">获取Thymeleaf自己的Context对象</td></tr><tr><td align="center"><code>#requset</code></td><td align="left">如果是web程序，可以获取HttpServletRequest对象</td></tr><tr><td align="center"><code>#response</code></td><td align="left">如果是web程序，可以获取HttpServletReponse对象</td></tr><tr><td align="center"><code>#session</code></td><td align="left">如果是web程序，可以获取HttpSession对象</td></tr><tr><td align="center"><code>#servletContext</code></td><td align="left">如果是web程序，可以获取HttpServletContext对象</td></tr><tr><td align="center"></td><td align="left"></td></tr></tbody></table><ul><li>Thymeleaf提供的全局对象：</li></ul><table><thead><tr><th align="center">对象</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>#dates</code></td><td align="left">处理java.util.date的工具对象</td></tr><tr><td align="center"><code>#calendars</code></td><td align="left">处理java.util.calendar的工具对象</td></tr><tr><td align="center"><code>#numbers</code></td><td align="left">用来对数字格式化的方法</td></tr><tr><td align="center"><code>#strings</code></td><td align="left">用来处理字符串的方法</td></tr><tr><td align="center"><code>#bools</code></td><td align="left">用来判断布尔值的方法</td></tr><tr><td align="center"><code>#arrays</code></td><td align="left">用来护理数组的方法</td></tr><tr><td align="center"><code>#lists</code></td><td align="left">用来处理List集合的方法</td></tr><tr><td align="center"><code>#sets</code></td><td align="left">用来处理set集合的方法</td></tr><tr><td align="center"><code>#maps</code></td><td align="left">用来处理map集合的方法</td></tr></tbody></table><ul><li>举例</li></ul><p>我们在环境变量中添加日期类型对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"show3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"today"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"show3"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面中处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  今天是: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(today,'yyyy-MM-dd')&#125;"</span>&gt;</span>2018-04-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p>有的时候，我们需要在指令中填写基本类型如：字符串、数值、布尔等，并不希望被Thymeleaf解析为变量，这个时候称为字面值。</p><ul><li><p>字符串字面值</p><p>使用一对<code>&#39;</code>引用的内容就是字符串字面值了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  你正在观看 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'thymeleaf'"</span>&gt;</span>template<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的字符串常量值.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>th:text</code>中的thymeleaf并不会被认为是变量，而是一个字符串</p></li></ul><ul><li><p>数字字面值</p><p>数字不需要任何特殊语法， 写的什么就是什么，而且可以直接进行算术运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>今年是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2018"</span>&gt;</span>1900<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两年后将会是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2018 + 2"</span>&gt;</span>1902<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>布尔字面值</p><p>布尔类型的字面值是true或false：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    你填的是true</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里引用了一个<code>th:if</code>指令，跟vue中的<code>v-if</code>类似</p></li></ul><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>我们经常会用到普通字符串与表达式拼接的情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'欢迎您:' + $&#123;user.name&#125; + '!'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字符串字面值需要用<code>&#39;&#39;</code>，拼接起来非常麻烦，Thymeleaf对此进行了简化，使用一对<code>|</code>即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|欢迎您:$&#123;user.name&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与上面是完全等效的，这样就省去了字符串字面值的书写。</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>需要注意：<code>${}</code>内部的是通过OGNL表达式引擎解析的，外部的才是通过Thymeleaf的引擎解析，因此运算符尽量放在<code>${}</code>外进行。</p><ul><li><p>算术运算</p><p>支持的算术运算符：<code>+ - * / %</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;%2 == 0"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>比较运算</p><p>支持的比较运算：<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code>  ，但是<code>&gt;</code>, <code>&lt;</code>不能直接使用，因为xml会解析为标签，要使用别名。</p><p>注意 <code>==</code> and <code>!=</code>不仅可以比较数值，类似于equals的功能。</p><p>可以使用的别名：<code>gt (&gt;), lt (&lt;), ge (&gt;=), le (&lt;=), not (!). Also eq (==), neq/ne (!=).</code></p></li><li><p>条件运算</p><ul><li>三元运算</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; ? '男':'女'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三元运算符的三个部分：conditon ? then : else</p><p>​    condition：条件</p><p>​    then：条件成立的结果</p><p>​    else：不成立的结果</p><p>其中的每一个部分都可以是Thymeleaf中的任意表达式。</p><ul><li><p>默认值</p><p>有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 <code>表达式 ?: 默认值</code>简写：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125; ?: '二狗'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前面的表达式值为null时，就会使用后面的默认值。</p><p>注意：<code>?:</code>之间没有空格。</p></li></ul><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环也是非常频繁使用的需求，我们使用<code>th:each</code>指令来完成：</p><p>假如有用户的集合：users在Context中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>${users} 是要遍历的集合，可以是以下类型：<ul><li>Iterable，实现了Iterable接口的类</li><li>Enumeration，枚举</li><li>Interator，迭代器</li><li>Map，遍历得到的是Map.Entry</li><li>Array，数组及其它一切符合数组结果的对象</li></ul></li></ul><p>在迭代的同时，我们也可以获取迭代的状态对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,stat : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>stat对象包含以下属性：</p><ul><li>index，从0开始的角标</li><li>count，元素的个数，从1开始</li><li>size，总元素个数</li><li>current，当前遍历到的元素</li><li>even/odd，返回是否为奇偶，boolean值</li><li>first/last，返回是否为第一或最后，boolean值</li></ul><h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><p>有了<code>if和else</code>，我们能实现一切功能^_^。</p><p>Thymeleaf中使用<code>th:if</code> 或者 <code>th:unless</code> ，两者的意思恰好相反。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.age&#125; &lt; 24"</span>&gt;</span>小鲜肉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果表达式的值为true，则标签会渲染到页面，否则不进行渲染。</p><p>以下情况被认定为true：</p><ul><li>表达式值为true</li><li>表达式值为非0数值</li><li>表达式值为非0字符</li><li>表达式值为字符串，但不是<code>&quot;false&quot;</code>,<code>&quot;no&quot;</code>,<code>&quot;off&quot;</code></li><li>表达式不是布尔、字符串、数字、字符中的任何一种</li></ul><p>其它情况包括null都被认定为false</p><h2 id="分支控制switch"><a href="#分支控制switch" class="headerlink" title="分支控制switch"></a>分支控制switch</h2><p>这里要使用两个指令：<code>th:switch</code> 和 <code>th:case</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>用户是管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'manager'"</span>&gt;</span>用户是经理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>用户是别的玩意<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，一旦有一个th:case成立，其它的则不再判断。与java中的switch是一样的。</p><p>另外<code>th:case=&quot;*&quot;</code>表示默认，放最后。</p><h2 id="JS模板"><a href="#JS模板" class="headerlink" title="JS模板"></a>JS模板</h2><p>模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> user = <span class="comment">/*[[$&#123;user&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> age = <span class="comment">/*[[$&#123;user.age&#125;]]*/</span> <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在script标签中通过<code>th:inline=&quot;javascript&quot;</code>来声明这是要特殊处理的js脚本</p></li><li><p>语法结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="comment">/*[[Thymeleaf表达式]]*/</span> <span class="string">"静态环境下的默认值"</span>;</span><br></pre></td></tr></table></figure><p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。</p></li></ul><p>看看页面的源码：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/thymeleaf/1526961583904.png" alt=""></p><p>我们的User对象被直接处理为json格式了，非常方便。</p><p>控制台：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/thymeleaf/1526961525185.png" alt=""></p><h1 id="案例运用–商品详情"><a href="#案例运用–商品详情" class="headerlink" title="案例运用–商品详情"></a>案例运用–商品详情</h1><p>当用户搜索到商品，肯定会点击查看，就会进入商品详情页，接下来我们完成商品详情页的展示，</p><h2 id="商品详情页服务"><a href="#商品详情页服务" class="headerlink" title="商品详情页服务"></a>商品详情页服务</h2><p>商品详情浏览量比较大，并发高，我们会独立开启一个微服务，用来展示商品详情。</p><h3 id="创建module-1"><a href="#创建module-1" class="headerlink" title="创建module"></a>创建module</h3><p>商品的详情页服务，命名为：<code>ly-goods-page</code></p><p>  <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526957437516.png" alt="1526957437516"></p><p>目录：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526957259445.png" alt="1526957259445"></p><h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-goods-page<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写启动类："><a href="#编写启动类：" class="headerlink" title="编写启动类："></a>编写启动类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyGoodsPage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyGoodsPage<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml文件"><a href="#application-yml文件" class="headerlink" title="application.yml文件"></a>application.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">goods-page</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;.$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><h3 id="页面模板："><a href="#页面模板：" class="headerlink" title="页面模板："></a>页面模板：</h3><p>我们从leyou-portal中复制item.html模板到当前项目resource目录下的template中：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526971729051.png" alt="1526971729051"></p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><h3 id="修改页面跳转路径"><a href="#修改页面跳转路径" class="headerlink" title="修改页面跳转路径"></a>修改页面跳转路径</h3><p>首先我们需要修改搜索结果页的商品地址，目前所有商品的地址都是：<a href="http://www.leyou.com/item.html" target="_blank" rel="noopener">http://www.leyou.com/item.html</a></p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526955707685.png" alt="1526955707685"></p><p>我们应该跳转到对应的商品的详情页才对。</p><p>那么问题来了：商品详情页是一个SKU？还是多个SKU的集合？</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526955852490.png" alt="1526955852490"></p><p>通过详情页的预览，我们知道它是多个SKU的集合，即SPU。</p><p>所以，页面跳转时，我们应该携带SPU的id信息。</p><p>例如：<a href="http://www.leyou.com/item/2314123.html" target="_blank" rel="noopener">http://www.leyou.com/item/2314123.html</a></p><p>这里就采用了路径占位符的方式来传递spu的id，我们打开<code>search.html</code>，修改其中的商品路径：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526972476737.png" alt="1526972476737"></p><p>刷新页面后在看：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526972581134.png" alt="1526972581134"></p><h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>接下来，我们要把这个地址指向我们刚刚创建的服务：<code>ly-goods-page</code>，其端口为8084</p><p>我们在nginx.conf中添加一段逻辑：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526973608829.png" alt="1526973608829"></p><p>把以/item开头的请求，代理到我们的8084端口</p><h3 id="编写跳转controller"><a href="#编写跳转controller" class="headerlink" title="编写跳转controller"></a>编写跳转controller</h3><p>在<code>ly-goods-page</code>中编写controller，接收请求，并跳转到商品详情页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526973726422.png" alt="1526973726422"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动<code>ly-goods-page</code>，点击搜索页面商品，看是能够正常跳转：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526973800526.png" alt="1526973800526"></p><p>现在看到的依然是静态的数据。我们接下来开始页面的渲染</p><h2 id="封装模型数据"><a href="#封装模型数据" class="headerlink" title="封装模型数据"></a>封装模型数据</h2><p>首先我们一起来分析一下，在这个页面中需要哪些数据</p><p>我们已知的条件是传递来的spu的id，我们需要根据spu的id查询到下面的数据：</p><ul><li>spu信息</li><li>spu的详情</li><li>spu下的所有sku</li><li>品牌</li><li>商品三级分类</li><li>商品规格参数、规格参数组</li></ul><h3 id="商品微服务提供接口"><a href="#商品微服务提供接口" class="headerlink" title="商品微服务提供接口"></a>商品微服务提供接口</h3><h4 id="查询spu接口"><a href="#查询spu接口" class="headerlink" title="查询spu接口"></a>查询spu接口</h4><p>以上所需数据中，查询spu的接口目前还没有，我们需要在商品微服务中提供这个接口：</p><blockquote><p>GoodsApi</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据spu的id查询spu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">Spu <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>item-service:GoodsController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Spu&gt; <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsService.querySpuById(id);</span><br><span class="line">    <span class="keyword">if</span>(spu == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(spu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>item-service:GoodsService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Spu <span class="title">querySpuById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.spuMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询规格参数组"><a href="#查询规格参数组" class="headerlink" title="查询规格参数组"></a>查询规格参数组</h4><p>我们在页面展示规格时，需要按组展示：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526995904991.png" alt="1526995904991"></p><p>组内有多个参数，为了方便展示。我们提供一个接口，查询规格组，同时在规格组中持有组内的所有参数。</p><blockquote><p>拓展<code>SpecGroup</code>类：</p></blockquote><p>我们在<code>SpecGroup</code>中添加一个<code>SpecParam</code>的集合，保存改组下所有规格参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParam&gt; params; <span class="comment">// 该组下的所有规格参数集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后提供查询接口：</p><blockquote><p>SpecificationAPI：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询规格参数组，及组内参数</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;cid&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;SpecGroup&gt; <span class="title">querySpecsByCid</span><span class="params">(@PathVariable(<span class="string">"cid"</span>)</span> Long cid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/params"</span>)</span><br><span class="line">    <span class="function">List&lt;SpecParam&gt; <span class="title">querySpecParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"gid"</span>, required = <span class="keyword">false</span>)</span> Long gid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"cid"</span>, required = <span class="keyword">false</span>)</span> Long cid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"searching"</span>, required = <span class="keyword">false</span>)</span> Boolean searching,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"generic"</span>, required = <span class="keyword">false</span>)</span> Boolean generic</span></span><br><span class="line"><span class="function">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpecificationController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;cid&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; querySpecsByCid(<span class="meta">@PathVariable</span>(<span class="string">"cid"</span>) Long cid)&#123;</span><br><span class="line">    List&lt;SpecGroup&gt; list = <span class="keyword">this</span>.specificationService.querySpecsByCid(cid);</span><br><span class="line">    <span class="keyword">if</span>(list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpecificationService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SpecGroup&gt; <span class="title">querySpecsByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询规格组</span></span><br><span class="line">    List&lt;SpecGroup&gt; groups = <span class="keyword">this</span>.querySpecGroups(cid);</span><br><span class="line"></span><br><span class="line">    groups.forEach(g -&gt; &#123;</span><br><span class="line">        <span class="comment">// 查询组内参数</span></span><br><span class="line">        g.setParams(querySpecParamByGid(g.getId(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在service中，我们调用之前编写过的方法，查询规格组，和规格参数，然后封装返回。</p><h3 id="创建FeignClient"><a href="#创建FeignClient" class="headerlink" title="创建FeignClient"></a>创建FeignClient</h3><p>我们在<code>ly-goods-page</code>服务中，创建FeignClient：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529916126099.png" alt="1529916126099"></p><p>BrandClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CategoryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryClient</span> <span class="keyword">extends</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsClient:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> <span class="keyword">extends</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpecificationClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationClient</span> <span class="keyword">extends</span> <span class="title">SpecificationApi</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装数据模型"><a href="#封装数据模型" class="headerlink" title="封装数据模型"></a>封装数据模型</h3><p>我们创建一个GoodsService，在里面来封装数据模型。</p><p>这里要查询的数据：</p><ul><li><p>SPU</p></li><li><p>SKU集合</p></li><li><p>商品分类</p><ul><li>这里只需要分类的id和name就够了，因此我们查询到以后自己需要封装数据</li></ul></li><li><p>品牌</p></li><li><p>规格组</p><ul><li>查询规格组的时候，把规格组下所有的参数也一并查出，上面提供的接口中已经实现该功能，我们直接调</li></ul></li><li><p>sku的特有规格参数</p><p>有了规格组应该不需要再查询规格参数才对了，为什么这里还要查询？</p><p>因为在SpuDetail中的SpecialSpec中，是以id作为规格参数id作为key，如图：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529922634977.png" alt="1529922634977"></p><p>但是，在页面渲染时，需要知道参数的名称，如图：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529922667759.png" alt="1529922667759"></p><p>我们就需要把id和name一一对应起来，因此需要额外查询<strong>sku的特有规格参数</strong>，然后变成一个id:name的键值对格式。也就是一个Map，方便将来根据id查找！</p></li></ul><blockquote><p>Service代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GoodsService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">loadModel</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模型数据</span></span><br><span class="line">            Map&lt;String, Object&gt; modelMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询spu</span></span><br><span class="line">            Spu spu = <span class="keyword">this</span>.goodsClient.querySpuById(id);</span><br><span class="line">            <span class="comment">// 查询spuDetail</span></span><br><span class="line">            SpuDetail detail = <span class="keyword">this</span>.goodsClient.querySpuDetailById(id);</span><br><span class="line">            <span class="comment">// 查询sku</span></span><br><span class="line">            List&lt;Sku&gt; skus = <span class="keyword">this</span>.goodsClient.querySkuBySpuId(id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 装填模型数据</span></span><br><span class="line">            modelMap.put(<span class="string">"spu"</span>, spu);</span><br><span class="line">            modelMap.put(<span class="string">"spuDetail"</span>, detail);</span><br><span class="line">            modelMap.put(<span class="string">"skus"</span>, skus);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备商品分类</span></span><br><span class="line">            List&lt;Category&gt; categories = getCategories(spu);</span><br><span class="line">            <span class="keyword">if</span> (categories != <span class="keyword">null</span>) &#123;</span><br><span class="line">                modelMap.put(<span class="string">"categories"</span>, categories);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备品牌数据</span></span><br><span class="line">            List&lt;Brand&gt; brands = <span class="keyword">this</span>.brandClient.queryBrandByIds(</span><br><span class="line">                    Arrays.asList(spu.getBrandId()));</span><br><span class="line">            modelMap.put(<span class="string">"brand"</span>, brands.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询规格组及组内参数</span></span><br><span class="line">            List&lt;SpecGroup&gt; groups = <span class="keyword">this</span>.specificationClient.querySpecsByCid(spu.getCid3());</span><br><span class="line">            modelMap.put(<span class="string">"groups"</span>, groups);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询商品分类下的特有规格参数</span></span><br><span class="line">            List&lt;SpecParam&gt; params =</span><br><span class="line">                    <span class="keyword">this</span>.specificationClient.querySpecParam(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 处理成id:name格式的键值对</span></span><br><span class="line">            Map&lt;Long,String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (SpecParam param : params) &#123;</span><br><span class="line">                paramMap.put(param.getId(), param.getName());<span class="comment">//4 机身颜色，5，内存</span></span><br><span class="line">            &#125;</span><br><span class="line">            modelMap.put(<span class="string">"paramMap"</span>, paramMap);</span><br><span class="line">            <span class="keyword">return</span> modelMap;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"加载商品数据出错,spuId:&#123;&#125;"</span>, id, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Category&gt; <span class="title">getCategories</span><span class="params">(Spu spu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; names = <span class="keyword">this</span>.categoryClient.queryNameByIds(</span><br><span class="line">                    Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">            Category c1 = <span class="keyword">new</span> Category();</span><br><span class="line">            c1.setName(names.get(<span class="number">0</span>));</span><br><span class="line">            c1.setId(spu.getCid1());</span><br><span class="line"></span><br><span class="line">            Category c2 = <span class="keyword">new</span> Category();</span><br><span class="line">            c2.setName(names.get(<span class="number">1</span>));</span><br><span class="line">            c2.setId(spu.getCid2());</span><br><span class="line"></span><br><span class="line">            Category c3 = <span class="keyword">new</span> Category();</span><br><span class="line">            c3.setName(names.get(<span class="number">2</span>));</span><br><span class="line">            c3.setId(spu.getCid3());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(c1, c2, c3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"查询商品分类出错，spuId：&#123;&#125;"</span>, spu.getId(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在controller中把数据放入model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// 加载所需的数据</span></span><br><span class="line">        Map&lt;String, Object&gt; modelMap = <span class="keyword">this</span>.goodsService.loadModel(id);</span><br><span class="line">        <span class="comment">// 放入模型</span></span><br><span class="line">        model.addAllAttributes(modelMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面测试数据"><a href="#页面测试数据" class="headerlink" title="页面测试数据"></a>页面测试数据</h3><p>我们在页面中先写一段JS，把模型中的数据取出观察，看是否成功：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> a = <span class="comment">/*[[$&#123;groups&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> b = <span class="comment">/*[[$&#123;paramMap&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> c = <span class="comment">/*[[$&#123;categories&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> d = <span class="comment">/*[[$&#123;spu&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> e = <span class="comment">/*[[$&#123;spuDetail&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> f = <span class="comment">/*[[$&#123;skus&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> g = <span class="comment">/*[[$&#123;brand&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后查看页面源码：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529921980493.png" alt="1529921980493"></p><p>数据都成功查到了！</p><h2 id="渲染面包屑"><a href="#渲染面包屑" class="headerlink" title="渲染面包屑"></a>渲染面包屑</h2><p>在商品展示页的顶部，有一个商品分类、品牌、标题的面包屑</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526978423084.png" alt="1526978423084"></p><p>其数据有3部分：</p><ul><li>商品分类</li><li>商品品牌</li><li>spu标题</li></ul><p>我们的模型中都有，所以直接渲染即可（页面103行开始）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"crumb-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sui-breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"category : $&#123;categories&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;category.name&#125;"</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;brand.name&#125;"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spu.title&#125;"</span>&gt;</span>Apple iPhone 6s<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="渲染商品列表"><a href="#渲染商品列表" class="headerlink" title="渲染商品列表"></a>渲染商品列表</h2><p>先看下整体效果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526979330657.png" alt="1526979330657"></p><p>这个部分需要渲染的数据有5块：</p><ul><li>sku图片</li><li>sku标题</li><li>副标题</li><li>sku价格</li><li>特有规格属性列表</li></ul><p>其中，sku 的图片、标题、价格，都必须在用户选中一个具体sku后，才能渲染。而特有规格属性列表可以在spuDetail中查询到。而副标题则是在spu中，直接可以在页面渲染</p><p>因此，我们先对特有规格属性列表进行渲染。等用户选择一个sku，再通过js对其它sku属性渲染</p><h3 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h3><p>副标题是在spu中，所以我们直接通过Thymeleaf渲染：</p><p>在第行148左右：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;spu.subTitle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>副标题中可能会有超链接，因此这里也用<code>th:utext</code>来展示，效果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526980061592.png" alt="1526980061592"></p><h3 id="渲染规格属性列表"><a href="#渲染规格属性列表" class="headerlink" title="渲染规格属性列表"></a>渲染规格属性列表</h3><p>规格属性列表将来会有事件和动态效果。我们需要有js代码参与，不能使用Thymeleaf来渲染了。</p><p>因此，这里我们用vue，不过需要先把数据放到js对象中，方便vue使用</p><h4 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h4><p>我们在页面的<code>head</code>中，定义一个js标签，然后在里面定义变量，保存与sku相关的一些数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// sku集合</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> skus = <span class="comment">/*[[$&#123;skus&#125;]]*/</span> [];</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 规格参数id与name对</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> paramMap = <span class="comment">/*[[$&#123;paramMap&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 特有规格参数集合</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> specialSpec = <span class="built_in">JSON</span>.parse(<span class="comment">/*[[$&#123;spuDetail.specialSpec&#125;]]*/</span> <span class="string">""</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>specialSpec：这是SpuDetail中与唯一与Sku相关的数据</p><p>因此我们并没有保存整个spuDetail，而是只保留了这个属性，而且需要手动转为js对象。</p></li><li><p>paramMap：规格参数的id和name对，方便页面根据id获取参数名</p></li><li><p>specialSpec：特有规格参数集合</p></li></ul><p>我们来看下页面获取的数据：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529923363960.png" alt="1529923363960"></p><h4 id="通过Vue渲染"><a href="#通过Vue渲染" class="headerlink" title="通过Vue渲染"></a>通过Vue渲染</h4><p>我们把刚才获得的几个变量保存在Vue实例中：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529923450934.png" alt="1529923450934"></p><p>然后在页面中渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"specification"</span> <span class="attr">class</span>=<span class="string">"summary-wrap clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in specialSpec"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-text</span>=<span class="string">"paramMap[k]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"(o,j) in v"</span> <span class="attr">:key</span>=<span class="string">"j"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">                &#123;&#123;o&#125;&#125;<span class="tag">&lt;<span class="name">span</span>  <span class="attr">title</span>=<span class="string">"点击取消选择"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后刷新页面查看：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526983726820.png" alt="1526983726820"></p><p>数据成功渲染了。不过我们发现所有的规格都被勾选了。这是因为现在，每一个规格都有样式：<code>selected</code>，我们应该只选中一个，让它的class样式为selected才对！</p><p>那么问题来了，我们该如何确定用户选择了哪一个？</p><h3 id="规格属性的筛选"><a href="#规格属性的筛选" class="headerlink" title="规格属性的筛选"></a>规格属性的筛选</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>规格参数的格式是这样的：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529923584730.png" alt="1529923584730"></p><p>每一个规格项是数组中的一个元素，因此我们只要保存被选择的规格项的索引，就能判断哪个是用户选择的了！</p><p>我们需要一个对象来保存用户选择的索引，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"4"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"12"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"13"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但问题是，第一次进入页面时，用户并未选择任何参数。因此索引应该有一个默认值，我们将默认值设置为0。</p><p>我们在<code>head</code>的script标签中，对索引对象进行初始化：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529923658242.png" alt="1529923658242"></p><p>然后在vue中保存：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529923701283.png" alt="1529923701283"></p><h4 id="页面改造"><a href="#页面改造" class="headerlink" title="页面改造"></a>页面改造</h4><p>我们在页面中，通过判断indexes的值来判断当前规格是否被选中，并且给规格绑定点击事件，点击规格项后，修改indexes中的对应值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"specification"</span> <span class="attr">class</span>=<span class="string">"summary-wrap clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in specialSpec"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-text</span>=<span class="string">"paramMap[k]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"(o,j) in v"</span> <span class="attr">:key</span>=<span class="string">"i"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:j === indexes[k]&#125;"</span> @<span class="attr">click</span>=<span class="string">"indexes[k] = j"</span>&gt;</span></span><br><span class="line">                &#123;&#123;o&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"点击取消选择"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526984582539.png" alt="1526984582539"></p><p>vue实例中的索引会随着你的点击而变化：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526984624633.png" alt="1526984624633"></p><h3 id="确定SKU"><a href="#确定SKU" class="headerlink" title="确定SKU"></a>确定SKU</h3><p>在我们设计sku数据的时候，就已经添加了一个字段：indexes：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526984911652.png" alt="1526984911652"></p><p>这其实就是规格参数的索引组合。</p><p>而我们在页面中，用户点击选择规格后，就会把对应的索引保存起来：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526984624633.png" alt="1526984624633"></p><p>因此，我们可以根据这个indexes来确定用户要选择的sku</p><p>我们在vue中定义一个计算属性，来计算与索引匹配的sku：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    sku()&#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Object</span>.values(<span class="keyword">this</span>.indexes).join(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.skus.find(<span class="function"><span class="params">s</span> =&gt;</span> s.indexes = index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器工具中查看：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526985208770.png" alt="1526985208770"></p><h3 id="渲染sku列表"><a href="#渲染sku列表" class="headerlink" title="渲染sku列表"></a>渲染sku列表</h3><p>既然已经拿到了用户选中的sku，接下来，就可以在页面渲染数据了</p><h4 id="图片列表"><a href="#图片列表" class="headerlink" title="图片列表"></a>图片列表</h4><p>商品图片是一个字符串，以<code>,</code>分割，页面展示比较麻烦，所以我们编写一个计算属性，将图片字符串变成数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">images()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sku.images ? <span class="keyword">this</span>.sku.images.split(<span class="string">","</span>) : [<span class="string">''</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面改造：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526985757175.png" alt="1526985757175"></p><p>效果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526985783938.png" alt="1526985783938"></p><h4 id="标题和价格"><a href="#标题和价格" class="headerlink" title="标题和价格"></a>标题和价格</h4><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526985959427.png" alt="1526985959427"></p><h4 id="完整效果"><a href="#完整效果" class="headerlink" title="完整效果"></a>完整效果</h4><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526986020278.png" alt="1526986020278"></p><h2 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h2><p>商品详情页面如下图所示：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526988361312.png" alt="1526988361312"></p><p>分成上下两部分：</p><ul><li>上部：展示的是规格属性列表</li><li>下部：展示的是商品详情</li></ul><h3 id="属性列表（作业）"><a href="#属性列表（作业）" class="headerlink" title="属性列表（作业）"></a>属性列表（作业）</h3><p>这部分内容与规格参数部分重复，大家可以参考规格参数的展示，自己完成</p><h3 id="商品详情-1"><a href="#商品详情-1" class="headerlink" title="商品详情"></a>商品详情</h3><p>商品详情是HTML代码，我们不能使用 <code>th:text</code>，应该使用<code>th:utext</code></p><p>在页面的第459行左右：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--商品详情--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro-detail"</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;spuDetail.description&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终展示效果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526988524852.png" alt="1526988524852"></p><h2 id="规格包装："><a href="#规格包装：" class="headerlink" title="规格包装："></a>规格包装：</h2><p>规格包装分成两部分：</p><ul><li>规格参数</li><li>包装列表</li></ul><p>而且规格参数需要按照组来显示</p><h3 id="规格参数"><a href="#规格参数" class="headerlink" title="规格参数"></a>规格参数</h3><p>最终的效果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526995904991.png" alt="1526995904991"></p><p>我们模型中有一个groups，跟这个数据结果很像：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1529924049003.png" alt="1529924049003"></p><p>分成8个组，组内都有params，里面是所有的参数。不过，这些参数都没有值！</p><p>规格参数的值分为两部分：</p><ul><li>通用规格参数：保存在SpuDetail中的genericSpec中</li><li>特有规格参数：保存在sku的ownSpec中</li></ul><p>我们需要把这两部分值取出来，放到groups中。</p><p>因为sku是动态的，所以我们编写一个计算属性，来进行值的组合：</p><p>先在js中取出groups，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groups = <span class="comment">/*[[$&#123;groups&#125;]]*/</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>并在data中声明引用groups</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1535651355985.png" alt="1535651355985"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">groups()&#123;</span><br><span class="line">    groups.forEach(<span class="function"><span class="params">group</span> =&gt;</span> &#123;</span><br><span class="line">        group.params.forEach(<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(param.generic)&#123;</span><br><span class="line">                <span class="comment">// 通用属性，去spu的genericSpec中获取</span></span><br><span class="line">                param.v = <span class="keyword">this</span>.genericSpec[param.id] || <span class="string">'其它'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 特有属性值，去SKU中获取</span></span><br><span class="line">                param.v = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.sku.ownSpec)[param.id]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在页面渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ptable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ptable-item"</span> <span class="attr">v-for</span>=<span class="string">"group in groups"</span> <span class="attr">:key</span>=<span class="string">"group.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;group.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"p in group.params"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;p.v + (p.unit || '')&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包装列表"><a href="#包装列表" class="headerlink" title="包装列表"></a>包装列表</h3><p>包装列表在商品详情中，我们一开始并没有赋值到Vue实例中，但是可以通过Thymeleaf来渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"package-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>包装清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spuDetail.packingList&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526998348976.png" alt="1526998348976"></p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526998483160.png" alt="1526998483160"></p><h2 id="售后服务"><a href="#售后服务" class="headerlink" title="售后服务"></a>售后服务</h2><p>售后服务也可以通过Thymeleaf进行渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"three"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>售后保障<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spuDetail.afterService&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1526998635610.png" alt="1526998635610"></p><h1 id="案例优化–页面静态化"><a href="#案例优化–页面静态化" class="headerlink" title="案例优化–页面静态化"></a>案例优化–页面静态化</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>现在，我们的页面是通过Thymeleaf模板引擎渲染后返回到客户端。在后台需要大量的数据查询，而后渲染得到HTML页面。会对数据库造成压力，并且请求的响应时间过长，并发能力不高。</p><p>大家能想到什么办法来解决这个问题？</p><p>首先我们能想到的就是缓存技术，比如之前学习过的Redis。不过Redis适合数据规模比较小的情况。假如数据量比较大，例如我们的商品详情页。每个页面如果10kb，100万商品，就是10GB空间，对内存占用比较大。此时就给缓存系统带来极大压力，如果缓存崩溃，接下来倒霉的就是数据库了。</p><p>所以缓存并不是万能的，某些场景需要其它技术来解决，比如静态化。</p><h3 id="什么是静态化"><a href="#什么是静态化" class="headerlink" title="什么是静态化"></a>什么是静态化</h3><p>静态化是指把动态生成的HTML页面变为静态内容保存，以后用户的请求到来，直接访问静态页面，不再经过服务的渲染。</p><p>而静态的HTML页面可以部署在nginx中，从而大大提高并发能力，减小tomcat压力。</p><h3 id="如何实现静态化（模板引擎"><a href="#如何实现静态化（模板引擎" class="headerlink" title="如何实现静态化（模板引擎)"></a>如何实现静态化（模板引擎)</h3><p>目前，静态化页面都是通过模板引擎来生成，而后保存到nginx服务器来部署。常用的模板引擎比如：</p><ul><li>Freemarker</li><li>Velocity</li><li>Thymeleaf</li></ul><p>我们之前就使用的Thymeleaf，来渲染html返回给用户。Thymeleaf除了可以把渲染结果写入Response，也可以写到本地文件，从而实现静态化。</p><h2 id="Thymeleaf实现静态化"><a href="#Thymeleaf实现静态化" class="headerlink" title="Thymeleaf实现静态化"></a>Thymeleaf实现静态化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>先说下Thymeleaf中的几个概念：</p><ul><li>Context：运行上下文</li><li>TemplateResolver：模板解析器</li><li>TemplateEngine：模板引擎</li></ul><blockquote><p>Context</p></blockquote><p>上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。</p><p>当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使用。</p><blockquote><p>TemplateResolver</p></blockquote><p>模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型等等。</p><p>当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。</p><blockquote><p>TemplateEngine</p></blockquote><p>模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引起进行处理的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">templateEngine.process(<span class="string">"模板名"</span>, context, writer);</span><br></pre></td></tr></table></figure><p>三个参数：</p><ul><li>模板名称</li><li>上下文：里面包含模型数据</li><li>writer：输出目的地的流</li></ul><p>在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地是本地文件，那就实现静态化了。</p><p>而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输出的目的地改成本地文件即可！</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>Service代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ly.thymeleaf.destPath&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String destPath;<span class="comment">// D:/heima/nginx-1.12.2/html</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建html页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建上下文，</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        <span class="comment">// 把数据加入上下文</span></span><br><span class="line">        context.setVariables(<span class="keyword">this</span>.goodsService.loadModel(id));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建输出流，关联到一个临时文件</span></span><br><span class="line">        File temp = <span class="keyword">new</span> File(id + <span class="string">".html"</span>);</span><br><span class="line">        <span class="comment">// 目标页面文件</span></span><br><span class="line">        File dest = createPath(id);</span><br><span class="line">        <span class="comment">// 备份原页面文件</span></span><br><span class="line">        File bak = <span class="keyword">new</span> File(id + <span class="string">"_bak.html"</span>);</span><br><span class="line">        <span class="keyword">try</span> (PrintWriter writer = <span class="keyword">new</span> PrintWriter(temp, <span class="string">"UTF-8"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 利用thymeleaf模板引擎生成 静态页面</span></span><br><span class="line">            templateEngine.process(<span class="string">"item"</span>, context, writer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dest.exists()) &#123;</span><br><span class="line">                <span class="comment">// 如果目标文件已经存在，先备份</span></span><br><span class="line">                dest.renameTo(bak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将新页面覆盖旧页面</span></span><br><span class="line">            FileCopyUtils.copy(temp,dest);</span><br><span class="line">            <span class="comment">// 成功后将备份页面删除</span></span><br><span class="line">            bak.delete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 失败后，将备份页面恢复</span></span><br><span class="line">            bak.renameTo(dest);</span><br><span class="line">            <span class="comment">// 重新抛出异常，声明页面生成失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 删除临时页面</span></span><br><span class="line">            <span class="keyword">if</span> (temp.exists()) &#123;</span><br><span class="line">                temp.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> File <span class="title">createPath</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(<span class="keyword">this</span>.destPath);</span><br><span class="line">        <span class="keyword">if</span> (!dest.exists()) &#123;</span><br><span class="line">            dest.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(dest, id + <span class="string">".html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断某个商品的页面是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createPath(id).exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步创建html页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncCreateHtml</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        ThreadUtils.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                createHtml(id);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.yml中配置生成静态文件的目录：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">destPath:</span> <span class="string">D:/heima/nginx-1.12.2/html/item</span></span><br></pre></td></tr></table></figure><p>线程工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        es.submit(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么时候创建静态文件"><a href="#什么时候创建静态文件" class="headerlink" title="什么时候创建静态文件"></a>什么时候创建静态文件</h3><p>我们编写好了创建静态文件的service，那么问题来了：什么时候去调用它呢</p><p>想想这样的场景：</p><p>假如大部分的商品都有了静态页面。那么用户的请求都会被nginx拦截下来，根本不会到达我们的<code>ly-goods-page</code>服务。只有那些还没有页面的请求，才可能会到达这里。</p><p>因此，如果请求到达了这里，我们除了返回页面视图外，还应该创建一个静态页面，那么下次就不会再来麻烦我们了。</p><p>所以，我们在GoodsController中添加逻辑，去生成静态html文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 加载所需的数据</span></span><br><span class="line">    Map&lt;String, Object&gt; modelMap = <span class="keyword">this</span>.goodsService.loadModel(id);</span><br><span class="line">    <span class="comment">// 放入模型</span></span><br><span class="line">    model.addAllAttributes(modelMap);</span><br><span class="line">    <span class="comment">// 判断是否需要生成新的页面</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.fileService.exists(id))&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileService.syncCreateHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：生成html 的代码不能对用户请求产生影响，所以这里我们使用额外的线程进行异步创建。</p><h3 id="重启测试："><a href="#重启测试：" class="headerlink" title="重启测试："></a>重启测试：</h3><p>访问一个商品详情，然后查看nginx目录：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1527006563698.png" alt="1527006563698"></p><h2 id="nginx代理静态页面"><a href="#nginx代理静态页面" class="headerlink" title="nginx代理静态页面"></a>nginx代理静态页面</h2><p>接下来，我们修改nginx，让它对商品请求进行监听，指向本地静态页面，如果本地没找到，才进行反向代理：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /item &#123;</span><br><span class="line">        <span class="comment"># 先找本地</span></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123; <span class="comment">#请求的文件不存在，就反向代理</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8084;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9002;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启测试：nginx -f reload</p><p>发现请求速度得到了极大提升：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/web/assets/1527006712523.png" alt="1527006712523"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python框架02 -- Django序列化实例</title>
      <link href="/2019/05/23/python%E6%A1%86%E6%9E%B602%20--%20Django%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/05/23/python%E6%A1%86%E6%9E%B602%20--%20Django%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容：DRF的序列化操作、反序列化操作、各种相关例子，供后续参考使用</p><p>更新：不定期修改，有任何问题通过下方留言或者直接右下角联系</p><p>注意 url关键词用</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><blockquote><p>os 操作系统是管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p></blockquote><ul><li><p>操作系统中的进程调度策略：先来先服务调度算法  短作业(进程)优先调度算法  高优先权优先调度算法  高响应比优先调度算法等</p></li><li><p>分时操作系统： 将一个时间段分成多段运行多个程序  时分：按时间分  频分：按频率分发</p></li><li><p>CPU：对指令运行  不同操作系统执行的程序不同：格式不同其无法识别，解析不出指令  例如：windows(PE) Linux(tar)</p></li><li><p>破解原理：识别格式–找寻相关指令–进行修改</p></li><li><p>os:python 中可以<br>path:环境变量  命令行输入命令时，会找寻path中的 </p></li><li><p>程序加载到内存 </p><p>  进程包括：文本段（指令） data（数据段 初始化/未初始化）堆（可全局访问 类的对象）<br>  栈（执行函数时会给函数分配一个空间&lt;符合递归&gt;函数执行完成后,栈相关内存销毁,所以不同函数之间的变量不可以相互访问）</p></li><li><p>地址引用：一个变量指向地址  python全是地址引用</p></li><li><p>值引用：</p></li><li><p>进程管理：</p></li><li><p>进程创建：fork()  每一个进程都有父进程，不一定有子进程 树状结构 </p></li><li><p>ps: pid() ppid(父进程)  []：内核进程  未加括号的：用户进程</p></li></ul><h2 id="django-REST-framework"><a href="#django-REST-framework" class="headerlink" title="django REST framework"></a>django REST framework</h2><h3 id="前期知识"><a href="#前期知识" class="headerlink" title="前期知识"></a>前期知识</h3><blockquote><p>api接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把数据转换格式，序列化可以分两个阶段：</p></blockquote><ul><li><p>序列化： 把我们识别的数据转换成指定的格式提供给别人。</p><blockquote><p>例如：我们在django的ORM中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给别人。</p></blockquote></li><li><p>反序列化：把别人提供的数据转换/还原成我们需要的格式。</p><blockquote><p>例如：前端js提供过来的json数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，这样我们才能把数据保存到数据库中。</p></blockquote><pre><code>1.接收数据[反序列化]2.操作数据3.响应数据[序列化]</code></pre></li></ul><h3 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h3><p><a href="https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework" target="_blank" rel="noopener">中文文档</a></p><ul><li><p>需要安装的包：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       </span><br><span class="line"><span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-filter  </span><br><span class="line"><span class="comment"># Filtering support</span></span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">git clone https://github.com/encode/django-rest-framework</span><br></pre></td></tr></table></figure></li><li><p>项目目录下：settings–app添加–’rest_framework’</p></li><li><p>根urls：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> (url)</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    </span><br><span class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>))  </span><br><span class="line">    <span class="comment">#添加该urls</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="jquert-api"><a href="#jquert-api" class="headerlink" title="jquert/api"></a>jquert/api</h3><ul><li><p>jquery</p><blockquote><p>创建Model并迁移</p></blockquote> <figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModer</span>(<span class="title">models</span>.<span class="title">Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">200</span>, </span><br><span class="line">    <span class="literal">null</span>=<span class="literal">False</span>, blank=<span class="literal">False</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    gender = models.BooleanField(<span class="keyword">default</span>=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    def to_json(<span class="built_in">self</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"username"</span>: <span class="built_in">self</span>.username, <span class="string">"age"</span>: </span><br><span class="line">    <span class="built_in">self</span>.age, <span class="string">"gender"</span>: <span class="built_in">self</span>.gender&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编辑views</p></blockquote> <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用所有的网页页面  例如：foo/html/<span class="built_in">index</span>.html/</span><br><span class="line"></span><br><span class="line">def <span class="built_in">index</span>(request, <span class="keyword">file</span>):</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="keyword">file</span>)</span><br></pre></td></tr></table></figure><blockquote><p>前端网页 jquery 接收request中的数据进行处理并显示在前端</p></blockquote> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">head头里 index.html 编写用户信息展示表单：</span><br><span class="line"><span class="number">1.</span>导入jquery:</span><br><span class="line">&lt;script src=<span class="string">"https://code.jquery.com/</span></span><br><span class="line"><span class="string">jquery-3.4.1.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="number">2.</span>使用：</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.get(<span class="string">"/foo/api/user/"</span>,</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="params">(users)</span> </span>&#123;</span><br><span class="line">                    users.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(user)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// $('#id_users').append(user.user);</span></span><br><span class="line">                        <span class="comment">// $('#id_users').append(user.age);</span></span><br><span class="line">            $(<span class="string">"#id_users"</span>).append(<span class="string">"&lt;tr&gt;</span></span><br><span class="line"><span class="string">            &lt;td&gt;"</span>+user.username+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span> </span><br><span class="line">            +user.age + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    页面...</span><br><span class="line">    &lt;tbody id = <span class="string">"id_users"</span>&gt;</span><br><span class="line">    上面设置的后端处理内容将显示在这里</span><br><span class="line">    &lt;/tbody&gt;</span><br></pre></td></tr></table></figure><blockquote><p>urls创建：如api 1步骤</p></blockquote></li><li><p>api</p><blockquote><p>urls（该app下）设置api</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app下创建urls.py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">'html/&lt;str:file&gt;'</span>, views.index)</span><br><span class="line">path(<span class="string">'api/user/'</span>, views.get_user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">根urls:</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'foo/'</span>, include(<span class="string">'foo.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>使用api 实现前后端分离</p></blockquote></li></ul><pre><code>&gt;&gt;前端调用展示相关数据：* html(user.html) 编写用户输入表单:    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">'post'</span>, <span class="attr">action</span>=<span class="string">'/foo/api/user/'</span>&gt;</span></span><br><span class="line">username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"username"</span>, </span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"username"</span>&gt;</span>....  </span><br><span class="line">#添加name以此为POST数据的名称</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>* views:    <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">只推送数据到前端展示：地址：foo/api/user/</span><br><span class="line">def get_user(request):</span><br><span class="line"><span class="built_in">users </span>= UserModer.object.all()</span><br><span class="line">user_info = [u.to_json() <span class="keyword">for</span> u <span class="keyword">in</span> users]</span><br><span class="line">return JsonResponse(user_info, <span class="attribute">safe</span>=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">POST则获取前端user.html的表单数据并保存</span><br><span class="line">(foo/html/user.html)/否则返回数据到</span><br><span class="line">前端(foo/api/user/)</span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def do_user(request):</span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line"><span class="built_in">user </span>= UserModel() #取出Model中的字段</span><br><span class="line">user.username = request.POST[<span class="string">'username'</span>]  </span><br><span class="line">#赋值给相应字段</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line">user.save()   </span><br><span class="line">#保存到数据库</span><br><span class="line">return JsonResponse(user.to_json())  </span><br><span class="line">#将数据发送给前端  地址：foo/api/user/</span><br><span class="line"><span class="keyword">else</span>: 推送数据到前端</span><br></pre></td></tr></table></figure>* urls(当前app中):        path(&apos;api/user/&apos;, views.do_user)          #2推送的消息返回前端的地址规则</code></pre><h3 id="serializers-序列化器"><a href="#serializers-序列化器" class="headerlink" title="serializers 序列化器"></a>serializers 序列化器</h3><ul><li><p>原理</p>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</span><br><span class="line"><span class="number">2.</span> 反序列化,把客户端发送过来的数据,经过request以后变成字典,</span><br><span class="line">序列化器可以把字典转成模型</span><br><span class="line"><span class="number">3.</span> 反序列化,完成数据校验功能</span><br></pre></td></tr></table></figure></li><li><p>常用字段类型</p><table><thead><tr><th align="center">字  段  名  称</th><th align="center">字段构造方式 serializers.字段构造方式()</th></tr></thead><tbody><tr><td align="center">BooleanField</td><td align="center">BooleanField()</td></tr><tr><td align="center">NullBooleanField</td><td align="center">NullBooleanField()</td></tr><tr><td align="center">CharField</td><td align="center">CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td></tr><tr><td align="center">EmailField</td><td align="center">EmailField(max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td align="center">RegexField</td><td align="center">RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td align="center">SlugField</td><td align="center">SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td align="center">URLField</td><td align="center">URLField(max_length=200, min_length=None, allow_blank=False)</td></tr><tr><td align="center">UUIDField</td><td align="center">UUIDField(format=’hex_verbose’) format:1) ‘hex_verbose’ 如”5ce0e9a5-5ffa-654b-cee0-1238041fb31a”2) ‘hex’ 如 “5ce0e9a55ffa654bcee01238041fb31a”3) ‘int’ - 如: “123456789012312313134124512351145145114”4) ‘urn’ 如: “urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a”</td></tr><tr><td align="center">IPAddressField</td><td align="center">IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td></tr><tr><td align="center">IntegerField</td><td align="center">IntegerField(max_value=None, min_value=None)</td></tr><tr><td align="center">FloatField</td><td align="center">FloatField(max_value=None, min_value=None)</td></tr><tr><td align="center">DecimalField</td><td align="center">DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td align="center">DateTimeField</td><td align="center">DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td></tr><tr><td align="center">DateField</td><td align="center">DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td></tr><tr><td align="center">TimeField</td><td align="center">TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td></tr><tr><td align="center">DurationField</td><td align="center">DurationField()</td></tr><tr><td align="center">ChoiceField</td><td align="center">ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td align="center">MultipleChoiceField</td><td align="center">MultipleChoiceField(choices)</td></tr><tr><td align="center">FileField</td><td align="center">FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td align="center">ImageField</td><td align="center">ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td align="center">ListField</td><td align="center">ListField(child=, min_length=None, max_length=None)</td></tr><tr><td align="center">DictField</td><td align="center">DictField(child=)</td></tr></tbody></table></li><li><p>选项参数</p><table><thead><tr><th align="center">参数名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">max_length</td><td align="center">最大长度</td></tr><tr><td align="center">min_length</td><td align="center">最小长度</td></tr><tr><td align="center">allow_blank</td><td align="center">是否允许为空</td></tr><tr><td align="center">trim_whitespace</td><td align="center">是否截断空白字符</td></tr><tr><td align="center">max_value</td><td align="center">最大数值</td></tr><tr><td align="center">min_value</td><td align="center">最小数值</td></tr></tbody></table></li><li><p>通用参数</p><table><thead><tr><th align="center">参数名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">read_only</td><td align="center">表明该字段仅用于序列化输出，默认False</td></tr><tr><td align="center">write_only</td><td align="center">表明该字段仅用于反序列化输入，默认False</td></tr><tr><td align="center">required</td><td align="center">表明该字段在反序列化时必须输入，默认True</td></tr><tr><td align="center">default</td><td align="center">反序列化时使用的默认值</td></tr><tr><td align="center">allow_null</td><td align="center">表明该字段是否允许传入None，默认False</td></tr><tr><td align="center">validators</td><td align="center">该字段使用的验证器</td></tr><tr><td align="center">error_messages</td><td align="center">包含错误编号与错误信息的字典</td></tr><tr><td align="center">label</td><td align="center">用于HTML展示API页面时，显示的字段名称</td></tr><tr><td align="center">help_text</td><td align="center">用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table></li><li><p>创建序列化类（用户为例）</p><blockquote><p>1.新建文件并导入序列化器 serializers.py  (当前app下)   用于序列化与反序列化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## serializers.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">username = serializers.CharFiled(</span><br><span class="line">requird = <span class="literal">True</span>, max_length=<span class="number">50</span>)</span><br><span class="line">...  </span><br><span class="line"><span class="comment">#需要进行数据转换的字段设,并修改字段相应类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span>  </span><br><span class="line"><span class="comment">#重写create方法 </span></span><br><span class="line">model = UserModel()</span><br><span class="line">model.username = validated_data[<span class="string">'username'</span>]</span><br><span class="line">...</span><br><span class="line">model.save()</span><br><span class="line"><span class="keyword">return</span> model </span><br><span class="line"></span><br><span class="line">model ：指明该序列化器处理的数据字段从模型类Student参考生成</span><br><span class="line">fields ：指明该序列化器包含模型类中的哪些字段，</span><br><span class="line">__all__指明包含所有字段</span><br></pre></td></tr></table></figure><blockquote><p>2.views：获取前端表单数据并返回数据给前端 创建serializer对象定义好Serializer类后，就可以创建Serializer对象了。Serializer的构造方法为：</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">Serializer(<span class="params">instance</span>=None, <span class="params">data</span>=<span class="params">empty</span>, <span class="operator">**</span><span class="params">kwarg</span>)</span></span><br></pre></td></tr></table></figure><pre><code>说明：1）用于序列化时，将模型类对象传入instance参数2）用于反序列化时，将要被反序列化的数据传入data参数3）除了instance和data参数外，在构造Serializer对象时，    还可通过context参数额外添加数据，如serializer = StudentSerializer(instance,                 context={&apos;request&apos;: request})</code></pre><blockquote><p>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</p></blockquote><pre><code>1.使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。2.序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。3.序列化器的字段声明类似于form表单系统。4.开发restful api时，序列化器会帮我们把模型数据转换成字典.5.drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</code></pre></li></ul><pre><code>&gt;序列化器的使用分两个阶段：    1.在客户端请求时，使用序列化器可以完成对数据的反序列化。    2.在服务器响应时，使用序列化器可以完成对数据的序列化。<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">do</span><span class="constructor">_user(<span class="params">request</span>)</span>:</span><br><span class="line"><span class="keyword">if</span> request.<span class="keyword">method</span><span class="operator"> == </span><span class="string">"POST"</span>:  #foo/api/user/<span class="number">1</span>   </span><br><span class="line">serializer = <span class="constructor">UserSerializer(<span class="params">data</span>=<span class="params">request</span>.POST)</span>   </span><br><span class="line">#包括：serializer的__init__中有instance,data，</span><br><span class="line">many等字段，</span><br><span class="line"><span class="keyword">if</span> not serializer.is<span class="constructor">_valid()</span>:  </span><br><span class="line">return <span class="constructor">JsonResponse(<span class="params">serializer</span>.<span class="params">errors</span>)</span></span><br><span class="line">serializer.save(force_insert=True)</span><br><span class="line">return <span class="constructor">JsonResponse(<span class="params">serializer</span>.<span class="params">validated_data</span>)</span>  </span><br><span class="line"></span><br><span class="line">#serializer中会将data中的数据赋值给validated_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">users = <span class="module-access"><span class="module"><span class="identifier">UserModer</span>.</span></span>object.all<span class="literal">()</span></span><br><span class="line">user_info = <span class="literal">[<span class="identifier">u</span>.<span class="identifier">to_json</span>() <span class="identifier">for</span> <span class="identifier">u</span> <span class="identifier">in</span> <span class="identifier">users</span>]</span></span><br><span class="line">return <span class="constructor">JsonResponse(<span class="params">user_info</span>, <span class="params">safe</span>=False)</span></span><br></pre></td></tr></table></figure>&gt;3.app_name/urls.py<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">path</span><span class="params">(<span class="string">'api/user/&lt;int:id&gt;'</span>, views.do_user)</span></span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>serializers 序列化/反序列化</p><blockquote><p>说明：</p></blockquote>  <figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</span><br><span class="line"></span><br><span class="line">在获取反序列化的数据前，必须调用<span class="function"><span class="title">is_valid</span>()方法进行验证，验证成功返回<span class="variable"><span class="literal">True</span></span>，否则返回<span class="variable"><span class="literal">False</span></span>。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">验证失败，可以通过序列化器对象的<span class="variable">errors</span>属性获取错误信息，返回字典，包含了字段和字段的错误。</span></span><br><span class="line"><span class="function">如果是非字段错误，可以通过修改<span class="variable">REST</span> <span class="variable">framework</span>配置中的<span class="variable">NON_FIELD_ERRORS_KEY</span>来控制错误字典中的键名。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">验证成功，可以通过序列化器对象的<span class="variable">validated_data</span>属性获取数据。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</span></span><br></pre></td></tr></table></figure>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## serializers.py</span></span><br><span class="line">class UserSerializer2(serializers.ModelSerializer): </span><br><span class="line"><span class="comment">#需申明调用模型信息</span></span><br><span class="line">class Meta:</span><br><span class="line">model = UserModel  </span><br><span class="line">#model添加上to_json  直接继承Model的字段</span><br><span class="line">exclude = (<span class="string">'gender'</span>,)  </span><br><span class="line">#不在前端展示的字段</span><br><span class="line"></span><br><span class="line"><span class="comment">## views.py</span></span><br><span class="line">def do_user(request, <span class="attribute">id</span>=None):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> id:</span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:  </span><br><span class="line">#根据前端输入的资源进行保存数据库中并返回给前端  </span><br><span class="line">serializer = UserSerializer(<span class="attribute">data</span>=request.POST)  </span><br><span class="line">#数据转换（反序列化） </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid():  </span><br><span class="line">return JsonResponse(serializer.errors)  </span><br><span class="line">#响应错误</span><br><span class="line">serializer.save(<span class="attribute">force_insert</span>=<span class="literal">True</span>)  </span><br><span class="line">#存储数据</span><br><span class="line">return JsonResponse(serializer.validated_data)  </span><br><span class="line">#响应数据</span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">#被序列化的是包含多条数据的查询集QuerySet，</span><br><span class="line">可通过<span class="attribute">many</span>=<span class="literal">True</span>参数补充说明 </span><br><span class="line"><span class="built_in">users </span>= UserModer.object.all() </span><br><span class="line">#获取数据</span><br><span class="line">#不需要在model中定义to_json传资源</span><br><span class="line">user_info = UserSerializer2(instance=</span><br><span class="line">users, <span class="attribute">many</span>=<span class="literal">True</span>) </span><br><span class="line">#转化多个数据，需要加上<span class="attribute">many</span>=<span class="literal">True</span></span><br><span class="line">#user_info.data ：序列化器转化后的数据（字典） </span><br><span class="line">return JsonResponse(user_info.data, </span><br><span class="line"><span class="attribute">safe</span>=<span class="literal">False</span>)</span><br><span class="line">#响应数据给客户端</span><br><span class="line">#返回的Json数据，如果是列表，需要声明<span class="attribute">safe</span>=<span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"GET"</span>：  </span><br><span class="line"><span class="built_in">user </span>= UserModel.object.<span class="builtin-name">get</span>(pk = id)  </span><br><span class="line">#获取数据</span><br><span class="line">user_info = UserSerializer2(<span class="attribute">instance</span>=user) </span><br><span class="line">#数据转换（序列化）</span><br><span class="line">return JsonResponse(user_info.data)   </span><br><span class="line">#响应数据</span><br></pre></td></tr></table></figure></li></ul><h3 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h3><blockquote><p>如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p></blockquote><blockquote><p>ModelSerializer与常规的Serializer相同，但提供了：</p></blockquote><blockquote><blockquote><p>基于模型类自动生成一系列字段</p><p>基于模型类自动为Serializer生成validators，比如unique_together包含默认的create()和update()的实现</p></blockquote></blockquote><ul><li><p>定义</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line">model 指明参照哪个模型类</span><br><span class="line">fields 指明为模型类的哪些字段生成</span><br><span class="line"></span><br><span class="line">我们可以在python manage.py shell中查看自动生成的</span><br><span class="line">BookSerializer的具体实现</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer = BookSerializer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer</span><br></pre></td></tr></table></figure></li><li><p>指定字段 </p><blockquote><p>1) 使用fields来明确字段，<strong>all</strong>表名包含所有字段，也可以写明具体哪些字段</p></blockquote><blockquote><p>2) 使用exclude可以明确排除掉哪些字段</p></blockquote><blockquote><p>3) fields 指明为模型类的哪些字段生成</p></blockquote><blockquote><p>4) 指明只读字段  可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段</p></blockquote></li><li><p>添加额外参数</p><blockquote><p>我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'pub_date'</span>, <span class="string">'read'</span>, </span><br><span class="line">        <span class="string">'comment'</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'read'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">'comment'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="序列化过程（lesson为例）"><a href="#序列化过程（lesson为例）" class="headerlink" title="序列化过程（lesson为例）"></a>序列化过程（lesson为例）</h2><h3 id="Model创建"><a href="#Model创建" class="headerlink" title="Model创建"></a>Model创建</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">LessonModel</span>(<span class="title">models</span>.<span class="type">Model</span>):</span></span><br><span class="line"><span class="class">    subject = models.<span class="type">CharField</span>(<span class="title">max_length</span>=255)</span></span><br><span class="line"><span class="class">    student = models.<span class="type">ForeignKey</span>('<span class="type">UserModer</span>',</span></span><br><span class="line"><span class="class">    <span class="title">on_delete</span>=<span class="title">models</span>.<span class="type">CASCADE</span>)</span></span><br></pre></td></tr></table></figure><h3 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#serializer.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LessonSerializer</span>(<span class="title">serializers</span>.<span class="title">ModelSerializer</span>):</span></span><br><span class="line"><span class="comment">#序列化调用上面学生信息（对student字段进行处理后返回）</span></span><br><span class="line">student = serializer.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_student</span><span class="params">(<span class="keyword">self</span>, instance)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment">#instance.student 为获取数据</span></span><br><span class="line">u = UserSerializer2(instance=instance.student) </span><br><span class="line"><span class="comment">#数据转化</span></span><br><span class="line"><span class="keyword">return</span> u.data </span><br><span class="line"><span class="comment">#返回转化数据使得该序列化可以转化学生信息数据并一起发给前端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义任意需要的字段</span></span><br><span class="line">count = serializer.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(<span class="keyword">self</span>, instance)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = LessonModel  </span><br><span class="line">        <span class="comment">#声明model  (instance中包括的字段)</span></span><br><span class="line">        fields = (<span class="string">"subject"</span>, <span class="string">"student"</span>, <span class="string">'count'</span>)  </span><br><span class="line">        <span class="comment">#指明序列化model中的字段与exclude相反</span></span><br></pre></td></tr></table></figure><h3 id="转化为序列化对象"><a href="#转化为序列化对象" class="headerlink" title="转化为序列化对象"></a>转化为序列化对象</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#views.py</span></span><br><span class="line">def do_lesson(request, <span class="attribute">id</span>=None):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> id:</span><br><span class="line">lesson = LessonModel.object.all() #获取数据</span><br><span class="line">json_lesson = LessonSerializer(</span><br><span class="line"><span class="attribute">instance</span>=lesson, <span class="attribute">many</span>=<span class="literal">True</span>)  </span><br><span class="line">#数据转化（序列化）</span><br><span class="line">return JsonResponse(json_lesson.data, <span class="attribute">safe</span>=<span class="literal">False</span>)  </span><br><span class="line">#响应数据(subject,student,count的所有序列化返回的数据)</span><br></pre></td></tr></table></figure><h2 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h2><h3 id="数据验证-以图书为例"><a href="#数据验证-以图书为例" class="headerlink" title="数据验证(以图书为例)"></a>数据验证(以图书为例)</h3><ul><li><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p></li><li><p>在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。</p></li><li><p>验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。</p></li><li><p>验证成功，可以通过序列化器对象的validated_data属性获取数据。</p></li><li><p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p></li></ul><pre><code><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">新建一个子应用books。</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'title'</span>: <span class="string">'python'</span>&#125;  #传入的数据</span><br><span class="line">serializer = BookSerializer(data=data)  #序列化</span><br><span class="line">serializer.is_valid()  </span><br><span class="line"># <span class="literal">True</span>   验证结果返回值 （字段的限制若不满足直接<span class="literal">False</span>）</span><br><span class="line">serializer.errors  # &#123;&#125;  错误信息</span><br><span class="line">serializer.validated_data  </span><br><span class="line">#  OrderedDict([(<span class="string">'btitle'</span>, <span class="string">'python'</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">is_valid()方法还可以在验证失败时抛出异常</span><br><span class="line">serializers.ValidationError，</span><br><span class="line">可以通过传递raise_exception=<span class="literal">True</span>参数开启，</span><br><span class="line">REST framework接收到此异常会向前端返回HTTP <span class="number">400</span> Bad Request响应。</span><br></pre></td></tr></table></figure></code></pre><h3 id="补充定义验证行为"><a href="#补充定义验证行为" class="headerlink" title="补充定义验证行为"></a>补充定义验证行为</h3><ul><li><p>validate_字段名</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_title</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'django'</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(</span><br><span class="line">            <span class="string">"图书不是关于Django的"</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">验证：</span><br><span class="line"><span class="keyword">from</span> book.serializers <span class="keyword">import</span> BookSerializer</span><br><span class="line">data = &#123;<span class="string">'title'</span>: <span class="string">'python'</span>&#125;</span><br><span class="line">serializer = BookSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># False   </span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment">#  &#123;'title': [ErrorDetail(string='图书不是关于Django的',</span></span><br><span class="line"> code=<span class="string">'invalid'</span>)]&#125;</span><br></pre></td></tr></table></figure></li><li><p>多个字段进行验证 定义validate方法</p>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span>(<span class="title">serializers</span>.<span class="title">Serializer</span>):</span></span><br><span class="line">    <span class="string">""</span><span class="string">"图书序列化器"</span><span class="string">""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(<span class="keyword">self</span>, attrs)</span></span><span class="symbol">:</span></span><br><span class="line">        read = attrs[<span class="string">'read'</span>]</span><br><span class="line">        comment = attrs[<span class="string">'comment'</span>]</span><br><span class="line">        <span class="keyword">if</span> read &lt; <span class="symbol">comment:</span></span><br><span class="line">            raise serializers.ValidationError(<span class="string">'</span></span><br><span class="line"><span class="string">            阅读量小于评论量，不可以通过'</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line">        </span><br><span class="line">   </span><br><span class="line">from book.serializers import BookSerializer</span><br><span class="line">data = &#123;<span class="string">'title'</span>: <span class="string">'about django'</span>, <span class="string">'read'</span>: <span class="number">10</span>, <span class="string">'comment'</span>: <span class="number">20</span>&#125;</span><br><span class="line">s = BookSerializer(data=data)</span><br><span class="line">s.is_valid()  <span class="comment"># False</span></span><br><span class="line">s.errors</span><br><span class="line"><span class="comment">#  &#123;'non_field_errors': [ErrorDetail(string=</span></span><br><span class="line"><span class="string">'阅读量小于评论量'</span>, code=<span class="string">'invalid'</span>)]&#125;</span><br></pre></td></tr></table></figure></li><li><p>validators  字段中添加该补充验证行为选项参数</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def about_django(value):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'django'</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">        raise serializers.ValidationError(</span><br><span class="line">        <span class="string">"图书不是关于Django的"</span>)</span><br><span class="line"></span><br><span class="line">class BookSerializer(serializers.Serializer):</span><br><span class="line">    <span class="string">""</span><span class="string">"图书序列化器"</span><span class="string">""</span></span><br><span class="line">    id = serializers.IntegerField(<span class="attribute">label</span>=<span class="string">'ID'</span>, <span class="attribute">read_only</span>=<span class="literal">True</span>)</span><br><span class="line">     #验证字段title</span><br><span class="line">    title = serializers.CharField(<span class="attribute">label</span>=<span class="string">'名称'</span>, </span><br><span class="line">    <span class="attribute">max_length</span>=20, validators=[about_django])     </span><br><span class="line">    pub_date = serializers.DateField(<span class="attribute">label</span>=<span class="string">'发布日期'</span>, </span><br><span class="line">    <span class="attribute">required</span>=<span class="literal">False</span>)</span><br><span class="line">    read = serializers.IntegerField(<span class="attribute">label</span>=<span class="string">'阅读量'</span>, </span><br><span class="line">    <span class="attribute">required</span>=<span class="literal">False</span>)</span><br><span class="line">    comment = serializers.IntegerField(<span class="attribute">label</span>=<span class="string">'评论量'</span>, </span><br><span class="line">    <span class="attribute">required</span>=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> book.serializers import BookSerializer</span><br><span class="line">data = &#123;<span class="string">'title'</span>: <span class="string">'python'</span>&#125;</span><br><span class="line">serializer = BookSerializer(<span class="attribute">data</span>=data)</span><br><span class="line">serializer.is_valid()  # <span class="literal">False</span>   </span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment">#  &#123;'title': [ErrorDetail(string='图书不是关于Django的', </span></span><br><span class="line"><span class="attribute">code</span>=<span class="string">'invalid'</span>)]&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="保存-更新数据"><a href="#保存-更新数据" class="headerlink" title="保存/更新数据"></a>保存/更新数据</h3><ul><li><p>以密码保存和更新为例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Model.py</span></span><br><span class="line">class UserModel(models.Model):</span><br><span class="line">password = models.CharField(max_length=255, null=True)</span><br><span class="line">   salt = models.CharField(max_length=255, default='123456')</span><br><span class="line"></span><br><span class="line"><span class="comment">#serializers.py 序列化</span></span><br><span class="line"></span><br><span class="line">如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时</span><br><span class="line">候，<span class="keyword">create</span>()被调用，相反，如果传递了<span class="keyword">instance</span>实例，则调用<span class="keyword">save</span>()方法</span><br><span class="line">的时候，<span class="keyword">update</span>()被调用</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserSerializer2(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> Meta:</span><br><span class="line">        <span class="keyword">model</span> = UserModer</span><br><span class="line">        <span class="keyword">exclude</span> = (<span class="string">'password'</span>, ）</span><br><span class="line"><span class="comment">#创建密码  validated_data是反序列化验证成功后获得的数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="keyword">create</span>(<span class="keyword">self</span>, validated_data):</span><br><span class="line">        <span class="keyword">model</span> = super().create(validated_data)</span><br><span class="line">        model.salt = uuid.uuid4().hex</span><br><span class="line">        <span class="keyword">password</span> = <span class="string">'12345'</span> + model.salt</span><br><span class="line">        <span class="keyword">import</span> hashlib</span><br><span class="line">        <span class="keyword">md5</span> = hashlib.md5()</span><br><span class="line">        md5.update(password.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        model.password = md5.hexdigest()</span><br><span class="line">        model.save()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">model</span></span><br><span class="line"><span class="comment"># 更新密码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="keyword">update</span>(<span class="keyword">self</span>, <span class="keyword">instance</span>, validated_data):</span><br><span class="line">        <span class="keyword">model</span> = super().update(<span class="keyword">instance</span>, validated_data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"password"</span> <span class="keyword">in</span> validated_data:</span><br><span class="line">            <span class="keyword">password</span> = validated_data[<span class="string">'password'</span>] + </span><br><span class="line">            model.salt</span><br><span class="line">            <span class="keyword">import</span> hashlib</span><br><span class="line">            <span class="keyword">md5</span> = hashlib.md5()</span><br><span class="line">            md5.update(password.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            model.password = md5.hexdigest()</span><br><span class="line">            model.save()</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">model</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="api-view-基于方法的视图"><a href="#api-view-基于方法的视图" class="headerlink" title="api_view(基于方法的视图)"></a>api_view(基于方法的视图)</h2><blockquote><p>api_view 是一个装饰器，用 http_method_names 来设置视图允许响应的 HTTP 方法列表，举个例子，</p></blockquote><ul><li><p>编写一个简单的视图，手动返回一些数据。</p>  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@api_view([<span class="string">'GET'</span>, <span class="string">'POST'</span>])  </span><br><span class="line">#如果未制定 默认是GET 其它以“<span class="number">405</span> <span class="function"><span class="keyword">Method</span> <span class="title">Not</span> <span class="title">Allowed</span> ”进行响应</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">hello_world</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request<span class="function">.<span class="keyword">method</span> == '<span class="title">POST</span>':</span></span><br><span class="line">        return Response(<span class="comment">&#123;"message": "Got some data!", </span></span><br><span class="line"><span class="comment">        "data": request.data&#125;</span>)</span><br><span class="line">    return Response(<span class="comment">&#123;"message": "Hello, world!"&#125;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="api-view装饰器"><a href="#api-view装饰器" class="headerlink" title="api_view装饰器"></a>api_view装饰器</h3><ul><li><p>实例</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line">@api_view(<span class="string">"GET"</span>, <span class="string">"POST"</span> ) </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_user</span><span class="params">(request, id=None)</span></span>: </span><br><span class="line"><span class="comment">#可指定format:json(前端显示方式为json)</span></span><br><span class="line">assert isinstance(request, Request)</span><br><span class="line"><span class="comment"># request.query_params == request.GET  urls中的数据</span></span><br><span class="line"><span class="comment"># request.data == request.POST   报文中的数据</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">id:</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:   </span><br><span class="line">serializer = UserSerializer(data=request.POST)   </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid():  <span class="comment">#序列化验证 </span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(serializer.errors)  </span><br><span class="line">serializer.save(force_insert=True) <span class="comment">#保存 </span></span><br><span class="line"><span class="comment">#return JsonResponse(serializer.validated_data)</span></span><br><span class="line"><span class="comment">#使用rest_framework 的Response </span></span><br><span class="line"><span class="keyword">return</span> Response(serializer.validated_data)  </span><br><span class="line"><span class="comment">#响应数据  </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># app/urls</span></span><br><span class="line">path(<span class="string">'api/user'</span>, views.do_user, &#123;<span class="string">'format'</span><span class="symbol">:<span class="string">'json'</span></span>&#125;) </span><br><span class="line"><span class="comment">#上述指定format后需要制定</span></span><br></pre></td></tr></table></figure></li><li><p>类视图(APIView例) </p></li></ul><pre><code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#views.py</span></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def <span class="builtin-name">get</span>(self, request, <span class="attribute">id</span>=None, <span class="number">*a</span>rgs, **kwargs):</span><br><span class="line">    # request.query_params == request.<span class="builtin-name">GET</span>  urls中的数据</span><br><span class="line"> # request.data == request.POST   报文中的数据</span><br><span class="line">        <span class="keyword">if</span> id:</span><br><span class="line">           <span class="built_in"> user </span>= UserModer.objects.<span class="builtin-name">get</span>(<span class="attribute">pk</span>=id)</span><br><span class="line">            user_info = UserSerializer2(<span class="attribute">instance</span>=user)</span><br><span class="line">            return Response(user_info.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           <span class="built_in"> users </span>= UserModer.objects.all()</span><br><span class="line">            users_info = UserSerializer2(<span class="attribute">instance</span>=users, </span><br><span class="line">            <span class="attribute">many</span>=<span class="literal">True</span>)</span><br><span class="line">            return Response(users_info.data)</span><br><span class="line"></span><br><span class="line">    def post(self, request, <span class="number">*a</span>rgs, **kwargs):</span><br><span class="line">        serializer = UserSerializer2(<span class="attribute">data</span>=request.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid():</span><br><span class="line">            return JsonResponse(serializer.errors)</span><br><span class="line">        serializer.save()</span><br><span class="line">        return Response(serializer.validated_data)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def put(self, request, <span class="attribute">id</span>=None, <span class="number">*a</span>rgs, **kwargs):</span><br><span class="line">      <span class="keyword">if</span> id:</span><br><span class="line">      model = UserModel.object.<span class="builtin-name">get</span>(<span class="attribute">pk</span>=id)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">      model = </span><br><span class="line">      UserModel.object.<span class="builtin-name">get</span>(<span class="attribute">pk</span>=request.data[<span class="string">'id'</span>])</span><br><span class="line">      serializer = UserSerializer2(<span class="attribute">data</span>=request.data)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid():</span><br><span class="line">        <span class="builtin-name">print</span>(serializer.errors)</span><br><span class="line">            return Response(<span class="attribute">status</span>=401)</span><br><span class="line">        serializer.save()</span><br><span class="line">        return Response(serializer.data)</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment"># app/urls.py</span></span><br><span class="line"></span><br><span class="line">path(<span class="string">'api/user/'</span>, views.UserView.as_view())</span><br></pre></td></tr></table></figure></code></pre><h2 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="title">mixins</span>.<span class="title">ListModelMixin</span>,</span></span><br><span class="line">               mixins.CreateModelMixin,</span><br><span class="line">               mixins.RetrieveModelMixin,</span><br><span class="line">               mixins.UpdateModelMixin,</span><br><span class="line">               mixins.DestroyModelMixin,</span><br><span class="line">               generics.GenericAPIView)<span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">    queryset = UserModer.objects.all()</span><br><span class="line">    serializer_class = UserSerializer2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(<span class="keyword">self</span>, request, pk=None, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">pk:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.list(request, *args, **kwargs)</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>.retrieve(request, pk, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(<span class="keyword">self</span>, request, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(<span class="keyword">self</span>, request, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(<span class="keyword">self</span>, request, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h2 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h2><h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#views.py:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserView(ModelViewSet):</span><br><span class="line">    queryset = UserModer.objects.<span class="keyword">all</span>()</span><br><span class="line">    serializer_class = UserSerializer2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_view = UserView.as_view(&#123;</span><br><span class="line">        "get": "list",</span><br><span class="line">        "post": <span class="string">'create'</span>&#125;)</span><br><span class="line"></span><br><span class="line">detail_view = UserView.as_view(</span><br><span class="line">    &#123;</span><br><span class="line">        "get": "retrieve",</span><br><span class="line">        "put": "update",</span><br><span class="line">        "delete": "destroy"</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    # path(<span class="string">'api/user/'</span>, views.list_view),</span><br><span class="line">    # path(<span class="string">'api/user/&lt;int:pk&gt;'</span>, views.detail_view),</span><br></pre></td></tr></table></figure><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#views.py</span></span><br><span class="line"> <span class="keyword">class</span> LessonView(ModelViewSet):</span><br><span class="line">     queryset = LessonModel.objects.<span class="keyword">all</span>()</span><br><span class="line">     serializer_class = LessonSerializer</span><br><span class="line">     </span><br><span class="line"><span class="meta">#app/urls.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">'user'</span>, views.UserView)</span><br><span class="line">router.register(<span class="string">'lesson'</span>, views.LessonView)</span><br><span class="line"></span><br><span class="line">path(<span class="string">'api/'</span>, <span class="keyword">include</span>(router.urls)),</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><blockquote><p>主要是对是否符合查看条件，符合则返回相关响应数据，否则返回权限不足</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated, </span><br><span class="line">BasePermission</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenPermissionClass</span><span class="params">(BasePermission)</span>:</span> </span><br><span class="line"><span class="comment">#验证方法重写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(view, UserView):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">           </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LessonView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    permission_classes = [TokenPermissionClass]  </span><br><span class="line">    <span class="comment">#调用上面的验证方式</span></span><br><span class="line">    queryset = LessonModel.objects.all()</span><br><span class="line">    serializer_class = LessonSerializer</span><br></pre></td></tr></table></figure><h3 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h3><ul><li><p>新建验证文件 authentications.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#authentications.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> </span><br><span class="line">BaseAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> foo.models <span class="keyword">import</span> UserModer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPasswordAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        user = request.query_params.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.query_params.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = UserModer.objects.get(username=user)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">        new_password = password + user.salt</span><br><span class="line">        <span class="keyword">import</span> hashlib</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(new_password.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">if</span> user.password == md5.hexdigest():</span><br><span class="line">            <span class="keyword">return</span> user, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">#views.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(ModelViewSet)</span>:</span>  <span class="comment">#若有权限即验证通过，则序列化</span></span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    authentication_classes = [UserPasswordAuthentication]</span><br><span class="line">    queryset = UserModer.objects.all()</span><br><span class="line">    serializer_class = UserSerializer2</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#models.py</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">UserModer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line"><span class="meta">   @property</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">is_authenticated</span><span class="params">(self)</span>:</span>  </span><br><span class="line">   <span class="comment">#(IsAuthenticated中request.user</span></span><br><span class="line">   和request.user.is_authenticated需要同时满足 </span><br><span class="line">   这里重写其中一个)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#地址栏输入  字段名=值 可以查询出该字段里所有符合的值的数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="title">ModelViewSet</span>):  </span></span><br><span class="line">    queryset = UserModer.objects.all()</span><br><span class="line">    serializer_class = UserSerializer2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(<span class="keyword">self</span>, request, *args, **kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> arg, value <span class="keyword">in</span> request.query_params.items()<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.queryset = <span class="keyword">self</span>.queryset.filter(</span><br><span class="line">            **&#123;<span class="symbol">arg:</span> value&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>(UserView, <span class="keyword">self</span>).list(</span><br><span class="line">        request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h2 id="django-filters"><a href="#django-filters" class="headerlink" title="django-filters"></a>django-filters</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip3</span> <span class="string">install django-filters</span></span><br><span class="line"></span><br><span class="line"><span class="attr">import</span> <span class="string">django_filters.rest_framework</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">class</span> <span class="string">UserView(ModelViewSet):</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">queryset</span> = <span class="string">UserModer.objects.all()</span></span><br><span class="line">    <span class="attr">filter_backends</span> = <span class="string">[django_filters.rest_framework.</span></span><br><span class="line">    <span class="meta">DjangoFilterBackend,</span> <span class="string">SearchFilter]</span></span><br><span class="line">    <span class="attr">serializer_class</span> = <span class="string">UserSerializer2</span></span><br><span class="line">    <span class="attr">filterset_fields</span> = <span class="string">['gender', 'salt']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#http://127.0.0.1:8000/foo/api/user/?gender=1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">class</span> <span class="string">LessonView(ModelViewSet):</span></span><br><span class="line">    <span class="attr">queryset</span> = <span class="string">LessonModel.objects.all()</span></span><br><span class="line">    <span class="attr">serializer_class</span> = <span class="string">LessonSerializer</span></span><br><span class="line">    <span class="attr">filter_backends</span> = <span class="string">[SearchFilter]</span></span><br><span class="line">    <span class="attr">search_fields</span> = <span class="string">['subject', 'student__username']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#http://127.0.0.1:8000/foo/api/lesson/?search=a</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Rest_Framework </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术05--JPA、ORM、hibernate</title>
      <link href="/2019/05/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF05--JPA%E3%80%81ORM%E3%80%81hibernate/"/>
      <url>/2019/05/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF05--JPA%E3%80%81ORM%E3%80%81hibernate/</url>
      
        <content type="html"><![CDATA[<h1 id="ORM思想"><a href="#ORM思想" class="headerlink" title="ORM思想"></a>ORM思想</h1><ul><li><p>ORM（Object-Relational Mapping） 表示对象关系映射。在面向对象的软件开发中，通过ORM，就可以把对象映射到关系型数据库中。只要有一套程序能够做到建立对象与数据库的关联，操作对象就可以直接操作数据库数据，就可以说这套程序实现了ORM对象关系映射</p></li><li><p>简单的说：ORM就是建立实体类和数据库表之间的关系，从而达到操作实体类就相当于操作数据库表的目的。</p></li></ul><ul><li><p>主要目的：操作实体类就相当于操作数据库表</p></li><li><p>建立两个映射关系：</p><ul><li>实体类和表的映射关系</li><li>实体类中属性和表中字段的映射关系</li></ul></li><li><p>不再重点关注：sql语句</p></li><li><p>实现了ORM思想的框架：Mybatis（ibatis）、Hibernate、Jpa</p></li></ul><h1 id="hibernate与JPA的概述"><a href="#hibernate与JPA的概述" class="headerlink" title="hibernate与JPA的概述"></a>hibernate与JPA的概述</h1><h2 id="hibernate概述"><a href="#hibernate概述" class="headerlink" title="hibernate概述"></a>hibernate概述</h2><ul><li>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO(java实体类对象)与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。</li></ul><h2 id="JPA概述"><a href="#JPA概述" class="headerlink" title="JPA概述"></a>JPA概述</h2><ul><li>JPA的全称是Java Persistence API， 即Java 持久化API，是SUN公司推出的一套基于ORM的规范，内部是由一系列的接口和抽象类构成。</li><li>JPA通过JDK 5.0注解描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</li></ul><h2 id="JPA的优势"><a href="#JPA的优势" class="headerlink" title="JPA的优势"></a>JPA的优势</h2><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><ul><li>JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问API，这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。</li></ul><h3 id="容器级特性的支持"><a href="#容器级特性的支持" class="headerlink" title="容器级特性的支持"></a>容器级特性的支持</h3><ul><li>JPA框架中支持大数据集、事务、并发等容器级事务，这使得 JPA 超越了简单持久化框架的局限，在企业应用发挥更大的作用。</li></ul><h3 id="简单方便"><a href="#简单方便" class="headerlink" title="简单方便"></a>简单方便</h3><ul><li>JPA的主要目标之一就是提供更加简单的编程模型：在JPA框架下创建实体和创建Java 类一样简单，没有任何的约束和限制，只需要使用 javax.persistence.Entity进行注释，JPA的框架和接口也都非常简单，没有太多特别的规则和设计模式的要求，开发者可以很容易的掌握。JPA基于非侵入式原则设计，因此可以很容易的和其它框架或者容器集成</li></ul><h3 id="查询能力"><a href="#查询能力" class="headerlink" title="查询能力"></a>查询能力</h3><ul><li>JPA的查询语言是面向对象而非面向数据库的，它以面向对象的自然语法构造查询语句，可以看成是Hibernate HQL的等价物。JPA定义了独特的JPQL（Java Persistence Query Language），JPQL是EJB QL的一种扩展，它是针对实体的一种查询语言，操作对象是实体，而不是关系数据库的表，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL 才能够提供的高级查询特性，甚至还能够支持子查询。</li></ul><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><ul><li>JPA 中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化</li></ul><h2 id="JPA与hibernate的关系"><a href="#JPA与hibernate的关系" class="headerlink" title="JPA与hibernate的关系"></a>JPA与hibernate的关系</h2><ul><li><p>JPA规范本质上就是一种ORM规范，注意不是ORM框架——因为JPA并未提供ORM实现，它只是制订了一些规范，提供了一些编程的API接口，但具体实现则由服务厂商来提供实现。  </p></li><li><p>JPA和Hibernate的关系就像JDBC和JDBC驱动的关系，JPA是规范，Hibernate除了作为ORM框架之外，它也是一种JPA实现。JPA怎么取代Hibernate呢？JDBC规范可以驱动底层数据库吗？答案是否定的，也就是说，如果使用JPA规范进行数据库操作，底层需要hibernate作为其实现类完成数据持久化工作。</p></li></ul><h1 id="JPA的入门案例"><a href="#JPA的入门案例" class="headerlink" title="JPA的入门案例"></a>JPA的入门案例</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>实现的功能是保存一个客户到数据库的客户表中。</li></ul><h2 id="开发包介绍"><a href="#开发包介绍" class="headerlink" title="开发包介绍"></a>开发包介绍</h2><ul><li>由于JPA是sun公司制定的API规范，所以我们不需要导入额外的JPA相关的jar包，只需要导入JPA的提供商的jar包。我们选择Hibernate作为JPA的提供商，所以需要导入Hibernate的相关jar包</li><li><a href="http://sourceforge.net/projects/hibernate/files/hibernate-orm/" target="_blank" rel="noopener">下载网址</a></li></ul><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><ul><li>对于JPA操作，只需要从hibernate提供的资料中找到我们需要的jar导入到工程中即可。</li><li>maven工程导入坐标</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.hibernate.version&gt;5.0.7.Final&lt;/project.hibernate.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- junit --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- hibernate对jpa的支持包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;project.hibernate.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- c3p0 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hibernate-c3p0&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;project.hibernate.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- log日志 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Mysql and MariaDB --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="配置JPA的核心配置文件"><a href="#配置JPA的核心配置文件" class="headerlink" title="配置JPA的核心配置文件"></a>配置JPA的核心配置文件</h3><ul><li>在java工程的src路径下resources下创建一个名为META-INF的文件夹，在此文件夹下创建一个名为persistence.xml的配置文件</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;persistence xmlns=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> version=<span class="string">"2.0"</span>&gt;</span><br><span class="line">    &lt;!--需要配置persistence-unit节点</span><br><span class="line">        持久化单元：</span><br><span class="line">            name：持久化单元名称</span><br><span class="line">            transaction-type：事务管理的方式</span><br><span class="line">                    JTA：分布式事务管理</span><br><span class="line">                    RESOURCE_LOCAL：本地事务管理</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;persistence-unit name=<span class="string">"myJpa"</span> transaction-type=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span><br><span class="line">        &lt;!--jpa的实现方式 --&gt;</span><br><span class="line">        &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--可选配置：配置jpa实现方的配置信息--&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;!-- 数据库信息</span><br><span class="line">                用户名，javax.persistence.jdbc.user</span><br><span class="line">                密码，  javax.persistence.jdbc.password</span><br><span class="line">                驱动，  javax.persistence.jdbc.driver</span><br><span class="line">                数据库地址   javax.persistence.jdbc.url</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"javax.persistence.jdbc.user"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"javax.persistence.jdbc.password"</span> value=<span class="string">"111111"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"javax.persistence.jdbc.driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"javax.persistence.jdbc.url"</span> value=<span class="string">"jdbc:mysql:///jpa"</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--配置jpa实现方(hibernate)的配置信息</span><br><span class="line">                显示sql           ：   <span class="keyword">false</span>|<span class="keyword">true</span></span><br><span class="line">                自动创建数据库表    ：  hibernate.hbm2ddl.auto</span><br><span class="line">                        create      : 程序运行时创建数据库表（如果有表，先删除表再创建）</span><br><span class="line">                        update      ：程序运行时创建表（如果有表，不会创建表）</span><br><span class="line">                        none        ：不会创建表</span><br><span class="line"></span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;property name=<span class="string">"hibernate.show_sql"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line">            &lt;property name=<span class="string">"hibernate.hbm2ddl.auto"</span> value=<span class="string">"update"</span> /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/persistence-unit&gt;</span><br><span class="line">&lt;/persistence&gt;</span><br></pre></td></tr></table></figure><h2 id="创建客户的数据库表和客户的实体类"><a href="#创建客户的数据库表和客户的实体类" class="headerlink" title="创建客户的数据库表和客户的实体类"></a>创建客户的数据库表和客户的实体类</h2><h3 id="创建客户的数据库表"><a href="#创建客户的数据库表" class="headerlink" title="创建客户的数据库表"></a>创建客户的数据库表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建客户表*/</span></span><br><span class="line"><span class="function">CREATE TABLE <span class="title">cst_customer</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  cust_id bigint(<span class="number">32</span>)</span> NOT NULL AUTO_INCREMENT COMMENT '客户编号<span class="params">(主键)</span>',</span></span><br><span class="line"><span class="function">  cust_name <span class="title">varchar</span><span class="params">(<span class="number">32</span>)</span> NOT NULL COMMENT '客户名称<span class="params">(公司名称)</span>',</span></span><br><span class="line"><span class="function">  cust_source <span class="title">varchar</span><span class="params">(<span class="number">32</span>)</span> DEFAULT NULL COMMENT '客户信息来源',</span></span><br><span class="line"><span class="function">  cust_industry <span class="title">varchar</span><span class="params">(<span class="number">32</span>)</span> DEFAULT NULL COMMENT '客户所属行业',</span></span><br><span class="line"><span class="function">  cust_level <span class="title">varchar</span><span class="params">(<span class="number">32</span>)</span> DEFAULT NULL COMMENT '客户级别',</span></span><br><span class="line"><span class="function">  cust_address <span class="title">varchar</span><span class="params">(<span class="number">128</span>)</span> DEFAULT NULL COMMENT '客户联系地址',</span></span><br><span class="line"><span class="function">  cust_phone <span class="title">varchar</span><span class="params">(<span class="number">64</span>)</span> DEFAULT NULL COMMENT '客户联系电话',</span></span><br><span class="line"><span class="function">  PRIMARY <span class="title">KEY</span> <span class="params">(`cust_id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">1</span> DEFAULT CHARSET=utf8;<span class="string">"</span></span><br></pre></td></tr></table></figure><h3 id="创建客户的实体类"><a href="#创建客户的实体类" class="headerlink" title="创建客户的实体类"></a>创建客户的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"><span class="keyword">private</span> String custName;</span><br><span class="line"><span class="keyword">private</span> String custSource;</span><br><span class="line"><span class="keyword">private</span> String custIndustry;</span><br><span class="line"><span class="keyword">private</span> String custLevel;</span><br><span class="line"><span class="keyword">private</span> String custAddress;</span><br><span class="line"><span class="keyword">private</span> String custPhone;</span><br><span class="line"><span class="comment">//getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写实体类和数据库表的映射配置"><a href="#编写实体类和数据库表的映射配置" class="headerlink" title="编写实体类和数据库表的映射配置"></a>编写实体类和数据库表的映射配置</h2><h3 id="在实体类上使用JPA注解的形式配置映射关系"><a href="#在实体类上使用JPA注解的形式配置映射关系" class="headerlink" title="在实体类上使用JPA注解的形式配置映射关系"></a>在实体类上使用JPA注解的形式配置映射关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> *      配置映射关系</span></span><br><span class="line"><span class="comment"> *   1.实体类和表的映射关系</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Entity</span>:声明实体类</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Table</span> : 配置实体类和表的映射关系</span></span><br><span class="line"><span class="comment"> *          name : 配置数据库表的名称</span></span><br><span class="line"><span class="comment"> *   2.实体类中属性和表中字段的映射关系</span></span><br><span class="line"><span class="comment"> * 所有的注解都是使用JPA的规范提供的注解，</span></span><br><span class="line"><span class="comment"> * 所以在导入注解包的时候，一定要导入javax.persistence下的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span>：声明主键的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span>:配置主键的生成策略</span></span><br><span class="line"><span class="comment">     *      strategy</span></span><br><span class="line"><span class="comment">     *          GenerationType.IDENTITY ：自增，mysql</span></span><br><span class="line"><span class="comment">     *                 * 底层数据库必须支持自动增长（底层数据库支持的自动增长方式，对id自增）</span></span><br><span class="line"><span class="comment">     *          GenerationType.SEQUENCE : 序列，oracle</span></span><br><span class="line"><span class="comment">     *                  * 底层数据库必须支持序列</span></span><br><span class="line"><span class="comment">     *          GenerationType.TABLE : jpa提供的一种机制，通过一张数据库表的形式帮助我们完成主键自增</span></span><br><span class="line"><span class="comment">     *          GenerationType.AUTO ： 由程序自动的帮助我们选择主键生成策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Column</span>:配置属性和字段的映射关系</span></span><br><span class="line"><span class="comment">     *      name：数据库表中字段的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter setter...</span></span><br></pre></td></tr></table></figure><h3 id="常用注解的说明"><a href="#常用注解的说明" class="headerlink" title="常用注解的说明"></a>常用注解的说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line">作用：指定当前类是实体类。</span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line">作用：指定实体类和表之间的对应关系。</span><br><span class="line">属性：</span><br><span class="line">name：指定数据库表的名称</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line">作用：指定当前字段是主键。</span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line">作用：指定主键的生成方式。。</span><br><span class="line">属性：</span><br><span class="line">strategy ：指定主键生成策略。</span><br><span class="line"><span class="meta">@Column</span></span><br><span class="line">作用：指定实体类属性和数据库表之间的对应关系</span><br><span class="line">属性：</span><br><span class="line">name：指定数据库表的列名称。</span><br><span class="line">unique：是否唯一  </span><br><span class="line">nullable：是否可以为空  </span><br><span class="line">inserttable：是否可以插入  </span><br><span class="line">updateable：是否可以更新  </span><br><span class="line">columnDefinition: 定义建表时创建此列的DDL  </span><br><span class="line">secondaryTable: 从表名。如果此列不建在主表上（默认建在主表），该属性定义该列所在从表的名字搭建开发环境[重点]</span><br></pre></td></tr></table></figure><h1 id="CRUD操作以及JPA的API介绍"><a href="#CRUD操作以及JPA的API介绍" class="headerlink" title="CRUD操作以及JPA的API介绍"></a>CRUD操作以及JPA的API介绍</h1><h2 id="JPA的API介绍"><a href="#JPA的API介绍" class="headerlink" title="JPA的API介绍"></a>JPA的API介绍</h2><h3 id="Persistence对象"><a href="#Persistence对象" class="headerlink" title="Persistence对象"></a>Persistence对象</h3><ul><li>Persistence对象主要作用是用于获取EntityManagerFactory对象的 。通过调用该类的createEntityManagerFactory静态方法，根据配置文件中持久化单元名称创建EntityManagerFactory。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"//1. 创建 EntitymanagerFactory</span></span><br><span class="line"><span class="string">@Test</span></span><br><span class="line"><span class="string">String unitName = "</span>myJpa<span class="string">";</span></span><br><span class="line"><span class="string">EntityManagerFactory factory= Persistence.createEntityManagerFactory(unitName);"</span></span><br></pre></td></tr></table></figure><h3 id="EntityManagerFactory"><a href="#EntityManagerFactory" class="headerlink" title="EntityManagerFactory"></a>EntityManagerFactory</h3><ul><li>EntityManagerFactory 接口主要用来创建 EntityManager 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"//创建实体管理类</span></span><br><span class="line"><span class="string">EntityManager em = factory.createEntityManager();"</span></span><br></pre></td></tr></table></figure><ul><li>抽取jpaUtils工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决实体管理器工厂的浪费资源和耗时问题</span></span><br><span class="line"><span class="comment"> *      通过静态代码块的形式，当程序第一次访问此工具类时，创建一个公共的实体管理器工厂对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 第一次访问getEntityManager方法：经过静态代码块创建一个factory对象，再调用方法创建一个EntityManager对象</span></span><br><span class="line"><span class="comment"> * 第二次方法getEntityManager方法：直接通过一个已经创建好的factory对象，创建EntityManager对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EntityManagerFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件，创建entityManagerFactory</span></span><br><span class="line">        factory = Persistence.createEntityManagerFactory(<span class="string">"myJpa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取EntityManager对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EntityManager <span class="title">getEntityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> factory.createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EntityManager"><a href="#EntityManager" class="headerlink" title="EntityManager"></a>EntityManager</h3><ul><li><p>在 JPA 规范中, EntityManager是完成持久化操作的核心对象。实体类作为普通 java对象，只有在调用 EntityManager将其持久化后才会变成持久化对象。EntityManager对象在一组实体类与底层数据源之间进行 O/R 映射的管理。它可以用来管理和更新 Entity Bean, 根椐主键查找 Entity Bean, 还可以通过JPQL语句查询实体。</p><ul><li>getTransaction : 获取事务对象</li><li>persist ： 保存操作</li><li>merge ： 更新操作</li><li>remove ： 删除操作</li><li>find/getReference ： 根据id查询</li></ul></li></ul><h3 id="EntityTransaction"><a href="#EntityTransaction" class="headerlink" title="EntityTransaction"></a>EntityTransaction</h3><ul><li><p>在 JPA 规范中, EntityTransaction是完成事务操作的核心对象，对于EntityTransaction在我们的java代码中承接的功能比较简单</p><ul><li>begin：开启事务</li><li>commit：提交事务</li><li>rollback：回滚事务</li></ul></li></ul><h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><h3 id="实现保存操作-persist"><a href="#实现保存操作-persist" class="headerlink" title="实现保存操作 persist"></a>实现保存操作 persist</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试jpa的保存</span></span><br><span class="line"><span class="comment">     *      案例：保存一个客户到数据库中</span></span><br><span class="line"><span class="comment">     *  Jpa的操作步骤</span></span><br><span class="line"><span class="comment">     *     1.加载配置文件创建工厂（实体管理器工厂）对象</span></span><br><span class="line"><span class="comment">     *     2.通过实体管理器工厂获取实体管理器</span></span><br><span class="line"><span class="comment">     *     3.获取事务对象，开启事务</span></span><br><span class="line"><span class="comment">     *     4.完成增删改查操作</span></span><br><span class="line"><span class="comment">     *     5.提交事务（回滚事务）</span></span><br><span class="line"><span class="comment">     *     6.释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        //1.加载配置文件创建工厂（实体管理器工厂）对象</span></span><br><span class="line"><span class="comment">//        EntityManagerFactory factory = Persistence.createEntityManagerFactory("myJpa");</span></span><br><span class="line"><span class="comment">//        //2.通过实体管理器工厂获取实体管理器</span></span><br><span class="line"><span class="comment">//        EntityManager em = factory.createEntityManager();</span></span><br><span class="line">        EntityManager em = JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//3.获取事务对象，开启事务</span></span><br><span class="line">        EntityTransaction tx = em.getTransaction(); <span class="comment">//获取事务对象</span></span><br><span class="line">        tx.begin();<span class="comment">//开启事务</span></span><br><span class="line">        <span class="comment">//4.完成增删改查操作：保存一个客户到数据库中</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"aaa"</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">"教育"</span>);</span><br><span class="line">        <span class="comment">//保存，</span></span><br><span class="line">        em.persist(customer); <span class="comment">//保存操作</span></span><br><span class="line">        <span class="comment">//5.提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        em.close();</span><br><span class="line"> <span class="comment">//       factory.close();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="根据id查询用户"><a href="#根据id查询用户" class="headerlink" title="根据id查询用户"></a>根据id查询用户</h3><ul><li>立即加载 find</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询客户</span></span><br><span class="line"><span class="comment"> *  使用find方法查询：</span></span><br><span class="line"><span class="comment"> *      1.查询的对象就是当前客户对象本身</span></span><br><span class="line"><span class="comment"> *      2.在调用find方法的时候，就会发送sql语句查询数据库</span></span><br><span class="line"><span class="comment"> *  立即加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.通过工具类获取entityManager</span></span><br><span class="line">    EntityManager entityManager = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = entityManager.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.增删改查 -- 根据id查询客户</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * find : 根据id查询数据</span></span><br><span class="line"><span class="comment">     *      class：查询数据的结果需要包装的实体类类型的字节码</span></span><br><span class="line"><span class="comment">     *      id：查询的主键的取值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">l</span>)</span>;</span><br><span class="line">   <span class="comment">// System.out.print(customer);</span></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>延迟加载 getRefrence</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询客户</span></span><br><span class="line"><span class="comment"> *      getReference方法</span></span><br><span class="line"><span class="comment"> *          1.获取的对象是一个动态代理对象</span></span><br><span class="line"><span class="comment"> *          2.调用getReference方法不会立即发送sql语句查询数据库</span></span><br><span class="line"><span class="comment"> *              * 当调用查询结果对象的时候，才会发送查询的sql语句：什么时候用，什么时候发送sql语句查询数据库</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 延迟加载（懒加载）</span></span><br><span class="line"><span class="comment"> *      * 得到的是一个动态代理对象</span></span><br><span class="line"><span class="comment"> *      * 什么时候用，什么使用才会查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.通过工具类获取entityManager</span></span><br><span class="line">    EntityManager entityManager = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = entityManager.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.增删改查 -- 根据id查询客户</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getReference : 根据id查询数据</span></span><br><span class="line"><span class="comment">     *      class：查询数据的结果需要包装的实体类类型的字节码</span></span><br><span class="line"><span class="comment">     *      id：查询的主键的取值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Customer customer = entityManager.getReference(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">l</span>)</span>;</span><br><span class="line">    System.out.print(customer);</span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-remove"><a href="#删除-remove" class="headerlink" title="删除 remove"></a>删除 remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义对象</span></span><br><span class="line">EntityManager em = <span class="keyword">null</span>;</span><br><span class="line">EntityTransaction tx = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取实体管理对象</span></span><br><span class="line">em = JPAUtil.getEntityManager();</span><br><span class="line"><span class="comment">// 获取事务对象</span></span><br><span class="line">tx = em.getTransaction();</span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">Customer c1 = em.find(Customer<span class="class">.<span class="keyword">class</span>, 6<span class="title">L</span>)</span>;</span><br><span class="line">em.remove(c1);</span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">tx.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 回滚事务</span></span><br><span class="line">tx.rollback();</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跟新-merge"><a href="#跟新-merge" class="headerlink" title="跟新 merge"></a>跟新 merge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新客户的操作</span></span><br><span class="line"><span class="comment"> *      merge(Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.通过工具类获取entityManager</span></span><br><span class="line">    EntityManager entityManager = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = entityManager.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.增删改查 -- 更新操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//i 查询客户</span></span><br><span class="line">    Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>,1<span class="title">l</span>)</span>;</span><br><span class="line">    <span class="comment">//ii 更新客户</span></span><br><span class="line">    customer.setCustIndustry(<span class="string">"教育01"</span>);</span><br><span class="line">    entityManager.merge(customer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    entityManager.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作步骤总结"><a href="#操作步骤总结" class="headerlink" title="操作步骤总结"></a>操作步骤总结</h2><h3 id="加载配置文件创建实体管理器工厂"><a href="#加载配置文件创建实体管理器工厂" class="headerlink" title="加载配置文件创建实体管理器工厂"></a>加载配置文件创建实体管理器工厂</h3><ul><li>Persisitence：静态方法（根据持久化单元名称创建实体管理器工厂）<ul><li>createEntityMnagerFactory（持久化单元名称）</li><li>用：创建实体管理器工厂</li></ul></li></ul><h3 id="根据实体管理器工厂，创建实体管理器"><a href="#根据实体管理器工厂，创建实体管理器" class="headerlink" title="根据实体管理器工厂，创建实体管理器"></a>根据实体管理器工厂，创建实体管理器</h3><ul><li>EntityManagerFactory ：获取EntityManager对象</li><li>方法：createEntityManager</li><li>内部维护的很多的内容<ul><li>内部维护了数据库信息，</li><li>维护了缓存信息</li><li>维护了所有的实体管理器对象</li><li>再创建EntityManagerFactory的过程中会根据配置创建数据库表</li></ul></li></ul><h3 id="EntityManagerFactory的创建过程比较浪费资源"><a href="#EntityManagerFactory的创建过程比较浪费资源" class="headerlink" title="EntityManagerFactory的创建过程比较浪费资源"></a>EntityManagerFactory的创建过程比较浪费资源</h3><ul><li>特点：线程安全的对象</li><li>多个线程访问同一个EntityManagerFactory不会有线程安全问题</li><li>如何解决EntityManagerFactory的创建过程浪费资源（耗时）的问题？<ul><li>思路：创建一个公共的EntityManagerFactory的对象</li><li>静态代码块的形式创建EntityManagerFactory</li></ul></li></ul><h3 id="创建事务对象，开启事务"><a href="#创建事务对象，开启事务" class="headerlink" title="创建事务对象，开启事务"></a>创建事务对象，开启事务</h3><ul><li><p>EntityManager对象：实体类管理器</p><ul><li>beginTransaction : 创建事务对象</li><li>presist ： 保存</li><li>merge  ： 更新</li><li>remove ： 删除</li><li>find/getRefrence ： 根据id查询</li></ul></li><li><p>Transaction 对象 ： 事务</p><ul><li>begin：开启事务</li><li>commit：提交事务</li><li>rollback：回滚</li></ul></li></ul><h3 id="增删改查操作-提交事务-释放资源"><a href="#增删改查操作-提交事务-释放资源" class="headerlink" title="增删改查操作 提交事务 释放资源"></a>增删改查操作 提交事务 释放资源</h3><h1 id="JPA中的主键生成策略"><a href="#JPA中的主键生成策略" class="headerlink" title="JPA中的主键生成策略"></a>JPA中的主键生成策略</h1><ul><li>通过annotation（注解）来映射hibernate实体的,基于annotation的hibernate主键标识为@Id, 其生成规则由@GeneratedValue设定的.这里的@id和@GeneratedValue都是JPA的标准用法。</li></ul><h2 id="JPA提供的四种标准用法"><a href="#JPA提供的四种标准用法" class="headerlink" title="JPA提供的四种标准用法"></a>JPA提供的四种标准用法</h2><h3 id="IDENTITY-主键由数据库自动生成（主要是自动增长型）–mysql"><a href="#IDENTITY-主键由数据库自动生成（主要是自动增长型）–mysql" class="headerlink" title="IDENTITY: 主键由数据库自动生成（主要是自动增长型）–mysql"></a>IDENTITY: 主键由数据库自动生成（主要是自动增长型）–mysql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span>  </span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) </span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br></pre></td></tr></table></figure><h3 id="SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列-–oracle"><a href="#SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列-–oracle" class="headerlink" title="SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列 –oracle"></a>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列 –oracle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span>  </span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE,generator=<span class="string">"payablemoney_seq"</span>)  </span><br><span class="line"><span class="meta">@SequenceGenerator</span>(name=<span class="string">"payablemoney_seq"</span>, sequenceName=<span class="string">"seq_payment"</span>)  </span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"><span class="comment">//@SequenceGenerator源码中的定义</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, METHOD, FIELD&#125;)   </span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SequenceGenerator &#123;  </span><br><span class="line">   <span class="comment">//表示该表主键生成策略的名称，它被引用在@GeneratedValue中设置的“generator”值中</span></span><br><span class="line">   <span class="function">String <span class="title">name</span><span class="params">()</span></span>;  </span><br><span class="line">   <span class="comment">//属性表示生成策略用到的数据库序列名称。</span></span><br><span class="line">   <span class="function">String <span class="title">sequenceName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">   <span class="comment">//表示主键初识值，默认为0</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">initialValue</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;  </span><br><span class="line">   <span class="comment">//表示每次主键值增加的大小，例如设置1，则表示每次插入新记录后自动加1，默认为50</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">allocationSize</span><span class="params">()</span> <span class="keyword">default</span> 50</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AUTO：主键由程序控制"><a href="#AUTO：主键由程序控制" class="headerlink" title="AUTO：主键由程序控制"></a>AUTO：主键由程序控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span>  </span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)  </span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br></pre></td></tr></table></figure><h3 id="TABLE：使用一个特定的数据库表格来保存主键"><a href="#TABLE：使用一个特定的数据库表格来保存主键" class="headerlink" title="TABLE：使用一个特定的数据库表格来保存主键"></a>TABLE：使用一个特定的数据库表格来保存主键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span>  </span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.TABLE, generator=<span class="string">"payablemoney_gen"</span>)  </span><br><span class="line"><span class="meta">@TableGenerator</span>(name = <span class="string">"pk_gen"</span>,  </span><br><span class="line">    table=<span class="string">"tb_generator"</span>,  </span><br><span class="line">    pkColumnName=<span class="string">"gen_name"</span>,  </span><br><span class="line">    valueColumnName=<span class="string">"gen_value"</span>,  </span><br><span class="line">    pkColumnValue=<span class="string">"PAYABLEMOENY_PK"</span>,  </span><br><span class="line">    allocationSize=<span class="number">1</span>  </span><br><span class="line">) </span><br><span class="line"><span class="keyword">private</span> Long custId;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@TableGenerator源码的定义：</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, METHOD, FIELD&#125;)   </span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableGenerator &#123;  </span><br><span class="line">  <span class="comment">//表示该表主键生成策略的名称，它被引用在@GeneratedValue中设置的“generator”值中</span></span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span></span>;  </span><br><span class="line">  <span class="comment">//表示表生成策略所持久化的表名，例如，这里表使用的是数据库中的“tb_generator”。</span></span><br><span class="line">  <span class="function">String <span class="title">table</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  <span class="comment">//catalog和schema具体指定表所在的目录名或是数据库名</span></span><br><span class="line">  <span class="function">String <span class="title">catalog</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  <span class="function">String <span class="title">schema</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  <span class="comment">//属性的值表示在持久化表中，该主键生成策略所对应键值的名称。例如在“tb_generator”中将“gen_name”作为主键的键值</span></span><br><span class="line">  <span class="function">String <span class="title">pkColumnName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  <span class="comment">//属性的值表示在持久化表中，该主键当前所生成的值，它的值将会随着每次创建累加。例如，在“tb_generator”中将“gen_value”作为主键的值 </span></span><br><span class="line">  <span class="function">String <span class="title">valueColumnName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  <span class="comment">//属性的值表示在持久化表中，该生成策略所对应的主键。例如在“tb_generator”表中，将“gen_name”的值为“CUSTOMER_PK”。 </span></span><br><span class="line">  <span class="function">String <span class="title">pkColumnValue</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  </span><br><span class="line">  <span class="comment">//表示主键初识值，默认为0。 </span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">initialValue</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;  </span><br><span class="line">  <span class="comment">//表示每次主键值增加的大小，例如设置成1，则表示每次创建新记录后自动加1，默认为50。</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">allocationSize</span><span class="params">()</span> <span class="keyword">default</span> 50</span>;  </span><br><span class="line">  UniqueConstraint[] uniqueConstraints() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//这里应用表tb_generator，定义为 ：</span></span><br><span class="line"><span class="function">CREATE TABLE  <span class="title">tb_generator</span> <span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">  id NUMBER NOT NULL,  </span></span></span><br><span class="line"><span class="function"><span class="params">  gen_name VARCHAR2(<span class="number">255</span>)</span> NOT NULL,  </span></span><br><span class="line"><span class="function">  gen_value NUMBER NOT NULL,  </span></span><br><span class="line"><span class="function">  PRIMARY <span class="title">KEY</span><span class="params">(id)</span>  </span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure><h1 id="JPA中的复杂查询"><a href="#JPA中的复杂查询" class="headerlink" title="JPA中的复杂查询"></a>JPA中的复杂查询</h1><h2 id="JPQL"><a href="#JPQL" class="headerlink" title="JPQL"></a>JPQL</h2><ul><li>全称Java Persistence Query Language</li><li>基于首次在EJB2.0中引入的EJB查询语言(EJB QL),Java持久化查询语言(JPQL)是一种可移植的查询语言，旨在以面向对象表达式语言的表达式，将SQL语法和简单查询语义绑定在一起·使用这种语言编写的查询是可移植的，可以被编译成所有主流数据库服务器上的SQL。</li><li>其特征与原生SQL语句类似，并且完全面向对象，通过类名和属性访问，而不是表名和表的属性。</li></ul><h3 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有客户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">EntityManager em = <span class="keyword">null</span>;</span><br><span class="line">EntityTransaction tx = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取实体管理对象</span></span><br><span class="line">em = JPAUtil.getEntityManager();</span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">tx = em.getTransaction();</span><br><span class="line">tx.begin();</span><br><span class="line"><span class="comment">// 创建query对象</span></span><br><span class="line">String jpql = <span class="string">"from Customer"</span>;</span><br><span class="line">Query query = em.createQuery(jpql);</span><br><span class="line"><span class="comment">// 查询并得到返回结果</span></span><br><span class="line">List list = query.getResultList(); <span class="comment">// 得到集合返回类型</span></span><br><span class="line"><span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 回滚事务</span></span><br><span class="line">tx.rollback();</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">em.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序查询： 倒序查询全部客户（根据id倒序）</span></span><br><span class="line"><span class="comment"> *      sql：SELECT * FROM cst_customer ORDER BY cust_id DESC</span></span><br><span class="line"><span class="comment"> *      jpql：from Customer order by custId desc </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 进行jpql查询</span></span><br><span class="line"><span class="comment"> *      1.创建query查询对象</span></span><br><span class="line"><span class="comment"> *      2.对参数进行赋值</span></span><br><span class="line"><span class="comment"> *      3.查询，并得到返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取entityManager对象</span></span><br><span class="line">    EntityManager em = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.查询全部</span></span><br><span class="line">    String jpql = <span class="string">"from Customer order by custId desc"</span>;</span><br><span class="line">    Query query = em.createQuery(jpql);<span class="comment">//创建Query查询对象，query对象才是执行jqpl的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送查询，并封装结果集</span></span><br><span class="line">    List list = query.getResultList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计总数"><a href="#统计总数" class="headerlink" title="统计总数"></a>统计总数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用jpql查询，统计客户的总数</span></span><br><span class="line"><span class="comment"> *      sql：SELECT COUNT(cust_id) FROM cst_customer</span></span><br><span class="line"><span class="comment"> *      jpql：select count(custId) from Customer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取entityManager对象</span></span><br><span class="line">    EntityManager em = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.查询全部</span></span><br><span class="line">    <span class="comment">//i.根据jpql语句创建Query查询对象</span></span><br><span class="line">    String jpql = <span class="string">"select count(custId) from Customer"</span>;</span><br><span class="line">    Query query = em.createQuery(jpql);</span><br><span class="line">    <span class="comment">//ii.对参数赋值</span></span><br><span class="line">    <span class="comment">//iii.发送查询，并封装结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getResultList ： 直接将查询结果封装为list集合</span></span><br><span class="line"><span class="comment">     * getSingleResult : 得到唯一的结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object result = query.getSingleResult();</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> *      sql：select * from cst_customer limit 0,2</span></span><br><span class="line"><span class="comment"> *      jqpl : from Customer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPaged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取entityManager对象</span></span><br><span class="line">    EntityManager em = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.查询全部</span></span><br><span class="line">    <span class="comment">//i.根据jpql语句创建Query查询对象</span></span><br><span class="line">    String jpql = <span class="string">"from Customer"</span>;</span><br><span class="line">    Query query = em.createQuery(jpql);</span><br><span class="line">    <span class="comment">//ii.对参数赋值 -- 分页参数</span></span><br><span class="line">    <span class="comment">//起始索引</span></span><br><span class="line">    query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//每页查询的条数</span></span><br><span class="line">    query.setMaxResults(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//iii.发送查询，并封装结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getResultList ： 直接将查询结果封装为list集合</span></span><br><span class="line"><span class="comment">     * getSingleResult : 得到唯一的结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List list = query.getResultList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Object obj : list) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> *     案例：查询客户名称以‘播客’开头的客户</span></span><br><span class="line"><span class="comment"> *          sql：SELECT * FROM cst_customer WHERE cust_name LIKE  ?</span></span><br><span class="line"><span class="comment"> *          jpql : from Customer where custName like ?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取entityManager对象</span></span><br><span class="line">    EntityManager em = JpaUtils.getEntityManager();</span><br><span class="line">    <span class="comment">//2.开启事务</span></span><br><span class="line">    EntityTransaction tx = em.getTransaction();</span><br><span class="line">    tx.begin();</span><br><span class="line">    <span class="comment">//3.查询全部</span></span><br><span class="line">    <span class="comment">//i.根据jpql语句创建Query查询对象</span></span><br><span class="line">    String jpql = <span class="string">"from Customer where custName like ? "</span>;</span><br><span class="line">    Query query = em.createQuery(jpql);</span><br><span class="line">    <span class="comment">//ii.对参数赋值 -- 占位符参数</span></span><br><span class="line">    <span class="comment">//第一个参数：占位符的索引位置（从1开始），第二个参数：取值</span></span><br><span class="line">    query.setParameter(<span class="number">1</span>,<span class="string">"播客%"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//iii.发送查询，并封装结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getResultList ： 直接将查询结果封装为list集合</span></span><br><span class="line"><span class="comment">     * getSingleResult : 得到唯一的结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List list = query.getResultList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Object obj : list) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    em.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> ORM </tag>
            
            <tag> hibernate </tag>
            
            <tag> jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架05 -- SSM整合</title>
      <link href="/2019/05/16/JAVA%E6%A1%86%E6%9E%B605%20--%20SSM%E6%95%B4%E5%90%88/"/>
      <url>/2019/05/16/JAVA%E6%A1%86%E6%9E%B605%20--%20SSM%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC整合"><a href="#SpringMVC整合" class="headerlink" title="SpringMVC整合"></a>SpringMVC整合</h2><h2 id="搭建整合环境步骤"><a href="#搭建整合环境步骤" class="headerlink" title="搭建整合环境步骤"></a>搭建整合环境步骤</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/03/01.bmp" alt=""></p><h3 id="整合说明"><a href="#整合说明" class="headerlink" title="整合说明"></a>整合说明</h3><ul><li>SSM整合可以使用多种方式，选择配置文件 XML + 注解的方式 </li></ul><h3 id="整合的思路"><a href="#整合的思路" class="headerlink" title="整合的思路"></a>整合的思路</h3><ol><li>先搭建整合的环境</li><li>先把Spring的配置搭建完成</li><li>再使用Spring整合SpringMVC框架 </li><li>最后使用Spring整合MyBatis框架</li></ol><h3 id="创建数据库和表结构"><a href="#创建数据库和表结构" class="headerlink" title="创建数据库和表结构"></a>创建数据库和表结构</h3><pre><code class="java">create database ssm;use ssm;<span class="function">create table <span class="title">account</span><span class="params">(</span></span><span class="function"><span class="params">    id <span class="keyword">int</span> primary key auto_increment,</span></span><span class="function"><span class="params">    name varchar(<span class="number">20</span>)</span>,</span><span class="function">    money <span class="keyword">double</span></span><span class="function">)</span>;&lt;!--￼<span class="number">0</span>--&gt;####  编写实体类，在ssm_domain项目中编写#### 编写dao接口#### 编写service接口和实现类## Spring框架代码的编写### 搭建和测试Spring的开发环境#### 在ssm_web项目中创建applicationContext.xml的配置文件，编写具体的配置信息&lt;!--￼<span class="number">1</span>--&gt;#### 在ssm_web项目中编写测试方法，进行测试&lt;!--￼<span class="number">2</span>--&gt;## Spring整合SpringMVC框架### 搭建和测试SpringMVC的开发环境#### 在web.xml中配置DispatcherServlet前端控制器&lt;!--￼<span class="number">3</span>--&gt;#### 创建springmvc.xml的配置文件，编写配置文件&lt;!--￼<span class="number">4</span>--&gt;#### 测试SpringMVC的框架搭建是否成功* 编写index.jsp和list.jsp编写，超链接&lt;!--￼<span class="number">5</span>--&gt;* 创建AccountController类，编写方法，进行测试&lt;!--￼<span class="number">6</span>--&gt;### Spring整合SpringMVC的框架* 目的:在controller中能成功的调用service对象中的方法。* 在项目启动的时候，就去加载applicationContext.xml的配置文件，在web.xml中配置 ContextLoaderListener监听器(该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文 件)。&lt;!--￼<span class="number">7</span>--&gt;#### 在controller中注入service对象，调用service对象的方法进行测试&lt;!--￼<span class="number">8</span>--&gt;## Spring整合MyBatis框架### 搭建和测试MyBatis的环境#### 在web项目中编写SqlMapConfig.xml的配置文件，编写核心配置文件&lt;!--￼<span class="number">9</span>--&gt;#### 在AccountDao接口的方法上添加注解，编写SQL语句&lt;!--￼<span class="number">10</span>--&gt;#### 测试&lt;!--￼<span class="number">11</span>--&gt;### Spring整合MyBatis框架#### 目的* 把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中&lt;!--￼<span class="number">12</span>--&gt;#### 在AccountDao接口中添加@Repository注解#### 在service中注入dao对象，进行测试&lt;!--￼<span class="number">13</span>--&gt;#### 配置Spring的声明式事务管理&lt;!--￼<span class="number">14</span>--&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架03 -- Spring</title>
      <link href="/2019/05/16/JAVA%E6%A1%86%E6%9E%B603%20--%20Spring/"/>
      <url>/2019/05/16/JAVA%E6%A1%86%E6%9E%B603%20--%20Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="概念相关"><a href="#概念相关" class="headerlink" title="概念相关"></a>概念相关</h2><h3 id="spring-是什么"><a href="#spring-是什么" class="headerlink" title="spring 是什么"></a>spring 是什么</h3><ul><li>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC(Inverse Of Control: 反转控制)和 AOP(Aspect Oriented Programming:面向切面编程)为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术</li></ul><h3 id="spring-的优势"><a href="#spring-的优势" class="headerlink" title="spring 的优势"></a>spring 的优势</h3><ul><li>方便解耦，简化开发</li></ul><p>通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造 成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可 以更专注于上层的应用。</p><ul><li>AOP 编程的支持</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便集成各种优秀框架 Spring 可以降低各种框架的使用难度，提供了对各种优秀框架(Struts、Hibernate、Hessian、Quartz 等)的直接支持。</li><li>降低 JavaEE API 的使用难度 Spring 对 JavaEE API(如 JDBC、JavaMail、远程调用等)进行了薄薄的封装层，使这些 API 的使用难度大为降低。</li></ul><h2 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调 用模块的方式以及通过界面传送数据的多少</li></ul><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><h4 id="类之间的耦合"><a href="#类之间的耦合" class="headerlink" title="类之间的耦合"></a>类之间的耦合</h4><ul><li>使用反射来创建对象，避免使用new 关键字</li><li>通过读取配置文件来获取要创建的对象全限定类名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 耦合性高</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">//全限定类名写死</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/easy"</span>,<span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">final</span> PreparedStatement pstm = connection.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line">        <span class="keyword">final</span> ResultSet resultSet = pstm.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultSet.close();</span><br><span class="line">        pstm.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="方法间的耦合-需要做到：编译器不依赖，执行期再依赖"><a href="#方法间的耦合-需要做到：编译器不依赖，执行期再依赖" class="headerlink" title="方法间的耦合 需要做到：编译器不依赖，执行期再依赖"></a>方法间的耦合 需要做到：编译器不依赖，执行期再依赖</h4><h3 id="创建Bean对象"><a href="#创建Bean对象" class="headerlink" title="创建Bean对象"></a>创建Bean对象</h3><ul><li><p>Bean：在计算机英语中，为可重用组件的含义</p></li><li><p>JavaBean: Javabean并不为实体类，实体类只是其一部分，其是用Java语言编写的可重用组件</p></li><li><p>它是创建其service 和 dao 对象的</p><ol><li><p>一个配置文件进行配置service和dao  </p><blockquote><p>配置内容：唯一标识=全限定类名(key=value)</p></blockquote><blockquote><p>配置文件：xml或者properties</p></blockquote></li><li><p>通过读取配置文件中的配置内容，反射创建对象</p></li></ol></li></ul><h3 id="工厂模式解藕合"><a href="#工厂模式解藕合" class="headerlink" title="工厂模式解藕合"></a>工厂模式解藕合</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/ioc.png" alt=""></p><ul><li>其产生的为多例，每次使用都会新创建一个实例,效率会低于单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">## bean.properties</span><br><span class="line"></span><br><span class="line">accountService=com.jwang.service.impl.AccountServiceImpl</span><br><span class="line">accountDao=com.jwang.dao.impl.AccountDaoImpl</span><br><span class="line"></span><br><span class="line">## BeanFactory</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用静态代码块为其赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实列化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//读取流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">            System.out.println(bean);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private IAccountDao accountDao = new AccountDaoImpl();</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = (IAccountDao)BeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAcccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟表现层servlet 调用业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            IAccountService as = (IAccountService)BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">            as.saveAccount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">com.jwang.dao.impl.AccountDaoImpl@<span class="number">1218025</span>c</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">816f</span>27d</span><br><span class="line">保存账户完成</span><br><span class="line"><span class="number">1</span></span><br><span class="line">com.jwang.dao.impl.AccountDaoImpl@<span class="number">87</span>aac27</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">3e3</span>abc88</span><br><span class="line">保存账户完成</span><br><span class="line"><span class="number">1</span></span><br><span class="line">com.jwang.dao.impl.AccountDaoImpl@<span class="number">6</span>ce253f1</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">53</span>d8d10a</span><br><span class="line">保存账户完成</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>使用单例，使其只创建一次对象 让其保存在一个容器中 后期就不用反复创建</li><li>使用单例，在业务层和持久层没有值的改变，其效果更好，不会出现线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line">    <span class="comment">//定义一个Map用于存放需要创建的对象--容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用静态代码块为其赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实列化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//读取流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中的所有key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历取key</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象 --单例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">1218025</span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line">保存账户完成</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">1218025</span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line">保存账户完成</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">1218025</span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line">保存账户完成</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><h2 id="Spring的IoC"><a href="#Spring的IoC" class="headerlink" title="Spring的IoC"></a>Spring的IoC</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 把对象的创建交给Spring管理 唯一标识和全限定类名--&gt;</span><br><span class="line">    &lt;bean id="accountService" class="com.jwang.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id="accountDao" class="com.jwang.dao.impl.AccountDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取soring的Ioc核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        IAccountDao ad = ac.getBean(<span class="string">"accountDao"</span>, IAccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(ad);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/DI.jpg" alt=""></p><h3 id="ApplicationContext三个常用实现类"><a href="#ApplicationContext三个常用实现类" class="headerlink" title="ApplicationContext三个常用实现类"></a>ApplicationContext三个常用实现类</h3><ul><li>ClassPathXmlApplicationContext：加载类路径下的配置文件，要求配置文件必须在类路径下</li><li>FileSystemXmlApplicationContext：加载磁盘任意路径下的配置文件（必须有访问权限）绝对路径</li><li>AnnotationConfigApplicationContext：读取注解创建容器</li></ul><h3 id="核心容器的两个接口"><a href="#核心容器的两个接口" class="headerlink" title="核心容器的两个接口"></a>核心容器的两个接口</h3><h4 id="ApplicationContext：一般使用该接口，可以判断是否是单例"><a href="#ApplicationContext：一般使用该接口，可以判断是否是单例" class="headerlink" title="ApplicationContext：一般使用该接口，可以判断是否是单例"></a>ApplicationContext：一般使用该接口，可以判断是否是单例</h4><ul><li>构建核心容器时，创建对象采取的是立即加载的方式，只要一读取配置文件马上就创建配置文件中的对象(单例对象)</li></ul><h4 id="BeanFactory："><a href="#BeanFactory：" class="headerlink" title="BeanFactory："></a>BeanFactory：</h4><ul><li>创建对象采取延迟加载的方式，在根据id获取对象时才创建对象（多例对象使用）</li></ul><h2 id="spring对bean的管理细节"><a href="#spring对bean的管理细节" class="headerlink" title="spring对bean的管理细节"></a>spring对bean的管理细节</h2><h3 id="创建bean的三种方法"><a href="#创建bean的三种方法" class="headerlink" title="创建bean的三种方法"></a>创建bean的三种方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取soring的Ioc核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        System.out.println(as);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用默认构造函数创建：在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="accountService" class="com.jwang.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>使用普通工厂中的方法创建对象 （使用某个类中的方法创建对象，并存入Spring容器）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;bean id="instanceFactory" class="com.jwang.factory.InstanceFactory"&gt;&lt;/bean&gt;</span><br><span class="line"> &lt;bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"&gt;&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个工厂类（jar包，无法修改源码)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入Spring容器）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="accountService" class="com.jwang.factory.StaticFactory" factory-method="getAccountService"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="bean对象的作用范围"><a href="#bean对象的作用范围" class="headerlink" title="bean对象的作用范围"></a>bean对象的作用范围</h3><ul><li>bean标签的scope属性：用于指定bean的作用范围</li><li>取值：<ul><li>singleton：单例的 - 默认值) </li><li>prototype：多例</li><li>request：作用于web的请求范围：</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，就是session</li></ul></li><li>集群：一个应用在多个服务器上部署则有多个ip地址，其访问网址的请求通过负载均衡访问，其产生的session在多个服务器上的公用session就是global-session</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/%E5%85%A8%E5%B1%80session.png" alt=""></p><h3 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h3><ul><li>单例对象：当容器创建时对象就产生，直到容器销毁，对象才销毁，即单例对象的生命周期与容器相同</li><li>多例对象：使用对象时Spring框架为我们创建，只要使用过程中就一直存在，当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收机制回收</li><li>bean标签生命周期属性：<ul><li>init-method=”初始化调用的该类中方法名”</li><li>destroy-method=”对象销毁调用的方法名”</li></ul></li></ul><h2 id="Spring的依赖注入DI"><a href="#Spring的依赖注入DI" class="headerlink" title="Spring的依赖注入DI"></a>Spring的依赖注入DI</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul><li><p>Dependency Injection：依赖关系的维护就为依赖注入</p></li><li><p>IOC的作用：降低程序间的耦合（依赖关系）</p></li><li><p>依赖关系的管理：交给Spring维护，当前类中需要用到其他类的对象，由Spring提供，只需要在配置文件中说明</p></li><li><p>分类：</p><ul><li>基本类型和String</li><li>其他bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul></li><li><p>注入方法（如果经常变化的数据，并不适用注入方式）：</p><ul><li>使用构造函数提供</li><li>使用set方法提供</li><li>使用注解  </li></ul></li></ul><h3 id="构造函数注入（不推荐）"><a href="#构造函数注入（不推荐）" class="headerlink" title="构造函数注入（不推荐）"></a>构造函数注入（不推荐）</h3><ul><li><p>使用的标签：constructor-arg</p></li><li><p>出现位置：bean标签内部</p></li><li><p>标签属性：</p><ul><li>type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型</li><li>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始</li><li>name：用于指定给构造函数中指定名称的参数赋值（常用）</li><li>value：用于提供基本类型和string类型的数据</li><li>ref：用于指定其他的bean类型的类型数据，它指在spring的Ioc核心容器中出现的bean对象，比如配置的Data类</li></ul></li><li><p>优势：在获取bean对象时，注入数据是必须的，否则对象创建失败</p></li><li><p>弊端：改变类（bean对象）的实例化方式，在创建对象时，如果用不到其中某些参数，也必须提供</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">## 模拟工厂类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果经常变化的数据，并不适用注入方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"accountService ...."</span>+name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 模拟使用</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">## bean依赖注入，name的属性顺序需要一致</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"accountService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.service.impl.AccountServiceImpl"</span>&gt;</span><br><span class="line">        &lt;constructor-arg name="name" value="ss"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name="age" value="12"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name="birthday" ref="now"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置日期对象--&gt;</span><br><span class="line">    &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="set方法注入-常用"><a href="#set方法注入-常用" class="headerlink" title="set方法注入(常用)"></a>set方法注入(常用)</h3><ul><li><p>使用的标签：property </p></li><li><p>出现位置：bean标签内部</p></li><li><p>标签属性：</p><ul><li>name：用于指定注入时所调用的set方法名称(setUserName – userName)</li><li>value：用于提供基本类型和string类型的数据</li><li>ref：用于指定其他的bean类型的类型数据，它指在spring的Ioc核心容器中出现的bean对象，比如配置的Data类</li></ul></li><li><p>优势：创建对象时没有明确的限制，可以直接使用默认构造函数</p></li><li><p>弊端：如果某个成员必须有值，则获取对象是有可能set方法没有执行</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置日期对象--&gt;</span><br><span class="line">&lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"accountService2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.service.impl.AccountServiceImpl2"</span>&gt;</span><br><span class="line">    &lt;property name="userName" value="tesa"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="age" value="23"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="复杂类型注入-集合类型植入"><a href="#复杂类型注入-集合类型植入" class="headerlink" title="复杂类型注入/集合类型植入"></a>复杂类型注入/集合类型植入</h3><ul><li>用于给list结构集合注入的标签：list array set</li><li>用于给Map结构集合注入的标签：props map</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"accountService3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.service.impl.AccountServiceImpl3"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"mystrs"</span>&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">                &lt;value&gt;aaa&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;bbb&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">"myMap"</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key="as" value="asa"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key="ad"&gt;&lt;value&gt;asa&lt;/value&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="基于注解的ioc以及ioc的使用"><a href="#基于注解的ioc以及ioc的使用" class="headerlink" title="基于注解的ioc以及ioc的使用"></a>基于注解的ioc以及ioc的使用</h2><h3 id="spring中ioc的常用注解"><a href="#spring中ioc的常用注解" class="headerlink" title="spring中ioc的常用注解"></a>spring中ioc的常用注解</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;!--告知Spring在创建容器时，需要扫描的包，配置所需要的标签不在bean中，而是一个名称为context名称空间和约束中  --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.jwang"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><h4 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h4><ul><li>和XML配置文件中编写一个bean标签实现的功能一样</li><li>@Component：将当前对象存入spring容器中<ul><li>value：用于指定bean的id，不写时，默认值为类名，首字母变小写 </li></ul></li><li>与Component的使用一样，但提供了明确的三层使用的注解，更加清晰（可以混用，都继承Component）<ul><li>@Controller：表现层</li><li>@Service：业务层</li><li>@Repository：持久层</li></ul></li></ul><h4 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h4><ul><li>在bean标签中写一个property标签作用一样</li><li>@Autowired：自动按照类型注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功；若ioc容器中没有bean类型和要注入的变量类型匹配，则报错；若有多个匹配时，<ul><li>位置：成员变量和方法上等，在使用注解注入时，set方法就不是必须的</li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/02/%E8%87%AA%E5%8A%A8%E6%8C%89%E7%85%A7%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5.png" alt=""></p><ul><li>Qualifier：在按照类中注入的基础上再按照名称注入，在给类成员注入时不能单独使用，但是在给方法参数注入时可以<ul><li>value：用于指定注入bean的id</li></ul></li><li>Resource：直接按照bean的id注入，可以独立使用<ul><li>name：用于指定bean的id  </li></ul></li></ul><blockquote><p>以上注解都只能注入其他bean类型的数据，而基本类型和String类型无法使用，另外，集合数据类型的注入只能使用xml实现</p></blockquote><ul><li>@Value：用于注入基本类型和String类型的数据<ul><li>value：用于指定数据的值，它可以使用Spring中的SqEl(也就是spring的el表达式)</li><li>sqel表达式：${表达式} </li></ul></li></ul><h4 id="用于改变作用范围的"><a href="#用于改变作用范围的" class="headerlink" title="用于改变作用范围的"></a>用于改变作用范围的</h4><ul><li>在bean标签中使用scope属性实现功能一样</li><li>@Scope：用于指定bean的作用范围<ul><li>value：指定范围的取值:singleton/propertype </li></ul></li></ul><h4 id="用于改变生命周期"><a href="#用于改变生命周期" class="headerlink" title="用于改变生命周期"></a>用于改变生命周期</h4><ul><li>与bean标签的init-method以及destroy-method作用一样</li><li>@PreDestory：用于指定销毁方法</li><li>@PostConstruct：用于指定初始化方法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--告知spring在创建容器时要扫描的包 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.jwang"&gt;&lt;/context:component-scan&gt;</span><br><span class="line">    &lt;!--配置queryRunner对象(单例-多例) --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"runner"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> scope=<span class="string">"prototype"</span>&gt;</span><br><span class="line">        &lt;!-- 注入数据源（构造函数）--&gt;</span><br><span class="line">        &lt;constructor-arg name="ds" ref="dataSources"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--配置bean对象 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSources"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line">        &lt;!--连接数据库的必备信息 --&gt;</span><br><span class="line">        &lt;property name="driverClass" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="jdbcUrl" value="jdbc:mysql://localhost:3306/easy"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="user" value="root"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="password" value="123456"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h4><ul><li><p>Configuration: 指定当前类是一个配置类,当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写，只要不是其参数，就需要加上注解</p></li><li><p>ConponentScan：用于通过注解指定spring在创建容器时需要扫描的包</p><ul><li>value：它和basePackages一样，都是用于指定创建容器时要扫描的包，使用此注解等于在xml中配置了<code>&lt;context:component-scan base-package=&quot;com.jwang&quot;&gt;&lt;/context:component-scan&gt;</code></li></ul></li><li><p>Bean：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</p><ul><li>name：用于指定bean的id 不写，默认值为当前方法的名称</li><li>使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象 </li></ul></li><li><p>Import：用于导入其他配置类</p><ul><li>value：用于指定其他配置类的字节码，当使用该import注解后，有import注解的类就是主配置（父配置类） 导入的都是子配置类（子配置可以不写configuration和conponentscan） </li></ul></li><li><p>PropertySource：用于指定properties文件的位置</p><ul><li>value：指定文件的名称和路径<ul><li>classpath关键字：表示类路径下  </li></ul></li></ul></li><li><p>Qualifier：指定用哪一个id的bean， 可以写在对象前</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.jwang"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建一个QueryRunner对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">creatQueryRunner</span><span class="params">(@Qualifier(<span class="string">"id1"</span>)</span> DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"id1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">creatDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            ds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/easy"</span>);</span><br><span class="line">            ds.setUser(<span class="string">"root"</span>);</span><br><span class="line">            ds.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/02/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        final ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> IAccountService as = ac.getBean(<span class="string">"accountService"</span>, IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring整合junit"><a href="#Spring整合junit" class="headerlink" title="Spring整合junit"></a>Spring整合junit</h4><ul><li><p>应用程序的入口：main方法</p></li><li><p>junit单元测试中，没有main方法也能执行； junit集成了一个main方法 ，该方法就会判断当前测试类中哪些方法有 @Test注解 junit就让有Test注解的方法执行</p></li><li><p>junit不会管我们是否采用spring框架，在执行测试方法时，junit根本不知道我们是不是使用了spring框架，所以也就不会为我们读取配置文件/配置类创建spring核心容器</p></li><li><p>当测试方法执行时，没有Ioc容器，就算写了Autowired注解，也无法实现注入</p></li><li><p>解决：导入spring整合junit的jar（坐标）使用Junit提供的一个注解把原有main方法替换替换成spring提供的@Runwith ,告知spring运行期，spring和ioc创建是基于创建是基于xml还是注解，并说明位置@ContextConfiguration(location:指定xml文件位置，加classpath关键字，表示在类路径下/classes：指定注解类所在位置)</p></li><li><p>当我们使用spring5.x版本时，要求junit的jar包必须是4.1.2及以上</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// @<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:bean.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring的Aop"><a href="#Spring的Aop" class="headerlink" title="Spring的Aop"></a>Spring的Aop</h2><h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><ul><li>AOP:全称是 Aspect Oriented Programming 即:面向切面编程</li><li>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的 基础上，对我们的已有方法进行增强。</li><li>实现方式：动态代理技术</li><li>spring中的aop：配置的方式</li></ul><h3 id="动态代理技术"><a href="#动态代理技术" class="headerlink" title="动态代理技术"></a>动态代理技术</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>字节码随用随创建，随用随加载。 </li><li>它与静态代理的区别也在于此。因为静态代理是字节码一上来就创建好，并完成加载。 </li><li>装饰者模式就是静态代理的一种体现。</li></ul><h4 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h4><ul><li>提供者:JDK 官方的 Proxy 类。 要求:被代理类最少实现一个接口。</li><li>涉及的类：Proxy 提供者：JDK官方</li><li>创建代理对象：使用Proxy类的newProxyInstance方法</li><li>创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用</li><li>newProxyInstance方法参数<ul><li>ClassLoader：类加载器 用于加载代理对象字节码的，和被代理对象使用相同的类加载器。固定写法</li><li>Class[]：字节码数组 用于代理对象和被代理对象有相同方法，固定写法</li><li>InvocationHandler：用于提供增强的代码 让我们写如何代理。一般写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的，此接口谁用谁写 </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        </span><br><span class="line">       IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy   代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method  当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args    当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>        和被代理对象方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//提供增强的代码</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于子类的动态代理"><a href="#基于子类的动态代理" class="headerlink" title="基于子类的动态代理"></a>基于子类的动态代理</h4><ul><li>导入依赖</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1_3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li>涉及的类：Enhancer</li><li>提供者：第三方cglib库</li><li>如何创建代理对象：<ul><li>使用Enhancer类中的create方法</li></ul></li><li>创建代理对象的要求：<ul><li>被代理类不能是最终类</li></ul></li><li>create方法的参数：<ul><li>Class：字节码.  它是用于指定被代理对象的字节码。</li><li>Callback：用于提供增强的代码   它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写。 我们一般写的都是该接口的子接口实现类：MethodInterceptor</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        </span><br><span class="line">        Producer cglibProducer = (Producer)Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-中的AOP"><a href="#Spring-中的AOP" class="headerlink" title="Spring 中的AOP"></a>Spring 中的AOP</h3><h4 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP 相关术语"></a>AOP 相关术语</h4><ul><li>Joinpoint(连接点 ):所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。业务层的方法</li><li>Pointcut(切入点 ):所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。 invoke中的被增强方法</li><li>Advice(通知/增强):所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。 通知的类型:前置通知,后置通知,异常通知,最终通知,环绕通知。</li><li>Introduction(引介 ):引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。 </li><li>Target(目标对象 ):代理的目标对象。被代理对象</li><li>Weaving(织入 ): 是指把增强应用到目标对象来创建新的代理对象的过程。spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。 </li><li>Proxy(代理) :一个类被 AOP 织入增强后，就产生一个结果代理类。 代理对象</li><li>Aspect(切面 ):是切入点和通知(引介)的结合。</li></ul><h3 id="spring-中的-AOP-要明确的"><a href="#spring-中的-AOP-要明确的" class="headerlink" title="spring 中的 AOP 要明确的"></a>spring 中的 AOP 要明确的</h3><h4 id="开发阶段-我们做-的"><a href="#开发阶段-我们做-的" class="headerlink" title="开发阶段(我们做 的)"></a>开发阶段(我们做 的)</h4><ul><li>编写核心业务代码(开发主线):大部分程序员来做，要求熟悉业务需求。 </li><li>把公用代码抽取出来，制作成通知。(开发阶段最后再做):AOP 编程人员来做。 </li><li>在配置文件中，声明切入点与通知间的关系，即切面。:AOP 编程人员来做。</li></ul><h4 id="运行阶段-Spring-框架完成的"><a href="#运行阶段-Spring-框架完成的" class="headerlink" title="运行阶段(Spring 框架完成的)"></a>运行阶段(Spring 框架完成的)</h4><ul><li>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对 象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</li></ul><h4 id="代理的选择"><a href="#代理的选择" class="headerlink" title="代理的选择"></a>代理的选择</h4><ul><li>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</li></ul><h3 id="基于-XML-的-AOP-配置"><a href="#基于-XML-的-AOP-配置" class="headerlink" title="基于 XML 的 AOP 配置"></a>基于 XML 的 AOP 配置</h3><ul><li>配置spring的ioc把Service对象配置进来</li></ul><h4 id="spring中基于xml的aop配置"><a href="#spring中基于xml的aop配置" class="headerlink" title="spring中基于xml的aop配置"></a>spring中基于xml的aop配置</h4><ul><li>1.把通知bean也交给spring 来管理</li><li>2.使用aop：config标签来表明开始aop配置</li><li>3.使用aop:aspect标签表明开始配置切面<ul><li>id: 给切面一个唯一标志</li><li>ref: 指定通知类bean的ID</li></ul></li><li>4.在aop:aspect标签内部使用对应标签来配置通知类型(现在的例子是让pringLog方法在切入点方法执行前，所以是前置通知)<ul><li>aop:before：表示前置通知（在切入点方法执行之前） /aop:after-returning: 后置通知 （在切入点方法正常执行之后）/aop:after-throwing ：异常通知（在切入点方法异常执行后）/ aop:after：最后通知（相当于finally）</li><li>method：用于指定Logger类中的哪个方法是前置通知</li><li>pointcut：用于指定切入点表达式，其含义指对业务层中哪一个方法增强</li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/03/%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B.jpg" alt=""></p><h4 id="切入点表达式："><a href="#切入点表达式：" class="headerlink" title="切入点表达式："></a>切入点表达式：</h4><ul><li><p>关键字：execution（表达式）</p></li><li><p>表达式：访问修饰符 返回值 包名.包名.方法名（参数列表）</p></li><li><p>标准写法：execution(public void com.jwang.service.impl.AccountServiceImpl.saveAccount()</p></li><li><p>访问修饰符可以省略</p></li><li><p>返回值可以使用通配符，表示任意返回值</p></li><li><p>包名可以使用通配符，表示任意包。但有几级包，就需要几个*.</p></li><li><p>包名可以使用..表示当前包及其子包</p></li><li><p>类名和方法名都可以使用* 来实现通配</p></li><li><p>参数列表：可以直接写数据类型：基本数据类型直接写 int 引用类型写包名.类名的方法：java.lang.String 可以使用通配符表示任意类型(必须有参数) ..表示有无参数均可，有参数可以是任意类型</p></li><li><p>全通配写法：<code>* *..*.*(..)</code></p></li><li><p>实际写法：切到业务层实现类下的所有方法: * com.jwang.service.impl.<em>.</em>(..)</p></li><li><p>配置切入点表达式  id属性用于指定表达式的唯一标志，expression属性用于指定表达式内容</p></li></ul><blockquote><p>此标签写在aop:aspect标签内部只能当前切面可用</p></blockquote><blockquote><p>此标签写在外面，此时所有切面都可以使用，其必须在其之前（有顺序要求）</p></blockquote> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--配置aop --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">"ptl"</span> expression=<span class="string">"execution(* com.jwang.service.impl.*.*(..))"</span>/&gt;</span><br><span class="line">        &lt;!--配置切面 --&gt;</span><br><span class="line">        &lt;aop:aspect id=<span class="string">"logAdvice"</span> ref=<span class="string">"logger"</span>&gt;</span><br><span class="line">            &lt;!--配置通知类型，建立通知方法和切入点方法的关联 --&gt;</span><br><span class="line">            &lt;aop:before method="printLog" pointcut-ref="ptl"&gt;&lt;/aop:before&gt;</span><br><span class="line">            &lt;!--配置切入点表达式  id属性用于指定表达式的唯一标志，expression属性用于指定表达式内容--&gt;</span><br><span class="line">&lt;!--            &lt;aop:pointcut id=<span class="string">"ptl"</span> expression=<span class="string">"execution(* com.jwang.service.impl.*.*(..))"</span>/&gt;--&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h4 id="前置通知xml配置例"><a href="#前置通知xml配置例" class="headerlink" title="前置通知xml配置例"></a>前置通知xml配置例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置spring的ioc把Service对象配置进来--&gt;</span><br><span class="line">    &lt;bean id="service" class="com.jwang.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Logger --&gt;</span><br><span class="line">    &lt;bean id="logger" class="com.jwang.utils.Logger"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置aop --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--配置切面 --&gt;</span><br><span class="line">        &lt;aop:aspect id=<span class="string">"logAdvice"</span> ref=<span class="string">"logger"</span>&gt;</span><br><span class="line">            &lt;!--配置通知类型，建立通知方法和切入点方法的关联 在业务层service的saveAccount()方法前执行 printLog--&gt;</span><br><span class="line">            &lt;aop:before method=<span class="string">"printLog"</span> pointcut=<span class="string">"execution(</span></span><br><span class="line">            public void com.jwang.service.impl.AccountServiceImpl.saveAccount())"&gt;&lt;/aop:before&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="配置环绕通知"><a href="#配置环绕通知" class="headerlink" title="配置环绕通知"></a>配置环绕通知</h4><ul><li>配置环绕通知后，切入点方法没有执行，通知方法执行的原因：动态代理中的环绕通知有明确的切入点方法调用，而我们的代码中没有</li><li>解决：Spring框架为我们提供了一个接口，PreceedingJoinPoint。该接口的方法proceed(）此方法相当于明确调用切入点方法。该接口作为环绕通知的方法参数，在程序执行时，Spring框架会为我们提供该接口的实现类供我们使用</li><li>Spring的环绕通知：是Spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bean.xml添加</span><br><span class="line">&lt;aop:around method=<span class="string">"aroudPrintLog"</span> pointcut-ref=<span class="string">"ptl"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;环绕通知方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroudPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();<span class="comment">//得到方法执行时需要的参数</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--前置"</span>);</span><br><span class="line"></span><br><span class="line">        rtValue = pjp.proceed(args); <span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--后置"</span>);</span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--异常"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--最终"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/03/%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B.jpg" alt=""></p><h3 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h3><ul><li>Spring的其执行顺序有一定问题，但环绕通知没有问题（是自己写的）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!-- 配置spring创建容器时要扫描的包--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.jwang"</span>/&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"> </span><br><span class="line"> &gt;&gt;&gt;impl </span><br><span class="line">    <span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示当前类是切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于打印日志，计划让其在切入点方法执行前执行（也就是业务层方法执行后）</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.jwang.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"tt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的printLog开始记录日志"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring中的JdbcTemplate"><a href="#Spring中的JdbcTemplate" class="headerlink" title="Spring中的JdbcTemplate"></a>Spring中的JdbcTemplate</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt=""></p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li>它是 spring 框架中提供的一个对象，是对原始 Jdbc API 对象的简单封装。spring 框架为我们提供了很多 的操作模板类。</li><li>操作关系型数据的: JdbcTemplate，HibernateTemplate </li><li>操作nosql 数据库的: RedisTemplate</li><li>操作消息队列的: JmsTemplate</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/jdbctemplate%E5%92%8Cqueryrunner%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt=""></p><h3 id="JdbcTemplate-对象的创建"><a href="#JdbcTemplate-对象的创建" class="headerlink" title="JdbcTemplate 对象的创建"></a>JdbcTemplate 对象的创建</h3><ul><li>使用前提：包在：spring-jdbc-5.0.2.RELEASE.jar 中，我们在导包的时候，除了要导入这个 jar 包<br>外，还需要导入一个 spring-tx-5.0.2.RELEASE.jar(它是和事务相关的)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/easy"</span>);</span><br><span class="line">        ds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        ds.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        jt.setDataSource(ds);</span><br><span class="line">        jt.execute(<span class="string">"insert into account(name, money)values('ccc', 1000)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用bean注解的方式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:lang=<span class="string">"http://www.springframework.org/schema/lang"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/lang</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/lang/spring-lang.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"jdbcTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/easy"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        JdbcTemplate jt = ac.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        jt.execute(<span class="string">"insert into account(name, money)values('eee', 1000)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JdbcTemplate 的crud操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        JdbcTemplate jt = ac.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//crud操作</span></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        jt.update(<span class="string">"insert into account(name, money)values(?,?)"</span>, <span class="string">"eed"</span>,<span class="number">3333f</span>);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        jt.update(<span class="string">"update account set name = ?, money=? where id = ?"</span>, <span class="string">"eee"</span>,<span class="number">122f</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        jt.update(<span class="string">"delete from account where id = ?"</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ?"</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), 999<span class="title">f</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Integer count = jt.queryForObject(<span class="string">"select count(*) from account where money &gt;= ?"</span>, Integer<span class="class">.<span class="keyword">class</span>, 1000<span class="title">f</span>)</span>;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring中的事务控制的API"><a href="#spring中的事务控制的API" class="headerlink" title="spring中的事务控制的API"></a>spring中的事务控制的API</h3><ul><li>第一:JavaEE 体系进行分层开发，事务处理位于业务层，Spring 提供了分层设计业务层的事务处理解决方 案。</li><li>第二:spring 框架为我们提供了一组事务控制的接口。具体在后面的第二小节介绍。这组接口是在 spring-tx-5.0.2.RELEASE.jar 中。</li><li>第三:spring 的事务控制都是基于 AOP 的，它既可以使用编程的方式实现，也可以使用配置的方式实现。我 们学习的重点是使用配置的方式实现。</li></ul><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><ul><li>此接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法 在开发中都是使用它的实现类<ul><li>org.springframework.jdbc.datasource.DataSourceTransactionManager 使用 Spring JDBC 或 iBatis 进行持久化数据时使用</li><li>org.springframework.orm.hibernate5.HibernateTransactionManager 使用 Hibernate 版本进行持久化数据时使用</li></ul></li></ul><h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><h2 id="基于-XML-的声明式事务控制-配置方式"><a href="#基于-XML-的声明式事务控制-配置方式" class="headerlink" title="基于 XML 的声明式事务控制(配置方式)"></a>基于 XML 的声明式事务控制(配置方式)</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul><li>第一步:拷贝必要的 jar 包到工程的 lib 目录</li><li>第二步:创建 spring 的配置文件并导入约束</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">此处需要导入 aop 和 tx 两个名称空间&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> </span><br><span class="line">xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span>xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop </span></span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步:准备数据库表和实体类</li><li>第四步:编写业务层接口和实现类</li><li>第五步:编写 Dao 接口和实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,</span><br><span class="line">                <span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,</span><br><span class="line">                <span class="keyword">new</span> AccountRowMapper(),name); </span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>); &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ? "</span>,</span><br><span class="line">                account.getMoney(),account.getId()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的封装类 RowMapper 的实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(); </span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>)); </span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>)); </span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>)); </span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第六步:在配置文件中配置业务层和持久层</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 配置 service --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"accountService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span><br><span class="line">    &lt;property name="accountDao" ref="accountDao"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置 dao --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"accountDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span><br><span class="line">    &lt;!-- 注入 dataSource --&gt;</span><br><span class="line">    &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置数据源 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">&lt;property name="driverClassName" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt; &lt;property name="url" value="jdbc:mysql:///spring_day04"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="username" value="root"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="password" value="1234"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="基于xml的配置事务步骤"><a href="#基于xml的配置事务步骤" class="headerlink" title="基于xml的配置事务步骤"></a>基于xml的配置事务步骤</h4><ul><li>第一步:配置事务管理器</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置一个事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">    &lt;!-- 注入 DataSource --&gt;</span><br><span class="line">    &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步:配置事务的通知引用事务管理器</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务的配置 --&gt;&lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步:配置事务的属性</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在 tx:advice 标签内部 配置事务的属性 --&gt; </span><br><span class="line"></span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;!-- 指定方法名称:是业务核心方法read-only:是否是只读事务。默认 <span class="keyword">false</span>，不只读。</span><br><span class="line">isolation:指定事务的隔离级别。默认值是使用数据库的默认隔离级别。propagation:指定事务的传播行为。</span><br><span class="line">timeout:指定超时时间。默认值为:-<span class="number">1</span>。永不超时。</span><br><span class="line">rollback-<span class="keyword">for</span>:用于指定一 个异常，当 执行产生该 异常时，事 务回滚。</span><br><span class="line">产 生其他异常 ，事务不回 滚。没有默认值，任何异常都回滚。 </span><br><span class="line">no-rollback-<span class="keyword">for</span>:用于指定一个异常，当产生该异常时，事务不回滚，</span><br><span class="line">产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"*"</span> read-only=<span class="string">"false"</span> propagation=<span class="string">"REQUIRED"</span>/&gt; </span><br><span class="line">&lt;tx:method name="find*" read-only="true" propagation="SUPPORTS"/&gt;&lt;/tx:attributes&gt;</span><br></pre></td></tr></table></figure><ul><li>第四步:配置 AOP 切入点表达式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置 aop --&gt;&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 配置切入点表达式 --&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span> id=<span class="string">"pt1"</span>/&gt; </span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><ul><li>第五步:配置切入点表达式和事务通知的对应关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 aop:config 标签内部:建立事务的通知和切入点表达式的关系 --&gt; </span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"pt1"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="基于注解的事务配置"><a href="#基于注解的事务配置" class="headerlink" title="基于注解的事务配置"></a>基于注解的事务配置</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/%E6%B3%A8%E8%A7%A3AOP%E6%8E%A7%E5%88%B6%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png" alt=""></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul><li>第一步:拷贝必备的 jar 包到工程的 lib 目录</li><li>第二步:创建 spring 的配置文件导入约束并配置扫描的包</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> </span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> </span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/tx </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt; </span><br><span class="line">    &lt;!-- 配置 spring 创建容器时要扫描的包 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.jwang"&gt;&lt;/context:component-scan&gt; </span><br><span class="line">    &lt;!-- 配置 JdbcTemplate--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"jdbcTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/easy"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步:创建数据库表和实体类(与xml配置相同)</li><li>第四步:创建业务层接口和实现类并使用注解让 spring 管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的业务层实现类 */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao; </span><br><span class="line"><span class="comment">//其余代码和基于 XML 的配置相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第五步:创建 Dao 接口和实现类并使用注解让 spring 管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层实现类 */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123; </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">//其余代码和基于 XML 的配置相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务纯注解配置"><a href="#事务纯注解配置" class="headerlink" title="事务纯注解配置"></a>事务纯注解配置</h3><ul><li>第一步:配置事务管理器并注入数据源</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id="transactionManager"class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;&lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; </span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步:在业务层使用@Transactional 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>) </span><br><span class="line"><span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>,propagation=Propagation.SUPPORTS) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly=<span class="keyword">false</span>,propagation=Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName); </span><br><span class="line">        <span class="comment">//2.修改两个账户的金额 source.setMoney(source.getMoney()-money);//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱 </span></span><br><span class="line">        <span class="comment">// 3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source); <span class="comment">//int i=1/0; accountDao.updateAccount(target); </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    该注解的属性和 xml 中的属性含义一致。</span><br><span class="line">        该注解可以出现在接口上，类上和方法上。 </span><br><span class="line">        出现接口上，表示该接口的所有实现类都有事务支持。</span><br><span class="line">        出现在类上，表示类中所有方法有事务支持 出现在方法上，表示方法有事务支持。 </span><br><span class="line">        以上三个位置的优先级:方法&gt;类&gt;接口</span><br></pre></td></tr></table></figure><ul><li>第三步:在配置文件中开启 spring 对注解事务的支持</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 开启 spring 对注解事务的支持 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>不使用 xml 的配置方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTxConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">//里面配置数据源，配置 JdbcTemplate,配置事务管理器。详细内容在下面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置jdbc-config"><a href="#配置jdbc-config" class="headerlink" title="配置jdbc config"></a>配置jdbc config</h4><ul><li>SpringConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring的配置类，相当于bean.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.itheima"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>,<span class="title">TransactionConfig</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line">@PropertySource("jdbcConfig.properties")</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JdbcConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和连接数据库相关的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JdbcTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TransactionConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和事务相关的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建事务管理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术07--系统架构和http客户端工具</title>
      <link href="/2019/05/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF07--%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%92%8Chttp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/05/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF07--%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%92%8Chttp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="系统架构演变"><a href="#系统架构演变" class="headerlink" title="系统架构演变"></a>系统架构演变</h1><p>随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？</p><p>其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。</p><h2 id="集中式架构"><a href="#集中式架构" class="headerlink" title="集中式架构"></a>集中式架构</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是影响项目开发的关键。</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525529091749.png" alt=""></p><p>存在的问题：</p><ul><li>代码耦合，开发维护困难</li><li>无法针对不同模块进行针对性优化</li><li>无法水平扩展</li><li>单点容错率低，并发能力差</li></ul><h2 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h2><p>当访问量逐渐增大，单一应用无法满足需求，此时为了应对更高的并发和业务需求，我们根据业务功能对系统进行拆分：</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525529671801.png" alt=""></p><p>优点：</p><ul><li>系统拆分实现了流量分担，解决了并发问题</li><li>可以针对不同模块进行优化</li><li>方便水平扩展，负载均衡，容错率提高</li></ul><p>缺点：</p><ul><li>系统间相互独立，会有很多重复开发工作，影响开发效率</li></ul><h2 id="分布式服务"><a href="#分布式服务" class="headerlink" title="分布式服务"></a>分布式服务</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式调用是关键。</p><p> <img src="assets/1525530657919.png" alt="1525530657919"></p><p>优点：</p><ul><li>将基础服务进行了抽取，系统间相互调用，提高了代码复用和开发效率</li></ul><p>缺点：</p><ul><li>系统间耦合度变高，调用关系错综复杂，难以维护</li></ul><h2 id="服务治理（SOA）"><a href="#服务治理（SOA）" class="headerlink" title="服务治理（SOA）"></a>服务治理（SOA）</h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525530804753.png" alt=""></p><p>以前出现了什么问题？</p><ul><li>服务越来越多，需要管理每个服务的地址</li><li>调用关系错综复杂，难以理清依赖关系</li><li>服务过多，服务状态难以管理，无法根据服务情况动态管理</li></ul><p>服务治理要做什么？</p><ul><li>服务注册中心，实现服务自动注册和发现，无需人为记录服务地址</li><li>服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系</li><li>动态监控服务状态监控报告，人为控制服务状态</li></ul><p>缺点：</p><ul><li>服务间会有依赖关系，一旦某个环节出错会影响较大</li><li>服务关系复杂，运维、测试部署困难，不符合DevOps思想</li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>前面说的SOA，英文翻译过来是面向服务。微服务，似乎也是服务，都是对系统进行拆分。因此两者非常容易混淆，但其实缺有一些差别：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525532344817.png" alt=""></p><p>微服务的特点：</p><ul><li>单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责</li><li>微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。</li><li>面向服务：面向服务是说每个服务都要对外暴露服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可。</li><li>自治：自治是说服务间互相独立，互不干扰<ul><li>团队独立：每个服务都是一个独立的开发团队，人数不能过多。</li><li>技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉</li><li>前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口</li><li>数据库分离：每个服务都使用自己的数据源</li><li>部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护</li></ul></li></ul><p>微服务结构图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1526860071166.png" alt=""></p><h1 id="远程调用方式"><a href="#远程调用方式" class="headerlink" title="远程调用方式"></a>远程调用方式</h1><p>无论是微服务还是SOA，都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下几种：</p><ul><li><p>RPC：Remote Produce Call远程过程调用，类似的还有RMI。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型</p></li><li><p>Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。</p><p>现在热门的Rest风格，就可以通过http协议来实现。</p></li></ul><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>RPC，即 Remote Procedure Call（远程过程调用），是一个计算机通信协议。 该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。说得通俗一点就是：A计算机提供一个服务，B计算机可以像调用本地服务那样调用A计算机的服务。</p><p>通过上面的概念，我们可以知道，实现RPC主要是做到两点： </p><ul><li>实现远程调用其他计算机的服务<ul><li>要实现远程调用，肯定是通过网络传输数据。A程序提供服务，B程序通过网络将请求参数传递给A，A本地执行后得到结果，再将结果返回给B程序。这里需要关注的有两点：<ul><li>1）采用何种网络通讯协议？<ul><li>现在比较流行的RPC框架，都会采用TCP作为底层传输协议</li></ul></li><li>2）数据传输的格式怎样？<ul><li>两个程序进行通讯，必须约定好数据传输格式。就好比两个人聊天，要用同一种语言，否则无法沟通。所以，我们必须定义好请求和响应的格式。另外，数据在网路中传输需要进行序列化，所以还需要约定统一的序列化的方式。</li></ul></li></ul></li></ul></li><li>像调用本地服务一样调用远程服务 <ul><li>如果仅仅是远程调用，还不算是RPC，因为RPC强调的是过程调用，调用的过程对用户而言是应该是透明的，用户不应该关心调用的细节，可以像调用本地服务一样调用远程服务。所以RPC一定要对调用的过程进行封装</li></ul></li></ul><p>RPC调用流程图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525568965976.png" alt=""></p><p>想要了解详细的RPC实现，给大家推荐一篇文章：<a href="https://legacy.gitbook.com/book/huge0612/tour-of-rpc/details" target="_blank" rel="noopener">自己动手实现RPC</a></p><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p>Http协议：超文本传输协议，是一种应用层协议。规定了网络传输的请求格式、响应格式、资源定位和操作的方式等。但是底层采用什么网络传输协议，并没有规定，不过现在都是采用TCP协议作为底层传输协议。说到这里，大家可能觉得，Http与RPC的远程调用非常像，都是按照某种规定好的数据格式进行网络通信，有请求，有响应。没错，在这点来看，两者非常相似，但是还是有一些细微差别。</p><ul><li>RPC并没有规定数据传输格式，这个格式可以任意指定，不同的RPC协议，数据格式不一定相同。</li><li>Http中还定义了资源定位的路径，RPC中并不需要</li><li>最重要的一点：RPC需要满足像调用本地服务一样调用远程服务，也就是对调用过程在API层面进行封装。Http协议没有这样的要求，因此请求、响应等细节需要我们自己去实现。<ul><li>优点：RPC方式更加透明，对用户更方便。Http方式更灵活，没有规定API和语言，跨语言、跨平台</li><li>缺点：RPC方式需要在API层面进行封装，限制了开发的语言环境。</li></ul></li></ul><p>例如我们通过浏览器访问网站，就是通过Http协议。只不过浏览器把请求封装，发起请求以及接收响应，解析响应的事情都帮我们做了。如果是不通过浏览器，那么这些事情都需要自己去完成。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525569352313.png" alt=""></p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>既然两种方式都可以实现远程调用，我们该如何选择呢？</p><ul><li>速度来看，RPC要比http更快，虽然底层都是TCP，但是http协议的信息往往比较臃肿，不过可以采用gzip压缩。</li><li>难度来看，RPC实现较为复杂，http相对比较简单</li><li>灵活性来看，http更胜一筹，因为它不关心实现细节，跨平台、跨语言。</li></ul><p>因此，两者都有不同的使用场景：</p><ul><li>如果对效率要求更高，并且开发过程使用统一的技术栈，那么用RPC还是不错的。</li><li>如果需要更加灵活，跨语言、跨平台，显然http更合适</li></ul><p>那么我们该怎么选择呢？</p><p>微服务，更加强调的是独立、自治、灵活。而RPC方式的限制较多，因此微服务框架中，一般都会采用基于Http的Rest风格服务。</p><h1 id="Http客户端工具"><a href="#Http客户端工具" class="headerlink" title="Http客户端工具"></a>Http客户端工具</h1><p>既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很多的http客户端工具，能够帮助我们做这些事情，例如：</p><ul><li>HttpClient</li><li>OKHttp</li><li>URLConnection</li></ul><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>HttpClient是Apache公司的产品，是Http Components下的一个组件。</p><p><a href="http://hc.apache.org/index.html" target="_blank" rel="noopener">官网地址：http://hc.apache.org/index.html</a></p><p>特点：</p><ul><li>基于标准、纯净的Java语言。实现了Http1.0和Http1.1</li><li>以可扩展的面向对象的结构实现了Http全部的方法（GET, POST, PUT, DELETE, HEAD, OPTIONS, and TRACE）</li><li>支持HTTPS协议。</li><li>通过Http代理建立透明的连接。</li><li>自动处理Set-Cookie中的Cookie。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我们导入课前资料提供的demo工程：《http-demo》</p><p>发起get请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpGet request = <span class="keyword">new</span> HttpGet(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    String response = <span class="keyword">this</span>.httpClient.execute(request, <span class="keyword">new</span> BasicResponseHandler());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发起Post请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpPost request = <span class="keyword">new</span> HttpPost(<span class="string">"http://www.oschina.net/"</span>);</span><br><span class="line">    request.setHeader(<span class="string">"User-Agent"</span>,</span><br><span class="line">                      <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>);</span><br><span class="line">    String response = <span class="keyword">this</span>.httpClient.execute(request, <span class="keyword">new</span> BasicResponseHandler());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试访问编写的接口：<a href="http://localhost/hello" target="_blank" rel="noopener">http://localhost/hello</a></p><p>这个接口返回一个User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetPojo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpGet request = <span class="keyword">new</span> HttpGet(<span class="string">"http://localhost/hello"</span>);</span><br><span class="line">    String response = <span class="keyword">this</span>.httpClient.execute(request, <span class="keyword">new</span> BasicResponseHandler());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们实际得到的是一个json字符串：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"userName"</span>: <span class="string">"liuyan"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"柳岩"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1995-08-07T16:00:00.000+0000"</span>,</span><br><span class="line">    <span class="attr">"created"</span>: <span class="string">"2014-09-20T03:41:15.000+0000"</span>,</span><br><span class="line">    <span class="attr">"updated"</span>: <span class="string">"2014-09-20T03:41:15.000+0000"</span>,</span><br><span class="line">    <span class="attr">"note"</span>: <span class="string">"柳岩同学在传智播客学表演"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要得到对象，我们还需要手动进行Json反序列化，这一点比较麻烦。</p><h3 id="Json转换工具"><a href="#Json转换工具" class="headerlink" title="Json转换工具"></a>Json转换工具</h3><p>HttpClient请求数据后是json字符串，需要我们自己把Json字符串反序列化为对象，我们会使用JacksonJson工具来实现。</p><p><code>JacksonJson</code>是SpringMVC内置的json处理工具，其中有一个<code>ObjectMapper</code>类，可以方便的实现对json的处理：</p><h4 id="对象转json"><a href="#对象转json" class="headerlink" title="对象转json"></a>对象转json</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">8L</span>);</span><br><span class="line">        user.setAge(<span class="number">21</span>);</span><br><span class="line">        user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        String json = mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(<span class="string">"json = "</span> + json);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1526877496885.png" alt=""></p><h4 id="json转普通对象"><a href="#json转普通对象" class="headerlink" title="json转普通对象"></a>json转普通对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">8L</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    String json = mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span></span><br><span class="line">    User result = mapper.readValue(json, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="json转集合"><a href="#json转集合" class="headerlink" title="json转集合"></a>json转集合</h4><p>json转集合比较麻烦，因为你无法同时把集合的class和元素的class同时传递到一个参数。</p><p>因此Jackson做了一个类型工厂，用来解决这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">8L</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化,得到对象集合的json字符串</span></span><br><span class="line">    String json = mapper.writeValueAsString(Arrays.asList(user, user));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span></span><br><span class="line">    List&lt;User&gt; users = mapper.readValue(json, mapper.getTypeFactory().constructCollectionType(List<span class="class">.<span class="keyword">class</span>, <span class="title">User</span>.<span class="title">class</span>))</span>;</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(<span class="string">"u = "</span> + u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><a href="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1526877647406.png" target="_blank" rel="noopener">https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1526877647406.png</a></p><h4 id="json转任意复杂类型"><a href="#json转任意复杂类型" class="headerlink" title="json转任意复杂类型"></a>json转任意复杂类型</h4><p>当对象泛型关系复杂时，类型工厂也不好使了。这个时候Jackson提供了TypeReference来接收类型泛型，然后底层通过反射来获取泛型上的具体类型。实现数据转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json处理工具</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">8L</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">    user.setUserName(<span class="string">"liuyan"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化,得到对象集合的json字符串</span></span><br><span class="line">    String json = mapper.writeValueAsString(Arrays.asList(user, user));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span></span><br><span class="line">    List&lt;User&gt; users = mapper.readValue(json, <span class="keyword">new</span> TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;);</span><br><span class="line">    <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">        System.out.println(<span class="string">"u = "</span> + u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1526877988488.png" alt=""></p><h2 id="Spring的RestTemplate"><a href="#Spring的RestTemplate" class="headerlink" title="Spring的RestTemplate"></a>Spring的RestTemplate</h2><p>Spring提供了一个RestTemplate模板工具类，对基于Http的客户端进行了封装，并且实现了对象与json的序列化和反序列化，非常方便。RestTemplate并没有限定Http的客户端类型，而是进行了抽象，目前常用的3种都有支持：</p><ul><li>HttpClient</li><li>OkHttp</li><li>JDK原生的URLConnection（默认的）</li></ul><p>首先在项目中注册一个<code>RestTemplate</code>对象，可以在启动类位置注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(HttpDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RestTemplate，底层是走JDK的URLConnection方式。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中直接<code>@Autowired</code>注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= HttpDemoApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HttpDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">httpGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost/hello"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过RestTemplate的getForObject()方法，传递url地址及实体类的字节码，RestTemplate会自动发起请求，接收响应，并且帮我们对响应结果进行反序列化。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springcloud/httpclient/1525573702492.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> 系统架构 </tag>
            
            <tag> http客户端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术06--FastDFS</title>
      <link href="/2019/05/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF06--FastDFS/"/>
      <url>/2019/05/16/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF06--FastDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="前置安装"><a href="#前置安装" class="headerlink" title="前置安装"></a>前置安装</h1><h2 id="Centos下安装FastDFS"><a href="#Centos下安装FastDFS" class="headerlink" title="Centos下安装FastDFS"></a>Centos下安装FastDFS</h2><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>将下面所需文件上传到linux下的<code>/home/leyou/fdfs</code>目录:</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/fastdfs/1592826966159.jpg" alt=""></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>FastDFS运行需要一些依赖，在课前资料提供的虚拟中已经安装好了这些依赖，如果大家想要从头学习，可以按下面方式安装：</p><h4 id="安装GCC依赖"><a href="#安装GCC依赖" class="headerlink" title="安装GCC依赖"></a>安装GCC依赖</h4><p>GCC用来对C语言代码进行编译运行，使用yum命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install gcc</span><br></pre></td></tr></table></figure><h4 id="安装unzip工具"><a href="#安装unzip工具" class="headerlink" title="安装unzip工具"></a>安装unzip工具</h4><p>unzip工具可以帮我们对压缩包进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y unzip zip</span><br></pre></td></tr></table></figure><h4 id="安装libevent"><a href="#安装libevent" class="headerlink" title="安装libevent"></a>安装libevent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install libevent</span><br></pre></td></tr></table></figure><h4 id="安装Nginx所需依赖"><a href="#安装Nginx所需依赖" class="headerlink" title="安装Nginx所需依赖"></a>安装Nginx所需依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="安装libfastcommon-master"><a href="#安装libfastcommon-master" class="headerlink" title="安装libfastcommon-master"></a>安装libfastcommon-master</h4><p>这个没有yum包，只能通过编译安装：</p><ul><li><p>解压刚刚上传的<code>libfastcommon-master.zip</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf libfastcommon-master.zip</span><br></pre></td></tr></table></figure></li><li><p>进入解压完成的目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd libfastcommon-master</span><br></pre></td></tr></table></figure></li><li><p>编译并且安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./make.sh </span><br><span class="line">sudo ./makesh install</span><br></pre></td></tr></table></figure></li></ul><p>到这里为止，所有依赖都已经安装完毕，接下来我们安装FastDFS：</p><h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>这里我们也采用编译安装，步骤与刚才的编译安装方式一样：</p><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf FastDFS_v5.08.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd FastDFS</span><br></pre></td></tr></table></figure></li><li><p>编译并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./make.sh </span><br><span class="line">sudo ./make.sh install</span><br></pre></td></tr></table></figure></li><li><p>校验安装结果</p></li></ul><p>1）安装完成，我们应该能在<code>/etc/init.d/</code>目录，通过命令<code>ll /etc/init.d/ | grep fdfs</code>看到FastDFS提供的启动脚本：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/fastdfs/1524237469238%281%29.png" alt=""></p><p>其中：</p><ul><li><code>fdfs_trackerd</code> 是tracker启动脚本</li><li><code>fdfs_storaged</code> 是storage启动脚本</li></ul><p>2）我们可以在 <code>/etc/fdfs</code>目录，通过命令查看到以下配置文件模板：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/fastdfs/1524237531578.png" alt=""></p><p>其中：</p><ul><li><code>tarcker.conf.sample</code> 是tracker的配置文件模板</li><li><code>storage.conf.sample</code> 是storage的配置文件模板</li><li><code>client.conf.sample</code> 是客户端的配置文件模板</li></ul><h4 id="启动tracker"><a href="#启动tracker" class="headerlink" title="启动tracker"></a>启动tracker</h4><p>FastDFS的tracker和storage在刚刚的安装过程中，都已经被安装了，因此我们安装这两种角色的方式是一样的。不同的是，两种需要不同的配置文件。</p><p>我们要启动tracker，就修改刚刚看到的<code>tarcker.conf</code>，并且启动<code>fdfs_trackerd</code>脚本即可。</p><ul><li>编辑tracker配置</li></ul><p>首先我们将模板文件进行赋值和重命名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp tracker.conf.sample tracker.conf</span><br><span class="line">sudo vim tracker.conf</span><br></pre></td></tr></table></figure><p>打开<code>tracker.conf</code>，修改<code>base_path</code>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_path=/leyou/fdfs/tracker # tracker的数据和日志存放目录</span><br></pre></td></tr></table></figure><ul><li>创建目录</li></ul><p>刚刚配置的目录可能不存在，我们创建出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /leyou/fdfs/tracker</span><br></pre></td></tr></table></figure><ul><li><p>启动tracker</p><p>我们可以使用 <code>sh /etc/init.d/fdfs_trackerd</code> 启动，不过安装过程中，fdfs已经被设置为系统服务，我们可以采用熟悉的服务启动方式：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service fdfs_trackerd start # 启动fdfs_trackerd服务，停止用stop</span><br></pre></td></tr></table></figure><p>另外，我们可以通过以下命令，设置tracker开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig fdfs_trackerd on</span><br></pre></td></tr></table></figure><h4 id="启动storage"><a href="#启动storage" class="headerlink" title="启动storage"></a>启动storage</h4><p>我们要启动tracker，就修改刚刚看到的<code>tarcker.conf</code>，并且启动<code>fdfs_trackerd</code>脚本即可。</p><ul><li>编辑storage配置</li></ul><p>首先我们将模板文件进行赋值和重命名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp storage.conf.sample storage.conf</span><br><span class="line">sudo vim storage.conf</span><br></pre></td></tr></table></figure><p>打开<code>storage.conf</code>，修改<code>base_path</code>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/leyou/fdfs/storage # storage的数据和日志存放目录</span><br><span class="line">store_path0=/leyou/fdfs/storage # storage的上传文件存放路径</span><br><span class="line">tracker_server=192.168.56.101:22122 # tracker的地址</span><br></pre></td></tr></table></figure><ul><li>创建目录</li></ul><p>刚刚配置的目录可能不存在，我们创建出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /leyou/fdfs/storage</span><br></pre></td></tr></table></figure><ul><li><p>启动storage</p><p>我们可以使用 <code>sh /etc/init.d/fdfs_storaged</code> 启动，同样我们可以用服务启动方式：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service fdfs_storaged start  # 启动fdfs_storaged服务，停止用stop</span><br></pre></td></tr></table></figure><p>另外，我们可以通过以下命令，设置tracker开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chkconfig fdfs_storaged on</span><br></pre></td></tr></table></figure><p>最后，通过<code>ps -ef | grep fdfs</code> 查看进程：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/fastdfs/1524237414200.png" alt=""></p><h3 id="安装Nginx及FastDFS模块"><a href="#安装Nginx及FastDFS模块" class="headerlink" title="安装Nginx及FastDFS模块"></a>安装Nginx及FastDFS模块</h3><h4 id="FastDFS的Nginx模块"><a href="#FastDFS的Nginx模块" class="headerlink" title="FastDFS的Nginx模块"></a>FastDFS的Nginx模块</h4><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><p>配置config文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入配置目录</span></span><br><span class="line">cd /home/leyou/fdfs/fastdfs-nginx-module/src/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line">vim config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行下面命令（将配置中的/usr/<span class="built_in">local</span>改为/usr）：</span></span><br><span class="line">:%s+/usr/local/+/usr/+g</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>配置mod_fastdfs.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将src目录下的mod_fastdfs.conf复制到 /etc/fdfs目录：</span></span><br><span class="line">sudo cp mod_fastdfs.conf /etc/fdfs/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑该文件</span></span><br><span class="line">sudo vim /etc/fdfs/mod_fastdfs.cof</span><br></pre></td></tr></table></figure></li><li><p>修改一下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=10                  # 客户端访问文件连接超时时长（单位：秒）</span><br><span class="line">tracker_server=192.168.56.101:22122  # tracker服务IP和端口</span><br><span class="line">url_have_group_name=true            # 访问链接前缀加上组名</span><br><span class="line">store_path0=/leyou/fdfs/storage        # 文件存储路径</span><br></pre></td></tr></table></figure></li><li><p>复制 FastDFS的部分配置文件到/etc/fdfs目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/leyou/fdfs/FastDFS/conf/</span><br><span class="line">cp http.conf mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.10.0.tar.gz</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/home/leyou/fdfs/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>配置nginx整合fastdfs-module模块</p><p>我们需要修改nginx配置文件，在/opt/nginx/config/nginx.conf文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim  /opt/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>将文件中，原来的<code>server 80{ ...}</code> 部分代码替换为如下代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  image.taotao.com;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">    <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx # 启动</span><br><span class="line">nginx -s stop # 停止</span><br><span class="line">nginx -s reload # 重新加载配置</span><br></pre></td></tr></table></figure></li><li><p>设置nginx开机启动</p><p>创建一个开机启动的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/bin/nginx"</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/opt/nginx/conf/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">"configure arguments:.*--user="</span> | sed <span class="string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">"`grep <span class="variable">$user</span> /etc/passwd`"</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">'configure arguments:'</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">'.*-temp-path'</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">"="</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$value</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo "creating" $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></li><li><p>修改文件权限，并加入服务列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改权限</span></span><br><span class="line">chmod 777 /etc/init.d/nginx </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加到服务列表</span></span><br><span class="line">chkconfig --add /etc/init.d/nginx</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure></li><li><p>模拟测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_upload_file client.conf /tmp/<span class="number">02</span>-jpa.png 模拟测试文件存储</span><br></pre></td></tr></table></figure><h2 id="Ubuntu安装FastDFS"><a href="#Ubuntu安装FastDFS" class="headerlink" title="Ubuntu安装FastDFS"></a>Ubuntu安装FastDFS</h2><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><h4 id="安装libevent-1"><a href="#安装libevent-1" class="headerlink" title="安装libevent"></a>安装libevent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">防火墙</span><br><span class="line">ufw enable</span><br><span class="line">ufw disable</span><br><span class="line"></span><br><span class="line">自启动管理：</span><br><span class="line">apt-get install sysv-rc-conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apt-get install make</span><br><span class="line"></span><br><span class="line">apt-get install unzip</span><br><span class="line"></span><br><span class="line">apt-get install gcc</span><br><span class="line"></span><br><span class="line">apt-get install libevent-dev</span><br></pre></td></tr></table></figure><h4 id="安装libfastcommon"><a href="#安装libfastcommon" class="headerlink" title="安装libfastcommon"></a>安装libfastcommon</h4><p>通过git下载即可： <a href="http://blog.csdn.net/u014230881/article/details/78537708" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon.git</a> </p><p>apt install unzip</p><p>apt install gcc</p><h4 id="nginx依赖"><a href="#nginx依赖" class="headerlink" title="nginx依赖"></a>nginx依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装gcc g++的依赖库</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libtool</span><br><span class="line"></span><br><span class="line">安装pcre依赖库（http://www.pcre.org/）</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line"></span><br><span class="line">安装zlib依赖库（http://www.zlib.net）</span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line"></span><br><span class="line">安装SSL依赖库（16.04默认已经安装了）</span><br><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure><h1 id="实现图片上传-普通"><a href="#实现图片上传-普通" class="headerlink" title="实现图片上传(普通)"></a>实现图片上传(普通)</h1><p>刚才的新增实现中，我们并没有上传图片，接下来我们一起完成图片上传逻辑。</p><p>文件的上传并不只是在品牌管理中有需求，以后的其它服务也可能需要，因此我们创建一个独立的微服务，专门处理各种上传。</p><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><h3 id="创建module并引入依赖"><a href="#创建module并引入依赖" class="headerlink" title="创建module并引入依赖"></a>创建module并引入依赖</h3><p>我们需要EurekaClient和web依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">upload-service</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span> <span class="comment"># 限制文件上传的大小</span></span><br><span class="line"><span class="comment"># Eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们应该添加了限制文件大小的配置</p><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUploadService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUploadService<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526192931088.png" alt=""></p><h2 id="编写上传功能"><a href="#编写上传功能" class="headerlink" title="编写上传功能"></a>编写上传功能</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>编写controller需要知道4个内容：</p><ul><li>请求方式：上传肯定是POST</li><li>请求路径：/upload/image</li><li>请求参数：文件，参数名是file，SpringMVC会封装为一个接口：MultipleFile</li><li>返回结果：上传成功后得到的文件的url路径</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"image"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadImage</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">        String url = <span class="keyword">this</span>.uploadService.upload(file);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(url)) &#123;</span><br><span class="line">            <span class="comment">// url为空，证明上传失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回200，并且携带url路径</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>在上传文件过程中，我们需要对上传的内容进行校验：</p><ol><li>校验文件大小</li><li>校验文件的媒体类型</li><li>校验文件的内容</li></ol><p>文件大小在Spring的配置文件中设置，因此已经会被校验，我们不用管。</p><p>具体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UploadController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持的文件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; suffixes = Arrays.asList(<span class="string">"image/png"</span>, <span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、图片信息校验</span></span><br><span class="line">            <span class="comment">// 1)校验文件类型</span></span><br><span class="line">            String type = file.getContentType();</span><br><span class="line">            <span class="keyword">if</span> (!suffixes.contains(type)) &#123;</span><br><span class="line">                logger.info(<span class="string">"上传失败，文件类型不匹配：&#123;&#125;"</span>, type);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2)校验图片内容</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"上传失败，文件内容不符合要求"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2、保存图片</span></span><br><span class="line">            <span class="comment">// 2.1、生成保存目录</span></span><br><span class="line">            File dir = <span class="keyword">new</span> File(<span class="string">"D:\\heima\\upload"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.2、保存图片</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(dir, file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.3、拼接图片地址</span></span><br><span class="line">            String url = <span class="string">"http://image.leyou.com/upload/"</span> + file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个问题：为什么图片地址需要使用另外的url？</p><ul><li>图片不能保存在服务器内部，这样会对服务器产生额外的加载负担</li><li>一般静态资源都应该使用独立域名，这样访问静态资源时不会携带一些不必要的cookie，减小请求的数据量</li></ul><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><p>我们通过RestClient工具来测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526196967376.png" alt=""></p><p>结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526197027688.png" alt=""></p><p>目录中存在则上传成功！</p><h3 id="绕过网关"><a href="#绕过网关" class="headerlink" title="绕过网关"></a>绕过网关</h3><p>图片上传是文件的传输，如果也经过Zuul网关的代理，文件就会经过多次网路传输，造成不必要的网络负担。在高并发时，可能导致网络阻塞，Zuul网关不可用。这样我们的整个系统就瘫痪了。</p><p>所以，我们上传文件的请求就不经过网关来处理了。</p><h4 id="Zuul的路由过滤"><a href="#Zuul的路由过滤" class="headerlink" title="Zuul的路由过滤"></a>Zuul的路由过滤</h4><p>Zuul中提供了一个ignored-patterns属性，用来忽略不希望路由的URL路径，示例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zuul.ignored-patterns</span>: <span class="string">/upload/**</span></span><br></pre></td></tr></table></figure><p>路径过滤会对一切微服务进行判定。</p><p>Zuul还提供了<code>ignored-services</code>属性，进行服务过滤：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">zuul.ignored-services</span>: <span class="string">upload-servie</span></span><br></pre></td></tr></table></figure><p>我们这里采用忽略服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">upload-service</span> <span class="comment"># 忽略upload-service服务</span></span><br></pre></td></tr></table></figure><p>上面的配置采用了集合语法，代表可以配置多个</p><h4 id="Nginx的rewrite指令"><a href="#Nginx的rewrite指令" class="headerlink" title="Nginx的rewrite指令"></a>Nginx的rewrite指令</h4><p>现在，我们修改页面的访问路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"brand.image"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">url</span>=<span class="string">"/upload/image"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:multiple</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:pic-width</span>=<span class="string">"250"</span> <span class="attr">:pic-height</span>=<span class="string">"90"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure><p>查看页面的请求路径：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526200471676.png" alt=""></p><p>可以看到这个地址不对，依然是去找Zuul网关，因为我们的系统全局配置了URL地址。怎么办？</p><p>有同学会想：修改页面请求地址不就好了。</p><p>注意：原则上，我们是不能把除了网关以外的服务对外暴露的，不安全。</p><p>既然不能修改页面请求，那么就只能在Nginx反向代理上做文章了。</p><p>我们修改nginx配置，将以/api/upload开头的请求拦截下来，转交到真实的服务地址:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /api/upload &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写大家觉得对不对呢？</p><p>显然是不对的，因为ip和端口虽然对了，但是路径没变，依然是：<a href="http://127.0.0.1:8002/api/upload/image" target="_blank" rel="noopener">http://127.0.0.1:8002/api/upload/image</a></p><p>前面多了一个/api</p><p>Nginx提供了rewrite指令，用于对地址进行重写，语法规则：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite <span class="string">"用来匹配路径的正则"</span> 重写后的路径 [指令]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们的案例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 上传路径的映射</span></span><br><span class="line"><span class="attribute">location</span> /api/upload &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span> <span class="string">"^/api/(.*)$"</span> /<span class="variable">$1</span> <span class="literal">break</span>; </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:10010;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>首先，我们映射路径是/api/upload，而下面一个映射路径是 / ，根据最长路径匹配原则，/api/upload优先级更高。也就是说，凡是以/api/upload开头的路径，都会被第一个配置处理</p></li><li><p><code>proxy_pass</code>：反向代理，这次我们代理到8082端口，也就是upload-service服务</p></li><li><p><code>rewrite &quot;^/api/(.*)$&quot; /$1 break</code>，路径重写：</p><ul><li><p><code>&quot;^/api/(.*)$&quot;</code>：匹配路径的正则表达式，用了分组语法，把<code>/api/</code>以后的所有部分当做1组</p></li><li><p><code>/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即<code>/api/</code>后面的所有。这样新的路径就是除去<code>/api/</code>以外的所有，就达到了去除<code>/api</code>前缀的目的</p></li><li><p><code>break</code>：指令，常用的有2个，分别是：last、break</p><ul><li>last：重写路径结束后，将得到的路径重新进行一次路径匹配</li><li>break：重写路径结束后，不再重新匹配路径。</li></ul><p>我们这里不能选择last，否则以新的路径/upload/image来匹配，就不会被正确的匹配到8082端口了</p></li></ul></li></ul><p>修改完成，输入<code>nginx -s reload</code>命令重新加载配置。然后再次上传试试。</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>重启nginx，再次上传，发现报错了：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526200471676.png" alt=""></p><p>不过庆幸的是，这个错误已经不是第一次见了，跨域问题。</p><p>我们在upload-service中添加一个CorsFilter即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"POST"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526200606487.png" alt=""></p><p>不过，非常遗憾的是，访问图片地址，却没有响应。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526200927268.png" alt=""></p><p>这是因为我们并没有任何服务器对应image.leyou.com这个域名。。</p><h3 id="之前上传的缺陷"><a href="#之前上传的缺陷" class="headerlink" title="之前上传的缺陷"></a>之前上传的缺陷</h3><p>先思考一下，之前上传的功能，有没有什么问题？</p><p>上传本身没有任何问题，问题出在保存文件的方式，我们是保存在服务器机器，就会有下面的问题：</p><ul><li>单机器存储，存储能力有限</li><li>无法进行水平扩展，因为多台机器的文件无法共享,会出现访问不到的情况</li><li>数据没有备份，有单点故障风险</li><li>并发能力差</li></ul><p>这个时候，最好使用分布式文件存储来代替本地文件存储。</p><h1 id="FastDFS（高级）"><a href="#FastDFS（高级）" class="headerlink" title="FastDFS（高级）"></a>FastDFS（高级）</h1><h2 id="什么是分布式文件系统"><a href="#什么是分布式文件系统" class="headerlink" title="什么是分布式文件系统"></a>什么是分布式文件系统</h2><p>分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p><p>通俗来讲：</p><ul><li>传统文件系统管理的文件就存储在本机。</li><li>分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</li></ul><h2 id="什么是FastDFS"><a href="#什么是FastDFS" class="headerlink" title="什么是FastDFS"></a>什么是FastDFS</h2><p>FastDFS是由淘宝的余庆先生所开发的一个轻量级、高性能的开源分布式文件系统。用纯C语言开发，功能丰富：</p><ul><li>文件存储</li><li>文件同步</li><li>文件访问（上传、下载）</li><li>存取负载均衡</li><li>在线扩容</li></ul><p>适合有大容量存储需求的应用或系统。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。</p><h2 id="FastDFS的架构"><a href="#FastDFS的架构" class="headerlink" title="FastDFS的架构"></a>FastDFS的架构</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p>先上图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526205318630.png" alt=""></p><p>FastDFS两个主要的角色：Tracker Server 和 Storage Server 。</p><ul><li>Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 </li><li>Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息</li><li>Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 </li><li>Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。</li><li>Storage Cluster ：存储集群，有多个Group组成。</li></ul><h3 id="上传和下载流程"><a href="#上传和下载流程" class="headerlink" title="上传和下载流程"></a>上传和下载流程</h3><blockquote><p>上传</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526205664373.png" alt=""></p><ol><li>Client通过Tracker server查找可用的Storage server。</li><li>Tracker server向Client返回一台可用的Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。</li><li>上传完成，Storage server返回Client一个文件ID，文件上传结束。</li></ol><blockquote><p>下载</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526205705687.png" alt=""></p><ol><li>Client通过Tracker server查找要下载文件所在的的Storage server。</li><li>Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。</li><li>下载文件成功。</li></ol><h2 id="java客户端"><a href="#java客户端" class="headerlink" title="java客户端"></a>java客户端</h2><p>余庆先生提供了一个Java客户端，但是作为一个C程序员，写的java代码可想而知。而且已经很久不维护了。</p><p>这里推荐一个开源的FastDFS客户端，支持最新的SpringBoot2.0。</p><p>配置使用极为简单，支持连接池，支持自动生成缩略图</p><p>地址：<a href="https://github.com/tobato/FastDFS_Client">tobato/FastDFS_client</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526206304954.png" alt=""></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在父工程中，我们已经管理了依赖，版本为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fastDFS.client.version</span>&gt;</span>1.26.2<span class="tag">&lt;/<span class="name">fastDFS.client.version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此，这里我们直接引入坐标即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入配置类"><a href="#引入配置类" class="headerlink" title="引入配置类"></a>引入配置类</h3><p>纯java配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(FdfsClientConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// 解决<span class="title">jmx</span>重复注册<span class="title">bean</span>的问题</span></span><br><span class="line"><span class="class">@<span class="title">EnableMBeanExport</span>(<span class="title">registration</span> </span>= RegistrationPolicy.IGNORE_EXISTING)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写FastDFS属性"><a href="#编写FastDFS属性" class="headerlink" title="编写FastDFS属性"></a>编写FastDFS属性</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">1501</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">601</span></span><br><span class="line">  <span class="attr">thumb-image:</span> <span class="comment"># 缩略图</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="comment"># tracker地址</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span><span class="string">:22122</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LyUploadService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FdfsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThumbImageConfig thumbImageConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\test\\baby.png"</span>);</span><br><span class="line">        <span class="comment">// 上传并且生成缩略图</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadFile(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"png"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUploadAndCreateThumb</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\test\\baby.png"</span>);</span><br><span class="line">        <span class="comment">// 上传并且生成缩略图</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadImageAndCrtThumbImage(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"png"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">        <span class="comment">// 获取缩略图路径</span></span><br><span class="line">        String path = thumbImageConfig.getThumbImagePath(storePath.getPath());</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">group1/M00/<span class="number">00</span>/<span class="number">00</span>/wKg4ZVro5eCAZEMVABfYcN8vzII630.png</span><br><span class="line">M00/<span class="number">00</span>/<span class="number">00</span>/wKg4ZVro5eCAZEMVABfYcN8vzII630.png</span><br><span class="line">M00/<span class="number">00</span>/<span class="number">00</span>/wKg4ZVro5eCAZEMVABfYcN8vzII630_60x60.png</span><br></pre></td></tr></table></figure><blockquote><p>访问最后一个路径（缩略图路径），注意加组名</p></blockquote><h3 id="改造上传逻辑"><a href="#改造上传逻辑" class="headerlink" title="改造上传逻辑"></a>改造上传逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UploadController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持的文件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; suffixes = Arrays.asList(<span class="string">"image/png"</span>, <span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、图片信息校验</span></span><br><span class="line">            <span class="comment">// 1)校验文件类型</span></span><br><span class="line">            String type = file.getContentType();</span><br><span class="line">            <span class="keyword">if</span> (!suffixes.contains(type)) &#123;</span><br><span class="line">                logger.info(<span class="string">"上传失败，文件类型不匹配：&#123;&#125;"</span>, type);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2)校验图片内容</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"上传失败，文件内容不符合要求"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2、将图片上传到FastDFS</span></span><br><span class="line">            <span class="comment">// 2.1、获取文件后缀名</span></span><br><span class="line">            String extension = StringUtils.substringAfterLast(file.getOriginalFilename(), <span class="string">"."</span>);</span><br><span class="line">            <span class="comment">// 2.2、上传</span></span><br><span class="line">            StorePath storePath = <span class="keyword">this</span>.storageClient.uploadFile(</span><br><span class="line">                    file.getInputStream(), file.getSize(), extension, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 2.3、返回完整路径</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"http://image.leyou.com/"</span> + storePath.getFullPath();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要把原来保存文件的逻辑去掉，然后上传到FastDFS即可。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>通过RestClient测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526215940805.png" alt=""></p><h2 id="页面测试上传"><a href="#页面测试上传" class="headerlink" title="页面测试上传"></a>页面测试上传</h2><p>发现上传成功：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526216133300.png" alt=""></p><p>不过，当我们访问页面时：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/5/1526216178123.png" alt=""></p><p>这是因为我们图片是上传到虚拟机的，ip为：192.168.56.101</p><p>因此，我们需要将image.leyou.com映射到192.168.56.101</p><p>修改我们的hosts：<code>192.168.56.101 image.leyou.com</code></p><p>再次上传</p>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> FastDFS </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架01 -- log4j日志配置详解</title>
      <link href="/2019/05/16/JAVA%E6%A1%86%E6%9E%B601%20--%20log4j%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/05/16/JAVA%E6%A1%86%E6%9E%B601%20--%20log4j%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Log4j简介"><a href="#Log4j简介" class="headerlink" title="Log4j简介"></a>Log4j简介</h3><p>Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。</p><h4 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h4><p>Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。</p><h4 id="Appenders"><a href="#Appenders" class="headerlink" title="Appenders"></a>Appenders</h4><p>禁用和使用日志请求只是Log4j的基本功能，Log4j日志系统还提供许多强大的功能，比如允许把日志输出到不同的地方，如控制台（Console）、文件（Files）等，可以根据天数或者文件大小产生新的文件，可以以流的形式发送到其它地方等等。</p><p>常使用的类如下：</p><ul><li>org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li><li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li><li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li></ul><p>配置模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName = className</span><br><span class="line">log4j.appender.appenderName.Option1 = value1</span><br><span class="line">…</span><br><span class="line">log4j.appender.appenderName.OptionN = valueN</span><br></pre></td></tr></table></figure><h4 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h4><p>有时用户希望根据自己的喜好格式化自己的日志输出，Log4j可以在Appenders的后面附加Layouts来完成这个功能。Layouts提供四种日志输出样式，如根据HTML样式、自由指定样式、包含日志级别与信息的样式和包含日志时间、线程、类别等信息的样式。</p><p>常使用的类如下：</p><ul><li>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li></ul><p>配置模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName.layout =className</span><br><span class="line">log4j.appender.appenderName.layout.Option1 = value1</span><br><span class="line">…</span><br><span class="line">log4j.appender.appenderName.layout.OptionN = valueN</span><br></pre></td></tr></table></figure><h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><p>在实际应用中，要使Log4j在系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。Log4j支持两种配置文件格式，一种是XML格式的文件，一种是properties属性文件。下面以properties属性文件为例介绍log4j.properties的配置。</p><h4 id="配置根Logger"><a href="#配置根Logger" class="headerlink" title="配置根Logger"></a>配置根Logger</h4><p><code>log4j.rootLogger = [ level ] , appenderName1, appenderName2, …</code></p><p>log4j.additivity.org.apache=false：表示Logger不会在父Logger的appender里输出，默认为true。</p><p>level ：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别，Log4j建议只使用中间四个级别。通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。</p><p>appenderName：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。<br>例如：log4j.rootLogger＝INFO,A1,B2,C3</p><h4 id="配置日志信息输出目的地（appender）"><a href="#配置日志信息输出目的地（appender）" class="headerlink" title="配置日志信息输出目的地（appender）"></a>配置日志信息输出目的地（appender）</h4><p><code>log4j.appender.appenderName = className</code></p><ul><li><p>appenderName：自定义appderName，在log4j.rootLogger设置中使用；</p></li><li><p>className：可设值如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)org.apache.log4j.ConsoleAppender（控制台）</span><br><span class="line">(<span class="number">2</span>)org.apache.log4j.FileAppender（文件）</span><br><span class="line">(<span class="number">3</span>)org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</span><br><span class="line">(<span class="number">4</span>)org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</span><br><span class="line">(<span class="number">5</span>)org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)ConsoleAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Target=System.err：默认值是System.out。</span><br><span class="line">(<span class="number">2</span>)FileAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Append=<span class="keyword">false</span>：<span class="keyword">true</span>表示消息增加到指定文件中，<span class="keyword">false</span>则将消息覆盖指定的文件内容，默认值是<span class="keyword">true</span>。</span><br><span class="line">File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</span><br><span class="line">(<span class="number">3</span>)DailyRollingFileAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Append=<span class="keyword">false</span>：<span class="keyword">true</span>表示消息增加到指定文件中，<span class="keyword">false</span>则将消息覆盖指定的文件内容，默认值是<span class="keyword">true</span>。</span><br><span class="line">File=D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。</span><br><span class="line">DatePattern=<span class="string">'.'</span>yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。</span><br><span class="line"></span><br><span class="line">另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下：</span><br><span class="line"><span class="number">1</span>)<span class="string">'.'</span>yyyy-MM：每月</span><br><span class="line"><span class="number">2</span>)<span class="string">'.'</span>yyyy-ww：每周</span><br><span class="line"><span class="number">3</span>)<span class="string">'.'</span>yyyy-MM-dd：每天</span><br><span class="line"><span class="number">4</span>)<span class="string">'.'</span>yyyy-MM-dd-a：每天两次</span><br><span class="line"><span class="number">5</span>)<span class="string">'.'</span>yyyy-MM-dd-HH：每小时</span><br><span class="line"><span class="number">6</span>)<span class="string">'.'</span>yyyy-MM-dd-HH-mm：每分钟</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)RollingFileAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Append=<span class="keyword">false</span>：<span class="keyword">true</span>表示消息增加到指定文件中，<span class="keyword">false</span>则将消息覆盖指定的文件内容，默认值是<span class="keyword">true</span>。</span><br><span class="line">File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</span><br><span class="line">MaxFileSize=<span class="number">100</span>KB：后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j<span class="number">.1</span>文件中。</span><br><span class="line">MaxBackupIndex=<span class="number">2</span>：指定可以产生的滚动文件的最大数，例如，设为<span class="number">2</span>则可以产生logging.log4j<span class="number">.1</span>，logging.log4j<span class="number">.2</span>两个滚动文件和一个logging.log4j文件。</span><br></pre></td></tr></table></figure><h4 id="配置日志信息的输出格式（Layout）："><a href="#配置日志信息的输出格式（Layout）：" class="headerlink" title="配置日志信息的输出格式（Layout）："></a>配置日志信息的输出格式（Layout）：</h4><p><code>log4j.appender.appenderName.layout=className</code></p><ul><li>className：可设值如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)org.apache.log4j.HTMLLayout（以HTML表格形式布局）</span><br><span class="line">(<span class="number">2</span>)org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</span><br><span class="line">(<span class="number">3</span>)org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</span><br><span class="line">(<span class="number">4</span>)org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span><br><span class="line">(<span class="number">1</span>)HTMLLayout选项：</span><br><span class="line">LocationInfo=<span class="keyword">true</span>：输出java文件名称和行号，默认值是<span class="keyword">false</span>。</span><br><span class="line">Title=My Logging： 默认值是Log4J Log Messages。</span><br><span class="line">(<span class="number">2</span>)PatternLayout选项：</span><br><span class="line">ConversionPattern=%m%n：设定以怎样的格式显示消息。</span><br></pre></td></tr></table></figure><ul><li>格式化符号说明：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</span><br><span class="line">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</span><br><span class="line">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</span><br><span class="line">%t：输出产生该日志事件的线程名。</span><br><span class="line">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:<span class="number">10</span>)。</span><br><span class="line">%c：输出日志信息所属的类目，通常就是所在类的全名。</span><br><span class="line">%M：输出产生日志信息的方法名。</span><br><span class="line">%F：输出日志消息产生时所在的文件名称。</span><br><span class="line">%L:：输出代码中的行号。</span><br><span class="line">%m:：输出代码中指定的具体日志信息。</span><br><span class="line">%n：输出一个回车换行符，Windows平台为<span class="string">"rn"</span>，Unix平台为<span class="string">"n"</span>。</span><br><span class="line">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class="line">%%：输出一个<span class="string">"%"</span>字符。</span><br><span class="line">另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</span><br><span class="line"><span class="number">1</span>) c：指定输出category的名称，最小的长度是<span class="number">20</span>，如果category的名称长度小于<span class="number">20</span>的话，默认的情况下右对齐。</span><br><span class="line"><span class="number">2</span>)%-<span class="number">20</span>c：<span class="string">"-"</span>号表示左对齐。</span><br><span class="line"><span class="number">3</span>)%.<span class="number">30</span>c：指定输出category的名称，最大的长度是<span class="number">30</span>，如果category的名称长度大于<span class="number">30</span>的话，就会将左边多出的字符截掉，但小于<span class="number">30</span>的话也不会补空格。</span><br></pre></td></tr></table></figure><h3 id="附：Log4j比较全面的配置"><a href="#附：Log4j比较全面的配置" class="headerlink" title="附：Log4j比较全面的配置"></a>附：Log4j比较全面的配置</h3><ul><li>Log4j配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,console,dailyFile,im</span><br><span class="line">log4j.additivity.org.apache=<span class="keyword">true</span></span><br><span class="line"># 控制台(console)</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.console.Target=System.err</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"></span><br><span class="line"># 日志文件(logFile)</span><br><span class="line">log4j.appender.logFile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.logFile.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.logFile.Append=<span class="keyword">true</span></span><br><span class="line">log4j.appender.logFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.logFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logFile.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 回滚文件(rollingFile)</span><br><span class="line">log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.rollingFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.rollingFile.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.rollingFile.Append=<span class="keyword">true</span></span><br><span class="line">log4j.appender.rollingFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.rollingFile.MaxFileSize=<span class="number">200</span>KB</span><br><span class="line">log4j.appender.rollingFile.MaxBackupIndex=<span class="number">50</span></span><br><span class="line">log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.rollingFile.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 定期回滚日志文件(dailyFile)</span><br><span class="line">log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.dailyFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.dailyFile.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.dailyFile.Append=<span class="keyword">true</span></span><br><span class="line">log4j.appender.dailyFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.dailyFile.DatePattern=<span class="string">'.'</span>yyyy-MM-dd</span><br><span class="line">log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.dailyFile.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 应用于socket</span><br><span class="line">log4j.appender.socket=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.socket.RemoteHost=localhost</span><br><span class="line">log4j.appender.socket.Port=<span class="number">5001</span></span><br><span class="line">log4j.appender.socket.LocationInfo=<span class="keyword">true</span></span><br><span class="line"># Set up for Log Factor 5</span><br><span class="line">log4j.appender.socket.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.socket.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># Log Factor 5 Appender</span><br><span class="line">log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender</span><br><span class="line">log4j.appender.LF5_APPENDER.MaxNumberOfRecords=<span class="number">2000</span></span><br><span class="line"># 发送日志到指定邮件</span><br><span class="line">log4j.appender.mail=org.apache.log4j.net.SMTPAppender</span><br><span class="line">log4j.appender.mail.Threshold=FATAL</span><br><span class="line">log4j.appender.mail.BufferSize=<span class="number">10</span></span><br><span class="line">log4j.appender.mail.From = xxx<span class="meta">@mail</span>.com</span><br><span class="line">log4j.appender.mail.SMTPHost=mail.com</span><br><span class="line">log4j.appender.mail.Subject=Log4J Message</span><br><span class="line">log4j.appender.mail.To= xxx<span class="meta">@mail</span>.com</span><br><span class="line">log4j.appender.mail.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.mail.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 应用于数据库</span><br><span class="line">log4j.appender.database=org.apache.log4j.jdbc.JDBCAppender</span><br><span class="line">log4j.appender.database.URL=jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">log4j.appender.database.driver=com.mysql.jdbc.Driver</span><br><span class="line">log4j.appender.database.user=root</span><br><span class="line">log4j.appender.database.password=</span><br><span class="line">log4j.appender.database.sql=<span class="function">INSERT INTO <span class="title">LOG4J</span> <span class="params">(Message)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n'</span>)</span></span></span><br><span class="line"><span class="function">log4j.appender.database.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.database.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"></span><br><span class="line"># 自定义Appender</span><br><span class="line">log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender</span><br><span class="line">log4j.appender.im.host = mail.cybercorlin.net</span><br><span class="line">log4j.appender.im.username = username</span><br><span class="line">log4j.appender.im.password = password</span><br><span class="line">log4j.appender.im.recipient = corlin<span class="meta">@cybercorlin</span>.net</span><br><span class="line">log4j.appender.im.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.im.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br></pre></td></tr></table></figure><ul><li>log4j的强大功能无可置疑，但实际应用中免不了遇到某个功能需要输出独立的日志文件的情况，怎样才能把所需的内容从原有日志中分离，形成单独的日志文件呢？其实只要在现有的log4j基础上稍加配置即可轻松实现这一功能。</li></ul><ul><li>先看一个常见的log4j.properties文件，它是在控制台和myweb.log文件中记录日志：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout, logfile</span><br><span class="line">log4j.category.org.springframework=ERROR</span><br><span class="line">log4j.category.org.apache=INFO</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.logfile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.logfile.File=$&#123;myweb.root&#125;/WEB-INF/log/myweb.log</span><br><span class="line">log4j.appender.logfile.MaxFileSize=<span class="number">512</span>KB</span><br><span class="line">log4j.appender.logfile.MaxBackupIndex=<span class="number">5</span></span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">```　</span><br><span class="line"></span><br><span class="line">* 如果想对不同的类输出不同的文件(以cn.com.Test为例)，先要在Test.java中定义:`<span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(Test<span class="class">.<span class="keyword">class</span>)</span>;`然后在log4j.properties中加入:</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">log4j.logger.cn.com.Test= DEBUG, test</span><br><span class="line">log4j.appender.test=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test.File=$&#123;myweb.root&#125;/WEB-INF/log/test.log</span><br><span class="line">log4j.appender.test.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><ul><li>也就是让cn.com.Test中的logger使用log4j.appender.test所做的配置。</li><li>但是，如果在同一类中需要输出多个日志文件呢？其实道理是一样的，先在Test.java中定义:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger1 = LogFactory.getLog(<span class="string">"myTest1"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger2 = LogFactory.getLog(<span class="string">"myTest2"</span>);</span><br></pre></td></tr></table></figure><ul><li>然后在log4j.properties中加入:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">log4j.logger.myTest1= DEBUG, test1</span><br><span class="line">log4j.appender.test1=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test1.File=$&#123;myweb.root&#125;/WEB-INF/log/test1.log</span><br><span class="line">log4j.appender.test1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test1.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.myTest2= DEBUG, test2</span><br><span class="line">log4j.appender.test2=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test2.File=$&#123;myweb.root&#125;/WEB-INF/log/test2.log</span><br><span class="line">log4j.appender.test2.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test2.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><blockquote><p>也就是在用logger时给它一个自定义的名字(如这里的”myTest1”)，然后在log4j.properties中做出相应配置即可。别忘了不同日志要使用不同的logger(如输出到test1.log的要用logger1.info(“abc”))。</p></blockquote><ul><li>还有一个问题，就是这些自定义的日志默认是同时输出到log4j.rootLogger所配置的日志中的，如何能只让它们输出到自己指定的日志中呢？别急，这里有个开关：<br><code>log4j.additivity.myTest1 = false</code>它用来设置是否同时输出到log4j.rootLogger所配置的日志中，设为false就不会输出到其它地方啦！注意这里的”myTest1”是你在程序中给logger起的那个自定义的名字！</li></ul><p>如果你说，我只是不想同时输出这个日志到log4j.rootLogger所配置的logfile中，stdout里我还想同时输出呢！那也好办，把你的log4j.logger.myTest1 = DEBUG, test1改为下式就OK啦！<code>log4j.logger.myTest1=DEBUG, test1</code></p><ul><li>下面是文件上传时记录文件类型的log日志，并输出到指定文件的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">######################### logger ##############################</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.conversionPattern = %d [%t] %-<span class="number">5</span>p %c - %m%n</span><br><span class="line">log4j.logger.extProfile=INFO, extProfile#日志级别是INFO,标签是extProfile</span><br><span class="line">log4j.additivity.extProfile=false;#输出到指定文件extProfile.log中</span><br><span class="line"></span><br><span class="line">#userProfile log\uff08\u8bb0\u5f55\u4fee\u6539\u5bc6\u7801\uff0c\u627e\u56de\u5bc6\u7801\uff0c\u4fee\u6539\u90ae\u7bb1\uff0c\u4fee\u6539\u624b\u673a\u53f7\uff09</span><br><span class="line">log4j.appender.extProfile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.extProfile.File=logs/extProfile.log#输出到resin根目录的logs文件夹,log4j会自动生成目录和文件</span><br><span class="line">log4j.appender.extProfile.MaxFileSize=20480KB#超过20M就重新创建一个文件</span><br><span class="line">log4j.appender.extProfile.MaxBackupIndex=<span class="number">10</span></span><br><span class="line">log4j.appender.extProfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.extProfile.layout.ConversionPattern=%d [%t] %-<span class="number">5</span>p %c - %m%n</span><br></pre></td></tr></table></figure><ul><li>Java端控制代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">"text/html"</span> session=<span class="string">"false"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;&lt;%<span class="meta">@page</span></span><br><span class="line">...</span><br><span class="line">org.apache.commons.logging.Log,</span><br><span class="line">org.apache.commons.logging.LogFactory</span><br><span class="line"><span class="string">"%&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Log extProfile  = LogFactory.getLog("</span>extProfile<span class="string">");</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">if (!item.isFormField()) &#123;</span></span><br><span class="line"><span class="string">       String fileExt = StringUtils.substringAfterLast(item.getName(), "</span>.<span class="string">").toLowerCase();</span></span><br><span class="line"><span class="string">       extProfile.info("</span>upfile type is : [ <span class="string">"+fileExt +"</span> ]<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架02 -- MyBatis</title>
      <link href="/2019/05/16/JAVA%E6%A1%86%E6%9E%B602%20--%20MyBatis/"/>
      <url>/2019/05/16/JAVA%E6%A1%86%E6%9E%B602%20--%20MyBatis/</url>
      
        <content type="html"><![CDATA[<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="什么是框架？"><a href="#什么是框架？" class="headerlink" title="什么是框架？"></a>什么是框架？</h3><ul><li>它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题。</li><li>使用框架的好处：框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提高开发效率。</li></ul><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>表现层：是用于展示数据的</li><li>业务层：是处理业务需求</li><li>持久层：是和数据库交互的</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="三层架构"></p><h3 id="持久层技术解决方案"><a href="#持久层技术解决方案" class="headerlink" title="持久层技术解决方案"></a>持久层技术解决方案</h3><h4 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h4><ul><li><p>Connection</p></li><li><p>PreparedStatement</p></li><li><p>ResultSet</p></li></ul><h4 id="Spring的JdbcTemplate"><a href="#Spring的JdbcTemplate" class="headerlink" title="Spring的JdbcTemplate"></a>Spring的JdbcTemplate</h4><ul><li>Spring中对jdbc的简单封装</li></ul><h4 id="Apache的DBUtils"><a href="#Apache的DBUtils" class="headerlink" title="Apache的DBUtils"></a>Apache的DBUtils</h4><ul><li>它和Spring的JdbcTemplate很像，也是对Jdbc的简单封装</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>JDBC是规范</p></li><li><p>Spring的JdbcTemplate和Apache的DBUtils都只是工具类</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/02%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt="持久层纵览">    </p><h2 id="mybatis的概述"><a href="#mybatis的概述" class="headerlink" title="mybatis的概述"></a>mybatis的概述</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>mybatis是一个持久层框架，用java编写的。</li><li>它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程</li><li>它使用了ORM思想实现了结果集的封装。</li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><ul><li>Object Relational Mappging 对象关系映射:就是把数据库表和实体类及实体类的属性对应起来让我们可以操作实体类就实现操作数据库表。</li></ul><blockquote><p>user – User  id – UserId</p></blockquote><ul><li>需要实体类中的属性和数据库表的字段名称保持一致。</li></ul><blockquote><p>user –User. id – id</p></blockquote><h3 id="mybatis的入门"><a href="#mybatis的入门" class="headerlink" title="mybatis的入门"></a>mybatis的入门</h3><h4 id="mybatis的环境搭建"><a href="#mybatis的环境搭建" class="headerlink" title="mybatis的环境搭建"></a>mybatis的环境搭建</h4><ul><li>第一步：创建maven工程并导入坐标</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.26&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步：创建实体类和dao的接口</li><li>第三步：创建Mybatis的主配置文件 SqlMapConifg.xml</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mybatis主配置文件 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境 --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置mysql环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务类型 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 配置数据源（连接池）--&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;!--配置连接数据库的四个基本信息--&gt;</span><br><span class="line">                &lt;property name=<span class="string">"drive"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://locahist:3306/mybatisbd"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--指定映射配置文件的位置 映射配置文件指每个dao独立的配置文件 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/jwang/dao/UserDao.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>第四步：创建映射配置文件 UserDao.xml</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.UserDao"</span>&gt;</span><br><span class="line">    &lt;!-- 配置查询所有  id取在userDao中对应的方法名--&gt;</span><br><span class="line">    &lt;select id="findAll"&gt; select * from user;&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="环境搭建的注意事项："><a href="#环境搭建的注意事项：" class="headerlink" title="环境搭建的注意事项："></a>环境搭建的注意事项：</h4><ul><li><p>第一个：创建UserDao.xml 和 UserDao.java时名称是为了保持一致。</p><blockquote><p>在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper<br>所以：UserDao 和 UserMapper是一样的</p></blockquote></li><li><p>第二个：在idea中创建目录的时候，它和包是不一样的</p><blockquote><p>包在创建时：com.jwang.dao它是三级结构</p><p>目录在创建时：com.jwang.dao是一级目录</p></blockquote></li><li><p>第三个：mybatis的映射配置文件位置必须和dao接口的包结构相同</p></li><li><p>第四个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</p></li><li><p>第五个：映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名</p></li></ul><blockquote><p>当我们遵从了第三，四，五点之后，我们在开发中就无须再写dao的实现类。</p></blockquote><h3 id="mybatis的入门案例"><a href="#mybatis的入门案例" class="headerlink" title="mybatis的入门案例"></a>mybatis的入门案例</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/04mybatis%E7%9A%84%E5%88%86%E6%9E%90.png" alt="mybatis分析"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>不要忘记在映射配置中告知mybatis要封装到哪个实体类中</p></li><li><p>配置的方式：指定实体类的全限定类名</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.1 绝对路径和相对路径写法不靠谱</span></span><br><span class="line"><span class="comment">        1.2 其他加载方法：</span></span><br><span class="line"><span class="comment">             使用类加载器</span></span><br><span class="line"><span class="comment">             使用SeevletContext对象的getRealPath()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个sqlsessionfactory工厂</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2。1：创建工厂，mybatis使用构建者模式 用构建者对in进行build 把对象创建细节隐藏。使用者直接调用方法拿到对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3。使用工厂生产一个sqlSession对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3。1：生产一个sqlSession对象使用工厂模式：降低类之间的依赖关系即解藕</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4。使用sqlsession创建dao接口的代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4。1：创建dao接口实现类 使用代理模式：不修改源码的基础上对已有方法的增强</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5。使用代理对象执行方法</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6。释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li>不需要编写UserDao.xml 可以直接在接口相关方法上加注解sql语句</li></ul><h4 id="mybatis基于注解的入门案例："><a href="#mybatis基于注解的入门案例：" class="headerlink" title="mybatis基于注解的入门案例："></a>mybatis基于注解的入门案例：</h4><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E7%9A%84%E5%88%86%E6%9E%90.png" alt="案例分析"></p><ul><li>把UserDao.xml移除，在dao接口的方法上使用@Select注解，并且指定SQL语句</li><li>同时需要在SqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.dao.UserDao"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>明确：</li></ul><blockquote><p>我们在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式。</p></blockquote><blockquote><p>不管使用XML还是注解配置。</p></blockquote><blockquote><p>但是Mybatis它是支持写dao实现类的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Mybatis的分析："><a href="#自定义Mybatis的分析：" class="headerlink" title="自定义Mybatis的分析："></a>自定义Mybatis的分析：</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E5%88%86%E6%9E%90.png" alt="查询所有分析"></p><ul><li>mybatis在使用代理dao的方式实现增删改查时做什么事呢？</li><li>只有两件事：</li></ul><blockquote><p>第一：创建代理对象</p></blockquote><blockquote><p>第二：在代理对象中调用selectList</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E5%BC%A0%E5%9B%BE-%E5%88%86%E6%9E%90%E4%BB%A3%E7%90%86dao%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="代理dao"></p><ul><li>自定义mybatis能通过入门案例看到类</li></ul><blockquote><p>class Resources</p></blockquote><blockquote><p>class SqlSessionFactoryBuilder</p></blockquote><blockquote><p>interface SqlSessionFactory</p></blockquote><blockquote><p>interface SqlSession</p></blockquote><h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#UserDao.xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.UserDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 查询所有 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">        select * from user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 保存用户 --&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"saveUser"</span> parameterType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">        &lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span><br><span class="line">        &lt;selectKey keyProperty=<span class="string">"id"</span> keyColumn=<span class="string">"id"</span> resultType=<span class="string">"int"</span> order=<span class="string">"AFTER"</span>&gt;</span><br><span class="line">            <span class="function">select <span class="title">last_insert_id</span><span class="params">()</span></span>;</span><br><span class="line">        &lt;/selectKey&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">user</span><span class="params">(username,address,sex,birthday)</span><span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)</span></span>;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 更新用户 --&gt;</span><br><span class="line">    &lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.itheima.domain.User"</span>&gt;</span><br><span class="line">        update user set username=#&#123;username&#125;,address=#&#123;address&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 删除用户--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user where id = #&#123;uid&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 根据id查询用户 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findById"</span> parameterType=<span class="string">"INT"</span> resultType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根据名称模糊查询 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByName"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">          select * from user where username like #&#123;name&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 获取用户的总记录条数 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findTotal"</span> resultType=<span class="string">"int"</span>&gt;</span><br><span class="line">        <span class="function">select <span class="title">count</span><span class="params">(id)</span> from user</span>;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">sqlMapConfig.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mybatis主配置文件 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置文件路径 --&gt;</span><br><span class="line">    &lt;properties resource="jdbcConfig.properties"&gt;&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--指定配置别名的包，全部实体类都会注册别名，类名就是别名，不区分大小写 --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.domain"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置环境 --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置mysql环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务类型 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 配置数据源（连接池）--&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;!--配置连接数据库的四个基本信息--&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--指定映射配置文件的位置 映射配置文件指每隔dao独立的配置文件</span><br><span class="line">    如果是注解配置 此处应该使用<span class="class"><span class="keyword">class</span>属性指定被注解的<span class="title">dao</span>全限定类名--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">mappers</span>&gt;</span></span><br><span class="line">        &lt;!--URL: 协议 主机 端口 URI 统一资源定位符   URI:统一资源标示符 唯一定位应用的资源 --&gt;</span><br><span class="line">&lt;!--        &lt;mapper resource=<span class="string">"com/jwang/dao/UserDao.xml"</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.dao.UserDao"</span>/&gt;--&gt;</span><br><span class="line">        &lt;!--dao接口所在的包 上面的就不需要写 --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.dao"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E8%87%AA%E5%AE%9A%E4%B9%89mybatis%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="开发流程"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E5%BC%A0%E5%9B%BE.png" alt="过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#main测试类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个sqlsessionfactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3。使用工厂生产一个sqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4。使用sqlsession创建dao接口的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.1 绝对路径和相对路径写法不靠谱</span></span><br><span class="line"><span class="comment">        1.2 其他加载方法：</span></span><br><span class="line"><span class="comment">             使用类加载器</span></span><br><span class="line"><span class="comment">             使用SeevletContext对象的getRealPath()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个sqlsessionfactory工厂</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2。1：创建工厂，mybatis使用构建者模式 用构建者对in进行build 把对象创建细节隐藏。使用者直接调用方法拿到对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3。使用工厂生产一个sqlSession对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3。1：生产一个sqlSession对象使用工厂模式：降低类之间的依赖关系即解藕</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4。使用sqlsession创建dao接口的代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4。1：创建dao接口实现类 使用代理模式：不修改源码的基础上对已有方法的增强</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5。使用代理对象执行方法</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6。释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"mada"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"asa"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">51</span>);</span><br><span class="line">        user.setUsername(<span class="string">"mada"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"asa"</span>);</span><br><span class="line">        user.setSex(<span class="string">"女"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.deletrUser(<span class="number">51</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> User user = userDao.findById(<span class="number">48</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = userDao.findTotal();</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * queryvo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryVo queryVo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">        User user =<span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%王%"</span>);</span><br><span class="line">        queryVo.setUser(user);</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; userByVo = userDao.findUserByVo(queryVo);</span><br><span class="line">        <span class="keyword">for</span> (User u : userByVo) &#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E5%88%86%E6%9E%90.png" alt="自定义nybatis"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="模糊查询"></p><h2 id="MyBatis连接池"><a href="#MyBatis连接池" class="headerlink" title="MyBatis连接池"></a>MyBatis连接池</h2><h3 id="POOLED原理"><a href="#POOLED原理" class="headerlink" title="POOLED原理"></a>POOLED原理</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/mybatis_pooled%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="mybatis_pooled"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/1.jpg" alt="连接池"></p><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">    &lt;!-- 配置mysql环境 --&gt;</span><br><span class="line">    &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!--配置事务类型 --&gt;</span><br><span class="line">        &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">        &lt;!-- 配置数据源（连接池）--&gt;</span><br><span class="line">        &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">            &lt;!--配置连接数据库的四个基本信息--&gt;</span><br><span class="line">            &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><h4 id="配置的位置"><a href="#配置的位置" class="headerlink" title="配置的位置"></a>配置的位置</h4><ul><li>主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是表示采用何种连接池方式。</li></ul><h4 id="type属性的取值"><a href="#type属性的取值" class="headerlink" title="type属性的取值"></a>type属性的取值</h4><ul><li>POOLED     采用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现(会在池中获取链接最后归还)</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="满足的要求"></p><ul><li>UNPOOLED 采用传统的获取连接的方式，虽然也实现Javax.sql.DataSource接口，但是并没有使用池的思想。（直接创建链接，最后关闭）</li><li>JNDI     采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到DataSource是不一样。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/%E6%97%A0%E6%A0%87%E9%A2%982.png" alt="区别"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>如果不是web或者maven的war工程，是不能使用的。我们使用的是tomcat服务器，采用连接池就是dbcp连接池。</li></ul><h2 id="MyBatis动态sql语句"><a href="#MyBatis动态sql语句" class="headerlink" title="MyBatis动态sql语句"></a>MyBatis动态sql语句</h2><h3 id="if与where标签"><a href="#if与where标签" class="headerlink" title="if与where标签"></a>if与where标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    &lt;select id=<span class="string">"findUserByCondition"</span> resultType=<span class="string">"com.jwang.domain.User"</span> parameterType=<span class="string">"User"</span>&gt;--&gt;</span><br><span class="line">&lt;!--        select * from user where <span class="number">1</span>=<span class="number">1</span>--&gt;</span><br><span class="line">&lt;!--        &lt;<span class="keyword">if</span> test=<span class="string">"username != null"</span>&gt;--&gt;</span><br><span class="line">&lt;!--            and username = #&#123;username&#125;--&gt;</span><br><span class="line">&lt;!--        &lt;/if&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;<span class="keyword">if</span> test=<span class="string">"sex != null"</span>&gt;--&gt;</span><br><span class="line">&lt;!--            and sex = #&#123;sex&#125;--&gt;</span><br><span class="line">&lt;!--        &lt;/if&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findUserByCondition"</span> resultType=<span class="string">"com.jwang.domain.User"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"username != null"</span>&gt;</span><br><span class="line">                and username = #&#123;username&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"sex != null"</span>&gt;</span><br><span class="line">                and sex = #&#123;sex&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testFindByCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"老王"</span>);</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    List&lt;User&gt; users =userDao.findUserByCondition(user);</span><br><span class="line">    <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach和sql标签"><a href="#foreach和sql标签" class="headerlink" title="foreach和sql标签"></a>foreach和sql标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserByInIds"</span> resultType=<span class="string">"com.jwang.domain.User"</span> parameterType=<span class="string">"QueryVo"</span>&gt;</span><br><span class="line">       select * from user</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"ids != null and ids,size()&gt;0"</span>&gt;</span><br><span class="line">               &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"and id in ("</span> close=<span class="string">")"</span> item=<span class="string">"id"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">                   #&#123;id&#125;</span><br><span class="line">               &lt;/foreach&gt;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>sql代码片段抽取</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=<span class="string">"defalutUser"</span>&gt;</span><br><span class="line">    select * from user</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line">在使用该语句的地方</span><br><span class="line">&lt;include refid="defalutUser"&gt;&lt;/include&gt;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.IAcountDao"</span>&gt;</span><br><span class="line">    &lt;select id="findAll" resultType="acount"&gt;select * from account&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;select id=<span class="string">"findAllAcount"</span> resultType=<span class="string">"acountuser"</span>&gt;--&gt;</span><br><span class="line">&lt;!--        select a.*, u.username, u.address from account a, user u where u.id = a.uid--&gt;</span><br><span class="line">&lt;!--    &lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义user和acount的封装--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"acountUserMap"</span> type=<span class="string">"acount"</span>&gt;</span><br><span class="line">        &lt;id property="id" column="aid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="uid" column="uid"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="money" column="money"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--一对一关系映射 --&gt;</span><br><span class="line">        &lt;association property=<span class="string">"user"</span> column=<span class="string">"uid"</span> javaType=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findAllAcount"</span> resultMap=<span class="string">"acountUserMap"</span>&gt;</span><br><span class="line">        select u.*, a.id as aid, a.uid, a.money from account a, user u where u.id = a.uid</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">acount实体类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Acount</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多，主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Acount&gt; acounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Acount&gt; <span class="title">getAcounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> acounts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义User的resultMap --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">"userAcountMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">    &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">    &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--一对多 user对象中的acount对象的映射 pro数据库字段 co对象属性--&gt;</span><br><span class="line">    &lt;collection property=<span class="string">"acounts"</span> ofType=<span class="string">"acount"</span>&gt;</span><br><span class="line">        &lt;id property="id" column="aid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="uid" column="uid"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="money" column="money"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"userAcountMap"</span>&gt;</span><br><span class="line">    select * from user u left outer join account a on u.id = a.uid</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><h4 id="角色–用户"><a href="#角色–用户" class="headerlink" title="角色–用户"></a>角色–用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射 一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(List&lt;User&gt; user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.IRoleDao"</span>&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"roleMap"</span> type=<span class="string">"role"</span>&gt;</span><br><span class="line">        &lt;id property="roleId" column="rid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="roleName" column="ROLE_NAME"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="roleDesc" column="ROLE_DESC"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">        &lt;collection property=<span class="string">"user"</span> ofType=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"roleMap"</span>&gt;</span><br><span class="line">        select u.*, r.ID as rid, r.ROLE_NAME,r.ROLE_DESC</span><br><span class="line">        from role r left outer join user_role ur on r.id = ur.RID</span><br><span class="line">        left outer join user u on u.id = ur.UID;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="用户–角色"><a href="#用户–角色" class="headerlink" title="用户–角色"></a>用户–角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射 一个用户具备多个角色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义User的resultMap --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">"userAcountMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">    &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">    &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">    &lt;collection property=<span class="string">"roles"</span> ofType=<span class="string">"Role"</span>&gt;</span><br><span class="line">        &lt;id property="roleId" column="rid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="roleName" column="ROLE_NAME"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="roleDesc" column="ROLE_DESC"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"userAcountMap"</span>&gt;</span><br><span class="line">    select u.*, r.ID as rid, r.ROLE_NAME,r.ROLE_DESC</span><br><span class="line">    from user u left outer join user_role ur on u.id = ur.UID</span><br><span class="line">    left outer join role r on r.id = ur.RID;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><ul><li>JNDI：Java Naming and Directory Interface。是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。在服务器中注册数据源：</li></ul><h2 id="延迟加载和立即加载"><a href="#延迟加载和立即加载" class="headerlink" title="延迟加载和立即加载"></a>延迟加载和立即加载</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><ul><li>在真正使用数据时才发起查询，不用的时候不查询。按需加载（懒加载）</li><li>先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速<br>度要快。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/04/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD.png" alt="延迟加载"></p><h4 id="立即加载"><a href="#立即加载" class="headerlink" title="立即加载"></a>立即加载</h4><ul><li>不管用不用，只要一调用方法，马上发起查询。</li></ul><h4 id="四种表间关系的加载方法"><a href="#四种表间关系的加载方法" class="headerlink" title="四种表间关系的加载方法"></a>四种表间关系的加载方法</h4><ul><li><p>在对应的四种表关系中：一对多，多对一，一对一，多对多</p></li><li><p>一对多，多对多：通常情况下我们都是采用延迟加载。</p></li><li><p>多对一，一对一：通常情况下我们都是采用立即加载。</p></li></ul><h3 id="使用-assocation-实现延迟加载"><a href="#使用-assocation-实现延迟加载" class="headerlink" title="使用 assocation 实现延迟加载"></a>使用 assocation 实现延迟加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.itheima.dao.IAccountDao"</span>&gt;&lt;!-- 建立对应关系 --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"account"</span> id=<span class="string">"accountMap"</span>&gt;</span><br><span class="line">&lt;id column=<span class="string">"aid"</span> property=<span class="string">"id"</span>/&gt;&lt;result column=<span class="string">"uid"</span> property=<span class="string">"uid"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"money"</span> property=<span class="string">"money"</span>/&gt; </span><br><span class="line">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;&lt;association property="user" javaType="user" select="com.jwang.dao.IUserDao.findById" column="uid"&gt;&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;&lt;select id="findAll" resultMap="accountMap"&gt; </span><br><span class="line">select * from account</span><br><span class="line">&lt;/select&gt;&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">select: 填写我们要调用的 select 映射的 id </span><br><span class="line">column : 填写我们要传递给 select 映射的参数</span><br></pre></td></tr></table></figure><ul><li>开启Mybatis的延迟加载策略</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们需要在 Mybatis 的配置文件 SqlMapConfig.xml 文件中添加延迟加载的配置。 </span><br><span class="line">&lt;!-- 开启延迟加载的支持 --&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=<span class="string">"lazyLoadingEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;setting name="aggressiveLazyLoading" value="false"/&gt;&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-Collection-实现延迟加载"><a href="#使用-Collection-实现延迟加载" class="headerlink" title="使用 Collection 实现延迟加载"></a>使用 Collection 实现延迟加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt; resultMap type=<span class="string">"user"</span> id=<span class="string">"userMap"</span>&gt; </span><br><span class="line">&lt;id column="id" property="id"&gt;&lt;/id&gt;&lt;result column="username" property="username"/&gt; </span><br><span class="line">&lt;result column=<span class="string">"address"</span> property=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"sex"</span> property=<span class="string">"sex"</span>/&gt;&lt;result column=<span class="string">"birthday"</span> property=<span class="string">"birthday"</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;!-- collection是用于建立一对多中集合属性的对应关系</span><br><span class="line">ofType 用于指定集合元素的数据类型select 是用于指定查询账户的唯一标识(账户的 dao 全限定类名加上方法名称)</span><br><span class="line">column 是用于指定使用哪个字段的值作为条件查询 </span><br><span class="line">--&gt;&lt;collection property=<span class="string">"accounts"</span> ofType=<span class="string">"account"</span> </span><br><span class="line">select="com.itheima.dao.IAccountDao.findByUid" column="id"&gt;&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;&lt;!-- 配置查询所有操作 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"userMap"</span>&gt;</span><br><span class="line">    select * from user&lt;/select&gt; </span><br><span class="line"></span><br><span class="line">&lt;collection&gt;标签:主要用于加载关联的集合对象select 属性:用于指定查询 account 列表的 sql 语句，所以填写的是该 sql 映射的 id</span><br><span class="line">column 属性:用于指定 select 属性的 sql 语句的参数来源，上面的参数来自于 user 的 id 列，所以就写成 id 这一 个字段名了</span><br></pre></td></tr></table></figure><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><h3 id="概念-userCache"><a href="#概念-userCache" class="headerlink" title="概念(userCache)"></a>概念(userCache)</h3><ul><li>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。</li><li>Mybatis 中缓存分为一级缓存，二级缓存</li><li>什么是缓存 ：存在于内存中的临时数据。</li><li>为什么使用缓存：减少和数据库的交互次数，提高执行效率。</li></ul><h4 id="适用于缓存："><a href="#适用于缓存：" class="headerlink" title="适用于缓存："></a>适用于缓存：</h4><ul><li>经常查询并且不经常改变的。</li><li>数据的正确与否对最终结果影响不大的。</li></ul><h4 id="不适用于缓存："><a href="#不适用于缓存：" class="headerlink" title="不适用于缓存："></a>不适用于缓存：</h4><ul><li>经常改变的数据</li><li>数据的正确与否对最终结果影响很大的。</li></ul><blockquote><p>例如：商品的库存，银行的汇率，股市的牌价。</p></blockquote><h3 id="Mybatis-一级缓存"><a href="#Mybatis-一级缓存" class="headerlink" title="Mybatis 一级缓存"></a>Mybatis 一级缓存</h3><ul><li>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。</li><li>它指的是Mybatis中SqlSession对象的缓存。</li><li>如果 sqlSession 去执行 commit 操作(执行插入、更新、删除)，清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>当我们执行查询之后，查询的结果会同时存入到SqlSession为我们提供一块区域中。</li><li>该区域的结构是一个Map。当我们再次查询同样的数据，mybatis会先去sqlsession中<br>查询是否有，有的话直接拿出来用。</li><li>当SqlSession对象消失时，mybatis的一级缓存也就消失了。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span><br><span class="line">&lt;!-- 根据 id 查询 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findById"</span> resultType=<span class="string">"UsEr"</span> parameterType=<span class="string">"int"</span> useCache=<span class="string">"true"</span>&gt;</span><br><span class="line">select * from user where id = #&#123;uid&#125;&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="测试一级缓存"><a href="#测试一级缓存" class="headerlink" title="测试一级缓存"></a>测试一级缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试一级缓存 */</span><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">User user1 = userDao.findById(<span class="number">41</span>);System.out.println(user1); </span><br><span class="line"><span class="comment">// sqlSession.close();</span></span><br><span class="line"><span class="comment">//再次获取 SqlSession 对象</span><span class="comment">// sqlSession = factory.openSession(); </span></span><br><span class="line">sqlSession.clearCache();<span class="comment">//此方法也可以清空缓存</span>userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line"></span><br><span class="line">User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line"> System.out.println(user2);</span><br><span class="line">System.out.println(user1 == user2); &#125;<span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 测试缓存的同步</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClearlCache</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.根据 id 查询用户</span></span><br><span class="line">User user1 = userDao.findById(<span class="number">41</span>);System.out.println(user1);<span class="comment">//2.更新用户信息</span></span><br><span class="line">user1.setUsername(<span class="string">"update user clear cache"</span>); </span><br><span class="line">user1.setAddress(<span class="string">"北京市海淀区"</span>); </span><br><span class="line">userDao.updateUser(user1);<span class="comment">//3.再次查询 id 为 41 的用户</span>User user2 = userDao.findById(<span class="number">41</span>); </span><br><span class="line">System.out.println(user2); </span><br><span class="line">System.out.println(user1 == user2);</span><br><span class="line">&#125;当执行 sqlSession.close()后，再次获取 sqlSession 并查询 id=<span class="number">41</span> 的 User 对象时，又重新执行了 sql 语句，从数据库进行了查询操作。</span><br></pre></td></tr></table></figure><h3 id="Mybatis-二级缓存"><a href="#Mybatis-二级缓存" class="headerlink" title="Mybatis 二级缓存"></a>Mybatis 二级缓存</h3><ul><li>它指的是Mybatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession共享其缓存。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/04/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt=""></p><h4 id="二级缓存的使用步骤："><a href="#二级缓存的使用步骤：" class="headerlink" title="二级缓存的使用步骤："></a>二级缓存的使用步骤：</h4><ul><li>第一步：让Mybatis框架支持二级缓存（在SqlMapConfig.xml中配置）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;!-- 开启二级缓存的支持 --&gt;</span><br><span class="line">&lt;setting name="cacheEnabled" value="true"/&gt;&lt;/settings&gt;</span><br><span class="line">因为 cacheEnabled 的取值默认就为 <span class="keyword">true</span>，所以这一步可以省略不配置。</span><br><span class="line">为 <span class="keyword">true</span> 代表开启二级缓存;为 <span class="keyword">false</span> 代表不开启二级缓存。</span><br></pre></td></tr></table></figure><ul><li>第二步：让当前的映射文件支持二级缓存（在IUserDao.xml中配置）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache&gt;标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt; </span><br><span class="line">&lt;!DOCTYPE mapperPUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"> &lt;mapper namespace=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span><br><span class="line">&lt;!-- 开启二级缓存的支持 --&gt;&lt;cache&gt;&lt;/cache&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步：让当前的操作支持二级缓存（在select标签中配置）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 根据 id 查询 --&gt;&lt;select id="findById" resultType="user" parameterType="int" useCache="true"&gt; select * from user where id = #&#123;uid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">将 UserDao.xml 映射文件中的&lt;select&gt;标签中设置 useCache=”<span class="keyword">true</span>”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 <span class="keyword">false</span>。</span><br><span class="line"></span><br><span class="line">注意:针对每次查询都需要最新的数据 sql，要设置成 useCache=<span class="keyword">false</span>，禁用二级缓存。</span><br></pre></td></tr></table></figure><h4 id="二级缓存测试"><a href="#二级缓存测试" class="headerlink" title="二级缓存测试"></a>二级缓存测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> * <span class="doctag">@Company</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondLevelCacheTest</span> </span>&#123;<span class="keyword">private</span> InputStream in;</span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"> <span class="meta">@Before</span><span class="comment">//用于在测试方法执行之前执行 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> <span class="comment">//1.读取配置文件，生成字节输入流</span></span><br><span class="line">in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取 SqlSessionFactory</span></span><br><span class="line"> factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in); &#125;</span><br><span class="line">  <span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">in.close();&#125;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试一级缓存 */</span></span><br><span class="line"><span class="meta">@Test</span><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession1 = factory.openSession();IUserDao dao1 = sqlSession1.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">User user1 = dao1.findById(<span class="number">41</span>); </span><br><span class="line">System.out.println(user1); </span><br><span class="line">sqlSession1.close();<span class="comment">//一级缓存消失</span></span><br><span class="line">  SqlSession sqlSession2 = factory.openSession();IUserDao dao2 = sqlSession2.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">User user2 = dao2.findById(<span class="number">41</span>); </span><br><span class="line">System.out.println(user2);</span><br><span class="line">sqlSession2.close();</span><br><span class="line">  </span><br><span class="line">  System.out.println(user1 == user2); </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-注解开发"><a href="#Mybatis-注解开发" class="headerlink" title="Mybatis 注解开发"></a>Mybatis 注解开发</h2><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li>@Insert:实现新增 </li><li>@Update:实现更新</li><li>@Delete:实现删除 </li><li>@Select:实现查询 </li><li>@Result:实现结果集封装</li><li>@Results:可以与@Result 一起使用，封装多个结果集 </li><li>@ResultMap:实现引用@Results 定义的封装</li><li>@One:实现一对一结果集封装 </li><li>@Many:实现一对多结果集封装 </li><li>@SelectProvider: 实现动态SQL映射 </li><li>@CacheNamespace:实现注解二级缓存的使用</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多 关系映射， 一个用户对应多个账户</span></span><br><span class="line">    <span class="comment">//在一方写多方的列表对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 引入配置文件--&gt;</span><br><span class="line">    &lt;properties resource="jdbcConfig.properties"&gt;&lt;/properties&gt;</span><br><span class="line">    &lt;!--配置开启二级缓存--&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--实体类别名--&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.domain"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--设置mysql--&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!--dao--&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.dao"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace</span>(blocking = <span class="keyword">true</span>)  <span class="comment">//开启二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"userMap"</span>,value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"accounts"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(</span><br><span class="line">                    select = <span class="string">"com.jwang.dao.IAccountDao.findAccountByUid"</span>,</span><br><span class="line">                    fetchType = FetchType.LAZY</span><br><span class="line">            ))</span><br><span class="line">    &#125;) <span class="comment">//一对多，采用延迟加载</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username, address, sex, birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>) <span class="comment">//@ResultMap(value = &#123;"userMap"&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在多方实体类写一方的实体类对象引用</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"accountMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>, property = <span class="string">"money"</span>),</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>, column = <span class="string">"uid"</span>,</span><br><span class="line">                    one = <span class="meta">@One</span>(select=<span class="string">"com.jwang.dao.IUserDao.findById"</span>,</span><br><span class="line">                            fetchType= FetchType.EAGER))</span><br><span class="line">    &#125;)  <span class="comment">//一对一，立即加载 一个账号对应一个用户</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询账号信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account where uid = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA框架06 -- Springboot</title>
      <link href="/2019/05/16/JAVA%E6%A1%86%E6%9E%B606%20--%20Springboot/"/>
      <url>/2019/05/16/JAVA%E6%A1%86%E6%9E%B606%20--%20Springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="了解SpringBoot"><a href="#了解SpringBoot" class="headerlink" title="了解SpringBoot"></a>了解SpringBoot</h1><p>在这一部分，我们主要了解以下3个问题：</p><ul><li>什么是SpringBoot</li><li>为什么要使用SpringBoot</li><li>SpringBoot的特点</li></ul><h2 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h2><p>SpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525484756737.png" alt=""></p><p>我们可以看到下面的一段介绍：</p><blockquote><p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p></blockquote><p>其实人们把Spring Boot 称为搭建程序的<code>脚手架</code>。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p><h2 id="为什么要使用SpringBoot"><a href="#为什么要使用SpringBoot" class="headerlink" title="为什么要使用SpringBoot"></a>为什么要使用SpringBoot</h2><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p><h3 id="复杂的配置"><a href="#复杂的配置" class="headerlink" title="复杂的配置"></a>复杂的配置</h3><p>  项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p><h3 id="一个是混乱的依赖管理。"><a href="#一个是混乱的依赖管理。" class="headerlink" title="一个是混乱的依赖管理。"></a>一个是混乱的依赖管理。</h3><p>  项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p><p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p><h2 id="SpringBoot的特点"><a href="#SpringBoot的特点" class="headerlink" title="SpringBoot的特点"></a>SpringBoot的特点</h2><h3 id="Spring-Boot-主要目标"><a href="#Spring-Boot-主要目标" class="headerlink" title="Spring Boot 主要目标"></a>Spring Boot 主要目标</h3><ul><li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</li><li>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li><li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</li><li>绝对没有代码生成，也无需 XML 配置。</li></ul><p>更多细节，大家可以到<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">官网</a>查看。</p><h3 id="SpringBoot的核心功能"><a href="#SpringBoot的核心功能" class="headerlink" title="SpringBoot的核心功能"></a>SpringBoot的核心功能</h3><ul><li><p>起步依赖</p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p></li><li><p>自动配置</p><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。</p></li></ul><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525486435199.png" alt=""></p><h2 id="添加起步依赖"><a href="#添加起步依赖" class="headerlink" title="添加起步依赖"></a>添加起步依赖</h2><p>现在我们的项目与SpringBoot还没有什么关联。SpringBoot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！</p><h3 id="添加SpringBoot的起步依赖"><a href="#添加SpringBoot的起步依赖" class="headerlink" title="添加SpringBoot的起步依赖"></a>添加SpringBoot的起步依赖</h3><ul><li>SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parent</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加web启动器"><a href="#添加web启动器" class="headerlink" title="添加web启动器"></a>添加web启动器</h3><h4 id="web启动器"><a href="#web启动器" class="headerlink" title="web启动器"></a>web启动器</h4><ul><li>为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为<code>启动器</code>。因为我们是web项目，这里我们引入web启动器：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。<br>这个时候，我们会发现项目中多出了大量的依赖：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525486980765.png" alt=""></p><blockquote><p>这些都是SpringBoot根据spring-boot-starter-web这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。</p></blockquote><h3 id="管理jdk版本"><a href="#管理jdk版本" class="headerlink" title="管理jdk版本"></a>管理jdk版本</h3><ul><li>默认情况下，maven工程的jdk版本是1.5，而我们开发使用的是1.8，因此这里我们需要修改jdk版本，只需要简单的添加以下属性即可：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="完整pom-xml"><a href="#完整pom-xml" class="headerlink" title="完整pom.xml"></a>完整pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写SpringBoot引导类"><a href="#编写SpringBoot引导类" class="headerlink" title="编写SpringBoot引导类"></a>编写SpringBoot引导类</h2><p>要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问</p><p>Spring Boot项目通过main函数即可启动，我们需要创建一个启动类：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525487293907.png" alt=""></p><p>然后编写main函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写controller"><a href="#编写controller" class="headerlink" title="编写controller"></a>编写controller</h2><h3 id="SpringMVC的项目"><a href="#SpringMVC的项目" class="headerlink" title="SpringMVC的项目"></a>SpringMVC的项目</h3><ul><li>我们编写一个controller：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525487465325.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><h3 id="运行main函数，查看控制台"><a href="#运行main函数，查看控制台" class="headerlink" title="运行main函数，查看控制台"></a>运行main函数，查看控制台</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525487586023.png" alt=""></p><h3 id="监听的端口信息"><a href="#监听的端口信息" class="headerlink" title="监听的端口信息"></a>监听的端口信息</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525487705460.png" alt=""></p><ul><li>1）监听的端口是8080</li><li>2）SpringMVC的映射路径是：/</li><li>3）<code>/hello</code>路径已经映射到了<code>HelloController</code>中的<code>hello()</code>方法</li></ul><h3 id="打开页面访问：http-localhost-8080-hello"><a href="#打开页面访问：http-localhost-8080-hello" class="headerlink" title="打开页面访问：http://localhost:8080/hello"></a>打开页面访问：<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525487820824.png" alt=""></p><h1 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h1><h2 id="传统配置一个数据库连接池"><a href="#传统配置一个数据库连接池" class="headerlink" title="传统配置一个数据库连接池"></a>传统配置一个数据库连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="回顾历史"><a href="#回顾历史" class="headerlink" title="回顾历史"></a>回顾历史</h2><p>事实上，在Spring3.0开始，Spring官方就已经开始推荐使用java配置来代替传统的xml配置了，我们不妨来回顾一下Spring的历史：</p><h3 id="Spring1-0时代"><a href="#Spring1-0时代" class="headerlink" title="Spring1.0时代"></a>Spring1.0时代</h3><p>  在此时因为jdk1.5刚刚出来，注解开发并未盛行，因此一切Spring配置都是xml格式，想象一下所有的bean都用xml配置，细思极恐啊，心疼那个时候的程序员2秒</p><h3 id="Spring2-0时代"><a href="#Spring2-0时代" class="headerlink" title="Spring2.0时代"></a>Spring2.0时代</h3><p>  Spring引入了注解开发，但是因为并不完善，因此并未完全替代xml，此时的程序员往往是把xml与注解进行结合，貌似我们之前都是这种方式。</p><h3 id="Spring3-0及以后"><a href="#Spring3-0及以后" class="headerlink" title="Spring3.0及以后"></a>Spring3.0及以后</h3><p>  3.0以后Spring的注解已经非常完善了，因此Spring推荐大家使用完全的java配置来代替以前的xml，不过似乎在国内并未推广盛行。然后当SpringBoot来临，人们才慢慢认识到java配置的优雅。</p><p>有句古话说的好：拥抱变化，拥抱未来。所以我们也应该顺应时代潮流，做时尚的弄潮儿，一起来学习下java配置的玩法。</p><h2 id="尝试java配置"><a href="#尝试java配置" class="headerlink" title="尝试java配置"></a>尝试java配置</h2><h3 id="java配置主要靠java类和一些注解，常用的注解有："><a href="#java配置主要靠java类和一些注解，常用的注解有：" class="headerlink" title="java配置主要靠java类和一些注解，常用的注解有："></a>java配置主要靠java类和一些注解，常用的注解有：</h3><ul><li><code>@Configuration</code>：声明一个类作为配置类，代替xml文件</li><li><code>@Bean</code>：声明在方法上，将方法的返回值加入Bean容器，代替<code>&lt;bean&gt;</code>标签</li><li><code>@value</code>：属性注入</li><li><code>@PropertySource</code>：指定外部属性文件，</li></ul><h2 id="用java配置来尝试实现连接池配置"><a href="#用java配置来尝试实现连接池配置" class="headerlink" title="用java配置来尝试实现连接池配置"></a>用java配置来尝试实现连接池配置</h2><h3 id="引入Druid连接池依赖"><a href="#引入Druid连接池依赖" class="headerlink" title="引入Druid连接池依赖"></a>引入Druid连接池依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个jdbc-properties文件，编写jdbc属性"><a href="#创建一个jdbc-properties文件，编写jdbc属性" class="headerlink" title="创建一个jdbc.properties文件，编写jdbc属性"></a>创建一个jdbc.properties文件，编写jdbc属性</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/leyou</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    String driverClassName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><ul><li><code>@Configuration</code>：声明我们<code>JdbcConfig</code>是一个配置类</li><li><code>@PropertySource</code>：指定属性文件的路径是:<code>classpath:jdbc.properties</code></li><li>通过<code>@Value</code>为属性注入值</li><li>通过@Bean将 <code>dataSource()</code>方法声明为一个注册Bean的方法，Spring会自动调用该方法，将方法的返回值加入Spring容器中。</li></ul><blockquote><p>然后我们就可以在任意位置通过<code>@Autowired</code>注入DataSource了！</p></blockquote><h3 id="在HelloController中测试："><a href="#在HelloController中测试：" class="headerlink" title="在HelloController中测试："></a>在<code>HelloController</code>中测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, spring boot!"</span> + dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后Debug运行并查看：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525492528558.png" alt=""></p><p>属性注入成功了！</p><h2 id="SpringBoot的属性注入"><a href="#SpringBoot的属性注入" class="headerlink" title="SpringBoot的属性注入"></a>SpringBoot的属性注入</h2><p>在上面的案例中，我们实验了java配置方式。不过属性注入使用的是@Value注解。这种方式虽然可行，但是不够强大，因为它只能注入基本类型值。</p><p>在SpringBoot中，提供了一种新的属性注入方式，支持各种java基本数据类型及复杂类型的注入。</p><h3 id="新建一个类，用来进行属性注入"><a href="#新建一个类，用来进行属性注入" class="headerlink" title="新建一个类，用来进行属性注入"></a>新建一个类，用来进行属性注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jdbc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="comment">// getters 和 setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在类上通过@ConfigurationProperties注解声明当前类为属性读取类</p></li><li><p><code>prefix=&quot;jdbc&quot;</code>读取属性文件中，前缀为jdbc的值。</p></li><li><p>在类上定义各个属性，名称必须与属性文件中<code>jdbc.</code>后面部分一致</p></li><li><p>需要注意的是，这里我们并没有指定属性文件的地址，所以我们需要把jdbc.properties名称改为application.properties，这是SpringBoot默认读取的属性文件名：</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525496325572.png" alt=""></p><h3 id="在JdbcConfig中使用这个属性"><a href="#在JdbcConfig中使用这个属性" class="headerlink" title="在JdbcConfig中使用这个属性"></a>在JdbcConfig中使用这个属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JdbcProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(JdbcProperties jdbc)</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(jdbc.getUrl());</span><br><span class="line">        dataSource.setDriverClassName(jdbc.getDriverClassName());</span><br><span class="line">        dataSource.setUsername(jdbc.getUsername());</span><br><span class="line">        dataSource.setPassword(jdbc.getPassword());</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过-EnableConfigurationProperties-JdbcProperties-class-来声明要使用JdbcProperties这个类的对象"><a href="#通过-EnableConfigurationProperties-JdbcProperties-class-来声明要使用JdbcProperties这个类的对象" class="headerlink" title="通过@EnableConfigurationProperties(JdbcProperties.class)来声明要使用JdbcProperties这个类的对象"></a>通过<code>@EnableConfigurationProperties(JdbcProperties.class)</code>来声明要使用<code>JdbcProperties</code>这个类的对象</h4><h4 id="通过以下方式注入JdbcProperties"><a href="#通过以下方式注入JdbcProperties" class="headerlink" title="通过以下方式注入JdbcProperties"></a>通过以下方式注入JdbcProperties</h4><ul><li>@Autowired注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcProperties prop;</span><br></pre></td></tr></table></figure><ul><li>构造函数注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcProperties prop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcConfig</span><span class="params">(Jdbcproperties prop)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prop = prop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明有@Bean的方法参数注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Datasource <span class="title">dataSource</span><span class="params">(JdbcProperties prop)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525492528558.png" alt=""></p><h3 id="SpringBoot推荐的注入方式。两者对比关系"><a href="#SpringBoot推荐的注入方式。两者对比关系" class="headerlink" title="SpringBoot推荐的注入方式。两者对比关系"></a>SpringBoot推荐的注入方式。两者对比关系</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525496543249.png" alt=""></p><h4 id="优势：Relaxed-binding：松散绑定"><a href="#优势：Relaxed-binding：松散绑定" class="headerlink" title="优势：Relaxed binding：松散绑定"></a>优势：Relaxed binding：松散绑定</h4><ul><li><p>不严格要求属性文件中的属性名与成员变量名一致。支持驼峰，中划线，下划线等等转换，甚至支持对象引导。比如：user.friend.name：代表的是user对象中的friend属性中的name属性，显然friend也是对象。@value注解就难以完成这样的注入方式。</p></li><li><p>meta-data support：元数据支持，帮助IDE生成属性提示（写开源框架会用到）。</p><p>  ​</p></li></ul><h2 id="更优雅的注入"><a href="#更优雅的注入" class="headerlink" title="更优雅的注入"></a>更优雅的注入</h2><h3 id="直接在需要的地方声明"><a href="#直接在需要的地方声明" class="headerlink" title="直接在需要的地方声明"></a>直接在需要的地方声明</h3><ul><li>事实上，如果一段属性只有一个Bean需要使用，我们无需将其注入到一个类（JdbcProperties）中。而是直接在需要的地方声明即可：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 声明要注入的属性前缀，SpringBoot会自动把相关属性通过set方法注入到DataSource中</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jdbc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们直接把<code>@ConfigurationProperties(prefix = &quot;jdbc&quot;)</code>声明在需要使用的<code>@Bean</code>的方法上，然后SpringBoot就会自动调用这个Bean（此处是DataSource）的set方法，然后完成注入。使用的前提是：<strong>该类必须有对应属性的set方法！</strong></li></ul><p>我们将jdbc的url改成：/heima，再次测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525497513206.png" alt=""></p><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><p>使用SpringBoot之后，一个整合了SpringMVC的WEB工程开发，变的无比简单，那些繁杂的配置都消失不见了，这是如何做到的？</p><p>一切魔力的开始，都是从我们的main函数来的，所以我们再次来看下启动类：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525488044650.png" alt=""></p><p>我们发现特别的地方有两个：</p><ul><li>注解：@SpringBootApplication</li><li>run方法：SpringApplication.run()</li></ul><p>我们分别来研究这两个部分。</p><h2 id="了解-SpringBootApplication"><a href="#了解-SpringBootApplication" class="headerlink" title="了解@SpringBootApplication"></a>了解@SpringBootApplication</h2><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525488226710.png" alt=""></p><p>这里重点的注解有3个：</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><ul><li>查看源码：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525488518514.png" alt=""></p><p>通过这段我们可以看出，在这个注解上面，又有一个<code>@Configuration</code>注解。通过上面的注释阅读我们知道：这个注解的作用就是声明当前类是一个配置类，然后Spring会自动扫描到添加了<code>@Configuration</code>的类，并且读取其中的配置信息。而<code>@SpringBootConfiguration</code>是来声明当前类是SpringBoot应用的配置类，项目中只能有一个。所以一般我们无需自己添加。</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><ul><li>官网上有一段说明：</li></ul><blockquote><p>第二级的注解<code>@EnableAutoConfiguration</code>，告诉SpringBoot基于你所添加的依赖，去“猜测”你想要如何配置Spring。比如我们引入了<code>spring-boot-starter-web</code>，而这个启动器中帮我们添加了<code>tomcat</code>、<code>SpringMVC</code>的依赖。此时自动配置就知道你是要开发一个web应用，所以就帮你完成了web及SpringMVC的默认配置了！</p></blockquote><ul><li><p>总结，SpringBoot内部对大量的第三方库或Spring内部库进行了默认配置，这些配置是否生效，取决于我们是否引入了对应库所需的依赖，如果有那么默认配置就会生效。</p></li><li><p>所以，我们使用SpringBoot构建一个项目，只需要引入所需框架的依赖，配置就可以交给SpringBoot处理了。除非你不希望使用SpringBoot的默认配置，它也提供了自定义配置的入口。</p></li></ul><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li>源码</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525498265579.png" alt=""></p><ul><li>查看注释：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525498351385.png" alt=""></p><p>大概的意思：</p><blockquote><p>配置组件扫描的指令。提供了类似与<code>&lt;context:component-scan&gt;</code>标签的作用</p><p>通过basePackageClasses或者basePackages属性来指定要扫描的包。如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包</p></blockquote><ul><li>而我们的@SpringBootApplication注解声明的类就是main函数所在的启动类，因此扫描的包是该类所在包及其子包。因此，<strong>一般启动类会放在一个比较前的包目录中。</strong></li></ul><h2 id="默认配置原理"><a href="#默认配置原理" class="headerlink" title="默认配置原理"></a>默认配置原理</h2><h3 id="默认配置类"><a href="#默认配置类" class="headerlink" title="默认配置类"></a>默认配置类</h3><ul><li><p>@EnableAutoConfiguration会开启SpringBoot的自动配置，并且根据你引入的依赖来生效对应的默认配置。那么问题来了：</p><ul><li>这些默认配置是在哪里定义的呢？</li><li>为何依赖引入就会触发配置呢？</li></ul></li><li><p>其实在我们的项目中，已经引入了一个依赖：spring-boot-autoconfigure，其中定义了大量自动配置类：</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525499397690.png" alt=""></p><p>还有：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525499426598.png" alt=""></p><p>非常多，几乎涵盖了现在主流的开源框架，例如：</p><ul><li>redis</li><li>jms</li><li>amqp</li><li>jdbc</li><li>jackson</li><li>mongodb</li><li>jpa</li><li>solr</li><li>elasticsearch</li></ul><p>… 等等</p><ul><li>我们来看一个我们熟悉的，例如SpringMVC，查看mvc 的自动配置类：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525499859426.png" alt=""></p><p>打开WebMvcAutoConfiguration：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500000816.png" alt=""></p><p>我们看到这个类上的4个注解：</p><ul><li><code>@Configuration</code>：声明这个类是一个配置类</li></ul><ul><li><p><code>@ConditionalOnWebApplication(type = Type.SERVLET)</code></p><p>ConditionalOn，翻译就是在某个条件下，此处就是满足项目的类是是Type.SERVLET类型，也就是一个普通web工程，显然我们就是</p></li><li><p><code>@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</code></p><p>这里的条件是OnClass，也就是满足以下类存在：Servlet、DispatcherServlet、WebMvcConfigurer，其中Servlet只要引入了tomcat依赖自然会有，后两个需要引入SpringMVC才会有。这里就是判断你是否引入了相关依赖，引入依赖后该条件成立，当前类的配置才会生效！</p></li><li><p><code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></p><p>这个条件与上面不同，OnMissingBean，是说环境中没有指定的Bean这个才生效。其实这就是自定义配置的入口，也就是说，如果我们自己配置了一个WebMVCConfigurationSupport的类，那么这个默认配置就会失效！</p></li></ul><p>接着，我们查看该类中定义了什么：</p><p>视图解析器：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500405278.png" alt=""></p><p>处理器适配器（HandlerAdapter）：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500452517.png" alt=""></p><p>还有很多，这里就不一一截图了。</p><h3 id="默认配置属性"><a href="#默认配置属性" class="headerlink" title="默认配置属性"></a>默认配置属性</h3><h4 id="默认配置的属性来自哪里呢"><a href="#默认配置的属性来自哪里呢" class="headerlink" title="默认配置的属性来自哪里呢"></a>默认配置的属性来自哪里呢</h4><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500697391.png" alt=""></p><ul><li>我们看到，这里通过@EnableAutoConfiguration注解引入了两个属性：WebMvcProperties和ResourceProperties。这不正是SpringBoot的属性注入玩法嘛。</li></ul><h4 id="查看这两个属性类"><a href="#查看这两个属性类" class="headerlink" title="查看这两个属性类"></a>查看这两个属性类</h4><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500810914.png" alt=""></p><ul><li><p>找到了内部资源视图解析器的prefix和suffix属性。</p></li><li><p>ResourceProperties中主要定义了静态资源（.js,.html,.css等)的路径：</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500921773.png" alt=""></p><p>如果我们要覆盖这些默认属性，只需要在application.properties中定义与其前缀prefix和字段名一致的属性即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个"><a href="#SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个" class="headerlink" title="SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个"></a>SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个</h3><ul><li>你引入了相关依赖</li><li>你自己没有配置</li></ul><h4 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h4><p>所以，我们如果不想配置，只需要引入依赖即可，而依赖版本我们也不用操心，因为只要引入了SpringBoot提供的stater（启动器），就会自动管理依赖及版本了。</p><p>因此，玩SpringBoot的第一件事情，就是找启动器，SpringBoot提供了大量的默认启动器</p><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>另外，SpringBoot的默认配置，都会读取默认属性，而这些属性可以通过自定义<code>application.properties</code>文件来进行覆盖。这样虽然使用的还是默认配置，但是配置中的值改成了我们自定义的。</p><p>因此，玩SpringBoot的第二件事情，就是通过<code>application.properties</code>来覆盖默认属性值，形成自定义配置。我们需要知道SpringBoot的默认属性key</p><h1 id="SpringBoot实践"><a href="#SpringBoot实践" class="headerlink" title="SpringBoot实践"></a>SpringBoot实践</h1><p>接下来，我们来看看如何用SpringBoot来玩转以前的SSM</p><h2 id="整合SpringMVC"><a href="#整合SpringMVC" class="headerlink" title="整合SpringMVC"></a>整合SpringMVC</h2><p>虽然默认配置已经可以使用SpringMVC了，不过我们有时候需要进行自定义配置。</p><h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><p>查看SpringBoot的全局属性可知，端口通过以下方式配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><p>重启服务后测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525511878440.png" alt=""></p><h3 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h3><p>现在，我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？</p><p>回顾我们上面看的源码，有一个叫做ResourceProperties的类，里面就定义了静态资源的默认查找路径：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525500921773.png" alt=""></p><p>默认的静态资源路径为：</p><ul><li>classpath:/META-INF/resources/</li><li>classpath:/resources/</li><li>classpath:/static/</li><li>classpath:/public</li></ul><p>只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。</p><p>我们习惯会把静态资源放在<code>classpath:/static/</code>目录下。我们创建目录，并且添加一些静态资源：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525512196866.png" alt=""></p><p>重启项目后测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525512253682.png" alt=""></p><h3 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h3><h4 id="拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？"><a href="#拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？" class="headerlink" title="拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？"></a>拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？</h4><ul><li>拦截器不是一个普通属性，而是一个类，所以就要用到java配置方式了。在SpringBoot官方文档中有这么一段说明：</li></ul><blockquote><p>如果你想要保持Spring Boot 的一些默认MVC特征，同时又想自定义一些MVC配置（包括：拦截器，格式化器, 视图控制器、消息转换器 等等），你应该让一个类实现<code>WebMvcConfigurer</code>，并且添加<code>@Configuration</code>注解，但是<strong>千万不要</strong>加<code>@EnableWebMvc</code>注解。如果你想要自定义<code>HandlerMapping</code>、<code>HandlerAdapter</code>、<code>ExceptionResolver</code>等组件，你可以创建一个<code>WebMvcRegistrationsAdapter</code>实例 来提供以上组件。</p><p>如果你想要完全自定义SpringMVC，不保留SpringBoot提供的一切特征，你可以自己定义类并且添加<code>@Configuration</code>注解和<code>@EnableWebMvc</code>注解</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><p>通过实现<code>WebMvcConfigurer</code>并添加<code>@Configuration</code>注解来实现自定义部分SpringMvc配置。</p></li><li><p>首先我们定义一个拦截器：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LoginInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"preHandle method is now running!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"postHandle method is now running!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"afterCompletion method is now running!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后，我们定义配置类，注册拦截器：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过<span class="doctag">@Bean</span>注解，将我们定义的拦截器注册到Spring容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写接口中的addInterceptors方法，添加自定义拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过registry来注册拦截器，通过addPathPatterns来添加拦截路径</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">this</span>.loginInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结构如下：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525513555179.png" alt=""></p><h4 id="运行并查看日志"><a href="#运行并查看日志" class="headerlink" title="运行并查看日志"></a>运行并查看日志</h4><ul><li><p>你会发现日志中什么都没有，因为我们记录的log级别是debug，默认是显示info以上，我们需要进行配置。</p></li><li><p>SpringBoot通过<code>logging.level.*=debug</code>来配置日志级别，*填写包名</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置com.leyou包的日志级别为debug</span></span><br><span class="line"><span class="meta">logging.level.com.leyou</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><ul><li>再次运行查看：</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">01</span><span class="variable">.811</span> DEBUG <span class="number">4548</span> --- [p-nio-<span class="number">80</span>-exec-<span class="number">1</span>] com<span class="variable">.leyou</span><span class="variable">.interceptor</span><span class="variable">.LoginInterceptor</span>   : preHandle method is now running!</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">01</span><span class="variable">.854</span> DEBUG <span class="number">4548</span> --- [p-nio-<span class="number">80</span>-exec-<span class="number">1</span>] com<span class="variable">.leyou</span><span class="variable">.interceptor</span><span class="variable">.LoginInterceptor</span>   : postHandle method is now running!</span><br><span class="line"><span class="number">2018</span>-<span class="number">05</span>-<span class="number">05</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">01</span><span class="variable">.854</span> DEBUG <span class="number">4548</span> --- [p-nio-<span class="number">80</span>-exec-<span class="number">1</span>] com<span class="variable">.leyou</span><span class="variable">.interceptor</span><span class="variable">.LoginInterceptor</span>   : afterCompletion method is now running!</span><br></pre></td></tr></table></figure><h2 id="整合jdbc和事务"><a href="#整合jdbc和事务" class="headerlink" title="整合jdbc和事务"></a>整合jdbc和事务</h2><h3 id="spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？"><a href="#spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？" class="headerlink" title="spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？"></a>spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？</h3><ul><li>答案是不需要处理，我们只要找到SpringBoot提供的启动器即可：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当然，不要忘了数据库驱动，SpringBoot并不知道我们用的什么数据库，这里我们选择MySQL：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>至于事务，SpringBoot中通过注解来控制。就是我们熟知的<code>@Transactional</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合连接池"><a href="#整合连接池" class="headerlink" title="整合连接池"></a>整合连接池</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>其实，在刚才引入jdbc启动器的时候，SpringBoot已经自动帮我们引入了一个连接池：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525514424562.png" alt=""></p><ul><li>HikariCP应该是目前速度最快的连接池了，我们看看它与c3p0的对比：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525516441005.png" alt=""></p><h3 id="因此，我们只需要指定连接池参数即可"><a href="#因此，我们只需要指定连接池参数即可" class="headerlink" title="因此，我们只需要指定连接池参数即可"></a>因此，我们只需要指定连接池参数即可</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接四大参数</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/heima</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123</span></span><br><span class="line"><span class="comment"># 可省略，SpringBoot自动推断</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.hikari.idle-timeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">30</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.minimum-idle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><h3 id="也可以使用Druid官方提供的启动器"><a href="#也可以使用Druid官方提供的启动器" class="headerlink" title="也可以使用Druid官方提供的启动器"></a>也可以使用Druid官方提供的启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同："><a href="#连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同：" class="headerlink" title="连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同："></a>连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化连接数</span></span><br><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#最大活动连接</span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#获取连接时测试是否可用</span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#监控页面启动</span></span><br><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h2><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><ul><li>SpringBoot官方并没有提供Mybatis的启动器，不过Mybatis<a href="https://github.com/mybatis/spring-boot-starter">官网</a>自己实现了：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置，基本没有需要配置的：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mybatis 别名扫描</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.heima.pojo</span></span><br><span class="line"><span class="comment"># mapper.xml文件位置,如果没有映射文件，请注释掉</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mappers/*.xml</span></span><br></pre></td></tr></table></figure><ul><li>需要注意，这里没有配置mapper接口扫描包，因此我们需要给每一个Mapper接口添加<code>@Mapper</code>注解，才能被识别。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用mapper"><a href="#通用mapper" class="headerlink" title="通用mapper"></a>通用mapper</h3><ul><li>通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不需要做任何配置就可以使用了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">tk</span>.<span class="title">mybatis</span>.<span class="title">mapper</span>.<span class="title">common</span>.<span class="title">Mapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动测试-1"><a href="#启动测试-1" class="headerlink" title="启动测试"></a>启动测试</h2><h3 id="将controller进行简单改造"><a href="#将controller进行简单改造" class="headerlink" title="将controller进行简单改造"></a>将controller进行简单改造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userService.queryById(<span class="number">8L</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们启动项目，查看：</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525516714124.png" alt=""></p><h1 id="Thymeleaf快速入门"><a href="#Thymeleaf快速入门" class="headerlink" title="Thymeleaf快速入门"></a>Thymeleaf快速入门</h1><p>SpringBoot并不推荐使用jsp，但是支持一些模板引擎技术：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525517263421.png" alt=""></p><p>以前大家用的比较多的是Freemarker，但是我们今天的主角是Thymeleaf！</p><h2 id="为什么是Thymeleaf？"><a href="#为什么是Thymeleaf？" class="headerlink" title="为什么是Thymeleaf？"></a>为什么是Thymeleaf？</h2><p>简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p><ul><li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><p>接下来，我们就通过入门案例来体会Thymeleaf的魅力：</p><h2 id="6-2-编写接口"><a href="#6-2-编写接口" class="headerlink" title="6.2.编写接口"></a>6.2.编写接口</h2><p>编写一个controller，返回一些用户数据，放入模型中，等会在页面渲染</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/all"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">all</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">this</span>.userService.queryAll();</span><br><span class="line">    <span class="comment">// 放入模型</span></span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">    <span class="comment">// 返回模板名称（就是classpath:/templates/目录下的html文件名）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"users"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-引入启动器"><a href="#6-3-引入启动器" class="headerlink" title="6.3.引入启动器"></a>6.3.引入启动器</h2><p>直接引入启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot会自动为Thymeleaf注册一个视图解析器：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525522481007.png" alt=""></p><p>与解析JSP的InternalViewResolver类似，Thymeleaf也会根据前缀和后缀来确定模板文件的位置：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525522811359.png" alt=""></p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p><p>一般我们无需进行修改，默认即可。</p><h2 id="6-4-静态页面"><a href="#6-4-静态页面" class="headerlink" title="6.4.静态页面"></a>6.4.静态页面</h2><p>根据上面的文档介绍，模板默认放在classpath下的templates文件夹，我们新建一个html文件放入其中：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/springboot/assets/1525521721279.png" alt=""></p><p>编写html模板，渲染模型中的数据：</p><p>注意，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span> &#123;<span class="attribute">border-collapse</span>: collapse; <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">width</span>: <span class="number">80%</span>; <span class="attribute">margin</span>: auto&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid darkslategray;<span class="attribute">padding</span>: <span class="number">10px</span>&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: darkslategray; font-size: 30px"</span>&gt;</span>欢迎光临！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.userName&#125;"</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.sex&#125; == 1 ? '男': '女'"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(user.birthday, 'yyyy-MM-dd')&#125;"</span>&gt;</span>1980-02-30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.note&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到这里使用了以下语法：</p><ul><li><code>${}</code> ：这个类似与el表达式，但其实是ognl的语法，比el表达式更加强大</li><li><code>th-</code>指令：<code>th-</code>是利用了Html5中的自定义属性来实现的。如果不支持H5，可以用<code>data-th-</code>来代替<ul><li><code>th:each</code>：类似于<code>c:foreach</code>  遍历集合，但是语法更加简洁</li><li><code>th:text</code>：声明标签中的文本<ul><li>例如<code>&lt;td th-text=&#39;${user.id}&#39;&gt;1&lt;/td&gt;</code>，如果user.id有值，会覆盖默认的1</li><li>如果没有值，则会显示td中默认的1。这正是thymeleaf能够动静结合的原因，模板解析失败不影响页面的显示效果，因为会显示默认值！</li></ul></li></ul></li></ul><h2 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5.测试"></a>6.5.测试</h2><p>接下来，我们打开页面测试一下：</p><h2 id="6-6-模板缓存"><a href="#6-6-模板缓存" class="headerlink" title="6.6.模板缓存"></a>6.6.模板缓存</h2><p>Thymeleaf会在第一次对模板解析之后进行缓存，极大的提高了并发处理能力。但是这给我们开发带来了不便，修改页面后并不会立刻看到效果，我们开发阶段可以关掉缓存使用：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发阶段关闭thymeleaf的模板缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>​    在Idea中，我们需要在修改页面后按快捷键：<code>Ctrl + Shift + F9</code> 对项目进行rebuild才可以。</p><p>​    eclipse中没有测试过。</p><p>我们可以修改页面，测试一下。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术04--Cookie&amp;Session笔记</title>
      <link href="/2019/05/07/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF04--Cookie&amp;Session%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/07/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF04--Cookie&amp;Session%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h3 id="基本要点"><a href="#基本要点" class="headerlink" title="基本要点"></a>基本要点</h3><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h2 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h2><p>概念：客户端会话技术，将数据保存到客户端</p><h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><ul><li>使用步骤：<ol><li>创建Cookie对象，绑定数据<ul><li>new Cookie(String name, String value) </li></ul></li><li>发送Cookie对象<ul><li>response.addCookie(Cookie cookie) </li></ul></li><li>获取Cookie，拿到数据<ul><li>Cookie[]  request.getCookies()  </li></ul></li></ol></li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/Cookie%E5%8E%9F%E7%90%86.bmp" alt=""></p><ul><li>基于响应头set-cookie和请求头cookie实现</li></ul><h3 id="cookie的细节"><a href="#cookie的细节" class="headerlink" title="cookie的细节"></a>cookie的细节</h3><h4 id="一次可不可以发送多个cookie"><a href="#一次可不可以发送多个cookie" class="headerlink" title="一次可不可以发送多个cookie?"></a>一次可不可以发送多个cookie?</h4><ul><li>可以</li><li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</li></ul><h4 id="cookie在浏览器中保存多长时间？"><a href="#cookie在浏览器中保存多长时间？" class="headerlink" title="cookie在浏览器中保存多长时间？"></a>cookie在浏览器中保存多长时间？</h4><ol><li>默认情况下，当浏览器关闭后，Cookie数据被销毁</li><li>持久化存储：<ul><li>setMaxAge(int seconds)<ol><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值</li><li>零：删除cookie信息</li></ol></li></ul></li></ol><h4 id="cookie能不能存中文？"><a href="#cookie能不能存中文？" class="headerlink" title="cookie能不能存中文？"></a>cookie能不能存中文？</h4><ul><li>在tomcat 8 之前 cookie中不能直接存储中文数据。<ul><li>需要将中文数据转码—一般采用URL编码(%E3)</li></ul></li><li>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</li></ul><h4 id="cookie共享问题？"><a href="#cookie共享问题？" class="headerlink" title="cookie共享问题？"></a>cookie共享问题？</h4><ol><li><p>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</p><ul><li><p>默认情况下cookie不能共享</p></li><li><p>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</p><ul><li>如果要共享，则可以将path设置为”/“</li></ul></li></ul></li></ol><ol start="2"><li>不同的tomcat服务器间cookie共享问题？<ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享<ul><li>setDomain(“.baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享</li></ul></li></ul></li></ol><h3 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h3><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li></ol><ul><li>作用：<ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul><h2 id="案例：记住上一次访问时间"><a href="#案例：记住上一次访问时间" class="headerlink" title="案例：记住上一次访问时间"></a>案例：记住上一次访问时间</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li><li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li></ol><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol><li>可以采用Cookie来完成</li><li>在服务器中的Servlet判断是否有一个名为lastTime的cookie<ol><li>有：不是第一次访问<ol><li>响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li><li>没有：是第一次访问<ol><li>响应数据：您好，欢迎您首次访问</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/Cookie%E6%A1%88%E4%BE%8B_%E8%AE%B0%E4%BD%8F%E4%B8%8A%E6%AC%A1%E8%AE%BF%E9%97%AE%E6%97%B6%E9%97%B4.bmp" alt=""></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jwang.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上次访问时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletCookieDemo1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletCookieDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span> &amp;&amp; cookies.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="keyword">final</span> String name = cookie.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line"></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line">                    str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line"></span><br><span class="line">                    value = URLDecoder.decode(value, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">                    response.getWriter().write(<span class="string">"欢迎再次回来，上次访问时间："</span>+value);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cookies==<span class="keyword">null</span> || cookies.length == <span class="number">0</span> || flag == <span class="keyword">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line">            str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>, str_date);</span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"首次访问"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/JSP%E5%8E%9F%E7%90%86.bmp" alt=""></p><ul><li>Java Server Pages： java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>JSP本质上就是一个Servlet</li></ul><h3 id="JSP的脚本：JSP定义Java代码的方式"><a href="#JSP的脚本：JSP定义Java代码的方式" class="headerlink" title="JSP的脚本：JSP定义Java代码的方式"></a>JSP的脚本：JSP定义Java代码的方式</h3><ol><li>&lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li>&lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。（可能出现线程安全问题）</li><li>&lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。（就近原则）</li></ol><h3 id="JSP的内置对象："><a href="#JSP的内置对象：" class="headerlink" title="JSP的内置对象："></a>JSP的内置对象：</h3><ul><li>在jsp页面中不需要获取和创建，可以直接使用的对象</li><li>jsp一共有9个内置对象。</li><li>其中3个：<ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似</li><li>response.getWriter()和out.write()的区别：<ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li>response.getWriter()数据输出永远在out.write()之前</li></ul></li></ul></li></ul><h3 id="案例-改造Cookie案例"><a href="#案例-改造Cookie案例" class="headerlink" title="案例:改造Cookie案例"></a>案例:改造Cookie案例</h3><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/Session%E5%8E%9F%E7%90%86.bmp" alt=""></p><h3 id="快速入门：-1"><a href="#快速入门：-1" class="headerlink" title="快速入门："></a>快速入门：</h3><ol><li><p>获取HttpSession对象：</p><ul><li>HttpSession session = request.getSession();</li></ul></li><li><p>使用HttpSession对象：</p><ul><li>Object getAttribute(String name)  </li><li>void setAttribute(String name, Object value)</li><li>void removeAttribute(String name)  </li></ul></li><li><p>原理</p><ul><li>Session的实现是依赖于Cookie的。</li></ul></li></ol><h3 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h3><h4 id="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"><a href="#当客户端关闭后，服务器不关闭，两次获取session是否为同一个？" class="headerlink" title="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"></a>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</h4><ul><li>默认情况下。不是(相当于本次会话结束)。</li><li>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure><h4 id="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h4><ul><li>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作<ul><li>session的钝化：<ul><li>在服务器正常关闭之前，将session对象序列化到硬盘上</li></ul></li><li>session的活化：<ul><li>在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul></li></ul></li></ul><h4 id="session什么时候被销毁？"><a href="#session什么时候被销毁？" class="headerlink" title="session什么时候被销毁？"></a>session什么时候被销毁？</h4><ul><li>服务器关闭<ol start="2"><li>session对象调用invalidate() 。</li><li>session默认失效时间 30分钟</li></ol></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择性配置修改tomcat中web.xml修改</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><h3 id="session的特点"><a href="#session的特点" class="headerlink" title="session的特点"></a>session的特点</h3><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><ul><li>session与Cookie的区别：<ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol></li></ul><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><ol><li>案例需求：<ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户名，密码以及验证码。<ul><li>如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</li><li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li><li>如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</li></ul></li></ol></li></ol><ol start="2"><li>分析：</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B.bmp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术02--Servlet(Servlet-HTTP)</title>
      <link href="/2019/05/06/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF02--Servlet(Servlet-HTTP)/"/>
      <url>/2019/05/06/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF02--Servlet(Servlet-HTTP)/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet：server-applet"><a href="#Servlet：server-applet" class="headerlink" title="Servlet：server applet"></a>Servlet：server applet</h2><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/Servlet.bmp" alt=""></p><ul><li>概念：运行在服务器端的小程序</li><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>创建JavaEE项目 创建项目选择web application/配置好tomcat和servlet</li><li>定义一个类，实现Servlet接口<ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li>实现接口中的抽象方法</li><li>配置Servlet<ul><li>在web.xml中配置：</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="line">         version=<span class="string">"4.0"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">jwang</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">ServletDemo1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">demo1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">demo1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>执行原理：<ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.bmp" alt=""></p><h3 id="Servlet中的生命周期方法："><a href="#Servlet中的生命周期方法：" class="headerlink" title="Servlet中的生命周期方法："></a>Servlet中的生命周期方法：</h3><ol><li>被创建：执行init方法，只执行一次<ul><li>Servlet什么时候被创建？<ul><li>默认情况下，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机。<ul><li>在<servlet>标签下配置<ol><li>第一次被访问时，创建<ul><li><code>&lt;load-on-startup&gt;</code>的值为负数</li></ul></li><li>在服务器启动时，创建<ul><li><code>&lt;load-on-startup&gt;</code>的值为0或正整数</li></ul></li></ol></li></ul></li></ul></li></ul></li></ol><pre><code>* Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的    * 多个用户同时访问时，可能存在线程安全问题。    * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改值</code></pre><ol start="2"><li>提供服务：执行service方法，执行多次<ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li>被销毁：执行destroy方法，只执行一次<ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol><h3 id="Servlet3-0："><a href="#Servlet3-0：" class="headerlink" title="Servlet3.0："></a>Servlet3.0：</h3><ul><li><p>好处：</p><ul><li>支持注解配置。可以不需要web.xml了。</li></ul></li><li><p>步骤：</p><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>复写方法</li><li>在类上使用@WebServlet注解，进行配置<ul><li>@WebServlet(“资源路径即URL访问的最后名”)</li></ul></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"><span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"><span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><ul><li>Servlet 接口 – GenericServlet抽象类–HttpServlet抽象类</li><li>GenericServlet抽象类<ul><li>将Servlet接口中其他方法做了空实现，只将Service方法作为抽象</li><li>定义Servlet类时，可以继承GenericServlet实现Service方法即可<ul><li>service方法：1.获取数据（需要判断请求方式String str = req.getMethod()是get还是post）—HttpServlet</li></ul></li></ul></li><li>HttpServlet（建议使用）：对http协议的一种封装，简化操作<ul><li>定义类继承HttpServlet方法 </li><li>其中定义了 <code>doGet(){}</code>.<code>doPost(){}</code>方法，只需要覆写这两个就行</li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/request/HttpServlet.bmp" alt=""></p><h3 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h3><ul><li>urlpartten：servlet配置的访问路径</li><li>一个servlet可以定义多个URL路径 <code>@WebServlet({&quot;/demo4&quot;,&quot;/demo04&quot;})</code></li><li>路径定义规则: 1. <code>/xxx</code>  2. <code>/xxx/xx</code>  3.<code>*.do</code></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>Hyper Text Transfer Protocol 超文本传输协议</li><li>传输协议：定义了，客户端和服务端通信时，发送数据的格式<ul><li>特点：<ul><li>基于TCP/IP的高级协议</li><li>http默认端口号为80</li><li>基于请求响应模型的（一次请求对应一次响应）</li><li>无状态协议：每次请求间相互独立，不能交互数据</li></ul></li></ul></li><li>历史版本</li><li>1.0: 每一次请求都会建立一个新的连接</li><li>1.1: 复用连接，缓存支持较好</li></ul><h3 id="请求消息数据格式（servletRequest对象）"><a href="#请求消息数据格式（servletRequest对象）" class="headerlink" title="请求消息数据格式（servletRequest对象）"></a>请求消息数据格式（servletRequest对象）</h3><ul><li><p>请求消息：客户端发送给服务器端的数据</p><ul><li>数据格式：<ol><li>请求行</li><li>请求头</li><li>请求空行</li><li>请求体</li></ol></li></ul></li><li><p>请求行</p><ul><li>格式：请求方式 请求URL 请求协议/版本。GET /login.html HTTP/1.1</li><li>请求方式：HTTP协议中有7种请求方式，常用有2种<ul><li>GET：请求参数在请求行中,在URL后 请求URL长度限制 不安全</li><li>POST：请求参数在请求体中 请求的URL长度没有限制 相对安全</li></ul></li></ul></li><li><p>请求头: 浏览器客户端告知服务器端个人信息</p><ul><li>格式：请求头名称：请求头值</li><li>创建请求头参数：<ul><li>User-Agent：浏览器告诉服务器，访问使用的浏览器版本信息，可以在服务器端获取该头的信息，解决浏览器兼容问题</li><li>Referer：告诉服务器，当前请求从哪里来     <code>Referer: http://localhost:8080/login.html</code><ul><li>防止盗链 可以使用该referer字符串判断该连接是否是从目标连接来</li><li>统计 从百度/搜狐等点击进来的人有多少</li></ul></li></ul></li></ul></li><li><p>请求空行</p></li><li><p>空行 </p></li><li><p>请求体（正文）</p><ul><li>封装POST请求消息的请求参数 </li></ul></li></ul><h3 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h3><ul><li>响应消息：服务器端发送给客户端的数据<ol><li>响应行<ol><li>组成：协议/版本 响应状态码 状态码描述</li><li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。<ol><li>状态码都是3位数字 </li><li>分类：<ol><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302(重定向)，304(访问缓存)</li><li>4xx：客户端错误。<ul><li>404（请求路径没有对应的资源） </li><li>405：请求方式没有对应的doXxx方法</li></ul></li><li>5xx：服务器端错误。代表：500(服务器内部出现异常</li></ol></li></ol></li></ol></li><li>响应头：<ol><li>格式：头名称： 值</li><li>常见的响应头：<ol><li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据<ul><li>值：<ul><li>in-line:默认值,在当前页面内打开</li><li>attachment;filename=xxx：以附件形式打开响应体。文件下载</li></ul></li></ul></li></ol></li></ol></li><li>响应空行</li><li>响应体:传输的数据</li></ol></li></ul><ul><li>响应字符串格式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: text/html;charset=UTF-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">101</span></span><br><span class="line">Date: Wed, <span class="number">06</span> Jun <span class="number">2018</span> <span class="number">07</span>:<span class="number">08</span>:<span class="number">42</span> GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> hello , response</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h2><h3 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h3><ul><li><code>public void service(ServletRequest servletRequest, ServletResponse servletResponse)</code><ul><li>tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo1的对象</li><li>tomcat服务器，会创建request和response对象，request对象中封装请求消息数据</li><li>tomcat将request和response两个对象传递给service方法，并且调用该方法</li><li>程序员可以通过request对象获取请求消息数据，通过response对象设置响应消息数据</li><li>服务器在给浏览器作出响应之前，会从response对象中拿程序猿设置的响应消息数据</li></ul></li></ul><h3 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h3><ul><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li><li>request对象继承体系结构：ServletRequest接口继承HttpServletRequest接口实现org.apache.catalina.connector.RequestFacade 类(tomcat)</li></ul><h3 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h3><h4 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h4><blockquote><p>同一个IDEA中启动两个servlet需要重新创建一个tomcat，设置不同的端口和名字</p></blockquote><ol><li><p>获取请求行数据</p><ul><li><p>GET /jwang/demo1?name=zhangsan HTTP/1.1</p></li><li><p>方法：</p><ol><li><p>获取请求方式 ：GET</p><ul><li>String getMethod()  </li></ul></li><li><p>获取虚拟目录：/jwang（常用）</p><ul><li>String getContextPath()</li></ul></li><li><p>获取Servlet路径: /demo1</p><ul><li>String getServletPath()</li></ul></li><li><p>获取get方式请求参数：name=zhangsan</p><ul><li>String getQueryString()</li></ul></li><li><p>获取请求<code>URI</code>：/jwang/demo1（常用）</p><ul><li><p>String getRequestURI():/jwang/demo1</p></li><li><p>StringBuffer getRequestURL():<a href="http://localhost/jwang/demo1" target="_blank" rel="noopener">http://localhost/jwang/demo1</a></p></li><li><p>URL:统一资源定位符 ： <a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a> 中华人民共和国</p></li><li><p>URI：统一资源标识符 : /day14/demo1  共和国            </p></li></ul></li><li><p>获取协议及版本：HTTP/1.1</p><ul><li>String getProtocol()</li></ul></li><li><p>获取客户机的IP地址：</p><ul><li>String getRemoteAddr()</li></ul></li></ol></li></ul></li><li><p>获取请求头数据(常用)</p><ul><li>方法：<ul><li>(*)String getHeader(String name):通过请求头的名称获取请求头的值</li><li>Enumeration<String> getHeaderNames():获取所有的请求头名称</li></ul></li></ul></li><li><p>获取请求体数据:</p><ul><li><p>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p></li><li><p>步骤：</p><ol><li><p>获取流对象</p><ul><li>BufferedReader getReader()：获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</li></ul></li><li><p>再从流对象中拿数据</p></li></ol></li></ul></li></ol><h2 id="Response功能"><a href="#Response功能" class="headerlink" title="Response功能"></a>Response功能</h2><h3 id="功能：设置响应消息"><a href="#功能：设置响应消息" class="headerlink" title="功能：设置响应消息"></a>功能：设置响应消息</h3><ol><li>设置响应行<ol><li>格式：HTTP/1.1 200 ok</li><li>设置状态码：setStatus(int sc) </li></ol></li><li>设置响应头：setHeader(String name, String value)</li><li>设置响应体：<ul><li>使用步骤：<ol><li>获取输出流<ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul></li><li>使用输出流，将数据输出到客户端浏览器</li></ol></li></ul></li></ol><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h4><ul><li>重定向：资源跳转的方式</li><li>重定向的特点:redirect<ol><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ol></li><li>转发的特点：forward<ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ol></li><li>路径写法：<ol><li>路径分类<ol><li>相对路径：通过相对路径不可以确定唯一资源<ul><li>如：./index.html</li><li>不以/开头，以.开头路径</li><li>规则：找到当前资源和目标资源之间的相对位置关系<ul><li>./：当前目录</li><li>../:后退一级目录</li><li>当前资源：<a href="http://localhost/jwang/location.html" target="_blank" rel="noopener">http://localhost/jwang/location.html</a></li><li>目标资源：<a href="http://localhost/jwang/responseDemo2" target="_blank" rel="noopener">http://localhost/jwang/responseDemo2</a></li><li>相对路径：./responseDemo2(./可不写，默认)</li></ul></li></ul></li><li>绝对路径：通过绝对路径可以确定唯一资源<ul><li>如：<a href="http://localhost/jwang/responseDemo2" target="_blank" rel="noopener">http://localhost/jwang/responseDemo2</a> –&gt; /day15/responseDemo2</li><li>以/开头的路径</li><li>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出<ul><li>给客户端浏览器使用：需要加虚拟目录(项目的访问路径)<ul><li>建议虚拟目录动态获取：request.getContextPath()</li><li><code>&lt;a&gt; , &lt;form&gt;</code> 重定向…</li></ul></li><li>给服务器使用：不需要加虚拟目录<ul><li>转发路径</li></ul></li></ul></li></ul></li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//2.设置响应头location</span></span><br><span class="line">response.setHeader(<span class="string">"location"</span>,<span class="string">"/jwang/responseDemo2"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的重定向方法</span></span><br><span class="line">response.sendRedirect(<span class="string">"/jwang/responseDemo2"</span>);</span><br><span class="line"></span><br><span class="line">response.sendRedirect(<span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure><h4 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h4><ul><li><p>步骤：</p><ol><li>获取字符输出流</li><li>输出数据</li></ol></li><li><p>注意：</p><ul><li>乱码问题：<ol><li>PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</li><li>设置该流的默认编码<ul><li>response.setCharacterEncoding(“utf-8”)</li></ul></li><li>告诉浏览器响应体使用的编码<ul><li>response.setHeader(“content-type”, “text/html;charset=utf-8”);(可以不用2的设置)</li></ul></li><li>简单的形式，设置编码，是在获取流之前设置<ul><li>response.setContentType(“text/html;charset=utf-8”);</li></ul></li></ol></li></ul></li></ul><h4 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h4><ul><li>步骤：<ol><li>获取字节输出流</li><li>输出数据</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ServletOutputStream outputStream = </span><br><span class="line">response.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">"hello"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br></pre></td></tr></table></figure><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><ol><li>本质：图片</li><li>目的：防止恶意表单注册</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletCheckcode"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletCheckcode</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个对象，在内存中存图片（验证码图片对象）</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1填充背景颜色</span></span><br><span class="line">        Graphics g = image.getGraphics(); <span class="comment">//画笔</span></span><br><span class="line">        g.setColor(Color.PINK); <span class="comment">//画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>, height-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.3字</span></span><br><span class="line">        String str = <span class="string">"AQZWSXEDCRFVTGBYHNUJMIKLOPqaxswedcvfrtgbyhnuj0123456789"</span>;</span><br><span class="line">        <span class="comment">//生产随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);</span><br><span class="line"></span><br><span class="line">            g.setColor(Color.BLACK);</span><br><span class="line">            g.drawString(ch+<span class="string">""</span>, width/<span class="number">4</span>*i, height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4随机线条</span></span><br><span class="line">        <span class="comment">//随机坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.setColor(Color.GREEN);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2。将图片输出到页面显示</span></span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img id = <span class="string">"checkcode"</span> src=<span class="string">"/jwang/ServletCheckcode"</span> /&gt;</span><br><span class="line">    &lt;a id = "change" href=""&gt;看不清换。。。。&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取图片对象</span></span><br><span class="line">            <span class="keyword">var</span> img =  document.getElementById(<span class="string">"checkcode"</span>);</span><br><span class="line">            <span class="comment">//2.绑定单击事件</span></span><br><span class="line">            img.onclick = function () &#123;</span><br><span class="line">                <span class="comment">//地址后加时间戳,使用其不使用缓存</span></span><br><span class="line">                <span class="keyword">var</span> date = <span class="keyword">new</span> Date().getTime();</span><br><span class="line"></span><br><span class="line">                img.src = <span class="string">"/jwang/ServletCheckcode?"</span>+date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li><p>概念：代表整个web应用，可以和程序的容器(服务器)来通信</p></li><li><p>获取：</p><ol><li>通过request对象获取 request.getServletContext();</li><li>通过HttpServlet获取 this.getServletContext();</li></ol></li><li><p>功能：</p><ol><li>获取MIME类型：<ul><li>MIME类型:在互联网通信过程中定义的一种文件数据类型<ul><li>格式： 大类型/小类型 text/html image/jpeg</li></ul></li><li>获取：String getMimeType(String file)  </li></ul></li><li>域对象：共享数据<ol><li>setAttribute(String name,Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)<ul><li>ServletContext对象范围：所有用户所有请求的数据</li></ul></li></ol></li></ol></li><li><p>获取文件的真实(服务器)路径</p><ol><li>方法：String getRealPath(String path)  <ul><li>String b = context.getRealPath(“/b.txt”);//web目录下资源访问        </li><li>String c = context.getRealPath(“/WEB-INF/c.txt”);//WEB-INF目录下的资源访问</li><li>String a = context.getRealPath(“/WEB-INF/classes/a.txt”);//src目录下的资源访问</li></ul></li></ol></li></ol><h2 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol><li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li><li>任何资源都必须弹出下载提示框</li><li>使用响应头设置资源的打开方式：<ul><li>content-disposition:attachment;filename=xxx</li></ul></li></ol><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称参数filename</li><li>定义Servlet<ol><li>获取文件名称</li><li>使用字节输入流加载文件进内存(真实路径)</li><li>指定response的响应头： <ul><li>content-disposition:attachment;filename=xxx</li></ul></li><li>将数据写出到response输出流</li></ol></li></ol><ul><li>问题：<ul><li>中文文件问题<ul><li>解决思路：<ol><li>获取客户端使用的浏览器版本信息</li><li>根据不同的版本信息，设置filename的编码方式不同</li></ol></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/downloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ol><li>获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数<ol><li>String getParameter(String name):根据参数名称获取参数值username=zs&amp;password=123</li><li>String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</li><li>Enumeration<String> getParameterNames():获取所有请求的参数名称</li><li>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</li><li>中文乱码问题：<ul><li>get方式：tomcat 8 已经将get方式乱码问题解决了</li><li>post方式：会乱码<ul><li>解决：在获取参数前，设置request的编码request.setCharacterEncoding(“utf-8”);</li></ul></li></ul></li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/request/Request%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%26%E5%9F%9F%E5%AF%B9%E8%B1%A1.bmp" alt=""></p><ol start="2"><li><p>请求转发：一种在服务器内部的资源跳转方式</p><ol><li><p>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</p></li><li><p>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </p></li><li><p>特点：</p><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求(请求是同一个,属于一次请求的作用范围)</li></ol></li></ol></li><li><p>共享数据：</p><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ol><li>void setAttribute(String name,Object obj):存储数据</li><li>Object getAttitude(String name):通过键获取值</li><li>void removeAttribute(String name):通过键移除键值对</li></ol></li></ul></li><li><p>获取ServletContext：</p><ul><li>ServletContext getServletContext()</li></ul></li></ol><h2 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h2><h3 id="用户登录案例需求："><a href="#用户登录案例需求：" class="headerlink" title="用户登录案例需求："></a>用户登录案例需求：</h3><ol><li>编写login.html登录页面 username &amp; password 两个输入框</li><li>使用Druid数据库连接池技术,操作mysql，userlogin数据库中user表</li><li>使用JdbcTemplate技术封装JDBC</li><li>登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您</li><li>登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>开发步骤</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/request/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.bmp" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 创建项目，导入html页面，配置文件，jar包</span><br><span class="line"><span class="number">2</span>. 创建数据库环境</span><br><span class="line">CREATE DATABASE userlogin;</span><br><span class="line">USE userlogin;</span><br><span class="line"><span class="function">CREATE TABLE <span class="title">USER</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">id INT PRIMARY KEY AUTO_INCREMENT,</span></span></span><br><span class="line"><span class="function"><span class="params">username VARCHAR(<span class="number">32</span>)</span> UNIQUE NOT NULL,</span></span><br><span class="line"><span class="function">PASSWORD <span class="title">VARCHAR</span><span class="params">(<span class="number">32</span>)</span> NOT NULL</span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 创建包cn.itcast.domain,创建类User</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.jwang.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 创建包cn.itcast.util,编写工具类JDBCUtils</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类 使用Druid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            <span class="keyword">final</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//使用classloader加载配置文件，获取字节输入流</span></span><br><span class="line">            final InputStream resourceAsStream = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            properties.load(resourceAsStream);</span><br><span class="line"></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2。初始化连接池</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接connection对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 创建包cn.itcast.dao,创建类UserDao,提供login方法</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.jwang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jwang.domain.User;</span><br><span class="line"><span class="keyword">import</span> cn.jwang.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库中User表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申明JDBCTemplate对象共用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser 只有用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含用户全部数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User loginUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//编写sql</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>;</span><br><span class="line">            <span class="comment">//调用query方法</span></span><br><span class="line">            <span class="keyword">final</span> User user = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">loginUser</span>.<span class="title">getUsername</span>(), <span class="title">loginUser</span>.<span class="title">getPassword</span>())</span>;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>. 编写cn.itcast.web.servlet.LoginServlet类</span><br><span class="line"><span class="keyword">package</span> cn.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jwang.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.jwang.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码和获取请求参数</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="keyword">final</span> String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">final</span> String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装user对象</span></span><br><span class="line">        User loginuser = <span class="keyword">new</span> User();</span><br><span class="line">        loginuser.setUsername(username);</span><br><span class="line">        loginuser.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用userdao的login方法，进行数据库操作，查询用户是否存在</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="keyword">final</span> User user = dao.login(loginuser);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//用户不存在，登陆失败，转接</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/failServlet"</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//存储user对象的数据信息，并转发</span></span><br><span class="line">            request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/successServlet"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>. 编写FailServlet和SuccessServlet类</span><br><span class="line"><span class="keyword">package</span> cn.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jwang.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/successServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">successServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="keyword">final</span> User user = (User)request.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"用户"</span>+user.getUsername()+<span class="string">"您好"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/failServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">failServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">"登陆失败，用户名或者密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>login.html中form表单的action路径的写法</p><ul><li>虚拟目录+Servlet的资源路径</li></ul></li><li><p>BeanUtils工具类，简化数据封装 用于封装JavaBean的(一般放在domain中)</p><ol><li>JavaBean：标准的Java类 功能：封装数据<ol><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共setter和getter方法</li></ol></li><li>概念：<ul><li>成员变量：方法的</li><li>属性：setter和getter方法截取后的产物<ul><li>例如：getUsername() –&gt; Username–&gt; username</li></ul></li></ul></li><li>方法：<ol><li>setProperty()：设置属性值</li><li>getProperty()：获取属性值</li><li>populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中 </li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有请求参数</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        <span class="comment">//创建uer对象</span></span><br><span class="line">        User loginuser = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Apache的BeanUtils进行封装</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(loginuser, map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> HTTP </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程03--XML文件</title>
      <link href="/2019/05/05/Java%E7%BC%96%E7%A8%8B03--XML%E6%96%87%E4%BB%B6/"/>
      <url>/2019/05/05/Java%E7%BC%96%E7%A8%8B03--XML%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>Extensible Markup Language 可扩展标记语言</p></li><li><p>可扩展：标签都是自定义的。 <code>&lt;user&gt;</code> <code>&lt;student&gt;</code></p></li><li><p>功能</p><ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><p>xml与html的区别</p><ol><li>xml标签都是自定义的，html标签是预定义。</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol></li><li><p>w3c:万维网联盟</p></li></ul><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><ul><li>基本语法：<ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭，自闭合或者双</li><li>xml标签名称区分大小写</li></ol></li><li>快速入门：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">'1.0'</span> ?&gt;</span><br><span class="line">&lt;users&gt;</span><br><span class="line">    &lt;user id=<span class="string">'1'</span>&gt;</span><br><span class="line">        &lt;name&gt;zhangsan&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">        &lt;gender&gt;male&lt;/gender&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line"></span><br><span class="line">    &lt;user id=<span class="string">'2'</span>&gt;</span><br><span class="line">        &lt;name&gt;lisi&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;24&lt;/age&gt;</span><br><span class="line">        &lt;gender&gt;female&lt;/gender&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">&lt;/users&gt;</span><br></pre></td></tr></table></figure><ul><li><p>组成部分：</p><ol><li><p>文档声明</p><ol><li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li><li>属性列表：<ul><li>version：版本号，必须的属性</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值：<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><ul><li><code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</code></li></ul></li><li><p>标签：标签名称自定义的</p><ul><li>规则：<ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格 </li></ul></li></ul></li><li><p>属性：</p><ul><li>id属性值唯一</li></ul></li><li><p>文本：</p><ul><li>CDATA区：在该区域中的数据会被原样展示</li><li>格式：  <code>&lt;![CDATA[ 数据 ]]&gt;</code></li></ul></li></ol></li></ul><ul><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li>DTD:一种简单的约束技术</li><li>Schema:一种复杂的约束技术</li></ol></li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/web/%E7%BA%A6%E6%9D%9F.bmp" alt=""></p><ul><li>DTD：<ul><li>引入dtd文档到xml文档中<ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code></li><li>网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></li></ul></li></ul></li></ul></li></ul><ul><li>Schema:<ul><li>引入：<ol><li>填写xml文档的根元素</li><li>引入xsi前缀.  <code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code></li><li>引入xsd文件命名空间.  <code>xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;</code></li><li>为每一个xsd约束声明一个前缀,作为标识  <code>xmlns=&quot;http://www.itcast.cn/xml&quot;</code> </li></ol></li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line"><span class="number">1</span>.填写xml文档的根元素</span><br><span class="line"><span class="number">2</span>.引入xsi前缀.  xmlns:xsi=<span class="string">"http://www.w3.org/2001/</span></span><br><span class="line"><span class="string">XMLSchema-instance"</span></span><br><span class="line"><span class="number">3</span>.引入xsd文件命名空间.  xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml  student.xsd"</span></span><br><span class="line"><span class="number">4</span>.为每一个xsd约束声明一个前缀,作为标识  xmlns=<span class="string">"http:</span></span><br><span class="line"><span class="string">//www.itcast.cn/xml"</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> --&gt;</span><br><span class="line">&lt;students   xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml1</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml1  student.xsd</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml2</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml2  student2.xsd</span></span><br><span class="line"><span class="string">"</span> </span><br><span class="line">  xmlns:a=<span class="string">"http://www.itcast.cn/xml"</span></span><br><span class="line">  xmlns:b=<span class="string">"http://www.itcast.cn/xml2"</span></span><br><span class="line">&gt;</span><br><span class="line">&lt;a:student number=<span class="string">"heima_0001"</span>&gt;</span><br><span class="line">&lt;a:name&gt;tom&lt;/a:name&gt;</span><br><span class="line">&lt;a:age&gt;18&lt;/a:age&gt;</span><br><span class="line">&lt;a:sex&gt;male&lt;/a:sex&gt;</span><br><span class="line">&lt;/a:student&gt;</span><br><span class="line">&lt;b:student number=<span class="string">"heima_9999"</span>&gt;</span><br><span class="line">&lt;b:name&gt;sdd&lt;/b:name&gt;</span><br><span class="line">&lt;b:age&gt;13&lt;/b:age&gt;</span><br><span class="line">&lt;b:sex&gt;female&lt;/b:sex&gt;</span><br><span class="line">&lt;/b:student&gt;</span><br><span class="line"></span><br><span class="line">&lt;/students&gt;</span><br></pre></td></tr></table></figure><h3 id="解析：操作xml文档，将文档中的数据读取到内存中"><a href="#解析：操作xml文档，将文档中的数据读取到内存中" class="headerlink" title="解析：操作xml文档，将文档中的数据读取到内存中"></a>解析：操作xml文档，将文档中的数据读取到内存中</h3><ul><li><p>操作xml文档</p><ol><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ol></li><li><p>解析xml的方式：</p><ol><li>DOM(服务器端)：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li>SAX(安卓等客户端)：逐行读取，基于事件驱动的。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li><li><p>xml常见的解析器：</p><ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol></li><li><p>Jsoup 快速入门：</p><ul><li><p>步骤：</p><ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li><li><p>代码：</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo1.class.getClassLoader().getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的使用："><a href="#对象的使用：" class="headerlink" title="对象的使用："></a>对象的使用：</h3><ul><li><p>Jsoup：工具类，可以解析html或xml文档，返回Document</p><ul><li>parse：解析html或xml文档，返回Document<ul><li>parse​(File in, String charsetName)：解析xml或html文件的。</li><li>parse​(String html)：解析xml或html字符串</li><li>parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</li></ul></li></ul></li><li><p>Document：文档对象。代表内存中的dom树</p><ul><li>获取Element对象<ul><li>getElementById​(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li></ul></li><li><p>Elements：元素Element对象的集合。可以当做 ArrayList<Element>来使用</p></li><li><p>Element：元素对象</p><ol><li><p>获取子元素对象</p><ul><li>getElementById​(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li><li><p>获取属性值</p><ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li><p>获取文本内容</p><ul><li>String text():获取文本内容</li><li>String html():获取标签体的所有内容(包括字标签的字符串内容)</li></ul></li></ol></li><li><p>Node：节点对象</p><ul><li>是Document和Element的父类</li></ul></li><li><p>快捷查询方式：</p><ol><li>selector:选择器<ul><li>使用的方法：Elements select​(String cssQuery)</li><li>语法：参考Selector类中定义的语法</li></ul></li><li>XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言<ul><li>使用Jsoup的Xpath需要额外导入jar包。</li><li>查询w3cshool参考手册，使用xpath的语法完成查询</li></ul></li></ol></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;students&gt;</span><br><span class="line">&lt;student number=<span class="string">"heima_0001"</span>&gt;</span><br><span class="line">&lt;name id=<span class="string">"itcast"</span>&gt;</span><br><span class="line">&lt;xing&gt;张&lt;/xing&gt;</span><br><span class="line">&lt;ming&gt;三&lt;/ming&gt;</span><br><span class="line">&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;male&lt;/sex&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line">&lt;student number=<span class="string">"heima_0002"</span>&gt;</span><br><span class="line">&lt;name&gt;jack&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;female&lt;/sex&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line"></span><br><span class="line">&lt;/students&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *选择器查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo5<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().</span></span><br><span class="line">        getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.查询name标签</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            div&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Elements elements = document.select(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line">        System.out.println(<span class="string">"=----------------"</span>);</span><br><span class="line">        <span class="comment">//4.查询id值为itcast的元素</span></span><br><span class="line">        Elements elements1 = document.select(<span class="string">"#itcast"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        <span class="comment">//5.获取student标签并且number属性值为hei_0001的age子标签</span></span><br><span class="line">        <span class="comment">//5.1.获取student标签并且number属性值为hei_0001</span></span><br><span class="line">        Elements elements2 = </span><br><span class="line">        document.select(<span class="string">"student[number=\"hei_0001\"]"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.2获取student标签并且number属性值为hei_0001的age子标签</span></span><br><span class="line">        Elements elements3 = </span><br><span class="line">        document.select(<span class="string">"student[number=\"hei_0001\"] &gt; age"</span>);</span><br><span class="line">        System.out.println(elements3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *XPath查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, </span></span><br><span class="line"><span class="function">    XpathSyntaxErrorException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = </span><br><span class="line">JsoupDemo6<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResource</span></span></span><br><span class="line">("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/</span></span><br><span class="line"><span class="string">        name[@id]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/</span></span><br><span class="line"><span class="string">        name[@id='itcast']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端开发01--javascript</title>
      <link href="/2019/05/04/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%9101--javascript/"/>
      <url>/2019/05/04/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%9101--javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h2><p><a href="https://www.w3school.com.cn/jsref/index.asp" target="_blank" rel="noopener">w3cschool传送门</a></p><h3 id="概念：-一门客户端脚本语言"><a href="#概念：-一门客户端脚本语言" class="headerlink" title="概念：    一门客户端脚本语言"></a>概念：    一门客户端脚本语言</h3><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul><h3 id="JavaScript发展史："><a href="#JavaScript发展史：" class="headerlink" title="JavaScript发展史："></a>JavaScript发展史：</h3><ul><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ul><blockquote><p>JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</p></blockquote><h2 id="ECMAScript：客户端脚本语言的标准"><a href="#ECMAScript：客户端脚本语言的标准" class="headerlink" title="ECMAScript：客户端脚本语言的标准"></a>ECMAScript：客户端脚本语言的标准</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><ul><li><p>与html结合方式</p><ol><li>内部JS：<ul><li>定义<code>&lt;script&gt;</code>，标签体内容就是js代码 –会有阻塞，从页面上端开始加载，才执行之后的</li></ul></li><li>外部JS：<ul><li>定义<code>&lt;script&gt;</code>，通过src属性引入外部的js文件</li></ul></li></ol><ul><li>注意：<ol><li><code>&lt;script&gt;</code>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</li><li><code>&lt;script&gt;</code>可以定义多个。</li></ol></li></ul></li><li><p>注释</p><ol><li>单行注释：<code>//注释内容</code></li><li>多行注释：<code>/*注释内容*/</code></li></ol></li><li><p>数据类型：</p><ol><li><p>原始数据类型(基本数据类型)：</p><ol><li>number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li>string：字符串。 字符串  “abc” “a” ‘abc’</li><li>boolean: true和false</li><li>null：一个对象为空的占位符</li><li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ol></li><li><p>引用数据类型：对象</p></li></ol></li><li><p>变量</p><ul><li><p>变量：一小块存储数据的内存空间</p></li><li><p>Java语言是强类型语言，而JavaScript是弱类型语言。</p><ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li></ul></li><li><p>语法：</p><ul><li><p><code>var 变量名 = 初始化值;</code></p></li><li><p>typeof运算符：获取变量的类型。</p><blockquote><p>注：null运算后得到的是object</p></blockquote></li></ul></li></ul></li><li><p>运算符</p><ol><li><p>一元运算符：只有一个运算数的运算符</p><blockquote><p>++，– ， +(正号)  </p></blockquote><ul><li>++ –: 自增(自减)</li><li>++(–) 在前，先自增(自减)，再运算</li><li>++(–) 在后，先运算，再自增(自减)</li><li>+(-)：正负号<blockquote><p>注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</p></blockquote><ul><li>其他类型转number:</li><li>string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</li><li>boolean转number：true转为1，false转为0</li></ul></li></ul></li><li><p>算数运算符</p><ul><li><code>+ - * / % ...</code></li></ul></li><li><p>赋值运算符</p><ul><li><code>= += -+....</code></li></ul></li><li><p>比较运算符</p><ul><li><code>&gt; &lt; &gt;= &lt;= == ===(全等于)</code></li><li>比较方式<ol><li>类型相同：直接比较<ul><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</li></ul></li><li>类型不同：先进行类型转换，再比较<ul><li>===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ul></li></ol></li></ul></li></ol></li></ul><pre><code>5. 逻辑运算符    * `&amp;&amp; || !`    * 其他类型转boolean：       1. number：0或NaN为假，其他为真       2. string：除了空字符串(&quot;&quot;)，其他都是true       3. null&amp;undefined:都是false       4. 对象：所有对象都为true6. 三元运算符    * `? : 表达式`    * </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a &gt; b ? <span class="number">1</span>:<span class="number">0</span>;</span><br></pre></td></tr></table></figure><pre><code>* 语法：* 表达式`? 值1:值2;`    * 判断表达式的值，如果是true则取值1，如果是false则取值2；</code></pre><ul><li><p>流程控制语句：</p><ol><li>if…else…</li><li>switch:<ul><li>在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)</li><li>switch(变量):case 值:</li><li>在JS中,switch语句可以接受任意的原始数据类型</li></ul></li><li>while</li><li>do…while</li><li>for</li></ol></li><li><p>JS特殊语法：</p><ol><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ol></li><li><p>运用：99乘法表</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;99乘法表&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">td&#123;</span><br><span class="line">border: <span class="number">1</span>px solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(<span class="string">"&lt;table  align='center'&gt;"</span>);</span><br><span class="line"><span class="comment">//1.完成基本的for循环嵌套，展示乘法表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span> ; i++) &#123;</span><br><span class="line">document.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;=i ; j++) &#123;</span><br><span class="line">document.write(<span class="string">"&lt;td&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出  1 * 1 = 1</span></span><br><span class="line">document.write(i + <span class="string">" * "</span> + j + <span class="string">" = "</span> + </span><br><span class="line">( i*j) +<span class="string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>);</span><br><span class="line">document.write(<span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*//输出换行</span></span><br><span class="line"><span class="comment">document.write("&lt;br&gt;");*/</span></span><br><span class="line">document.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.完成表格嵌套</span></span><br><span class="line">document.write(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><h4 id="Function：函数-方法-对象"><a href="#Function：函数-方法-对象" class="headerlink" title="Function：函数(方法)对象"></a>Function：函数(方法)对象</h4><ul><li>创建：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">var</span> fun = <span class="keyword">new</span> Function(形式参数列表,方法体);  <span class="comment">//忘掉吧</span></span><br><span class="line"><span class="number">2</span>. </span><br><span class="line">function 方法名称(形式参数列表)&#123;</span><br><span class="line">         方法体</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. </span><br><span class="line"><span class="keyword">var</span> 方法名 = function(形式参数列表)&#123;</span><br><span class="line">         方法体</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法：</p></li><li><p>属性：</p><blockquote><p>length:代表形参的个数</p></blockquote></li><li><p>特点：</p><ol><li>方法定义是，形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关</li><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol></li><li><p>调用:<code>方法名称(实际参数列表);</code></p></li></ul><h4 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array:数组对象"></a>Array:数组对象</h4><ol><li>创建：<ol><li>var arr = new Array(元素列表);</li><li>var arr = new Array(默认长度);</li><li>var arr = [元素列表];</li></ol></li><li>方法<ol><li>join(参数):将数组中的元素按照指定的分隔符拼接为字符串</li><li>push()    向数组的末尾添加一个或更多元素，并返回新的长度。</li></ol></li><li>属性 <code>length:数组的长度</code></li><li>特点：<ol><li>JS中，数组元素的类型可变的。</li><li>JS中，数组长度可变的。</li></ol></li></ol><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><h4 id="Date：日期对象"><a href="#Date：日期对象" class="headerlink" title="Date：日期对象"></a>Date：日期对象</h4><ol><li>创建：<code>var date = new Date();</code></li><li>方法：<ul><li>toLocaleString()：返回当前date对象对应的时间本地字符串格式</li><li>getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul></li></ol><h4 id="Math：数学对象"><a href="#Math：数学对象" class="headerlink" title="Math：数学对象"></a>Math：数学对象</h4><ol><li><p>创建：</p><ul><li>特点：Math对象不用创建，直接使用。  Math.方法名();</li></ul></li><li><p>方法：</p><ul><li>random():返回 0 ~ 1 之间的随机数。 含0不含1</li><li>ceil(x)：对数进行上舍入。</li><li>floor(x)：对数进行下舍入。</li><li>round(x)：把数四舍五入为最接近的整数。</li></ul></li><li><p>属性：</p><ul><li>PI<ul><li>Number</li><li>String</li></ul></li></ul></li></ol><h4 id="RegExp：正则表达式对象"><a href="#RegExp：正则表达式对象" class="headerlink" title="RegExp：正则表达式对象"></a>RegExp：正则表达式对象</h4><ol><li><p>正则表达式：定义字符串的组成规则。</p><ol><li><p>单个字符:[] 如： [a] [ab] [a-zA-Z0-9_]</p><ul><li><p>特殊符号代表特殊含义的单个字符:</p><blockquote><p>\d:单个数字字符 [0-9]</p><p>\w:单个单词字符[a-zA-Z0-9_]</p></blockquote></li></ul></li><li><p>量词符号：</p><ul><li>?：表示出现0次或1次</li><li>*：表示出现0次或多次</li><li>+：出现1次或多次</li><li>{m,n}:表示 m&lt;= 数量 &lt;= n<ul><li><code>*</code> m如果缺省： {,n}:最多n次</li><li>n如果缺省：{m,} 最少m次</li></ul></li></ul></li><li><p>开始结束符号</p><ul><li>^:开始</li><li>$:结束</li></ul></li></ol></li><li><p>正则对象：</p><ol><li>创建<ol><li>var reg = new RegExp(“正则表达式”);</li><li>var reg = /正则表达式/;</li></ol></li><li>方法    <ol><li>test(参数):验证指定的字符串是否符合正则定义的规范    <h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h4></li></ol></li></ol></li><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  <code>方法名();</code></p></li><li><p>方法：</p><ul><li><p>encodeURI():url编码</p></li><li><p>decodeURI():url解码</p></li><li><p>encodeURIComponent():url编码,编码的字符更多</p></li><li><p>decodeURIComponent():url解码</p></li><li><p>parseInt():将字符串转为数字</p><ul><li>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</li></ul></li><li><p>isNaN():判断一个值是否是NaN</p><ul><li>NaN六亲不认，连自己都不认。NaN参与的==比较全部问false</li></ul></li><li><p>eval():将 JavaScript 字符串，并把它作为脚本代码来执行。</p></li></ul></li><li><p>URL编码</p><ul><li>传智播客 =  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2</li></ul></li></ol><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ol><li><p>概念：Browser Object Model 浏览器对象模型</p><ul><li>将浏览器各个组成部分封装成一个个对象 ：浏览器Navigator对象/窗口Window对象/地址栏Location对象/history对象/显示器屏幕对象Screen/DOM对象 Document对象/</li></ul></li><li><p>Window对象</p><ul><li><p>特点</p><ul><li>window对象不需要创建可以直接使用 window对象：window.方法名()</li><li>window引用可以忽略 方法名() </li></ul></li><li><p>方法</p><ul><li>与弹出框有关：<ol><li>alert() : 显示带有一段消息和一个确认按钮的警告框</li><li>confirm：显示带有一段消息以及确认和取消按钮的对话框，点击确定，返回true</li><li>prompt：显示可提示用户输入的对话框，返回值为获取用户输入的值</li></ol></li><li>与打开关闭有关的方法<ol><li>close()：关闭浏览器窗口（谁调用就关闭谁）</li><li>open()：打开一个新浏览器窗口 其返回值为打开的新窗口对象</li></ol></li><li>与定时器有关的方法<ol><li>setTimeout()：在指定的毫秒数后调用函数或计算表达式<ol><li>参数：js代码或者方法对象  毫秒值</li><li>返回值：唯一标识，用于取消定时器</li></ol></li><li>clearTimeout：取消上面方法设置的timeout</li><li>setIntval()：按照指定的周期（以毫秒计）来调用函数数或计算表达式</li><li>clearIntervar()：关闭 </li></ol></li></ul></li><li><p>属性</p><ol><li>获取其他BOM对象 history /location / navigator / screen</li><li>获取DOM对象 document对象</li></ol></li></ul></li><li><p>Location对象：地址栏对象</p><ul><li>创建(获取): window.location/location </li><li>方法：<ul><li>reload() 重新加载当前文档，即刷新页面    </li><li>获取href：location.href 返回值为URL地址,也可以为其赋值为目标网址,就可以实现不用新开窗口直接到目标网址    </li></ul></li></ul></li><li><p>History：历史记录对象 (当前窗口)</p><ul><li>创建(获取)：window.history/history</li><li>方法:<ul><li>back()：加载history列表中的前一个url</li><li>forword()：加载下一个url</li><li>go()：加载某个具体页面</li></ul></li><li>属性：<ul><li>length：返回当前窗口历史列表中的url数量</li></ul></li></ul></li></ol><h4 id="DOM–控制html文档的内容-文档对象模型，DOM树型结构"><a href="#DOM–控制html文档的内容-文档对象模型，DOM树型结构" class="headerlink" title="DOM–控制html文档的内容,文档对象模型，DOM树型结构"></a>DOM–控制html文档的内容,文档对象模型，DOM树型结构</h4><ul><li><p>定义了访问HTML和XML文档的标准</p></li><li><p>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</p></li><li><p>核心DOM - 针对任何结构化文档的结构模型</p><ul><li>Document：文档对象<ol><li>创建（获取）：在html dom模型中可以使用window对象来获取 window.document/document</li><li>方法：获取Element对象<ul><li>getElementById()：根据ID属性值获取元素对象。ID属性唯一 .value获取内容  </li><li>getElementByTagName()：元素名称获取对象，返回数组</li><li>getElementByClassName()：根据class属性获取元素对象们，返回数组</li><li>getElementByName()：根据name属性值获取对象，返回数组</li></ul></li><li>方法：创建其他DOM对象<ul><li>creatAttribute(name)</li><li>creatComment()</li><li>creatElement()</li><li>creatTextNode()</li></ul></li><li>属性</li></ol></li><li>Element：元素对象<ol><li>获取/创建：通过Document来获取和创建</li><li>方法：removeAttribute():删除属性/setAttribute()：设置属性</li></ol></li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li><li>Node：节点对象，其他5个的父对象<ol><li>所有DOM对象都可以被认为是一个节点</li><li>方法：<ul><li>CRUD DOM树：appendChild()：向节点的子节点列表的结尾添加新的子节点/removeChild()：删除（并返回）当前节点的指定子节点/replaceChild()：用新节点替换子节点  </li></ul></li><li>属性：<ul><li>parentNode：返回节点的父节点</li></ul></li></ol></li><li>获取页面标签（元素）对象Element</li></ul></li><li><p>HTML DOM</p></li><li><p>标签体的设置和获取：innerHTML</p><ol><li>标签替换 原标签.innerHTML = “新标签内容”；</li><li>标签追加：追加标签.innerHTML += “标签内容”；在该标签下添加标签</li></ol></li><li><p>使用HTML元素对象的属性</p></li><li><p>控制元素样式设置</p><ul><li>使用元素的style属性设置<ol><li>标签标识符.style.样式 = “1px sclid red”; 放在函数中，设置在事件下产生改变</li><li>样式为font-size 在这里就是.fontSize</li></ol></li><li>提前定义好类选择器的样式，通过元素className来设置class的属性值<ol><li>标签标识符.className = “类选择器名”<blockquote><p>document.getElementById(“id”) 通过id获取元素对象</p></blockquote></li></ol></li></ul></li><li><p>操作Element对象</p><ul><li><p>修改属性值：对象.属性值 = “”；</p><blockquote><p>明确获取的对象是哪一个</p><p>查看API文档，查看其中有哪些属性可以修改</p></blockquote></li><li><p>修改标签内容</p><blockquote><p>属性：对象.innerHTML = “”; </p></blockquote></li></ul></li></ul><h4 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h4><ul><li><p>功能：某些组件被执行了某些操作后，触发某些代码的执行</p></li><li><p>事件：某些操作，如：单机、双击、键盘操作、鼠标移动等</p></li><li><p>事件源：组件，如：按钮， 文本输入框</p></li><li><p>监听器：代码</p></li><li><p>注册监听：将事件、事件源、监听器结合在一起。当事件源上发生了某个事件，则触发执行某个监听器代码</p></li><li><p>常见事件：</p><ul><li>点击事件：onclick 单击事件 /ondblclick 双击事件</li><li>焦点事件：onblur 元素失去焦点 （一般用于表单验证）/ onfocus 元素获得焦点</li><li>加载事件：onload 一个页面或图片完成加载（在加载完后再加载javascript，给body 加onload或者直接window.onload = function(){事件}）</li><li>鼠标事件：onmouse(down/up/move/out/over) (onmousedown:)</li><li>键盘事件：onkey(down/up/press)</li><li>选中和改变：onchange 域的内容改变/ onselect 文本被选中</li><li>表单事件：onsubmit 确认按钮被点击/onreset 重置按钮被点击</li></ul></li><li><p>绑定事件：</p><ul><li><p>在html标签上指定事件属性，属性就是js代码（可以写一个函数再在这里调用）</p><blockquote><p>事件：onclick —单击事件。耦合度太高</p></blockquote></li><li><p>通过js获取元素对象，指定事件属性，设置一个函数，并绑定该函数 </p></li></ul></li></ul><h4 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h4><ul><li>轮播图</li><li>分析<ul><li>在页面上使用img标签展示图片</li><li>定义一个方法，修改图片的src属性</li><li>定义一个定时器，每隔三秒调用方法一次</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img id=<span class="string">"img"</span> src=<span class="string">"img/banner_1.jpg"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> number = <span class="number">1</span></span><br><span class="line">        <span class="function">function <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            number ++;</span><br><span class="line">            <span class="comment">//三张图 </span></span><br><span class="line">            <span class="keyword">if</span>(number &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                number = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取img对象</span></span><br><span class="line">            <span class="keyword">var</span> img = document.getElementById(<span class="string">"img"</span>);</span><br><span class="line">            img.src = <span class="string">"img/banner_"</span>+number+<span class="string">".jpg"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置定时器</span></span><br><span class="line">        setInterval(fun, <span class="number">300</span>)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>自动跳转</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span id="time"&gt;5&lt;/span&gt;秒之后，自动跳转到页面...</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> second = <span class="number">5</span>;</span><br><span class="line">    <span class="function">function <span class="title">showtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        second--;</span><br><span class="line">        <span class="keyword">if</span>(second&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            location.href = <span class="string">"https:www.baidu.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> time = document.getElementById(<span class="string">"time"</span>);</span><br><span class="line">        time.innerHTML = second + <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setInterval(showtime, <span class="number">1000</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web前端开发03 -- HTML综述</title>
      <link href="/2019/05/04/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%9103%20--%20HTML%E7%BB%BC%E8%BF%B0/"/>
      <url>/2019/05/04/web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%9103%20--%20HTML%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="html简介"><a href="#html简介" class="headerlink" title="html简介"></a><code>html</code>简介</h2><blockquote><p>标记语言：注重文档结构</p></blockquote><blockquote><p>程序语言：注重控制计算机</p></blockquote><blockquote><p>常用标记语言：</p></blockquote><pre><code>Xml: XML是元标识语言，用户可以根据自身的需要定义一些标记 Html: 这是一种用来制作超文本文档的简单标记语言，用其编写的文档通常后缀为htmlXHTML:HTML的增强版，它的灵活性和扩展性会适应未来网络应用的更多需求,语法要求更严格HTML5: html最新标准</code></pre><blockquote><p><code>js css html</code> 关系</p></blockquote><pre><code>html： 负责创建，负责语义的表达，解决了页面“显示内容是什么”的问题css：负责解决网页中内容该如何显示的问题javascript：负责讲解网页内容对事件该做出什么样的反应</code></pre><a id="more"></a><h2 id="HTML基本知识"><a href="#HTML基本知识" class="headerlink" title="HTML基本知识"></a><code>HTML</code>基本知识</h2><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a><code>html</code>结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>                     //申明html文档</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-Hans"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>                          //head 头部标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>      </span><br><span class="line">//meta 无结束标签，通过对应的属性来设置编码格式（必要）、</span><br><span class="line">设备显示缩放、搜索引擎关键字、描述、浏览器内核渲染方式等内容。        </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>     //title 设置网页标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>                   //body 内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>                             //html 文档跟节点</span><br></pre></td></tr></table></figure><h3 id="html-基础标签和元素"><a href="#html-基础标签和元素" class="headerlink" title="html 基础标签和元素"></a><code>html</code> 基础标签和元素</h3><ul><li><p><code>h</code>: <code>&lt;h1&gt;&lt;/h1&gt;</code>  标题，有1，2，3，4。。。等标题</p></li><li><p><code>p:&lt;p&gt;&lt;/p&gt;</code> :段落  不识别回车和空格 （回车会识别为空格，一个或多个空格为一个空格）</p></li><li><p><code>body:&lt;body&gt;&lt;/body&gt;</code>  网页上需要显示的信息，其html主体写在body里面</p></li><li><p><code>meta：&lt;meta charset=&quot;UTF-8&quot; http-equiv=&quot;refresh&quot; content=&quot;40&quot;&gt;</code>  </p><blockquote><p>闭合标签，其中可设置字符集 </p></blockquote><blockquote><p><code>charset</code>:标签属性 设置字符集</p></blockquote><blockquote><p><code>http-equiv</code>: 网页刷新</p></blockquote><blockquote><p><code>content</code>:刷新间隔秒数</p></blockquote></li><li><p><code>title:&lt;title&gt;&lt;/title&gt;</code>  标题，整个网页的标题</p></li><li><p><code>hr:&lt;hr&gt;</code>  水平线标签</p></li><li><p><code>br:&lt;br&gt;</code>   换行</p></li><li><p><code>a:&lt;a href=&quot;url&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;</code>  超链接</p><blockquote><p><code>target=&quot;_blank&quot;</code>  从新窗口打开 </p></blockquote><blockquote><p><code>&lt;a href=“url” download&gt;链接文本&lt;/a&gt;</code>  下载到本地</p></blockquote><blockquote><p><code>&lt;a href=&quot;#c2&quot;&gt;跳转到c2&lt;/a&gt;</code>  跳转到id=c2所对应的标签</p></blockquote><blockquote><p><code>img:&lt;img src=&quot;images/a1.png&quot;&gt;</code> 浏览器展示图片</p></blockquote></li><li><p><code>b:&lt;b&gt;&lt;/b&gt;</code>  字体加粗</p></li></ul><h3 id="语义化标签："><a href="#语义化标签：" class="headerlink" title="语义化标签："></a>语义化标签：</h3><ul><li><p><code>strong:&lt;&gt;&lt;/&gt;</code>  强调语句</p></li><li><p><code>em:&lt;&gt;&lt;/&gt;</code>   强调</p></li><li><p><code>div:&lt;&gt;&lt;/&gt;</code>  布局标签（通用容器）</p></li><li><p><code>article:&lt;&gt;&lt;/&gt;</code> 用于文章、新闻或博客，表示文档、页面、应用或一个独立的容器 可嵌套</p></li><li><p><code>section:&lt;&gt;&lt;/&gt;</code> 章节标签</p></li><li><p><code>aside:&lt;&gt;&lt;/&gt;</code> 指定附注栏，包括引述、侧栏、指向文章的一组链接、广告、友情链接、相关产品列表等</p></li><li><p><code>header:&lt;header&gt;&lt;/header&gt;</code> 网页的额外信息，比如网页的脚本语言和网页使用的字符集等</p></li><li><p><code>footer:&lt;&gt;&lt;/&gt;</code>  页脚    </p></li><li><p><code>nav:&lt;&gt;&lt;/&gt;</code>标记导航，仅对文档中重要的链接使用</p></li><li><p><code>time:&lt;&gt;&lt;/&gt;</code> 时间</p></li><li><p><code>main:&lt;&gt;&lt;/&gt;</code> 页面主要内容，一个页面只使用一次            </p></li><li><p>特殊符号：</p><pre><code>&amp;lt  &lt;&amp;gt   &gt;&amp;nbsp  空格&amp;amp  &amp;&amp;quot  &quot;&amp;qpos  &apos;</code></pre></li><li><p><code>pre:&lt;pre&gt;&lt;/pre&gt;</code>  原样输出，适合编程语句的显示</p></li><li><p><code>iframe</code>框架：通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面<br><code>&lt;iframe src=&quot;demo_iframe.htm&quot; name=&quot;iframe_a&quot; scrolling=&quot;yes&quot;&gt;&lt;/iframe&gt;</code></p><blockquote><p><code>name</code>：设置iframe的名称</p></blockquote><blockquote><p><code>width</code>：设置iframe的宽度，值可以为像素（不用添加“px”单位）和百分数</p></blockquote><blockquote><p><code>height</code>：设置iframe的高度，值可以为像素（不用添加“px”单位）和百分数</p></blockquote><blockquote><p><code>src</code>：设置iframe元素内需要显示页面或文件的URL地址，<br>该属性的值可以由与之关联的a标签点击设置（通过将a标签的“target”<br>属性的值设置为该iframe的“name”属性的值进行关联）</p></blockquote><blockquote><p><code>frameborder</code>：设置是否显示边框（0 表示不显示边框/ 1 表示要显示边框）</p></blockquote><blockquote><p><code>scrolling</code>：设置是否允许滚动（auto/yes/no）</p></blockquote></li></ul><h3 id="html列表标签"><a href="#html列表标签" class="headerlink" title="html列表标签"></a><code>html</code>列表标签</h3><table><thead><tr><th align="center">元素</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>ol</code></td><td align="center">定义有序列表</td></tr><tr><td align="center"><code>ul</code></td><td align="center">定义无序列表</td></tr><tr><td align="center"><code>li</code></td><td align="center">列表内容</td></tr><tr><td align="center"><code>dl</code></td><td align="center">自定义列表</td></tr><tr><td align="center"><code>dt</code></td><td align="center">列表项目描述</td></tr><tr><td align="center"><code>dd</code></td><td align="center">列表项目描述</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>无序列表:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>无序列表:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">’50’</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dt</span>&gt;</span>a<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dt</span>&gt;</span>b<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>b1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>b2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dt</span>&gt;</span>c<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>c1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>c2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">粗字体</td></tr><tr><td align="center">em</td><td align="center">着重</td></tr><tr><td align="center">i</td><td align="center">斜体字</td></tr><tr><td align="center">small</td><td align="center">小号字</td></tr><tr><td align="center">strong</td><td align="center">加重语气</td></tr><tr><td align="center">sub</td><td align="center">下标字</td></tr><tr><td align="center">sup</td><td align="center">上标字</td></tr><tr><td align="center">ins</td><td align="center">插入字</td></tr><tr><td align="center">del</td><td align="center">删除字</td></tr></tbody></table><h3 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编程语言：<span class="keyword">python</span>，运算用</span><br><span class="line">标记语言：结构化文档</span><br><span class="line">自然语言：信息搜索等</span><br></pre></td></tr></table></figure><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a><code>id</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">该属性能用于所有的HTML元素，为HTML元素指定一个唯一的标识符，用于CSS设置，</span><br><span class="line">JavasSript进行操作或其它脚本语言及服务器端语言进行设置操作。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"des"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a><code>class</code></h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">该属性可以用于所有HTML元素，为元素添加一个或多个类名。通常是用于CSS设置或配</span><br><span class="line">合JavaScript进行操作设置，多个类名以空格符进行分隔，多个元素可以使用同一个类名。</span><br><span class="line"></span><br><span class="line">&lt;section <span class="keyword">class</span>="<span class="symbol">box</span> <span class="symbol">fr</span>"&gt;&lt;/<span class="symbol">section</span>&gt;</span><br><span class="line">&lt;<span class="symbol">section</span> <span class="symbol">class</span>="<span class="symbol">box</span>"&gt;&lt;/<span class="symbol">section</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a><code>title</code></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">该属性可以用于所有HTML元素，通过设置它的值，可以让用户鼠标悬浮在该元素上显示出“title”</span><br><span class="line">属性中所设置的值。如之前提到的标签。起到一个补充说明的作用。</span><br><span class="line"></span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"1.jpegv"</span> <span class="attribute">alt</span>=<span class="string">"图片加载失败..."</span> <span class="attribute">title</span>=<span class="string">"Ferrari"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="lang"><a href="#lang" class="headerlink" title="lang"></a><code>lang</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">该属性用于设置元素的语言类型，不支持的标标有<span class="tag">&lt;<span class="name">base</span>&gt;</span>，<span class="tag">&lt;<span class="name">br</span>&gt;</span>，<span class="tag">&lt;<span class="name">frame</span>&gt;</span>，<span class="tag">&lt;<span class="name">frameset</span>&gt;</span>，</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>，<span class="tag">&lt;<span class="name">iframe</span>&gt;</span>，<span class="tag">&lt;<span class="name">param</span>&gt;</span> 及 <span class="tag">&lt;<span class="name">script</span>&gt;</span>，但通常的使用方式是直接给标签设置该属性，</span><br><span class="line"><span class="handlebars"><span class="xml">如：<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span>、<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span>、<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>这样的形式，</span></span></span><br><span class="line">分别表示将语言类型设置为“简体中文”、“中文”、“英文”。</span><br></pre></td></tr></table></figure><h3 id="h5播放器"><a href="#h5播放器" class="headerlink" title="h5播放器"></a>h5播放器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"h5_player1.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格和表单"><a href="#表格和表单" class="headerlink" title="表格和表单"></a>表格和表单</h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul><li>表格由 table 标签来定义。</li></ul><blockquote><p>每个表格均有若干行（由 tr 标签定义），每行被分割为若干单元格（由 td 标签定义）。</p></blockquote><blockquote><p>字母 td(table data) 指表格数据，即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水线、表格等等。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;table border="1" cellpadding="10”&gt;</span>  <span class="attribute">border</span> 为边框宽度1 cellpadding 为单元格间距10 </span><br><span class="line">    <span class="section">&lt;tr&gt;</span></span><br><span class="line">        <span class="section">&lt;td&gt;</span></span><br><span class="line">            <span class="attribute">row</span> 1,col 2    </span><br><span class="line">        <span class="section">&lt;/td&gt;</span></span><br><span class="line">    <span class="section">&lt;/tr&gt;</span></span><br><span class="line"><span class="section">&lt;/table&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">table</td><td align="center">定义表格</td></tr><tr><td align="center">th</td><td align="center">定义表格的表头</td></tr><tr><td align="center">tr</td><td align="center">定义表格的行</td></tr><tr><td align="center">td</td><td align="center">定义表格的单元</td></tr><tr><td align="center">caption</td><td align="center">定义表格的标题</td></tr><tr><td align="center">colgroup</td><td align="center">定义表格的组</td></tr><tr><td align="center">col</td><td align="center">定义表格列的属性</td></tr><tr><td align="center">thead</td><td align="center">定义页眉</td></tr><tr><td align="center">tbody</td><td align="center">定义表格的主体</td></tr><tr><td align="center">tfoot</td><td align="center">定义表格的页脚</td></tr></tbody></table><ul><li>表格三大部分</li></ul><pre><code>    thead ---------表格的页眉    tbody ---------表格的主体    tfoot ---------定义表格的页脚(在最下面,不管代码位置在哪里)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>row end col1<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>row end col2<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span> 把包括本身的2格合并起来</span><br><span class="line">            row 1,col 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>表格合并</p><pre><code>colspan 合并列rowspan 合并行</code></pre></li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul><li>表单创建</li></ul><pre><code>&gt;表单是一个包含表单元素的区域。HTML 表单用于搜集不同类型的用户输入。表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。&gt;表单使用表单标签 form标签来设置:多数情况下被用到的表单标签是输入标签 input标签 输入类型是由类型属性（type）定义的。&gt;form标签属性:    action 提交到哪里去(点击表单之后)    method 定义提交的方法 get post等方法    input标签就是我们常见的输入框里面的内容    placeholder 提示我们输入文字    required 必须输入<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"tables.html"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>账户<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">placeholder</span>=</span></span><br><span class="line"><span class="tag">“输入” <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* 表单标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">|标签|描述|</span><br><span class="line">|:-:| :-:|</span><br><span class="line">|form|</span><br><span class="line">|input|定义输入域</span><br><span class="line">|textarea|定义文本域 (一个多行的输入控件)</span><br><span class="line">|label|定义了 input元素的标签，一般为输入标题</span><br><span class="line">|fieldset|定义了一组相关的表单元素，并使用外框包含起</span><br><span class="line">|legend|定义了 fieldset 元素的标题</span><br><span class="line">|select|定义了下拉选项列表</span><br><span class="line">|optgroup|定义选项组</span><br><span class="line">|option|定义下拉列表中的选项</span><br><span class="line">|button|定义一个点击按钮</span><br><span class="line">|datalist|指定一个预先定义的输入控件选项列表</span><br><span class="line">|keygen|定义了表单的密钥对生成器字段</span><br><span class="line">|output|定义一个计算结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;我们通过type来定义文本的类型,如果password则不会显示密码里面的字段</span><br><span class="line">我们习惯在使用label表示表单的名称,在label中使用for,指向input中的id</span><br><span class="line">就可以在点击label标签的时候,跳转到Input标签中间去</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"tables.html"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'t1'</span>&gt;</span>账户<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"t1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"t2"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"t2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>单选按钮（radio） 复选框（checkbox）</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type="radio" 标签定义了表单单选框选项</span><br><span class="line">表单中的单选按钮可以设置以下几个属性：</span><br><span class="line">value、name、checked value：提交数据到服务器的值</span><br><span class="line">name：为控件命名，以备后台程序 ASP、PHP 使用</span><br><span class="line"></span><br><span class="line">checked="checked" 时，该选项被默认选中<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">checked</span>&gt;</span>male<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下拉列表（select option）</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>bmw<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>benz<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>带边框的表单（filedset）</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line">        fieldset的</span><br><span class="line">    <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'t1'</span>&gt;</span>账户<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"t1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"t2"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"t2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加文件</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">文件上传 type=“file"</span><br><span class="line">使用file，则form的enctype必须设置为multipart/form-data，</span><br><span class="line">method属性为POST。</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">application/x-www-form-urlencoded 在发送前编码所有字符（默认）</span><br><span class="line">multipart/form-data 不对字符编码。在使用包含文件上传控件的表单时</span><br><span class="line">，必须使用该值。</span><br><span class="line">text/plain 空格转换为 "+" 加号，但不对特殊字符编码。</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><code>CSS</code></h2><h3 id="“行内样式”、“内嵌样式”、“外链样式”、“导入式”"><a href="#“行内样式”、“内嵌样式”、“外链样式”、“导入式”" class="headerlink" title="“行内样式”、“内嵌样式”、“外链样式”、“导入式”"></a>“行内样式”、“内嵌样式”、“外链样式”、“导入式”</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>中国男篮排位赛广州进行，将与国足下榻同一酒店<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span>                              // 内嵌样式</span><br><span class="line">    p&#123;</span><br><span class="line">      text-indent: 4em;</span><br><span class="line">    &#125;</span><br><span class="line">    h4&#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    img&#123;</span><br><span class="line">      width: 560px;</span><br><span class="line">      height: 450px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.p1</span>&#123;</span></span><br><span class="line">      color: chocolate;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.p2</span>&#123;</span></span><br><span class="line">      color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#x2</span>&#123;</span></span><br><span class="line">      color: cornflowerblue;</span><br><span class="line">    &#125;</span><br><span class="line">    *&#123;</span><br><span class="line">      border: 0;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"h5_css_1.css"</span>&gt;</span>   </span><br><span class="line">  //外链样式 链接地址为编写的css外部代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>中国男篮排位赛广州进行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span> </span><br><span class="line">//行内样式</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span>(原标题)<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://cms-bucket.ws.126.net/</span></span></span><br><span class="line"><span class="tag"><span class="string">2019/09/05/4740f77e15b9402a8877f302eb67a908.jpeg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">"x2"</span>&gt;</span>中国男篮59-72不敌委内瑞拉<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>而据澎湃新闻记者从国足处<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>延伸 · 回顾<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://sports.163.com/19/0904/21/EO8T046J00059AJ8.html"</span>&gt;</span>男篮无缘16强球</span><br><span class="line">迷终于忍不了全场高喊"李楠下课"<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span>北京时间9月4日晚<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*h5_css_1.css*/</span><br><span class="line">h5&#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a><code>css</code>选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">1.标签选择器</span><br><span class="line">div  &#123; width:  300px; height: 300px; background-color: red; &#125;</span><br><span class="line">p    &#123; text-indent: 2em; color: blue; &#125;</span><br><span class="line">span &#123; letter-spacing: 5px; font-size: 20px; &#125;</span><br><span class="line"></span><br><span class="line">2. 类选择器</span><br><span class="line">.box  &#123; width:  300px; height: 300px; background-color: red; &#125;</span><br><span class="line">p.des &#123; text-indent: 2em; color: blue; &#125;</span><br><span class="line"></span><br><span class="line">3. id选择器</span><br><span class="line">#box &#123; width:  300px; height: 300px; background-color: red; &#125;</span><br><span class="line">#des &#123; text-indent: 2em; color: blue; &#125;</span><br><span class="line"></span><br><span class="line">4. 通用选择器</span><br><span class="line">通用选择器使用 * 表示，它的作用是选择页面中所有的标签元素</span><br><span class="line"></span><br><span class="line">5. 后代选择器  可选择嵌套其中的任意一个子类</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-tag">article</span> &#123; <span class="attribute">text-align</span>: center; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#000000</span>; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-tag">p</span>  &#123; <span class="attribute">color</span>: <span class="number">#008800</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Napoléon Bonaparte<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Adversity is the midwife of genius.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">6. 子类选择器  只能选择直系嵌套下的子类</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &gt; <span class="selector-tag">article</span> &#123; <span class="attribute">text-align</span>: center; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &gt; <span class="selector-tag">article</span> &gt; <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: <span class="number">#000000</span>; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &gt; <span class="selector-tag">article</span> &gt; <span class="selector-tag">p</span>  &#123; <span class="attribute">color</span>: <span class="number">#008800</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">7. 伪类选择器</span><br><span class="line"></span><br><span class="line">link：表示链接在正常情况下（即页面刚加载完成时）显示的颜色。</span><br><span class="line">visited：表示链接被点击后显示的颜色。</span><br><span class="line">hover：表示鼠标悬停时显示的颜色。</span><br><span class="line">focus：表示元素获得光标焦点时使用的颜色，主要用于文本框输入文字时使用</span><br><span class="line">（鼠标松开时显示的颜色,</span><br><span class="line">可以使用input来查看）。</span><br><span class="line">active：表示当所指元素处于激活状态（鼠标在元素上按下还没有松开）</span><br><span class="line">时所显示的颜色。</span><br><span class="line"></span><br><span class="line">a &#123; text-decoration: none; &#125;</span><br><span class="line">a:hover &#123; text-decoration: underline;&#125;</span><br><span class="line">      a:link&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        a:visited&#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">        a:hover&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        a:focus&#123;</span><br><span class="line">            color:black;</span><br><span class="line">        &#125;</span><br><span class="line">        a:active&#123;</span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">8. 群组选择器</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>, <span class="selector-tag">p</span> &#123; <span class="attribute">margin</span>:  <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>布局标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文本标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="权重计算值"><a href="#权重计算值" class="headerlink" title="权重计算值"></a>权重计算值</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">行内权重值：<span class="number">1000</span></span><br><span class="line">ID选择器的权重值：<span class="number">100</span></span><br><span class="line"><span class="keyword">class</span>和伪类：<span class="symbol">10</span></span><br><span class="line">标签选择器：<span class="symbol">1</span></span><br><span class="line"></span><br><span class="line">!<span class="symbol">important</span> 最高权重：<span class="symbol">10000</span> </span><br><span class="line"></span><br><span class="line">#<span class="symbol">html1</span> &#123;</span><br><span class="line">           color: #<span class="number">73</span>d44d !important;</span><br><span class="line">           background-color: #<span class="number">93</span>c1d4;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.每种权重值的最大值只能叠加9次</p></blockquote><blockquote><p>2.如果两个地方定义的权重一样的话,那么就按照最后定义的权重为准,这个原则<br>        使用于 <code>&lt;style&gt;</code>和 <code>&lt;link&gt;</code>混合来使用</p></blockquote><h3 id="css高级选择器"><a href="#css高级选择器" class="headerlink" title="css高级选择器"></a>css高级选择器</h3><p>CSS高级选择器区别于CSS普通选择器,是对标签元素的结构、标签元素的索引、标签元素<br>的状态等一些更为复杂的条件下进行的选择，甚至能改变现有标签的状态结构。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">伪元素选择器：向指定的选择器添加指定的效果</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.：first-letter</span><br><span class="line">选择“块级元素”文本段落中的首个字符，只对块级元素生效 如&lt;p&gt;</span><br><span class="line"><span class="number">2</span>.<span class="symbol">:first-line</span></span><br><span class="line">选择“块级元素”文本段落中的首行文本，与<span class="number">1</span>一样</span><br><span class="line"><span class="number">3</span>.<span class="symbol">:before</span></span><br><span class="line">在指定的选择器之前插入一段内容。插入内容默认为“行内元素”，可通过“display”强制转换类型。</span><br><span class="line">如果需要插入文本字符串，则直接将字符串赋值给 content 属性，</span><br><span class="line">如：`<span class="symbol">content:</span> <span class="string">'Hello, world!'</span></span><br><span class="line">p &#123;</span><br><span class="line">    letter-<span class="symbol">spacing:</span> <span class="number">5</span>px;</span><br><span class="line">    font-<span class="symbol">size:</span> <span class="number">25</span>px;</span><br><span class="line">    <span class="symbol">color:</span> <span class="comment">#ff4500;</span></span><br><span class="line">    text-<span class="symbol">shadow:</span> <span class="number">1</span>px <span class="number">1</span>px <span class="number">2</span>px <span class="comment">#000;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">p:</span>after &#123;</span><br><span class="line">    /*插入内容，这里以插入图片为例*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    content: url('xiaoxin.jpg');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    position: relative;</span></span><br><span class="line"><span class="regexp">    top: 20px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">结构性伪类选择器：该类选择器主要用于当前选择器精确地通过元素“索引值”或</span></span><br><span class="line"><span class="regexp">“匹配类型”的索引值定位到该选择器的同级指定元素</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">1.:first-child</span></span><br><span class="line"><span class="regexp">对该类所有父元素中的首个子元素进行选择。</span></span><br><span class="line"><span class="regexp">2.：last-child</span></span><br><span class="line"><span class="regexp">对该类所有父元素中的最后一个子元素进行选择。</span></span><br><span class="line"><span class="regexp">3. :first-of-type</span></span><br><span class="line"><span class="regexp">对该类所有父元素中的首个匹配到类型的子元素进行选择。</span></span><br><span class="line"><span class="regexp">4. :last-of-type</span></span><br><span class="line"><span class="regexp">对该类所有父元素中的最后一个匹配到类型的子元素进行选择。</span></span><br><span class="line"><span class="regexp">5. :only-child</span></span><br><span class="line"><span class="regexp">对该类所有父元素中只含有唯一所匹配（不包含同级元素/</span>只有一个子元素）</span><br><span class="line">的子元素进行选择。</span><br><span class="line"><span class="number">6</span>. <span class="symbol">:only-of-type</span></span><br><span class="line">对该类所有父元素中只含有唯一所匹配类型的子元素进行选择。</span><br><span class="line"><span class="number">7</span>. <span class="symbol">:nth-child</span>(n)</span><br><span class="line">对其父元素的第“n”个子元素进行选择，通过设置参数“n(0开始)”指定为</span><br><span class="line">第几个元素。</span><br><span class="line">(该选择器不仅能准确的匹配到第“几”个指定类型的元素，还能对匹配类</span><br><span class="line">型元素的“奇偶索引”值进行选择。odd 表示奇数，even 表示偶数。)</span><br><span class="line"><span class="number">8</span>. <span class="symbol">:nth-last-child</span>(n)</span><br><span class="line">该选择器和“<span class="symbol">:nth-child</span>(n)”的特性基本一致，唯一的不同点就是该选择器</span><br><span class="line">的索引值是从该选</span><br><span class="line">择器匹配到的元素的同级元素中的最后一个开始进行计算的</span><br><span class="line"><span class="number">9</span>. <span class="symbol">:empty</span></span><br><span class="line">  该选择器会匹配所有，或指定基本选择器内没有元素（没有子节点</span><br><span class="line">  ）的标签元素。</span><br><span class="line"><span class="number">10</span>. <span class="symbol">:not</span>(selector)</span><br><span class="line">  该选择器是用于排除指定元素的选择器。</span><br></pre></td></tr></table></figure><h3 id="css文本和字体"><a href="#css文本和字体" class="headerlink" title="css文本和字体"></a>css文本和字体</h3><ul><li>文本设置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">01. 文本对齐方式</span><br><span class="line">text-align 属性用于控制“行内块元素”、“块元素”或“行内元素”（文本元素）的居中方式，</span><br><span class="line">包含三个值：</span><br><span class="line"></span><br><span class="line">left：局左对齐（m o'ren）</span><br><span class="line">right：居右对齐</span><br><span class="line">center：居中对齐</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">02. 段落首行缩进</span><br><span class="line">text-indent 属性是用于设置每个段落首行缩进数量值的属性，CSS字体大小（font-size）可</span><br><span class="line">以设置的数值和单位在该属性的值中都可以使用（除了百分比）。如果是用于中文布局，一般会使</span><br><span class="line">用“2em”的数值和单位来为每个段落的首行缩进“两个字符”。1em就等于16px，2em就是32px。</span><br><span class="line"></span><br><span class="line">03. 文本装饰线</span><br><span class="line">text-decoration 属性是为文本上添加一根装饰线，带"href"属性的<span class="tag">&lt;<span class="name">a</span>&gt;</span>标签默认</span><br><span class="line">会带有一根下划线，就是由该属性的值“underline”设置的。“text-decoration”</span><br><span class="line">属性有以下值：</span><br><span class="line"></span><br><span class="line">none（默认）：不显示任何装饰线</span><br><span class="line">underline：在文本下方显示装饰线</span><br><span class="line">overline：在文本上方显示装饰线</span><br><span class="line">line-through：在文本中间显示装饰线，相当于删除线</span><br><span class="line"></span><br><span class="line">04. 大小写转换</span><br><span class="line">text-transform 属性能将“行内元素”中的英文文本进行大小写转换，以满足网站对</span><br><span class="line">规范性的要求。该属性有以下属性值：</span><br><span class="line"></span><br><span class="line">none（默认）：保持文本中英文单词的默认大小写</span><br><span class="line">capitalize：每个英文单词首字母为大写字母，其它为小写字母</span><br><span class="line">uppercase：将所有英文单词转换为大写字母</span><br><span class="line">lowercase：将所有英文单词转换为小写字母</span><br><span class="line"></span><br><span class="line">05. 文本阴影</span><br><span class="line">text-shadow 属性的作用是给文本添加阴影效果。目前除了IE9及之前版本不支</span><br><span class="line">持该属性外，</span><br><span class="line">其它主流浏览器均支持该属性。该属性有4个值，具体如下：text-shadow: </span><br><span class="line">H V blur color;</span><br><span class="line"></span><br><span class="line">H：水平偏移，“0”表示维持原位，正数为向右偏移，负数为向左偏移。</span><br><span class="line">单位为像素“px”。</span><br><span class="line">V：垂直偏移，“0”表示维持原位，正数为向下偏移，负数为向上偏移。</span><br><span class="line">单位为像素“px”。</span><br><span class="line">blur ：模糊距离，用 正数 表示阴影模糊的单位距离，距离越大模糊程度越高。</span><br><span class="line">单位为像素“px”。</span><br><span class="line">color：阴影颜色，支持Web技术中的常用颜色模式：“颜色英文单词”、</span><br><span class="line">“HEX”、“RGBa”、“HSLa”。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-shadow: 2px 2px 5px #000;"</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">06. 文本行高</span><br><span class="line">line-height 属性是用于设置“行内元素”中文本元素在一行中所占据的高度</span><br><span class="line">当文本元素只有一行时，可以将该行的文本行高设为和父容器元素高度一致，</span><br><span class="line">以此到达文本垂直居中的效果。使用场景如：表格、导航按钮、自定义样式</span><br><span class="line">按钮、标题栏等。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HTML 部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>CHINA<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS 部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.txt</span> &#123;</span></span><br><span class="line">        width:  260px;</span><br><span class="line">        height: 260px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 260px;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*字符间距*/</span></span></span><br><span class="line">        letter-spacing: 5px;</span><br><span class="line"><span class="css">        <span class="comment">/*字体大小*/</span></span></span><br><span class="line">        font-size: 36px;</span><br><span class="line"><span class="css">        <span class="comment">/*文本阴影*/</span></span></span><br><span class="line">        text-shadow: 3px 3px 5px skyblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">07. 单词间距  word-spacing 如“像素（px）”，“字符（em）”，“点（pt）”等，可以为负数。</span><br><span class="line"></span><br><span class="line">08. 字符间距 letter-spacing 属性是用于控制字符间的间距，即无论单词或词语中含有空格</span><br><span class="line">（该属性对空格字符无效），该属性都会生效，单位同样为Web技术的常用度量单位，</span><br><span class="line">同样为可以为负数。</span><br></pre></td></tr></table></figure><ul><li>字体设置</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">01.</span> 字体颜色</span><br><span class="line">在目前的浏览器标准中，要想改变浏览器默认字体的颜色（#<span class="number">000000</span>）唯一的途径就是通过</span><br><span class="line">CSS的 color 属性进行设置。颜色属性可以设置<span class="number">4</span>种类型的值，有以下类型：颜色属于继承属性</span><br><span class="line"></span><br><span class="line">颜色英文单词</span><br><span class="line">HEX（<span class="number">16</span>进制颜色）</span><br><span class="line">RGBa/RGB（Alpha的三原色）</span><br><span class="line">HSLa（Alpha的Hue、Saturation、Lightness）</span><br><span class="line">Transparent（透明）</span><br><span class="line">inherit（继承父级）</span><br><span class="line"></span><br><span class="line"><span class="number">02.</span> 字体样式</span><br><span class="line">font-style 用于设置字体类型，可设置以下值：</span><br><span class="line"></span><br><span class="line">normal：普通字体</span><br><span class="line">italic：斜体</span><br><span class="line">oblique：倾斜字体</span><br><span class="line"></span><br><span class="line"><span class="number">03.</span> 字体粗细</span><br><span class="line">font-weight 用于设置字体粗细，可设置以下值：</span><br><span class="line"></span><br><span class="line">normal：正常粗细</span><br><span class="line">bold：粗体</span><br><span class="line">bolder：更粗的字体</span><br><span class="line">lighter：更细的字体</span><br><span class="line"><span class="number">100</span>~<span class="number">900</span>：步长为<span class="number">100</span>，<span class="number">400</span> 等同于 normal，而 <span class="number">700</span> 等同于 bold</span><br><span class="line"></span><br><span class="line"><span class="number">04.</span> 字体大小 font-size 目前浏览器的主流的字号都是采用<span class="number">16</span>像素（px）的字体。</span><br><span class="line"></span><br><span class="line"><span class="number">05.</span> 字体名称 font-family 用于设置字体系列，就是我们通常说的“所用字体”。</span><br><span class="line"></span><br><span class="line"><span class="number">06.</span> 字体组合值 font 属性用于设置字体样式的组合值写法，其语法形式为：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">扩展：文字两端对齐</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line"></span><br><span class="line">    width: <span class="number">120</span>px;</span><br><span class="line">    padding: <span class="number">5</span>px;</span><br><span class="line">    margin:  <span class="number">2</span>px;</span><br><span class="line">    border:  <span class="number">1</span>px solid #ff4500;</span><br><span class="line">    border-radius: <span class="number">5</span>px;</span><br><span class="line"></span><br><span class="line">    text-align-last: justify; <span class="comment">/*两端对齐*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css元素分类"><a href="#css元素分类" class="headerlink" title="css元素分类"></a>css元素分类</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.在CSS中，html中的标签元素大体被分为三种不同的类型：</span><br><span class="line">块状元素、内联元素(又叫行内元素)和内联块状元素。</span><br><span class="line"></span><br><span class="line">常用的块状元素有：</span><br><span class="line"><span class="variable">&lt;div&gt;</span>、<span class="variable">&lt;p&gt;</span>、<span class="variable">&lt;h1&gt;</span>...<span class="variable">&lt;h6&gt;</span>、<span class="variable">&lt;ol&gt;</span>、<span class="variable">&lt;ul&gt;</span>、<span class="variable">&lt;dl&gt;</span>、<span class="variable">&lt;table&gt;</span>、<span class="variable">&lt;address&gt;</span>、<span class="variable">&lt;blockquote&gt;</span> 、<span class="variable">&lt;form&gt;</span></span><br><span class="line">常用的内联元素有：</span><br><span class="line"><span class="variable">&lt;a&gt;</span>、<span class="variable">&lt;span&gt;</span>、<span class="variable">&lt;br&gt;</span>、<span class="variable">&lt;i&gt;</span>、<span class="variable">&lt;em&gt;</span>、<span class="variable">&lt;strong&gt;</span>、<span class="variable">&lt;label&gt;</span>、<span class="variable">&lt;q&gt;</span>、<span class="variable">&lt;var&gt;</span>、<span class="variable">&lt;cite&gt;</span>、<span class="variable">&lt;code&gt;</span></span><br><span class="line">常用的内联块状元素有：</span><br><span class="line"><span class="variable">&lt;img&gt;</span>、<span class="variable">&lt;input&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.块级元素 <span class="built_in">block</span></span><br><span class="line"></span><br><span class="line">块级元素特点：</span><br><span class="line"><span class="number">1</span>、每个块级元素都从新的一行开始，并且其后的元素也另起一行。</span><br><span class="line"><span class="number">2</span>、元素的高度、宽度、行高以及顶和底边距都可设置。</span><br><span class="line"><span class="number">3</span>、元素宽度在不设置的情况下，是它本身父容器的<span class="number">100</span>%（和父元素的宽度一致），</span><br><span class="line">   除非设定一个宽度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.内联元素 inline</span><br><span class="line">内联元素特点:</span><br><span class="line"><span class="number">1</span>、和其他元素都在一行上；</span><br><span class="line"><span class="number">2</span>、元素的高度、宽度及顶部和底部边距不可设置；</span><br><span class="line"><span class="number">3</span>、元素的宽度就是它包含的文字或图片的宽度，不可改变。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.内联块状 inline-block</span><br><span class="line">特点</span><br><span class="line"><span class="number">1</span>、和其他元素都在一行上；</span><br><span class="line"><span class="number">2</span>、元素的高度、宽度、行高以及顶和底边距都可设置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.类型转换  通过display:<span class="built_in">block</span> 我们可以将元素转换类型  a&#123;display:<span class="built_in">block</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 所谓盒子模型，即是将网页布局中的元素（行内/行内块元素）进行拟物化的比喻，</span><br><span class="line">一个盒子由内容</span><br><span class="line">（<span class="built_in">content</span>）、内间距（padding）、边框（<span class="built_in">border</span>）以及外边距（margin）</span><br><span class="line">组成</span><br><span class="line"></span><br><span class="line">提示：只有 块级元素 与 行内块元素 具备盒子模型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. CSS盒子模型的类型主要有两个：</span><br><span class="line">IE浏览器盒子模型：<span class="built_in">box</span>-sizing:<span class="built_in">border</span>-<span class="built_in">box</span>;</span><br><span class="line">标准（W3C，其它主流浏览器）盒子模型（默认）：<span class="built_in">box</span>-sizing:<span class="built_in">content</span>-<span class="built_in">box</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.盒子属性：</span><br><span class="line">宽度：<span class="built_in">width</span></span><br><span class="line">高度：<span class="built_in">height</span></span><br><span class="line">内间距：padding  设置盒子内容与边框之间的间距，即内间距（填充）</span><br><span class="line">padding 可以接收的值为：像素（px）、百分比（<span class="symbol">%</span>）、inherit</span><br><span class="line">（继承）以及auto（浏览器自计算）</span><br><span class="line">外间距：margin   margin 属性主要用于设置某元素相对于同级元素和父</span><br><span class="line">级元素的一个距离值，常用单位像素“px”。该属性对文本类元素</span><br><span class="line">（即“行内元素”）标签是无效的。和 padding 一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.边框：<span class="built_in">border</span> 属性的作用是为设定该属性的元素添加边框 该属性能对任何显</span><br><span class="line">示类型的元素设置，包括“行级元素（inline）”。该属性有三个分支属性：</span><br><span class="line"><span class="number">1</span>）、<span class="built_in">border</span>-<span class="built_in">width</span></span><br><span class="line">设置边框宽度，单位为像素。设定边框的宽度。可以为Web技术中常用</span><br><span class="line">的度量单位，通常为像素“px”。</span><br><span class="line"><span class="number">2</span>）、<span class="built_in">border</span>-<span class="built_in">style</span></span><br><span class="line">设置边框的类型，主要有以下可以设定的值：</span><br><span class="line">none：无边框  solid：实线边框  dotted：点线边框  </span><br><span class="line">dashed：虚线边框</span><br><span class="line">double：双线边框  groove：3D凹槽边框  </span><br><span class="line">ridge：3D凸槽边框 </span><br><span class="line">inset：内浮雕边框  outset：外浮雕边框</span><br><span class="line"><span class="number">3</span>）、<span class="built_in">border</span>-<span class="built_in">color</span></span><br><span class="line">设置边框颜色，支持英文单词、十六进制以及rgb颜色。</span><br><span class="line"><span class="number">4</span>）、<span class="built_in">border</span>  </span><br><span class="line">通过 <span class="built_in">border</span> 属性直接设置四个方向的边框样式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.盒子圆角</span><br><span class="line"><span class="built_in">border</span>-<span class="built_in">radius</span>：设置边框圆角</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.元素阴影</span><br><span class="line"><span class="built_in">box</span>-shadow 属性能够让元素获得一个“阴影”效果，根据颜色的不同，</span><br><span class="line">有时候也可以叫做“发光”效果</span><br></pre></td></tr></table></figure><h3 id="css布局模型"><a href="#css布局模型" class="headerlink" title="css布局模型"></a>css布局模型</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>css的布局模式分类: </span><br><span class="line">流动模型（Flow）浮动模型 (Float) 层模型（Layer）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML </span><br><span class="line">网页元素都是根据流动模型来分布网页内容的。</span><br><span class="line">特征：（<span class="number">1</span>）块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，</span><br><span class="line">因为在默认状态下，块状元素的宽度都为<span class="number">100</span>%。实际上，块状</span><br><span class="line">元素都会以行的形式占据位置。</span><br><span class="line"> （<span class="number">2</span>）第二点，在流动模型下，内联元素都会在所处的包含元素内从左</span><br><span class="line"> 到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）</span><br><span class="line"></span><br><span class="line"><span class="number">3.f</span>loat 浮动模型</span><br><span class="line">块状元素都是独占一行，如果现在我们想让两个块状元素并排显示</span><br><span class="line">任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，</span><br><span class="line">如 div、p、table、img 等元素都可以被定义为浮动。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>层模型：能让层一样可以对每个图层能够精确定位操作</span><br><span class="line">层模型有三种形式：</span><br><span class="line"><span class="number">1</span>、绝对定位(position: absolute) 绝对定位,把图形定义在绝对的位置</span><br><span class="line"><span class="number">2</span>、相对定位(position: relative) 为元素设置层模型中的相对定位，需</span><br><span class="line">要设置position:relative（表示相对定位），它通过left、right、top、</span><br><span class="line">bottom属性确定元素在正常文档流中的偏移位置。</span><br><span class="line"><span class="number">3</span>、固定定位(position: fixed) fixed：表示固定定位，与absolute定位类</span><br><span class="line">型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身</span><br></pre></td></tr></table></figure><h3 id="css可见性"><a href="#css可见性" class="headerlink" title="css可见性"></a>css可见性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1<span class="selector-class">.CSS</span> <span class="selector-tag">Display</span>(显示) 与 <span class="selector-tag">Visibility</span>（可见性）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>:可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样</span><br><span class="line">的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>:可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该</span><br><span class="line">元素不但 被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</span><br></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;title&gt;Title&lt;<span class="regexp">/title&gt; &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    ul&#123;</span></span><br><span class="line"><span class="regexp">        list-style-type: none;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #ul1&#123;</span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">        <span class="number">1.</span>把 边框去掉</span><br><span class="line">        <span class="number">2.</span> 把li标签上面的点号去掉</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        margin: auto;</span></span><br><span class="line"><span class="regexp">        padding: 0;</span></span><br><span class="line"><span class="regexp">        width: 400px;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #ul1&gt;li&#123;</span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">        给li标签整个增加背景颜色</span><br><span class="line">        给li标签增加下面的分析</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        background-color: #8bd400;</span></span><br><span class="line"><span class="regexp">        margin-bottom: 2px;</span></span><br><span class="line"><span class="regexp">        margin-left: 2px;</span></span><br><span class="line"><span class="regexp">        height: 40px;</span></span><br><span class="line"><span class="regexp">        width: 80px;</span></span><br><span class="line"><span class="regexp">        border-radius: 5px;</span></span><br><span class="line"><span class="regexp">        float: left;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    a&#123;</span></span><br><span class="line"><span class="regexp">        /</span>**</span><br><span class="line">        把a标签的下划线去掉</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        display:block;</span></span><br><span class="line"><span class="regexp">        height: 40px;</span></span><br><span class="line"><span class="regexp">        text-decoration: none;</span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">        把文字放在中间</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        text-align: center;</span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">        把文字行间距和整个block一样,那么文字就居中了</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        line-height:40px;</span></span><br><span class="line"><span class="regexp">        /</span>*</span><br><span class="line">        加上椭圆</span><br><span class="line">        *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        border-radius: 5px;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #li1&#123;</span></span><br><span class="line"><span class="regexp">        position: relative;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #li1 ul&#123;</span></span><br><span class="line"><span class="regexp">        margin: 0;</span></span><br><span class="line"><span class="regexp">        padding: 0;</span></span><br><span class="line"><span class="regexp">        position: absolute;</span></span><br><span class="line"><span class="regexp">        display: none;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #li1 ul&gt;li&#123;</span></span><br><span class="line"><span class="regexp">        margin: 0;</span></span><br><span class="line"><span class="regexp">        color: grey;</span></span><br><span class="line"><span class="regexp">        text-align: left;</span></span><br><span class="line"><span class="regexp">        border: 1px solid;</span></span><br><span class="line"><span class="regexp">        background-color: #ffcf41;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span>**</span><br><span class="line">    当数据过去的时候,整体变成深绿色</span><br><span class="line">     *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    a:hover&#123;</span></span><br><span class="line"><span class="regexp">        background-color: green;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line">    /*.c_li1:hover #ul2&#123;*/</span><br><span class="line">        <span class="comment">/*display: block;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">    #ul1 li:hover &gt;a~ul&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #ul2 a:hover&#123;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="comment">--</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">      /*</span><br><span class="line">      //前端语法会尽量隐藏报错</span><br><span class="line">      const i = <span class="number">10</span>;  //常量定义</span><br><span class="line">      var a = <span class="number">10</span>;</span><br><span class="line">      var b = <span class="number">20</span>;</span><br><span class="line">      var c = a + b;</span><br><span class="line">      var d = <span class="string">"helllo world"</span>;</span><br><span class="line">      var e = <span class="string">"1234"</span></span><br><span class="line">      console.<span class="built_in">log</span>(a);</span><br><span class="line">      console.<span class="built_in">log</span>(c); //在浏览器中开发者工具console中打印输出</span><br><span class="line">      console.<span class="built_in">log</span>(d);</span><br><span class="line">      document.<span class="built_in">write</span>(a);//在浏览器页面输出</span><br><span class="line">      document.<span class="built_in">write</span>(d);</span><br><span class="line">      document.<span class="built_in">write</span>(a+d);  //可以直接加减任何类型</span><br><span class="line">      document.<span class="built_in">write</span>(Number(e)+a); //使用Number String等进行类型转换</span><br><span class="line">      alert(<span class="string">"helllo world"</span>) //页面弹窗</span><br><span class="line">      //js中类型</span><br><span class="line">      var b;</span><br><span class="line">      b = <span class="number">10</span>; // <span class="string">'number'</span></span><br><span class="line">      console.<span class="built_in">log</span>(typeof b);</span><br><span class="line">      b = <span class="literal">true</span>; // <span class="string">'boolean'</span></span><br><span class="line">      console.<span class="built_in">log</span>(typeof b);</span><br><span class="line">      a = <span class="string">'Henrry Lee'</span>; // <span class="string">'string'</span></span><br><span class="line">      console.<span class="built_in">log</span>(typeof a);</span><br><span class="line">      a = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;; // <span class="string">'function'</span></span><br><span class="line">      console.<span class="built_in">log</span>(typeof a);</span><br><span class="line">      a = &#123;age:<span class="number">26</span>&#125;; // <span class="string">'object'</span></span><br><span class="line">      console.<span class="built_in">log</span>(typeof a);</span><br><span class="line"></span><br><span class="line">      */</span><br><span class="line">      var aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">23</span>,<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span>(var i <span class="keyword">in</span> aa)&#123;</span><br><span class="line">          document.<span class="built_in">write</span>(<span class="string">"下标："</span> + i + <span class="string">"  ||值："</span> + aa[i] + <span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (var i of aa)&#123;</span><br><span class="line">          document.<span class="built_in">write</span>(i+<span class="string">'  '</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">plus</span><span class="params">(num)</span></span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(num === <span class="number">1</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> num;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> num + plus(num - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      var sum = plus(<span class="number">100</span>);</span><br><span class="line">      document.<span class="built_in">write</span>(<span class="string">'&lt;br&gt;'</span> + sum);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js基础教学<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">first()</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><span class="xml">  <span class="comment">&lt;!--捕捉onclik事件操作并执行</span></span></span><br><span class="line"><span class="xml">所对应函数 可以写在这里也可以重新定义函数引用--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">""</span>&gt;</span>第二次确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">""</span>&gt;</span>第三次确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  function first()</span><span class="xquery">&#123;                //定义函数</span></span><br><span class="line"><span class="xquery">      alert(<span class="string">'确认点击后 弹窗函数被执行'</span>);</span></span><br><span class="line"><span class="xquery">  &#125;</span></span><br><span class="line"><span class="xml">  var b = document.getElementsByTagName('button')[1];  //确认位置</span></span><br><span class="line"><span class="xml">  b.onclick = function()</span><span class="xquery">&#123;   //函数编写并绑定<span class="string">'点击'</span>事件</span></span><br><span class="line"><span class="xquery">      alert(<span class="string">'新方法，直接绑定点击事件并弹窗'</span>);</span></span><br><span class="line"><span class="xquery">  &#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">  var c = document.getElementsByTagName('button')[2];</span></span><br><span class="line"><span class="xml">  c.onmouseover = function()</span><span class="xquery">&#123;    //移到该位置便弹窗事件</span></span><br><span class="line"><span class="xquery">      alert(<span class="string">'鼠标进过便弹窗'</span>)</span></span><br><span class="line"><span class="xquery">  &#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">  /*</span></span><br><span class="line"><span class="xml">  ol = document.getElementsByTagName("ol");</span></span><br><span class="line"><span class="xml">  ol = ol[0];</span></span><br><span class="line"><span class="xml">  ol.children;</span></span><br><span class="line"><span class="xml">  ol.childNodes;</span></span><br><span class="line"><span class="xml">  ol.childNodes[2];</span></span><br><span class="line"><span class="xml">  ol.firstElementChild;</span></span><br><span class="line"><span class="xml">  ol.lastElementChild;</span></span><br><span class="line"><span class="xml">  l1 = ol.parentElement;</span></span><br><span class="line"><span class="xml">   x1 = li1.previousElementSibling; //直接在console中输入即可</span></span><br><span class="line"><span class="xml">   */</span></span><br><span class="line"><span class="xml">  ol = document.getElementsByTagName('ol')[0];  </span></span><br><span class="line"><span class="xml">  //插入子节点步骤 1。获取标签</span></span><br><span class="line"><span class="xml">  var li2 = document.createElement('li'); </span></span><br><span class="line"><span class="xml">  //2。创建子标签</span></span><br><span class="line"><span class="xml">  ol.appendChild(li2); </span></span><br><span class="line"><span class="xml">  //3。添加标签</span></span><br><span class="line"><span class="xml">  li2.innerText = 'Test'; </span></span><br><span class="line"><span class="xml">  //4，标签内容</span></span><br><span class="line"><span class="xml">  var li3 = document.createElement('li');</span></span><br><span class="line"><span class="xml">  ol.appendChild(li3);</span></span><br><span class="line"><span class="xml">  li3.innerText = 'Test2';</span></span><br><span class="line"><span class="xml">  var body1 = document.getElementsByTagName('body');  </span></span><br><span class="line"><span class="xml">  //插入相邻节点步骤 1。获取标签</span></span><br><span class="line"><span class="xml">  body1 = body1[0];  </span></span><br><span class="line"><span class="xml">  //2。精确定位标签</span></span><br><span class="line"><span class="xml">  var div1 = document.createElement('div'); </span></span><br><span class="line"><span class="xml">  //3。创建div标签</span></span><br><span class="line"><span class="xml">  body1.insertBefore(div1,ol);  </span></span><br><span class="line"><span class="xml">  //4.插入该标签</span></span><br><span class="line"><span class="xml">  div1.innerText = 'xxxxx'; </span></span><br><span class="line"><span class="xml">  //5.标签内容</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js练习"><a href="#js练习" class="headerlink" title="js练习"></a>js练习</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- &lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">  td</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    border: <span class="number">1</span>px solid black;</span></span><br><span class="line"><span class="xquery">  &#125;</span></span><br><span class="line"><span class="xml">  *</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    margin: <span class="number">0</span>;</span></span><br><span class="line"><span class="xquery">  &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">id</span> = <span class="string">'t1'</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"add()"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"del()"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>全选 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"check"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>书号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  function add() </span><span class="xquery">&#123;   //添加按钮：添加表格标签并加入内容</span></span><br><span class="line"><span class="xquery">      var table =<span class="built_in"> document</span>.getElementById(<span class="string">'t1'</span>);  </span></span><br><span class="line"><span class="xquery">      //获取table下标签</span></span><br><span class="line"><span class="xquery">      var tr1 =<span class="built_in"> document</span>.createElement(<span class="string">'tr'</span>);  </span></span><br><span class="line"><span class="xquery">      //创建tr标签</span></span><br><span class="line"><span class="xquery">      tr1.innerHTML = <span class="string">"&lt;td&gt;&lt;input type = \"</span>checkbox\<span class="string">" </span></span></span><br><span class="line"><span class="xquery">      <span class="built_in">name</span>=\<span class="string">"check\"</span>&gt;</span></span><br><span class="line"><span class="xquery">      &lt;/td&gt;<span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="string">"; </span></span></span><br><span class="line"><span class="xquery">      //在tr标签中输入html语法</span></span><br><span class="line"><span class="xquery">      table.appendChild(tr1); </span></span><br><span class="line"><span class="xquery">      //tr中添加该语法</span></span><br><span class="line"><span class="xquery">  &#125;</span></span><br><span class="line"><span class="xml">  function del() </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">      var inputs =<span class="built_in"> document</span>.getElementsByTagName(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="xquery">      var del_inputs = [];</span></span><br><span class="line"><span class="xquery">      <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> inputs)&#123;</span></span><br><span class="line"><span class="xquery">          console.log(i.checked);   </span></span><br><span class="line"><span class="xquery">          //是否选中：根据checked的值确定</span></span><br><span class="line"><span class="xquery">          <span class="keyword">if</span>(i.checked) &#123;</span></span><br><span class="line"><span class="xquery">              del_inputs.push(i)     </span></span><br><span class="line"><span class="xquery">              //删除该按钮的值</span></span><br><span class="line"><span class="xquery">          &#125;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      //return del_inputs</span></span><br><span class="line"><span class="xml">      for(let i of del_inputs)</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">          <span class="keyword">let</span> tr2 = i.parentNode.parentNode;</span></span><br><span class="line"><span class="xquery">          <span class="keyword">let</span> table2 = tr2.parentNode;</span></span><br><span class="line"><span class="xquery">         table2.removeChild(tr2);</span></span><br><span class="line"><span class="xquery">      &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库运用01--MySql浅谈运用入门</title>
      <link href="/2019/05/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%94%A801--MySql%E6%B5%85%E8%B0%88%E8%BF%90%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2019/05/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%94%A801--MySql%E6%B5%85%E8%B0%88%E8%BF%90%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容：mysql常用命令、锁、索引、隔离、事物、事件、触发器</p><p>更新：对其中的一些知识进行修改和添加，有任何问题可在下方留言或者右下角直接联系我</p><a id="more"></a><h2 id="sql-基础语法"><a href="#sql-基础语法" class="headerlink" title="sql 基础语法"></a>sql 基础语法</h2><ul><li><p>创建学生数据库: <code>create database Student;</code></p></li><li><p>使用学生数据库: <code>use Student;</code></p></li><li><p>创建成绩表，字段后加not null 则表示不能为空，在查看表结构时为no，default可设置默认值</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table score(id int(20) not null auto_increment,</span><br><span class="line">   name varchar(10) default &#39;aa&#39;,</span><br><span class="line">   score_num int(100)，</span><br><span class="line">   primary key (id)   </span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><code>null</code>:代表未定义的值，不能使用在语句中，但可以通过is null判断某一个字段是否为空</p></blockquote><blockquote><p>主键和外键的设置在创建字段之后设置</p></blockquote><blockquote><p><code>auto_increment</code>:从1递增 一个表只能添加一个递增，且该列必须为整数而且不能包含null</p></blockquote></li></ul><ul><li><p>查看表结构: <code>desc score;</code> </p></li><li><p>删除成绩表: <code>drop table score;</code> </p></li><li><p>插入数据到成绩表中: <code>insert into score(id,name) values(1212,&#39;a&#39;);</code> </p></li><li><p>查看成绩表所有的数据: <code>select * from score;</code> </p></li><li><p>查看成绩表中id为1的所有数据信息: <code>select * from score where id = 1;</code> </p></li><li><p>这些类型使用单引号：</p><blockquote><p>char/varchar/date/datetime/time/timestamp/blob</p></blockquote><blockquote><p>dec/int:不使用引号</p></blockquote><blockquote><p>&#39;: 处理字段中单引号的出现</p></blockquote></li><li><p>查看成绩表中ID为1的名字: <code>select name from score where id = 1;</code></p></li><li><p>查询成绩表中ID为1 姓名为<code>a</code>的名字: </p><blockquote><p><code>select name from score where id=1 and name =</code>a<code>;</code></p></blockquote></li><li><p>运算符：</p><blockquote><p>&lt;&gt; 不等于 = 等于 &lt; &lt;= &gt; &gt;= (也可以对字符进行比较) or and</p></blockquote><blockquote><p>select id from score where name &gt; <code>a</code>; 查询成绩表中名字首字母在<code>a</code>之后的所有数据的id</p></blockquote><blockquote><p>select * from score where name like ‘%ca’; 查询成绩表中所有名字以’ca’结尾的数据</p></blockquote><blockquote><p>%：任意数量的未知字符<br>_: 一个未知字符</p></blockquote></li><li><p>查询成绩表中成绩在60到100之间的所有信息</p><blockquote><p>select * from score where score_num between 60 and 101; </p></blockquote></li><li><p>查询成绩表中名字首字母在’a’到’b’之间的所有信息</p><blockquote><p>select * from score where name between ‘a’ and ‘c’; </p></blockquote></li></ul><ul><li><p>查询成绩表中名字在（’a’,’b’）中的所有信息 反过来：not in</p><blockquote><p>select * from score where name in(‘a’,’b’); </p></blockquote><blockquote><p>not:紧跟在where后 not in是特例， 同时可以与and /or /is null 搭配使用 位置在and/or后紧跟，<br>  is     null 之前</p></blockquote></li><li><p>删除成绩表中名字为’a’的数据 所有用法与select一样</p><blockquote><p>delete from score where name=’a’; </p></blockquote><blockquote><blockquote><p>注意删除时若无约束条件则会删除全部     删除只能删除一行或多行，无法删除某一个字段或值</p></blockquote></blockquote></li><li><p>修改成绩表中ID为1的名字为’b’成绩为50 无则不修改任何字段</p><blockquote><p>update score set name=’b’,score=50 where id=1; </p></blockquote></li><li><p>查看创建表的语句: <code>show create table score;</code></p></li><li><p>为score表创建一个不为空的整型自增的字段并放于表首列，设置其为主键</p><blockquote><p>alter table score add column student_id int not null auto_increment first,<br>  add primary key (student_id); </p></blockquote></li><li><p>数据原子性：同一列中不会存储多个类型相同的数据，也不会用多个列存储相同的数据</p><blockquote><p>第一范式：每一个数据行均需包含原子性数据值，且每一个数据行都存在唯一的识别方法</p></blockquote><blockquote><p>alter table score add column phone varchar(10) after id; 为score表创建<br>  一个电话号码字段并放于id列字段之后</p></blockquote></li><li><p>alter…change:同时改变现有列的名称和数据类型</p><blockquote><p>alter table score change column id stu_id int not null auto_increment,</p></blockquote><blockquote><p>add primary key (stu_id);</p></blockquote><blockquote><blockquote><p>将score表中ID改为stu_id并将其设置成自增和主键,必须重新命名该列数据类型</p></blockquote></blockquote></li><li><p>alter…modify:修改现有列的数据类型或位置</p><blockquote><p>alter table score modify column id varchar(120);</p></blockquote><blockquote><blockquote><p>修改score表的id类型为varchar(120)</p></blockquote></blockquote><blockquote><p>alter…add:在当前表中添加一行</p></blockquote><blockquote><p>alter…drop：删除表中某列</p></blockquote><blockquote><p>注意：可能造成数据丢失</p></blockquote><blockquote><blockquote><p>alter table score rename to score_stu;将表score的名字改为score_stu</p></blockquote></blockquote><blockquote><blockquote><p>alter table score drop primary key; 删除score表的主键</p></blockquote></blockquote></li><li><p>选出name列中从右侧开始选取的2个字符 左侧开始为left</p><blockquote><p>select right(name, 2) from score;</p></blockquote><blockquote><p>select substring_index(name,’,’,1) from score;</p></blockquote><blockquote><blockquote><p>选取name列中以第一个逗号隔开之前的部分，若为2,则为第二个之前的所有部分</p></blockquote></blockquote></li><li><p>其它字符串函数：</p><pre><code>substring(&apos;aaadsasd&apos;,4,3);截取‘aaadsasd&apos;中从位置4开始长度为3upper(&apos;aa&apos;);字符串转为大写  lower(&apos;CC&apos;)；字符串转为小写reverse(&apos;cvs&apos;);反转字符串ltrim(&apos;  aaaasdf  &apos;); rtrim(&apos;  asaadd  &apos;);清除多余空格length(&apos;asadsad&apos;)</code></pre><blockquote><p>运用：update contacts set state = right(location,2);取出contacts 表location字<br>  段中右边两字符并放入到state字段中进行遍历</p></blockquote><blockquote><p>字符串函数可以和select,update,delete搭配使用</p></blockquote></li></ul><h2 id="mysql复杂语句"><a href="#mysql复杂语句" class="headerlink" title="mysql复杂语句"></a>mysql复杂语句</h2><ul><li><p>case…end</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">update movie_table </span><br><span class="line">set category &#x3D; </span><br><span class="line">case </span><br><span class="line">when drama &#x3D; &#39;T&#39; then &#39;drama&#39;  </span><br><span class="line">&#x2F;&#x2F;相当于：update movie_table set category &#x3D; &#39;drama&#39; </span><br><span class="line">where drama &#x3D; &#39;T&#39; </span><br><span class="line">when comedy &#x3D; &#39;T&#39; and sciti &#x3D; &#39;T&#39; then &#39;comedy&#39; </span><br><span class="line">else &#39;misc&#39;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找到符合when语句时则直接执行该语句并跳到end</span><br></pre></td></tr></table></figure></li><li><p>order by  :排序</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select title, category from movie_table </span><br><span class="line">where</span><br><span class="line">category &#x3D; &#39;family&#39;</span><br><span class="line">order by title,purcheased</span><br><span class="line"></span><br><span class="line">desc:倒序</span><br></pre></td></tr></table></figure></li><li><p>sum avg min max count（属于函数） distinct(去重 不一样的值  属于关键字)<br>函数需要加括号 关键字不需要</p></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select distinct sale_date</span><br><span class="line">from cookie_eales</span><br><span class="line">order by sale_date;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>group by :分组(与3搭配使用  属于关键字)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select first_name,sum(sales)</span><br><span class="line">from cookie_eales</span><br><span class="line">group by first_name</span><br><span class="line">order by sum(sales) desc;</span><br></pre></td></tr></table></figure></li><li><p>limit 查询结果的数量</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select first_name,sum(sales)</span><br><span class="line">from cookie_eales</span><br><span class="line">group by first_name</span><br><span class="line">order by sum(sales) desc;</span><br><span class="line">limit 0,2;  &#x2F;&#x2F;从0开始1结束 一共两行数据</span><br></pre></td></tr></table></figure></li><li><p>in,between in表示在其中的数据,between表示在两个数之间的数据</p><blockquote><p>select * from atable where column beteen min and max  //表示在min 和max之间的数据</p><p>elect * from atable where column in(n1,n2,n3) //表示数据是 n1或者n2或者n3</p></blockquote></li></ul><ul><li><p>or,and 表示在数据满足一个或者全部都满足</p></li><li><p>运算符,可以使用运算符表示数据大于 小于等于等情况,</p></li><li><p>like 模糊查询,使用like语句表示查询的时候匹配查询, %表示0，1或者多个字符的占位符, _ 表示一个字符的占位符</p></li><li><p>having表示筛选 和where不同点在于having后面可以跟上聚合函数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT region, SUM(population), SUM(area)</span><br><span class="line">FROM bbc</span><br><span class="line">GROUP BY region</span><br><span class="line">HAVING SUM(area)&gt;1000000</span><br></pre></td></tr></table></figure></li></ul><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li><p>创建带有外键的表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table intereste(</span><br><span class="line">int_id int not null auto_increment primary key,</span><br><span class="line">interest varchar(20) not null,</span><br><span class="line">contact_id int not null,</span><br><span class="line"></span><br><span class="line">constraint my_contacts_contact_id </span><br><span class="line">foreign key (contact_id) references my_contacts (contact_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>内连接(笛卡儿积)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 inner join t2;</span><br><span class="line">select t1.*,t2.* from t1 inner join t2;</span><br><span class="line">加入筛选条件：on</span><br><span class="line">select t1.*,t2.* from t1 join t2 on t1.i1&#x3D;t2.i2;</span><br><span class="line">别名：</span><br><span class="line">select a.i1,b.i2 from t1 as a join t2 as b on a.i1&#x3D;b.i2;</span><br></pre></td></tr></table></figure></li><li><p>外连接</p><blockquote><p>外联结除了显示同样的匹配结果，还可以把其中一个数据表在另一个数据表里没有匹配的数据行也显示出来。外联结分左联结和右联结两种。</p></blockquote><blockquote><p>左连接</p></blockquote><blockquote><blockquote><p>select a.i1,b.i2 from t1 as a left join t2 as b on a.i1=b.i2;</p></blockquote></blockquote><blockquote><p>右连接</p></blockquote><blockquote><blockquote><p>elect a.i1,b.i2 from t1 as a right join t2 as b on a.i1=b.i2;</p></blockquote></blockquote><blockquote><p>用处：</p></blockquote><blockquote><blockquote><p>select a.i1,b.i2 from t1 as a right join t2 as b on a.i1=b.i2 </p></blockquote></blockquote><blockquote><blockquote><p>where a.i1 is null;</p></blockquote></blockquote></li></ul><ul><li><p>some any </p><blockquote><p>some和any会帮助我们筛选出最小的一个数来作为条件</p></blockquote><blockquote><p>select * from salary_table where salary &gt; some (select salary from salary_table<br>  where position = ‘Python’);</p></blockquote></li><li><p>all</p><blockquote><p>all 会筛选出满足所有条件的选项</p></blockquote><blockquote><p>select * from salary_table where salary &gt; all (select salary from salary_table<br>  where position = ‘java’);</p></blockquote></li><li><p>in (=some any)</p><blockquote><p>SELECT * FROM salary_table WHERE salary IN (SELECT salary FROM salary_table<br>  WHERE<br>  position = ‘Python’);</p></blockquote><blockquote><p>SELECT * FROM salary_table WHERE salary =some (SELECT salary FROM salary_table<br>  WHERE<br>  position = ‘Python’);</p></blockquote></li><li><p>exists 会判断数据是否存在 如果不存在则不会筛选数据</p><blockquote><p>select * from salary_table<br>  where exists(SELECT * from salary_table where id = 1)</p></blockquote></li></ul><h2 id="索引与优化"><a href="#索引与优化" class="headerlink" title="索引与优化"></a>索引与优化</h2><ul><li>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构</li></ul><h3 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h3><ul><li><p>优点：</p><blockquote><p>1.所有的MySql列类型(字段类型)都可以被索引，也就是可以给任意字段设置索引</p></blockquote><blockquote><p>2.大大加快数据的查询速度</p></blockquote></li><li><p>缺点：</p><blockquote><p>1.创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加</p></blockquote><blockquote><p>2.索引也需要占空间，我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上线值</p></blockquote><blockquote><p>3.当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度。</p></blockquote></li><li><p>使用</p><blockquote><p>1.对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引</p></blockquote><blockquote><p>2.数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果。</p></blockquote><blockquote><p>3.在一同值少的列上(字段上)不要建立索引，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，在一个字段上不同值较多可是建立索引。</p></blockquote></li></ul><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul><li><p>索引的类型</p><blockquote><p>1.普通索引 index(key)： MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。</p></blockquote><blockquote><p>2.唯一索引 unique： 索引列中的值必须是唯一的，但是允许为空值</p></blockquote><blockquote><p>3.主键索引 primary key： 是一种特殊的唯一索引，不允许有空值</p></blockquote><blockquote><p>4.全文索引 fulltext: 只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有”好人，二货 …”</p></blockquote><blockquote><p>5.空间索引 spatial: 空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有四种，GEOMETRY、POINT、LINESTRING、POLYGON。在创建空间索引时，使用SPATIAL关键字。</p></blockquote></li></ul><h3 id="存储数据结构"><a href="#存储数据结构" class="headerlink" title="存储数据结构"></a>存储数据结构</h3><ul><li><p>HASH 只有Memory存储引擎显示支持hash索引，是Memory表的默认索引类型，尽管Memory表也可以使用B-Tree索引。</p><blockquote><p>(1)由于索引仅包含hash code和记录指针，所以，MySQL不能通过使用索引避免读取记录。但是访问内存中的记录是非常迅速的，不会对性造成太大的影响。 </p></blockquote><blockquote><p>(2)不能使用hash索引排序。 </p></blockquote><blockquote><p>(3)Hash索引不支持键的部分匹配，因为是通过整个索引值来计算hash值的。</p></blockquote><blockquote><p>(4)Hash索引只支持等值比较，例如使用=，IN( )和&lt;=&gt;。对于WHERE price&gt;100并不能加速查询。</p></blockquote></li><li><p>b-tree BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中每次查询都是从树的入口root开始，依次遍历node，获取leaf。这是MySQL里默认和最常用的索引类型。</p></li></ul><h3 id="单列索引和组合索引"><a href="#单列索引和组合索引" class="headerlink" title="单列索引和组合索引"></a>单列索引和组合索引</h3><ul><li><p>单列索引：一个索引只包含单个列，但一个表中可以有多个单列索引。 这里不要搞混淆了。</p><blockquote><p>普通索引: MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快<br>  一点。</p></blockquote><blockquote><p>唯一索引：索引列中的值必须是唯一的，但是允许为空值</p></blockquote><blockquote><p>主键索引：是一种特殊的唯一索引，不允许有空值。</p></blockquote></li><li><p>组合索引(复合索引)</p><blockquote><p>在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索<br>引时遵循最左前缀集合。</p></blockquote><pre><code>1.需要加索引的字段，要在where条件中2.数据量少的字段不需要加索引3.如果where条件中是OR关系，加索引不起作用4.符合最左原则</code></pre><blockquote><p>对于复合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p></blockquote></li></ul><h3 id="索引语句"><a href="#索引语句" class="headerlink" title="索引语句"></a>索引语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1.创建索引</span><br><span class="line">以User表的username字段(类型为VARCHAR(50))为例，使用username字段的6个字符前缀来创建索引。</span><br><span class="line">CREATE INDEX idx_user_username ON user (username(6));</span><br><span class="line"></span><br><span class="line">CREATE INDEX可对表增加普通索引或UNIQUE索引</span><br><span class="line">--例,只能添加这两种索引;</span><br><span class="line">CREATE INDEX index_name ON table_name (column_list)</span><br><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_list)</span><br><span class="line"></span><br><span class="line">2.删除索引</span><br><span class="line"></span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line"></span><br><span class="line">3.修改索引：先删除再创建同名索引</span><br><span class="line"></span><br><span class="line">--先删除</span><br><span class="line">ALTER TABLE user DROP INDEX idx_user_username;</span><br><span class="line">--再以修改后的内容创建同名索引</span><br><span class="line">CREATE INDEX idx_user_username ON user (username(8));</span><br><span class="line"></span><br><span class="line">4.查看索引</span><br><span class="line"></span><br><span class="line">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上FROM db_name</span><br><span class="line">SHOW INDEX FROM table_name [FROM db_name]</span><br><span class="line">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀</span><br><span class="line">SHOW INDEX FROM [db_name.]table_name</span><br><span class="line"></span><br><span class="line">5.查看是否使用了索引进行查询</span><br><span class="line">EXPLAIN SELECT * FROM book WHERE year_publication &#x3D; 1990;</span><br><span class="line"></span><br><span class="line">6.添加索引</span><br><span class="line">ALTER TABLE 表名 ADD 索引类型 （unique,primary key,fulltext,index）[索引名]（字段名）</span><br><span class="line">ALTER TABLE book ADD INDEX BkNameIdx(bookname(30));</span><br></pre></td></tr></table></figure><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。存储引擎的概念是MySQl的特点，而且是一个插入式的存储引擎概念。这就决定了MySQl数据库中的表可以使用不同的存储方式存储。用户可以根据自己的不同要求，选择不同的存储方式、是否进行事务处理等。</p><h3 id="引擎分类"><a href="#引擎分类" class="headerlink" title="引擎分类"></a>引擎分类</h3><ul><li><p>InnoDB存储引擎</p><blockquote><p>InnoDB是Mysql数据库的一种存储引擎。InnoDB给Mysql的表提供了 事务、回滚、崩溃修复能力、多版本并发控制的事务安全、间隙锁（可以有效的防止幻读的出现）、支持辅助索引、聚簇索引、自适应hash索引、支持热备、行级锁。还有InnoDB是Mysql上唯一一个提供了外键约束的引擎。</p></blockquote><blockquote><p>InnoDB存储引擎中，创建的表的表结构是单独存储的并且存储在.frm文件中。数据和索引存储在一起的并且存储在表空间中。但是默认情况下mysql会将数据库的所有InnoDB表存储在一个表空间中的。</p></blockquote><blockquote><p>其实这种方式管理起来非常的不方便而且还不支持高级功能所以建议每个表存储为一个表空间实现方式为：使用服务器变量innodb_file_per_table = 1。如果需要频繁的进行更新、删除操作的数据库也可选择InnoDB存储引擎。因为该存储引擎可以实现事务提交和回滚。</p></blockquote></li><li><p>MyISAM存储引擎</p><blockquote><p>MyISAM存储引擎是Mysql中常见的存储引擎，MyISAM存储引擎是基于ISAM存储引擎发展起来的。MyISAM支持全文索引、压缩存放、空间索引（空间函数）、表级锁、延迟更新索引键。但是MyISAM不支持事务、行级锁、更无法忍受的是崩溃后不能保证完全恢复（只能手动修复）。</p></blockquote><blockquote><p>MyISAM存储引擎的表存储成3个文件。文件的名字和表的名字相同。扩展名包含frm、MYD、MYI。其中frm为扩展名的</p></blockquote><blockquote><p>文件存储表的结构；MYD为扩展名的文件存储数据，其是MYData的缩写；MYI为扩展名的文件存储索引，其为MYIndex<br>  的缩写。</p></blockquote><blockquote><p>MyISAM存储引擎的插入数据很快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择<br>  MyISAM存储引擎能够实现处理的高效率。如果应用的完整性、并发性要求很低，也可以选择MyISAM存储引擎。</p></blockquote></li><li><p>MEMORY存储引擎</p><blockquote><p>MEMORY存储引擎是Mysql中的一类特殊的存储引擎。其使用存储在内存中的内存来创建表，而且所有数据保存在内存<br>  中。数据安全性很低，但是查找和插入速度很快。如果内存出现异常就会影响到数据的完整性，如果重启或关机，表中<br>  的所有数据就会丢失，因此基于MEMORY存储引擎的表的生命周期很短，一般都是一次性的。适用于某些特殊场景像查<br>  找和映射，缓存周期性的聚合数据等等。</p></blockquote></li><li><p>NDB 集群引擎</p><blockquote><p>作为sql和NDB元素协议之间的接口,用于mysql,ndb集群存储引擎,分布式等</p></blockquote></li></ul><h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><p>1.尽可能让所有的数据检索都通过索引来完成</p><p>2.合理设计索引，使索引键上面加锁的时候尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定而影响其他Query的执行；</p><p>3.尽量控制事务的大小，减少锁定的资源量和锁定时间长度</p><p>4.尽可能减少基于范围的数据检索过滤条件，避免因为间隙锁带来的负面影响而锁定了不该锁定的记录</p><p>5.尽可能按照相同的访问顺序来访问，防止产生死锁</p><p>6.尽可能做到一次锁定所需要的所有资源，减少死锁产生概率</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。</p><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><ul><li><p>共享锁：对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。</p><blockquote><p>语法为：<code>select * from table lock in share mode</code></p></blockquote></li><li><p>排他锁：对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。</p><blockquote><p>语法为：<code>select * from table for update</code> –增删改自动加了排他锁</p></blockquote></li><li><p>数据库规定同一资源上不能同时共存共享锁和排他锁</p><blockquote><p>命令窗1:select * from table lock in share mode</p></blockquote><blockquote><p>命令窗2:update table set column1=’hello’</p></blockquote><blockquote><blockquote><p>在1未完成前 2无法运行：T2 之所以要等，是因为 T2 在执行 update 前，试图对 table 表加一个排他锁，而数据库规定同一资源上不能同时共存共享锁和排他锁。所以 T2 必须等 T1 执行完，释放了全部的共享锁，才能加上排他锁，然后才能开始执行 update 语句。</p></blockquote></blockquote></li></ul><h3 id="锁的大小（颗粒度）"><a href="#锁的大小（颗粒度）" class="headerlink" title="锁的大小（颗粒度）"></a>锁的大小（颗粒度）</h3><ul><li><p>表级锁定（table-level）</p><p>  表级别的锁定是MySQL各存储引擎中最大颗粒度的锁定机制。由于表级锁一次会将整个表锁定，所以可以很好的避免困扰我们的死锁问题。使用表级锁定的主要是MyISAM，MEMORY，CSV等一些非事务性存储引擎。</p></li><li><p>行级锁定（row-level）</p><p>  行级锁定最大的特点就是锁定对象的颗粒度很小，也是目前各大数据库管理软件所实现的锁定颗粒度最小的。由于锁定颗粒度很小，所以发生锁定资源争用的概率也最小，能够给予应用程序尽可能大的并发处理能力而提高一些需要高并发应用系统的整体性能。使用行级锁定的主要是InnoDB存储引擎。</p></li></ul><ul><li><p>页级锁定（page-level）</p><p>  页级锁定是MySQL中比较独特的一种锁定级别，在其他数据库管理软件中也并不是太常见。使用页级锁定的主要是BerkeleyDB存储引擎。</p></li></ul><h3 id="myisam的锁"><a href="#myisam的锁" class="headerlink" title="myisam的锁"></a>myisam的锁</h3><p>由于MyISAM存储引擎使用的锁定机制完全是由MySQL提供的表级锁定实现，所以我们以MyISAM存储引擎作为示例存储引擎。</p><ul><li><p>MySQL表级锁的锁模式</p><p>  MySQL的表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。</p></li><li><p>锁模式的兼容性：</p><blockquote><p>1.对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</p></blockquote><blockquote><p>2.对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；</p></blockquote><blockquote><p>3.MyISAM表的读操作与写操作之间，以及写操作之间是串行的。当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作。其他线程的读、写操作都会等待，直到锁被释放为止。</p></blockquote></li><li><p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。</p></li></ul><h3 id="innodb的锁"><a href="#innodb的锁" class="headerlink" title="innodb的锁"></a>innodb的锁</h3><p> 行级锁定不是MySQL自己实现的锁定方式，而是由其他存储引擎自己所实现的，如广为大家所知的InnoDB存储引擎，以及MySQL的分布式存储引擎NDBCluster等都是实现了行级锁定。</p><ul><li><p>InnoDB锁定模式及实现机制</p><p>InnoDB的锁定机制和Oracle数据库有不少相似之处。InnoDB的行级锁定同样分为两种类型，共享锁和排他锁，而在锁定机制的实现过程中为了让行级锁定和表级锁定共存，InnoDB也同样使用了意向锁（表级锁定）的概念，也就有了意向共享锁和意向排他锁这两种。</p><table><thead><tr><th align="center"></th><th align="center">共享锁s</th><th align="center">排他锁x</th><th align="center">意向共享锁is</th><th align="center">意向拍他锁</th></tr></thead><tbody><tr><td align="center">S</td><td align="center">兼容</td><td align="center">冲突</td><td align="center">兼容</td><td align="center">冲突</td></tr><tr><td align="center">x</td><td align="center">冲突</td><td align="center">冲突</td><td align="center">冲突</td><td align="center">冲突</td></tr><tr><td align="center">IS</td><td align="center">兼容</td><td align="center">冲突</td><td align="center">兼容</td><td align="center">兼容</td></tr><tr><td align="center">IX</td><td align="center">冲突</td><td align="center">冲突</td><td align="center">兼容</td><td align="center">兼容</td></tr></tbody></table><p>  如果一个事务请求的锁模式与当前的锁兼容，InnoDB就将请求的锁授予该事务；反之，如果两者不兼容，该事务就要<br>  等待锁释放。</p><p>  意向锁是InnoDB自动加的，不需用户干预。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排<br>  他锁（X)；对于普通SELECT语句，InnoDB不会加任何锁；事务可以通过以下语句显示给记录集加共享锁或排他锁。</p><p>  共享锁（S）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE<br>  排他锁（X)：SELECT * FROM table_name WHERE … FOR UPDATE</p></li></ul><ul><li><p>InnoDB行锁实现方式 InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁</p><blockquote><p>1.在不通过索引条件查询的时候，InnoDB确实使用的是表锁，而不是行锁。</p></blockquote><blockquote><p>2.由于MySQL的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的<br>  索引键，是会出现锁冲突的。</p></blockquote><blockquote><p>3.当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普<br>  通索引，InnoDB都会使用行锁来对数据加锁。</p></blockquote><blockquote><p>4.即便在条件中使用了索引字段，但是否使用索引来检索数据是由MySQL通过判断不同执行计划的代价来决定的，如果<br>  MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行<br>  锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引</p></blockquote></li></ul><h3 id="乐观锁-vs-悲观锁"><a href="#乐观锁-vs-悲观锁" class="headerlink" title="乐观锁 vs 悲观锁"></a>乐观锁 vs 悲观锁</h3><ul><li><p><strong>乐观锁</strong></p><p>  总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新<br>时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。</p><p>  version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到<br>的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p><blockquote><p>update table set x=x+1, version=version+1 where id=#{id} and version=#{version};  </p></blockquote><p>  CAS操作方式：即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。</p></li><li><p><strong>悲观锁</strong></p><p> 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁. 所以说我们上面所说的读锁,写锁都是属于悲观锁</p></li><li><p>优缺点</p><p>  两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p></li></ul><h3 id="gap和record-lock"><a href="#gap和record-lock" class="headerlink" title="gap和record lock"></a>gap和record lock</h3><ul><li><p>Gap lock 间隙锁 </p><p> 在索引记录之间的间隙中加锁，或者是在某一条索引记录之前或者之后加锁，并不包括该索引记录本身</p><blockquote><p>mysql&gt; select * from emp where empid &gt; 100 for update;</p></blockquote><blockquote><blockquote><p>是一个范围条件的检索，InnoDB不仅会对符合条件的empid值为101的记录加锁，也会对empid大于101（这些记录并<br> 不存在）的“间隙”加锁。</p></blockquote></blockquote><p>  InnoDB使用间隙锁的目的： 防止幻读，以满足相关隔离级别的要求。对于上面的例子，要是不使用间隙锁，如果其他<br> 事务插入了empid大于100的任何记录，那么本事务如果再次执行上述语句，就会发生幻读；</p></li><li><p>Record lock </p><p>  单条索引记录上加锁，record lock锁住的永远是索引，而非记录本身，即使该表上没有任何索引，那么innodb会在后台创建一个隐藏的聚集主键索引，那么锁住的就是这个隐藏的聚集主键索引。</p></li><li><p>Next-Key</p><p> 就是Record lock和gap lock的结合，即除了锁住记录本身，还要再锁住索引之间的间隙。</p></li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><p>概述</p><p>  所谓死锁DeadLock: 是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等带的进程称为死锁进程.表级锁不会产生死锁.所以解决死锁主要还是针对于最常用的InnoDB.</p><blockquote><p>死锁的关键在于：两个(或以上)的Session加锁的顺序不一致。那么对应的解决死锁问题的关键就是：让不同的<br>  session加锁有次序    </p></blockquote></li></ul><h3 id="加锁方法"><a href="#加锁方法" class="headerlink" title="加锁方法"></a>加锁方法</h3><pre><code>select .. from  不加任何类型的锁select...from lock in share mode共享锁select...from lock for update排它锁update..where   delete from..where 排他锁</code></pre><h2 id="mysql隔离级别"><a href="#mysql隔离级别" class="headerlink" title="mysql隔离级别"></a>mysql隔离级别</h2><p>隔离级别是mysql进行事务提交的时候,对数据的一种表现形式</p><h3 id="事务的基本要素（ACID）"><a href="#事务的基本要素（ACID）" class="headerlink" title="事务的基本要素（ACID）"></a>事务的基本要素（ACID）</h3><ul><li><p>原子性（Atomicity）：</p><p>  事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p></li><li><p>一致性（Consistency）：</p><p>  事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p></li><li><p>隔离性（Isolation）：</p><p>  同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p></li><li><p>持久性（Durability）：</p><p>  事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p></li></ul><h3 id="事务的操作方式"><a href="#事务的操作方式" class="headerlink" title="事务的操作方式"></a>事务的操作方式</h3><blockquote><p>提交使用commit 回滚使用 rollback</p></blockquote><pre><code>begin&apos;&apos;&apos;&apos;&apos;语句快commit</code></pre><h3 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h3><ul><li><p>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p></li><li><p>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</p></li><li><p>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p></li></ul><pre><code>|事物隔离级别|胀读|不可重复读|幻读||:-:|:-:|:-:|:-:||读未提交（read-uncommitted）|是|是|是|不可重复读（read-committed）    |否|    是|    是|可重复读（repeatable-read）    |否|    否|    是|串行化（serializable）    |否|    否|    否</code></pre><ul><li><p>语句实现</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">说明: 我们使用a,b两个端 a负责开启事务,并且修改数据。b负责开启事务,并且在a执行事务的时候不断去获取数</span><br><span class="line">  据。以此研究数据的影响.a先执行,因为a需要去修改数据,所以a要首先获取到锁才行</span><br><span class="line"></span><br><span class="line">1.脏读:</span><br><span class="line">首先在b中去设置隔离级别</span><br><span class="line">a客户端</span><br><span class="line">start transaction</span><br><span class="line">update &#96;Employee&#96; set Name&#x3D;&#39;test2&#39; where Id&#x3D;1</span><br><span class="line">b客户端</span><br><span class="line">set session transaction isolation level read uncommitted</span><br><span class="line">start transaction</span><br><span class="line">select * from &#96;Employee&#96;</span><br><span class="line">可以看到a中修改的数据,b中已经可以查看到,但是a的数据并没有commit,b读取到了a还没有提交上</span><br><span class="line">去的脏数据,称为脏读</span><br><span class="line"></span><br><span class="line">2.不可复读:</span><br><span class="line">a客户端</span><br><span class="line">start transaction</span><br><span class="line">update &#96;Employee&#96; set Name&#x3D;&#39;test2&#39; where Id&#x3D;1</span><br><span class="line">b客户端</span><br><span class="line">set session transaction isolation level read committed</span><br><span class="line">start transaction</span><br><span class="line">select * from &#96;Employee&#96;</span><br><span class="line">这时候再去查看数据就不会出现脏读的情况,但是在a提交之后,再使用b去查看的话就会有一定的问题</span><br><span class="line"></span><br><span class="line">a客户端</span><br><span class="line">commit</span><br><span class="line">b客户端</span><br><span class="line">select * from &#96;Employee&#96;</span><br><span class="line">这时候b的中表的数据就变了,虽然没有脏读的情况,但是b中的数据两次不一样, 所以称之为不可复读</span><br><span class="line"></span><br><span class="line">3.幻读:</span><br><span class="line">a客户端</span><br><span class="line">start transaction</span><br><span class="line">update &#96;Employee&#96; set Name&#x3D;&#39;test2&#39; where Id&#x3D;1</span><br><span class="line">b客户端</span><br><span class="line">set session transaction isolation level REPEATABLE read</span><br><span class="line">start transaction</span><br><span class="line">select * from &#96;Employee&#96;</span><br><span class="line">这个时候,b中查看的数据没有没有问题,他看到的一直都是老数据。这里使用了mvvc技术</span><br><span class="line"></span><br><span class="line">a客户端</span><br><span class="line">commit</span><br><span class="line">b客户端</span><br><span class="line">select * from &#96;Employee&#96;</span><br><span class="line">但是有一个问题,当a表去Insert一条数据数据并且commit了之后,b去select的时候就会看到a表中新加的数据,就像幻读</span><br><span class="line">一样,多出了一条数据来</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">start transaction</span><br><span class="line">insert into &#96;Employee&#96; (name,id)value(&#39;test&#39;,10</span><br><span class="line">commit</span><br><span class="line">为了避免这个问题,b可以设置</span><br><span class="line">set session transaction isolation level serializable</span><br><span class="line">在a操作事务的时候,b操作事务会一直卡住,直到a表操作完成b才能去select操作，这就是串行化</span><br><span class="line"></span><br><span class="line">4. mysql默认的级别是不可复读</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>不可重复读 和 幻读</p><p>  不可复读是针对同一条数据两次读取会有变化 幻读是说当select到数据id=9的时候,这个时候我们可以去插入id=10的数据,但是其他的事务已经插入了id=10的记录,这个时候就会报错。但是从本事务的观点来看id为10的东西是不存在的。所以就想有幻觉一样,称为幻读。</p><p>  其实对于 幻读, MySQL的InnoDB引擎默认的RR级别已经通过MVCC自动帮我们(部分)解决了。因为当其他事务增加一条数据的时候。我们两次执行查询语句结果都是一样的。这是使用了mvcc模式来实现的,在RR模式下面，事务每次读取的都是一个快照。同一个事务中每次都读取同一份快照。所以就算数据更新了。读的也是老数据</p></li></ul><h2 id="触发器和事件"><a href="#触发器和事件" class="headerlink" title="触发器和事件"></a>触发器和事件</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>1.存储函数（stored function）。返回一个计算结果，该结果可以用在表达式里。</li><li>2.存储过程（stored procedure）。不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递回客户。</li><li>3.触发器（trigger）。与数据表相关联，当那个数据表被INSERT、DELETE或UPDATE语句修改时，触发器将自动执行。</li><li>4.事件（event）。根据时间表在预定时刻自动执行。</li></ul><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul><li><p>存储过程和存储函数的区别</p><blockquote><p>使用存储过程的情况主要有两种：</p><blockquote><p>（1）只需通过运算来实现某种效果或动作而无需返回一个值，</p></blockquote></blockquote><blockquote><blockquote><p>（2）运算会返回多个结果集（函数做不到这一点）。这只是些指导性建议，不是硬性规定。存储函数要用CREATE FUNCTION语句来创建，存储过程要用CREATE PROCEDURE语句来创建，为了与数据表或数据列的名字有所区别，给参数起名字时将使用p_前缀。</p></blockquote></blockquote></li><li><p>分隔符,由于mysql默认分隔符是 ; 如果我们使用了;表示存储过程已经结束,但是mysql默认语句也是;结束,如果我们想要在存储过程中多加几个sql语句怎么办？我们需要先修改分割符,然后写sql语句和存储过程然后恢复到默认的分隔符。</p></li><li><p>delimiter命令把mysql程序的语句分隔符重定义为另一个字符或字符串，它必须是在存储例程的定义里没有出现过的。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">创建存储过程：</span><br><span class="line">delimiter $</span><br><span class="line">create procedure show_born()</span><br><span class="line">begin</span><br><span class="line">select 1;</span><br><span class="line">select 2;</span><br><span class="line">end$</span><br><span class="line">delimiter ;</span><br><span class="line">存储过程调用：</span><br><span class="line">call show_born</span><br><span class="line">存储过程参数传入：</span><br><span class="line">create procedure p1 (p_id INT) begin select p_id; end$</span><br><span class="line"></span><br><span class="line">创建存储函数：</span><br><span class="line">delimiter $</span><br><span class="line">create function show()</span><br><span class="line">begin</span><br><span class="line">select 1;</span><br><span class="line">select 2;</span><br><span class="line">end$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ul><li>触发器是与特定数据表相关联的存储过程，当相应的数据表被INSERT、DELETE或UPDATE语句修改时，触发器将自动执行。<br>触发器可以被设置成在这几种语句处理每个数据行之前或之后触发。触发器的定义包括一条将在触发器被触发时执行的语句。</li></ul><ul><li><p>创建触发器</p><blockquote><p>每次创建新值的时候,新的数据列test2都会变成999:</p></blockquote><blockquote><blockquote><p>create trigger test1_t before insert on test1 for each row begin set NEW.test2=999; end$</p></blockquote></blockquote></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>我们可以把数据库操作安排在预定时间执行。事件是与一个时间表相关联的存储程序，时间表用来定义事件发生的时间、次数以及何时消失。事件非常适合用来执行各种无人值守的系统管理任务，如定期更新汇总报告、清理过期失效的数据、对日志数据表进行轮转等。</p></li><li><p>默认条件下，事件不会执行，需要启动事件调度器：</p><blockquote><p>把以下语句添加到一个选项文件中（服务器在启动时将读取）： [mysqld] event_scheduler=ON</p></blockquote></li><li><p>查看事件调度器状态：show variables like ‘event_scheduler’</p></li><li><p>创建事件：</p><p>  create event e1 on schedule every 5 second do insert into test1 (test1)values(‘8888’);</p><p>  do 定义语句部分</p></li><li><p>事件禁用和激活</p><blockquote><p>事件禁用：</p><blockquote><p>alter event e1 disable;</p></blockquote></blockquote><blockquote><p>事件激活：</p><blockquote><p>alter event e1 enable;</p></blockquote></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库运用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库运用 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程02--JDBC连接池&amp;JDBCTemplate</title>
      <link href="/2019/05/04/Java%E7%BC%96%E7%A8%8B02--JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0&amp;JDBCTemplate/"/>
      <url>/2019/05/04/Java%E7%BC%96%E7%A8%8B02--JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0&amp;JDBCTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念：其实就是一个容器-集合-，存放数据库连接的容器。"><a href="#概念：其实就是一个容器-集合-，存放数据库连接的容器。" class="headerlink" title="概念：其实就是一个容器(集合)，存放数据库连接的容器。"></a>概念：其实就是一个容器(集合)，存放数据库连接的容器。</h3><ul><li>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</li></ul><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><ul><li>节约资源</li><li>用户访问高效</li></ul><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ul><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li><p>方法：</p><ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li></ul><h3 id="C3P0：数据库连接池技术"><a href="#C3P0：数据库连接池技术" class="headerlink" title="C3P0：数据库连接池技术"></a>C3P0：数据库连接池技术</h3><ul><li><p>步骤：</p><ol><li><p>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</p><ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p></li><li><p>获取连接： getConnection</p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line">DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2. 获取连接对象</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h3 id="Druid：数据库连接池实现技术，由阿里巴巴提供的"><a href="#Druid：数据库连接池实现技术，由阿里巴巴提供的" class="headerlink" title="Druid：数据库连接池实现技术，由阿里巴巴提供的"></a>Druid：数据库连接池实现技术，由阿里巴巴提供的</h3><ul><li>步骤：<ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.加载配置文件</span></span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is =DruidDemo.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//4.获取连接池对象</span></span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//5.获取连接</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><ul><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="comment">//2.静态</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1。加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().</span></span><br><span class="line">            getResourceAsStream("druid.properties"));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmp, Connection conn)</span></span>&#123;</span><br><span class="line">        close(<span class="keyword">null</span>,stmp, conn);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,</span></span></span><br><span class="line"><span class="function"><span class="params">    Statement stmp, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmp.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</li></ul><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li><code>JdbcTemplate template = new JdbcTemplate(ds);</code></li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ol><li><code>update()</code>:执行DML语句。增、删、改语句</li><li><code>queryForMap()</code>:查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li><code>queryForList()</code>:查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li><code>query()</code>:查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li><code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code></li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ol></li></ul><h3 id="运用："><a href="#运用：" class="headerlink" title="运用："></a>运用：</h3><ul><li>需求：<ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.datasource.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.datasource.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> </span><br><span class="line">    JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">//Junit单元测试,让方法独立执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 balance 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义sql</span></span><br><span class="line">        String sql = <span class="string">"update account set </span></span><br><span class="line"><span class="string">        balance = 10000 where id = ?"</span>;</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = template.update(sql,<span class="number">1</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2。添加一个记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into account</span></span><br><span class="line"><span class="string">        (name, balance) values(?,?)"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = template.update(sql, <span class="string">"qq"</span>, <span class="number">2312</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除添加的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from account where name = ?"</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = template.update(sql, <span class="string">"qq"</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1的记录，将其封装成Map集合</span></span><br><span class="line"><span class="comment">     * 注意：该方法的查询结果集只能是一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account where id = ?"</span>;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; map = </span><br><span class="line">        template.queryForMap(sql, <span class="number">1</span>);</span><br><span class="line">        System.out.println(map);  </span><br><span class="line">        <span class="comment">//&#123;id=1, name=张三, balance=10000&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5。查询所有的数据，先封装为map集合，再将map集合放在list集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Map&lt;String, Object&gt;&gt; list = </span><br><span class="line">        template.queryForList(sql);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, </span><br><span class="line">        <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                <span class="keyword">final</span> String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">double</span> balance = rs.getDouble(<span class="string">"balance"</span>);</span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setName(name);</span><br><span class="line">                emp.setBalance(balance);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Emp&gt; query = template.query(sql, </span><br><span class="line">        <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : query) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7.查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select count(id) from account"</span>;</span><br><span class="line">        <span class="keyword">final</span> Long total = template.queryForObject(</span><br><span class="line">        sql, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emp&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", balance="</span> + balance +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(Double balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python框架03 -- Django综述</title>
      <link href="/2019/05/03/python%E6%A1%86%E6%9E%B603%20--%20Django%E7%BB%BC%E8%BF%B0/"/>
      <url>/2019/05/03/python%E6%A1%86%E6%9E%B603%20--%20Django%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容： Django运用、序列化、前后端分离、数据库连接、token头、数据交互</p><p>更新： 不定期更新，遇到相关问题则会添加到其中，若有问题请留言或者右下角直接联系</p><a id="more"></a><h2 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>安装python虚拟环境</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenvwrapper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenvwrapper-win (windows系列)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> WORKON_HOME=~/Envs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p <span class="variable">$WORKON_HOME</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span></span><br></pre></td></tr></table></figure><blockquote><p>虚拟环境位置文档位置</p></blockquote><blockquote><p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://virtualenvwrapper.readthedocs.io/en/latest/</a></p></blockquote><ul><li>注意点 virtualenv是初级的工具 只能用在你当前文件夹的目录下面去新建</li><li>wrapper所带的 mkvirtualenv 和 workon命令可以让你在任何地方管理虚拟环境 不用考虑文件夹位置</li></ul></li><li><p>新建一个虚拟环境 激活虚拟环境 并且安装django 查看安装的django版本</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">virtualenv</span> <span class="string">ruimi_django -p python3.6</span></span><br><span class="line"><span class="attr">source</span> <span class="string">ruimi_django/bin/activate</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install django==1.11</span></span><br><span class="line"><span class="attr">python</span> <span class="string">-m django --version</span></span><br></pre></td></tr></table></figure></li><li><p>pycharm安装django环境</p><ol><li><p>在pycharm中选择newproject django</p></li><li><p>选择虚拟环境(你在本地建好的虚拟环境)</p></li><li><p>点击create,新建成功<br><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter1_1.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter1_2.png" alt=""></p></li></ol></li><li><p>命令行安装django</p><ol><li><p>使用命令行创建django 效果等同于pycharm 其实pycharm的原理就是去帮你执行这些命令而已</p></li><li><p>我们需要先切换到有django的虚拟环境才行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> django-admin startproject <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="通过django创建第一个app"><a href="#通过django创建第一个app" class="headerlink" title="通过django创建第一个app"></a>通过django创建第一个app</h3><ul><li><p>通过django 创建第一个app</p>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">django-admin startapp movies</span></span><br></pre></td></tr></table></figure><blockquote><p>有两个djano_mvc_ppt 第一个是总目录 第二个djano_mvc_ppt是项目的配置目录 settings urls 路由就在里面。他是定义整个项目的配置路由等。</p></blockquote><blockquote><p>我们刚才新建的是app目录是单独的功能目录,比如用户信息就可以新建一个目录来表示。在app目录里面我们去定义视图,模型等等。这个在后面章节会讲到。</p></blockquote></li><li><p>启动django</p><ol><li><p>命令行来启动django </p><ol><li><p>python必须是我们的django环境里面的python程序</p></li><li><p>manage.py是我们django项目目录下面的manage.py</p></li><li><p>runserver是启动django 后台服务的命令 后面跟上ip和端口即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8000</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>pycharm 启动django项目<br> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter1_3.png" alt=""></p><ol><li><p>debug模式, 使用debug模式启动django,我们可以打断点,程序过来以后,就能截取到值</p></li><li><p>run 模式,那么程序只会执行,不会有断点查看功能</p></li><li><p>最后 我们可以在下方 看到运行的状态<br><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter1_4.png" alt=""></p><ol start="4"><li>启动完成后我们就可以查看启动是否成功了        <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter1_5.png" alt=""></li></ol></li></ol></li></ol></li></ul><h3 id="为什么使用1-11版本"><a href="#为什么使用1-11版本" class="headerlink" title="为什么使用1.11版本"></a>为什么使用1.11版本</h3><ol><li><p>2.0版本的lts(long time serve)目前还没有出来,到2019年我们就可以顺利使用django 2.0啦</p><p> <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter1_6.png" alt=""></p></li></ol><h2 id="apps详解"><a href="#apps详解" class="headerlink" title="apps详解"></a>apps详解</h2><h3 id="apps和整体配置文件内部结构"><a href="#apps和整体配置文件内部结构" class="headerlink" title="apps和整体配置文件内部结构"></a>apps和整体配置文件内部结构</h3><ul><li><p>最外部的manage.py</p><p>  一个命令行工具,实现django各种功能的文件,比如数据库迁移,静态文件收集,启动django服务等等</p></li><li><p>首先我们来查看一下 djano_mvc_ppt的结构</p><ol><li><code>\__init__.py</code> 它告诉Python这个目录应该被看做一个Python包</li><li><code>settings.py</code> 项目的整体配置文件,包含项目启动哪些app,中间件设置,第三方包配置等等都在里面</li><li><code>urls.py</code> 总路由配置文件</li><li><code>wsgi.py</code> 网关协议入口程序</li></ol></li></ul><ul><li><p>apps的结构</p><blockquote><p>migrations 文件夹,数据库迁移记录文件</p></blockquote><blockquote><p>init.py apps 初始化文件 一般为空即</p></blockquote><blockquote><p>admin.py 自定义admin后台管理的地方</p></blockquote><blockquote><p>apps.py app的在项目注册的名称,默认就行了</p></blockquote><blockquote><p>models.py 定义数据模型</p></blockquote><blockquote><p>tests.py 单元测试地址</p></blockquote><blockquote><p>views.py 视图</p></blockquote></li></ul><h3 id="第一个简单页面"><a href="#第一个简单页面" class="headerlink" title="第一个简单页面"></a>第一个简单页面</h3><ul><li><p>movies/views.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world!"</span>)</span><br></pre></td></tr></table></figure></li><li><p>djano_mvc_ppt/urls.py    </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> movies.views <span class="keyword">import</span> test1</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    </span><br><span class="line">    url(<span class="string">r'^test1$'</span>,test1)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="http://127.0.0.1:8000/test1" target="_blank" rel="noopener">http://127.0.0.1:8000/test1</a><br>  <img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/md_pics/chapter2_1.png" alt=""></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3></li></ul><ol><li>views 是我们视图函数 他们负责给用户返回什么样的信息</li><li>url 是路由,试想一个网站有不同的页面,怎么样来走到不同的页面,就是通过这的路由分发来做的。我们把test1的网站转发到我们的views.py里面的test1函数</li><li>终上所述,我们在访问页面的时候,就得到了第一个页面</li></ol><h3 id="第二个页面"><a href="#第二个页面" class="headerlink" title="第二个页面"></a>第二个页面</h3><ol><li><p>我们知道,百度等网页是复杂的html构成的,所以我们需要前端人员的html网页支持,django可以渲染出前端的html网页,使用render</p><blockquote><p>movies/views.py</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> render(request,<span class="string">'movies/index.html'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>djano_mvc_ppt/urls.py    </p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> movies.views <span class="keyword">import</span> test2</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    </span><br><span class="line">    url(<span class="string">r'^test2$'</span>,test2)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>templates/movies/index.html</p></blockquote> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello html&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><blockquote><p>django可以通过一定的方式,把html网页送给浏览器,这时候就不需要我们去直接回复一个字符串</p></blockquote><h3 id="第三个页面"><a href="#第三个页面" class="headerlink" title="第三个页面"></a>第三个页面</h3><ul><li><p>movies/models.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">11</span>)</span><br></pre></td></tr></table></figure></li><li><p>djano_mvc_ppt/settings.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'movies'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><blockquote><p>movies/views.py</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> movies.models <span class="keyword">import</span> Test</span><br><span class="line">    user = Test.objects.all()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'movies/index2.html'</span>,context=&#123;<span class="string">'name'</span>:user.name&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>templates/movies/index2.html</p></blockquote><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;hello {{ name }}&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h3><ol><li><p>model可以直接操控数据库,我们不用去写sql语句了,使用对象实例化就可以获取到语句</p></li><li><p>views可以把数据库传递给html,我们称为模板渲染,因为不是html语法,他需要python去加工一下(渲染)</p></li></ol><h2 id="mtv模式"><a href="#mtv模式" class="headerlink" title="mtv模式"></a>mtv模式</h2><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h3><p>我们上述的模式就是mtv模式</p><ol><li>views专门负责取出数据来,怎么取,取多少数据都在views里面</li><li>model专门负责数据库控制,数据库字段怎么定义,这些字段代表什么就是model.py做的事情</li><li>html文件负责页面的展现,css js等都写在里面,他就专门负责页面怎么美观就行了</li></ol><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>以上就是我们框架的基本模式,主要的思想就是各司其职,分层</p><h2 id="函数视图"><a href="#函数视图" class="headerlink" title="函数视图"></a>函数视图</h2><h3 id="基础视图分析"><a href="#基础视图分析" class="headerlink" title="基础视图分析"></a>基础视图分析</h3><ul><li><p>request 里面有所有的信息,他的信息是我们的wsgi解析之后的报文,回想一下http协议,他所有的信息都在报文里面,是一个很长的字符串,但是我们看到的request里面是dict和object,说明django框架已经帮我们解析好了报文里面的信息</p></li><li><p>HttpResponse是django帮我们封装响应报文,返回我们想给浏览器返回的信息,当然也有其他的返回值,他们都是django帮我们封装好的</p><pre><code>Http404HttpResponseForbidden...</code></pre><blockquote><p>movies/views.py</p></blockquote><pre><code>def test1(request):    return HttpResponse(&quot;Hello, world!&quot;)</code></pre></li></ul><h3 id="快捷函数"><a href="#快捷函数" class="headerlink" title="快捷函数"></a>快捷函数</h3><ul><li><p>我们来写一个能够渲染模板的函数,那么他需要使用HttpResponse来给用户返回信息</p><blockquote><p>movies/views.py</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test5</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line">  t = loader.get_template(<span class="string">'movies/index.html'</span>)</span><br><span class="line">  <span class="keyword">return</span> HttpResponse(t.render(&#123;&#125;,request))</span><br></pre></td></tr></table></figure></li><li><p>如果我们觉得这样写很麻烦,那么我们可以使用快捷函数 render来帮我们做这个事情,凡是在 from django.shortcuts 中定义的函数,都是帮我们快捷的完成一些功能的函数</p><blockquote><p>movies/views.py</p></blockquote>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(request)</span></span><span class="symbol">:</span></span><br><span class="line"> <span class="keyword">return</span> render(request,<span class="string">'movies/index.html'</span>)</span><br></pre></td></tr></table></figure></li><li><p>查看一下render的源码,我们发现 其实就是我们刚才的原始函数,不过他帮我们做了一层封装</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(request, template_name, context=None, </span></span></span><br><span class="line"><span class="function"><span class="params">content_type=None, status=None, using=None)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Returns a HttpResponse whose content is filled with the </span></span><br><span class="line"><span class="string">result of calling</span></span><br><span class="line"><span class="string">django.template.loader.render_to_string() with the passed </span></span><br><span class="line"><span class="string">arguments.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">content = loader.render_to_string(template_name, context, </span><br><span class="line">request, using=using)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(content, content_type, status)</span><br></pre></td></tr></table></figure></li><li><p>其他快捷函数</p><ol><li><p>redirec 重定向,在访问一个网页的时候,帮助我们重定向</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test6</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> redirect(<span class="string">'https://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure></li><li><p>get_object_or_404 帮助我们查找数据,如果没有数据则返回404的错误</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test7</span><span class="params">(request)</span>:</span></span><br><span class="line">obj = get_object_or_404(Test,pk=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(obj.name)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><ul><li>使用装饰器去控制函数视图的行为 </li></ul><pre><code>    from django.views.decorators.http import                        require_http_methods    @require_http_methods([&apos;GET&apos;])    def test8(request):        return HttpResponse(&apos;hello&apos;)1. require_http_methods 控制行为,list传递2. require_GET get行为3. require_POST() post行为</code></pre><h3 id="类视图"><a href="#类视图" class="headerlink" title="类视图"></a>类视图</h3><pre><code>&gt;lietview&gt;&gt;deleteview</code></pre><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="CSRF概念"><a href="#CSRF概念" class="headerlink" title="CSRF概念"></a>CSRF概念</h3><ol><li>全称: CSRF跨站点请求伪造(Cross—Site Request Forgery)</li><li>解释: 攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</li></ol><h3 id="CSRF攻击攻击原理及过程"><a href="#CSRF攻击攻击原理及过程" class="headerlink" title="CSRF攻击攻击原理及过程"></a>CSRF攻击攻击原理及过程</h3><ol><li><p>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</p></li><li><p>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</p></li><li><p>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</p></li><li><p>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</p></li></ol><ol start="5"><li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 </li></ol><h3 id="CSRF攻击实例"><a href="#CSRF攻击实例" class="headerlink" title="CSRF攻击实例"></a>CSRF攻击实例</h3><ul><li><p>攻击</p><p>  受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p><p>  黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自</a> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p><p>  这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p></li></ul><h3 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h3><ul><li><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p></li><li><p>（1）验证 HTTP Referer 字段</p><p> 根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆</a> bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p> 这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p><p> 然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p><p> 即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p></li><li><p>（2）在请求地址中添加 token 并验证</p><p>  CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><p>  这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 <input type=”hidden” name=”csrftoken” value=”tokenvalue”/>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p><p>  该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p></li><li><p>（3）在 HTTP 头中自定义属性并验证</p><p>  这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>  然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p></li></ul><h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>django的form有两个功能,第一个是帮助我们生成表单,在html里面,第二个功能是帮我们验证表单</p><h3 id="生成表单"><a href="#生成表单" class="headerlink" title="生成表单"></a>生成表单</h3><ul><li><p>首先我们会在一个外部的forms.py文件里面建立我们的表单类,在这个类的定义的字段会直接显示在html里面,我们不用在html里面去写input标签</p><blockquote><p>test1/forms.py</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    zhanghu = forms.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    mima = forms.CharField(max_length=<span class="number">20</span>)</span><br></pre></td></tr></table></figure></li><li><p>在views里面去实例化表单类,注意,我们是去实例化forms.py里面的LoginForm 然后把实例化的对象login_form 传递给模板 login_test.html 传递的值是 form</p><blockquote><p>test1/views.py</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test5</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">from</span> movies.forms <span class="keyword">import</span> LoginForm</span><br><span class="line">    method = request.method</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">"GET"</span>:</span><br><span class="line">        login_form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'test1/login_test.html'</span>,&#123;<span class="string">'form'</span>:login_form&#125;)</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">"POST"</span>:</span><br><span class="line">        account = request.POST[<span class="string">'account'</span>]</span><br><span class="line">        password = request.POST[<span class="string">'password'</span>]</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'POST'</span>)</span><br></pre></td></tr></table></figure></li><li><p>在html里面去调用form,以为接受值,因为我们在views.py里面定义就是form,当然我们也可以定义其他的值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request,<span class="string">'test1/login_test.html'</span></span><br><span class="line">,&#123;<span class="string">'form'</span>:login_form&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>templates/movies/login_test.html</p></blockquote>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hi Login!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"http://127.0.0.1:18001/login/"</span> </span><br><span class="line">method=<span class="string">"post"</span>&gt;&#123;&#123; form &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="项目整体"><a href="#项目整体" class="headerlink" title="项目整体"></a>项目整体</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li><p>安装：</p><blockquote><p>pip3 install django -i <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="noopener">https://pypi.doubanio.com/simple/</a></p></blockquote></li><li><p>查看：</p><blockquote><p>django-admin</p></blockquote></li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li><p>pycharm中可直接创建; 或者命令行：django-admin startproject priject_name</p></li><li><p>运行Django：python3 manage.py runserver   浏览器打开有小火箭即成功</p></li><li><p>创建app：python3 manage.py  startapp app_name</p></li><li><p>pycharm: debug运行  ：edit可设置ip和端口</p></li></ul><h3 id="Django配置"><a href="#Django配置" class="headerlink" title="Django配置"></a>Django配置</h3><ul><li>配置目录</li></ul><blockquote><p>与Django一样名字的目录为配置目录</p></blockquote><blockquote><p>urls：各种链接，功能的实现，路由URL    </p><blockquote><p>1.path(‘地址栏取名’,相关函数)</p><p>例如：path(‘hello/‘, views.hello_world) </p></blockquote></blockquote><blockquote><blockquote><p>2.需要使用import调用函数所在文件 调用的为views中的函数</p><p>例如：from app1 import views</p></blockquote><p>settings：</p><blockquote><p>1.allowed_hosts（允许访问的IP）bug:同一局域网里IP可随意访问</p><p>2.templates:模版  ‘dirs’：确认html放置的文件夹</p></blockquote></blockquote><blockquote><blockquote><p>例如：’DIRS’: [os.path.join(BASE_DIR, ‘templates’)]<br>            base_dir:该项目的路径</p></blockquote></blockquote><ul><li>app操作</li></ul><blockquote><p>自己建立的app包中：</p></blockquote><blockquote><blockquote><p>views：创建函数   </p></blockquote></blockquote><blockquote><blockquote><blockquote><p>1.httpresponse函数：创建报文内容 用于return HttpResponse(‘html语句’)  需要使用import导入该函数</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>2.requests参数：创建函数时必须加上该参数，用于接收数据等便于使用 </p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>3.render(re参数,html位置—&gt;直接html名,参数dict) ：将其发送给浏览器</p></blockquote></blockquote></blockquote><h3 id="文件发送"><a href="#文件发送" class="headerlink" title="文件发送"></a>文件发送</h3><ul><li><p>html：</p><ul><li>创建放置html文件夹</li><li>确认文件夹位置：settings 2  templates中</li><li>书写html</li><li>编写调用函数 views 3</li><li>urls增加该网页 urls 1，2</li></ul></li><li><p><code>css/js/images</code>(静态文件访问):</p><ul><li><p>在编写的html中增加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;中加：</span><br><span class="line">激活：</span><br><span class="line">             &#123;% load static %&#125;</span><br><span class="line">             自动生成静态文件链接：</span><br><span class="line">      &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">'&#123;% static "css.css" %&#125;'</span></span><br><span class="line">      &gt;html中的&#123;&#123;&#125;&#125;&lt;li&gt;&#123;&#123; age &#125;&#125;&lt;/li&gt;</span><br><span class="line">编写views中的函数内容时可以将&#123;&#123;&#125;&#125;中的参数以dict的形</span><br><span class="line">式发送过来并替换其中的字段</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* 创建css js文件夹</span><br><span class="line">* settings添加：</span><br><span class="line">&gt;<span class="number">1.</span>设置访问url的路径（网址名）：STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">&gt;<span class="number">2.</span>确认位置：STATICFILES_DIRS = [os.path.join(BASE_DIR, “html存放路径”),] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 配置urls:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings  调用上面的设置</span><br><span class="line"> <span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static   调用该函数</span><br><span class="line"> urlpatterns = [</span><br><span class="line">]+static(settings.STATIC_URL)</span><br></pre></td></tr></table></figure></li><li><p>书写css js images</p></li><li><p>浏览器访问：/static/css.css</p></li><li><p>浏览器访问对应html便可以</p></li></ul></li></ul><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><ul><li><p>与settings在相同文件夹下创建：my.cnf普通文件</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my.cnf</span></span><br><span class="line">[client]</span><br><span class="line">database = NAME</span><br><span class="line">user = USER</span><br><span class="line">password = PASSWORD</span><br><span class="line">default-character-set = utf8mb4</span><br></pre></td></tr></table></figure></li><li><p>settings设置：databases 中将本身数据库配置替换成mysql的配置代码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">  <span class="string">'default'</span>: &#123;</span><br><span class="line">      <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">      <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">          <span class="string">'read_default_file'</span>: os.path.join(base_dir,‘django_s’,’my.cnf’),</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装pymysql : </p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pymsql </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> pycharm<span class="regexp">/preferences/</span>project.django_s<span class="regexp">/</span></span><br></pre></td></tr></table></figure></li><li><p>Django使用mysql：settings同级的<strong>init</strong>中增加代码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).__init__中代码：</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.version_info(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>)        </span><br><span class="line">&lt;—版本报错问题解决 无可不修改</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>).在external library//site-packages/django/db/backends/</span><br><span class="line">mysql/operations</span><br><span class="line"></span><br><span class="line">中将与下面<span class="number">5</span> <span class="number">1</span>对应修改<span class="number">146</span>行  </span><br><span class="line">可以先运行会自定跳到该错误这里修改即可</span><br><span class="line"></span><br><span class="line">last_executed_query中query.decode改成encode</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li><p>命令行：在manage.py同级目录下执行</p><blockquote><p>python3 manage.py migrate   —&gt;在mysql中直接创建django内置的表 </p></blockquote><blockquote><p>(1).出现’decode’:在 external library/python 3.7/site-packages/django/db/        backends/mysql/operationslast_executed_query中query.decode改成encode          (直接vim修改)</p></blockquote></li><li><p>orm:通过对象操作数据库</p><ul><li><p>在views同级的models.py中编写定义自己的数据库表：即class创建</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如：创建一个文章发布的数据库</span><br><span class="line">score = models.FloatField(default = <span class="number">0</span>,verbose_name=‘电影评分’)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">title = models.CharField(max_length=<span class="number">255</span>)  <span class="comment">#文章标题</span></span><br><span class="line">punish_time = models.DateTimeField()  <span class="comment">#文章发布时间</span></span><br><span class="line">author = models.CharField(max_length=<span class="number">20</span>) <span class="comment">#文章作者</span></span><br><span class="line">text = models.CharField(max_length=<span class="number">2000</span>)  <span class="comment">#文章内容</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.title       </span><br><span class="line">(admin中直接以title字段显示)</span><br></pre></td></tr></table></figure></li><li><p>在settings：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">installed_apps=[‘添加自己创建的app,即views所在文件夹名’</span><br><span class="line">例：’app1’]</span><br></pre></td></tr></table></figure></li><li><p>生成数据库表：命令行执行：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>python3 manage.py makemigrations   </span><br><span class="line"> (会在migrations文件夹下生成一个数据库迁移文件) </span><br><span class="line"><span class="number">2.</span>python3 manage.py migrate     </span><br><span class="line">（根据（<span class="number">3</span>）生成的建表文件在数据库中建表）</span><br></pre></td></tr></table></figure><blockquote><p>注意：1执行成功的迁移文件会在数据库中django_migrations表中也创建一个该记录必须同时存在才行 不然会一直报错：table</p></blockquote><blockquote><p>解决：（1）删除migrations中的相关文件 再删除数据库表中的对应的记录 重新执行上述两个命令</p></blockquote></li><li><p>数据库表数据读取并在html中显示出来：</p><blockquote><p>1.创建html相关网页</p></blockquote><blockquote><p>2.views：创建函数提取：引入models中的相关class  即2(1)中创建的相关表的类名from app1.models import Article</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">编写发送函数：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span><span class="params">(requests)</span>:</span></span><br><span class="line"><span class="comment">#相当于select * from article where id = 1 </span></span><br><span class="line">语句（并未执行）：</span><br><span class="line">data = Article.objects.filter(id=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#切片执行该语句：</span></span><br><span class="line">res = data[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> render(requests,’article.html’,</span><br><span class="line">&#123;html中&#123;&#123;&#125;&#125;&#125;的对应值dict&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置urls ：与上面urls配置一样 先导入再添加</p></li></ul><h3 id="admin用户创建"><a href="#admin用户创建" class="headerlink" title="admin用户创建"></a>admin用户创建</h3><ul><li><p>命令行：</p><blockquote><p>python3 manage.py createsuperuser  (本次设置user:wangqi password:wang1995)</p></blockquote></li></ul><ul><li><p>添加数据库到admin</p><ul><li><p>admin文件中添加代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 导入models中创建的数据库类名：</span><br><span class="line"> <span class="keyword">from</span> app1.models <span class="keyword">import</span> Article</span><br><span class="line">添加到admin中：</span><br><span class="line"><span class="meta">@admin.register(Article)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>浏览器中进入admin即有自己创建的数据库，可以进行相关插入等操作</p></li></ul></li></ul><h2 id="外部app-或者html"><a href="#外部app-或者html" class="headerlink" title="外部app(或者html)"></a>外部app(或者html)</h2><h3 id="在django文件夹下："><a href="#在django文件夹下：" class="headerlink" title="在django文件夹下："></a>在django文件夹下：</h3><blockquote><p>python3 manage.py startapp ‘名字’  创建新的app</p><p>先运行 python3 manage.py rumserver  确定Django开启成功</p></blockquote><h3 id="将其外部的网页代码放入django-项目下"><a href="#将其外部的网页代码放入django-项目下" class="headerlink" title="将其外部的网页代码放入django 项目下"></a>将其外部的网页代码放入django 项目下</h3><ul><li><p>配置路径 </p><blockquote><p>settings installed_apps添加该app名 templates:添加html存放路径<br>  在最后添加存放静态文件（html中的css/js）的代码以及媒体文件的media路径（见下）</p></blockquote></li></ul><ul><li><p>配置urls  先连接index.html看是否成功</p></li><li><p>设置css/js/images</p><blockquote><p>1) python中 提供 <code>win+r</code> 可以查询+替换修改代码中的相关代码  </p><p>2) 在使用正则表达式时需要勾选Regex  </p><p>3) 查询：<code>(css/.*\.css)</code>  加括号表示一个整体<code>\</code> 转译     </p><p>4) 替换：</p></blockquote></li><li><p>建立数据库:</p><blockquote><p>1)modele:建表 + 命令行操作数据库链接</p></blockquote><blockquote><p>2)admin建立后台</p></blockquote><blockquote><p>3)settings设置路径 databases添加数据库my.cnf文件位置</p></blockquote><blockquote><p>4)views添加查询和插入函数将切片转到html代码中去：</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">html中循环：`&#123;% <span class="keyword">for</span> %&#125;循环代码&#123;% endear %&#125;`</span><br><span class="line">例如</span><br><span class="line">views:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_movie</span><span class="params">(requests)</span>:</span></span><br><span class="line">data = Movie.objects.all()</span><br><span class="line"><span class="keyword">return</span> render(requests, <span class="string">'index.html'</span></span><br><span class="line">&#123;‘data’:data&#125;</span><br><span class="line">html：</span><br><span class="line">&#123;% <span class="keyword">for</span> movie <span class="keyword">in</span> data %&#125;</span><br><span class="line">&lt;li&gt;&lt;p class='title'&gt;&#123;&#123; movie.title &#125;&#125;&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">模版中切片：</span><br><span class="line">&#123;% <span class="keyword">for</span> movie <span class="keyword">in</span> data |slice:<span class="string">"0:5"</span>%&#125;取前<span class="number">5</span>个</span><br><span class="line"></span><br><span class="line">url建立连接</span><br></pre></td></tr></table></figure></li></ul><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><ul><li><p>models:添加字段：</p><blockquote><p>img = models.ImageField(upload_to=’images’,verbose_name=’电影图片’)再执行数据库操作2（3）</p></blockquote><blockquote><p>注意 ：进行3第一步时会跳出选择：</p><p>1.后续更改 先创建 2.退出,先添加 选择1 然后随便添加内容回车html中修改图片的链接</p></blockquote></li></ul><h3 id="html中使用自定义函数"><a href="#html中使用自定义函数" class="headerlink" title="html中使用自定义函数"></a>html中使用自定义函数</h3><ul><li><p>函数模版：</p><blockquote><p>在app中建立一个目录：名字固定：templatetags  其中包含<strong>init</strong>文件</p><pre><code>创建一个功能名.py文件</code></pre></blockquote><blockquote><p>在该.py中自定义函数编写：</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">模版：</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter(name = ‘count_star’)  </span></span><br><span class="line"><span class="comment">#计算星星数量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_star</span><span class="params">(value)</span>:</span></span><br><span class="line"><span class="keyword">return</span> range(math.floor(value))</span><br></pre></td></tr></table></figure><blockquote><p>在需要该函数的html中装载：{% load 功能名 %}</p></blockquote></li></ul><h3 id="媒体文件访问"><a href="#媒体文件访问" class="headerlink" title="媒体文件访问"></a>媒体文件访问</h3><ul><li><p>图片以及视频与静态文件分开：</p><blockquote><p>(1)创建图片视频等存放文件夹</p></blockquote><blockquote><p>(2)settings : </p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">templates添加：</span><br><span class="line"></span><br><span class="line">django.template.context_processors.media</span><br><span class="line">最后添加：<span class="comment">#代表媒体文件的存储路径</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">'media'</span>)  </span><br><span class="line"><span class="comment">#指定后 其媒体文件根目录为media</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br></pre></td></tr></table></figure><blockquote><p>(3)urls：</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">调用re_path 使用正则表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> p1904_django2.settings <span class="keyword">import</span> MEDIA_ROOT,MEDIA_URL</span><br><span class="line"></span><br><span class="line">urlpatterns添加：</span><br><span class="line"> re_path(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, </span><br><span class="line"> &#123;<span class="string">'document_root'</span>:MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure><blockquote><p>(4)html:</p></blockquote>  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">装载：</span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> movie_extras %&#125;</span><span class="xml"> </span></span><br><span class="line"></span><br><span class="line"><span class="xml">替换所有img:</span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span>  movie.img.url %&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml">\&#123; % static  '(images/.*\.jpg)' %\&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">替换成： </span><span class="template-variable">&#123;&#123; MEDIA_URL &#125;&#125;</span><span class="xml">images/m15.jpg     </span></span><br><span class="line"><span class="xml">\&#123; MEDIA_URL &#125;&#125;$1以及：</span><span class="template-variable">&#123;&#123; movie.img.url &#125;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>(5)models：</p></blockquote><blockquote><p>修改img的存储结构（路径格式）其媒体跟目录为media 只需要在这个跟目录下创建images文件用来存放媒体文件即可</p></blockquote></li></ul><h3 id="登陆-注册-退出"><a href="#登陆-注册-退出" class="headerlink" title="登陆 注册 退出"></a>登陆 注册 退出</h3><ul><li><p>django 自带用户表  auth_user :password   pbkdf2_sha256$150000$   使用sha256加密了150000次使用该表并使用orm继承并扩展</p></li><li><p>建立一个用户单独的app python3 manage.py startalp users    (django官网：documentation 查询user有步骤)</p></li><li><p>用户models 中 </p><blockquote><p>from django.contrib.auth.models import AbstractUser   #在用户app中继承用户模型</p></blockquote><blockquote><p>class UserInfo(Abstract..)</p></blockquote></li><li><p>添加app到 settings：确认其修改</p><blockquote><p>INS.._APP添加：users</p></blockquote><blockquote><p>AUTH_USER_MODEL = ‘users.UserInfo’</p></blockquote></li><li><p>命令行执行：数据库迁移  </p><blockquote><p>执行时会出问题：用户表在数据库中存在，删除不了</p></blockquote><blockquote><p>解决办法：在Django之前就创建好上诉继承代码 若已经创建 直接删除所有表然后再python3 manage两步  再创建命令行超级用户</p></blockquote></li><li><p>注册功能：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">views：导入数据库models中创建表类名</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(requests)</span>:</span><span class="keyword">pass</span>   </span><br><span class="line"></span><br><span class="line">UserInfo.objects.create_user(username=</span><br><span class="line">requ.POST[‘username’],password=..)  </span><br><span class="line">creat_user:可在生成名字时就会生成密码</span><br><span class="line"><span class="keyword">return</span> HttpResponse(‘hello’) <span class="comment">#检测链接</span></span><br><span class="line"></span><br><span class="line">出现CSRF验证：settings中middleware中注销掉Csrf  </span><br><span class="line">     </span><br><span class="line">urls：添加该函数到path网页中找到注册表单—html中找到相应位置 </span><br><span class="line">修改action http://ip/register函数所有表单信息便传到该函</span><br><span class="line">数的requests中</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* 登陆功能：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">views：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(re..)</span>:</span></span><br><span class="line">username = re…POST[‘username’]</span><br><span class="line">password = re…POST[‘ps’]</span><br><span class="line">user = UserInfo.objects.filter(username=username)[<span class="number">0</span>] </span><br><span class="line"><span class="comment">#数据库查询语句 查询用户表中username密码</span></span><br><span class="line">check_password 函数(需要导入)： 检测密码</span><br><span class="line"><span class="keyword">return</span>  </span><br><span class="line"></span><br><span class="line">注意：表单形式的验证前后端需要同时做：</span><br><span class="line">例如：密码验证需要前后端都同时做</span><br><span class="line">前端：html：min_length = ‘<span class="number">4</span>’   </span><br><span class="line">（这里设置后，如果后端没改，前端网页里的限制条件仍然可以改，</span><br><span class="line">因其html保存在本地的，在elements中可以修改，相当于漏洞）</span><br><span class="line"></span><br><span class="line">后端：<span class="keyword">if</span> leng(‘username’) &lt; <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> HttpResponse(‘用户名长度必须大于<span class="number">4</span>’)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* <span class="number">7.</span>登陆注册只用后端做的方法</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">forms模块(表单渲染 生成表单和验证表单 生成表单属于index中的  </span><br><span class="line">解决<span class="number">6</span>中注意)  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(forms.Form)</span></span></span><br><span class="line"><span class="class"><span class="title">charfield</span>:</span>数据库中为varchar()   </span><br><span class="line">html:type元素    app中创建forms.py文件</span><br><span class="line"></span><br><span class="line">导入forms模块  :</span><br><span class="line">与创建module一样创建相关<span class="class"><span class="keyword">class</span>，比如登陆表单的<span class="title">input</span>字段等</span></span><br><span class="line"><span class="class">密码字段定义：</span></span><br><span class="line">password = forms.CharField(min_length =8, widget </span><br><span class="line">=forms.PasswordInput)  </span><br><span class="line">将type中改成password邮箱字段:EmailField</span><br><span class="line">网址字段:urlfiled</span><br><span class="line">views:添加该相关函数的值到html调用函数中进行实例化，</span><br><span class="line">f = LoginForm()   表示在html中生成表单</span><br><span class="line"></span><br><span class="line">html:在form表单中直接使用该字段</span><br><span class="line"></span><br><span class="line">验证表单：</span><br><span class="line">users app中</span><br><span class="line">导入表单</span><br><span class="line">f = LoginForm(requests.POST)    </span><br><span class="line">print(f.is_valid())  :ture false    </span><br><span class="line">表示该表单符合创建表单其中的字段限制</span><br><span class="line">username = f.cleaned_data[‘username’]    </span><br><span class="line">从cleaned中取html中验证成功的相关字段（与form表单中的字</span><br><span class="line">段名需要一致）用户不存在:<span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">ModelForm模块（与数据库相连，比上面更好,可以以数据库中字段创建表）：  </span><br><span class="line">forms.py:</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model  </span><br><span class="line"><span class="comment">#获取user的数据库信息  类</span></span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserForm</span><span class="params">(forms.ModelForm)</span>:</span>      <span class="comment">#</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span> </span><br><span class="line">model = User      <span class="comment">#创建用户模版</span></span><br><span class="line">fields = (“username”, “password”)    </span><br><span class="line"><span class="comment">#需要验证的字段</span></span><br><span class="line"><span class="comment">#选择需要修改的字段</span></span><br><span class="line">widgets = &#123; </span><br><span class="line">‘password’: forms.PasswordInput(</span><br><span class="line">attrs=&#123;“min_length”:<span class="number">8</span>&#125;),     </span><br><span class="line"><span class="comment">#设置最小长度 （数据库中该字段只有max_length）</span></span><br><span class="line">‘username’: forms.TextInput(attrs=&#123;“</span><br><span class="line">min_length”:<span class="number">4</span>,‘<span class="class"><span class="keyword">class</span>’:</span> text&#125;)  </span><br><span class="line"><span class="comment">#启动class字段&#125;</span></span><br><span class="line">html/views：</span><br><span class="line">users/views:</span><br><span class="line">登陆注意:is_valid()函数会验证在数据库中是否存在，</span><br><span class="line">需要在上述中将该方法在上面类下重写方法  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_unique</span><span class="params">(self)</span>:</span><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>保持登陆： Django中的login方法  </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">引用：</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login <span class="keyword">as</span> user_login </span><br><span class="line">在登陆函数中</span><br><span class="line">users/views/login:check_password </span><br><span class="line">正确后：</span><br><span class="line">user_login(requests, user) </span><br><span class="line">将该user加到报文中，并在html中保存为session以及数据库中保存在</span><br><span class="line">登陆页面（index.html）：</span><br><span class="line">加入判断语句：</span><br><span class="line">&#123;% <span class="keyword">if</span> <span class="keyword">not</span> requests.user.is_authenticated %&#125; </span><br><span class="line">判断是否登陆，以此返回不同的标签 &#123;% <span class="keyword">else</span> %&#125;&#123;% endif %&#125; </span><br><span class="line">以此保持登陆</span><br><span class="line"></span><br><span class="line">退出：</span><br><span class="line">loginout模块</span><br><span class="line">user/views: </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>:</span>user_logout(requests) </span><br><span class="line"><span class="keyword">return</span> HttpResponse(‘logout success’)</span><br><span class="line"></span><br><span class="line">--urls--中配置</span><br><span class="line">html中加入到相关href中</span><br><span class="line">urls:可以设置别名：name=‘’    </span><br><span class="line">相应href 中可以使用&#123;% -url- ‘别名’ %&#125;  </span><br><span class="line">可以把固定地址换成与后台同步</span><br><span class="line"></span><br><span class="line">跳转页面</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> django.urls </span><br><span class="line"><span class="keyword">return</span> redirect(‘http// …’)</span><br><span class="line"><span class="keyword">return</span> redirect(‘别名’)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>评分：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">新建评分app</span><br><span class="line">settings：添加app</span><br><span class="line">新建model：导入models Movie get_user_model 模块</span><br><span class="line">User = get_user_model</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">tags = ((<span class="number">1</span>, ‘aa’),(<span class="number">2</span>,’bb’),)</span><br><span class="line">movie_score = models.Int..(choices=tags)  </span><br><span class="line">选择分数</span><br><span class="line">movie = models.ForieginKey(‘movie.Movie’, </span><br><span class="line">on_delete=models.CASCADE)   </span><br><span class="line">删除的方式</span><br><span class="line">user = models.<span class="keyword">for</span>…key(‘users.UserInfo, ..’)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">unique_together = (‘movie’, ‘user’)  唯一</span><br><span class="line"></span><br><span class="line">注意：字段不能与相关联表的字段重合</span><br><span class="line"></span><br><span class="line">命令行创建数据库表</span><br><span class="line"></span><br><span class="line">修改之前自定义打星函数：</span><br></pre></td></tr></table></figure></li><li><p>部署：将本地代码放到云服务器以便所有人都可以访问</p></li></ul><pre><code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>服务器</span><br><span class="line"><span class="number">2.</span>登陆部署电脑：ssh <span class="symbol">rimi@</span><span class="number">10.2</span><span class="number">.0</span><span class="number">.26</span></span><br><span class="line"><span class="number">3.</span>本地上传代码到 git 再在部署电脑上拷贝下来</span><br><span class="line"><span class="number">4.</span> 部署机：安装django, 注意版本号</span><br><span class="line"><span class="number">5.</span>输出本地关于oython3的所有包版本号:pip3 freeze &gt; requirements.txt</span><br><span class="line"><span class="number">6.</span>服务器:pip3 install -r requirements.txt</span><br><span class="line"><span class="number">7.</span> 启动 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span> 所有人都可以访问（测试用）gunicorn(上线)</span><br><span class="line"><span class="number">8.</span>gunicorn:    安装   线程数量：cpu*<span class="number">2</span> +<span class="number">1</span>   进程 = 线程/<span class="number">2</span>   </span><br><span class="line"><span class="number">9.</span>启动：wigs: scoket 接收http协议    需要将python的socket替换成wigs</span><br><span class="line"><span class="number">10.</span>访问日志/报错</span><br><span class="line"><span class="number">11.</span>图片美化  分类搜索  活动  后台分类（分级）</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> python框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb核心技术03--JDBC</title>
      <link href="/2019/05/03/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF03--JDBC/"/>
      <url>/2019/05/03/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF03--JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><pre><code>1. JDBC基本概念2. 快速入门3. 对JDBC中各个接口和类详解</code></pre><h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h3><ul><li>Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</li><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><h3 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h3><ul><li>步骤：</li></ul><ol><li><p>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</p><ul><li>1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</li><li>2.右键–&gt;Add As Library</li></ul></li><li><p>注册驱动</p></li><li><p>获取数据库连接对象 Connection</p></li><li><p>定义sql</p></li><li><p>获取执行sql语句的对象 Statement</p></li><li><p>执行sql，接受返回结果</p></li><li><p>处理结果</p></li><li><p>释放资源</p></li></ol><ul><li>代码实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入驱动jar包</span></span><br><span class="line"><span class="comment">//2.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:</span></span><br><span class="line"><span class="string">//localhost:3306/db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//4.定义sql语句</span></span><br><span class="line">String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line"><span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//6.执行sql</span></span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//7.处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//8.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><pre><code>3. 详解各个对象：    1. DriverManager：驱动管理对象        * 功能：            1. 注册驱动：告诉程序该使用哪一个数据库驱动jar                static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。                 写代码使用：  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块                 static {                        try {                            java.sql.DriverManager.registerDriver(new Driver());                        } catch (SQLException E) {                            throw new RuntimeException(&quot;Can&apos;t register driver!&quot;);                        }                    }                注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。            2. 获取数据库连接：                * 方法：static Connection getConnection(String url, String user, String password)                 * 参数：                    * url：指定连接的路径                        * 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称                        * 例子：jdbc:mysql://localhost:3306/db3                        * 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称                    * user：用户名                    * password：密码     2. Connection：数据库连接对象        1. 功能：            1. 获取执行sql 的对象                * Statement createStatement()                * PreparedStatement prepareStatement(String sql)              2. 管理事务：                * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务                * 提交事务：commit()                 * 回滚事务：rollback()     3. Statement：执行sql的对象        1. 执行sql            1. boolean execute(String sql) ：可以执行任意的sql 了解             2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句                * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。            3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句        2. 练习：            1. account表 添加一条记录            2. account表 修改记录            3. account表 删除一条记录            代码：                Statement stmt = null;                Connection conn = null;                try {                    //1. 注册驱动                    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                    //2. 定义sql                    String sql = &quot;insert into account values(null,&apos;王五&apos;,3000)&quot;;                    //3.获取Connection对象                    conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;, &quot;root&quot;, &quot;root&quot;);                    //4.获取执行sql的对象 Statement                    stmt = conn.createStatement();                    //5.执行sql                    int count = stmt.executeUpdate(sql);//影响的行数                     //6.处理结果                    System.out.println(count);                    if(count &gt; 0){                        System.out.println(&quot;添加成功！&quot;);                    }else{                        System.out.println(&quot;添加失败！&quot;);                    }                } catch (ClassNotFoundException e) {                    e.printStackTrace();                } catch (SQLException e) {                    e.printStackTrace();                }finally {                    //stmt.close();                    //7. 释放资源                    //避免空指针异常                    if(stmt != null){                        try {                            stmt.close();                        } catch (SQLException e) {                            e.printStackTrace();                        }                    }                    if(conn != null){                        try {                            conn.close();                        } catch (SQLException e) {                            e.printStackTrace();                        }                    }                }    4. ResultSet：结果集对象,封装查询结果        * boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true        * getXxx(参数):获取数据            * Xxx：代表数据类型   如： int getInt() ,    String getString()            * 参数：                1. int：代表列的编号,从1开始   如： getString(1)                2. String：代表列名称。 如： getDouble(&quot;balance&quot;)        * 注意：            * 使用步骤：                1. 游标向下移动一行                2. 判断是否有数据                3. 获取数据               //循环判断游标是否是最后一行末尾。                while(rs.next()){                    //获取数据                    //6.2 获取数据                    int id = rs.getInt(1);                    String name = rs.getString(&quot;name&quot;);                    double balance = rs.getDouble(3);                    System.out.println(id + &quot;---&quot; + name + &quot;---&quot; + balance);                }        * 练习：            * 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。                1. 定义Emp类                2. 定义方法 public List&lt;Emp&gt; findAll(){}                3. 实现方法 select * from emp;    5. PreparedStatement：执行sql的对象        1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题            1. 输入用户随便，输入密码：a&apos; or &apos;a&apos; = &apos;a            2. sql：select * from user where username = &apos;fhdsjkf&apos; and password = &apos;a&apos; or &apos;a&apos; = &apos;a&apos;         2. 解决sql注入问题：使用PreparedStatement对象来解决        3. 预编译的SQL：参数使用?作为占位符        4. 步骤：            1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar            2. 注册驱动            3. 获取数据库连接对象 Connection            4. 定义sql                * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;            5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)             6. 给？赋值：                * 方法： setXxx(参数1,参数2)                    * 参数1：？的位置编号 从1 开始                    * 参数2：？的值            7. 执行sql，接受返回结果，不需要传递sql语句            8. 处理结果            9. 释放资源        5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作            1. 可以防止SQL注入            2. 效率更高</code></pre><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><pre><code>* 目的：简化书写* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数（麻烦），还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源* 代码实现：    public class JDBCUtils {    private static String url;    private static String user;    private static String password;    private static String driver;    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static{        //读取资源文件，获取值。        try {            //1. 创建Properties集合类。            Properties pro = new Properties();            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器            ClassLoader classLoader = JDBCUtils.class.getClassLoader();            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);            String path = res.getPath();            System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));            pro.load(new FileReader(path));            //3. 获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //4. 注册驱动            Class.forName(driver);        } catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }    /**     * 获取连接     * @return 连接对象     */    public static Connection getConnection() throws SQLException {        return DriverManager.getConnection(url, user, password);    }    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(Statement stmt,Connection conn){        if( stmt != null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( conn != null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(ResultSet rs,Statement stmt, Connection conn){        if( rs != null){            try {                rs.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( stmt != null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( conn != null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}* 练习：    * 需求：        1. 通过键盘录入用户名和密码        2. 判断用户是否登录成功            * select * from user where username = &quot;&quot; and password = &quot;&quot;;            * 如果这个sql有查询结果，则成功，反之，则失败    * 步骤：        1. 创建数据库表 user            CREATE TABLE USER(                id INT PRIMARY KEY AUTO_INCREMENT,                username VARCHAR(32),                PASSWORD VARCHAR(32)            );            INSERT INTO USER VALUES(NULL,&apos;zhangsan&apos;,&apos;123&apos;);            INSERT INTO USER VALUES(NULL,&apos;lisi&apos;,&apos;234&apos;);        2. 代码实现：            public class JDBCDemo9 {                public static void main(String[] args) {                    //1.键盘录入，接受用户名和密码                    Scanner sc = new Scanner(System.in);                    System.out.println(&quot;请输入用户名：&quot;);                    String username = sc.nextLine();                    System.out.println(&quot;请输入密码：&quot;);                    String password = sc.nextLine();                    //2.调用方法                    boolean flag = new JDBCDemo9().login(username, password);                    //3.判断结果，输出不同语句                    if(flag){                        //登录成功                        System.out.println(&quot;登录成功！&quot;);                    }else{                        System.out.println(&quot;用户名或密码错误！&quot;);                    }                }                /**                 * 登录方法                 */                public boolean login(String username ,String password){                    if(username == null || password == null){                        return false;                    }                    //连接数据库判断是否登录成功                    Connection conn = null;                    Statement stmt =  null;                    ResultSet rs = null;                    //1.获取连接                    try {                        conn =  JDBCUtils.getConnection();                        //2.定义sql                        String sql = &quot;select * from user where username = &apos;&quot;+username+&quot;&apos; and password = &apos;&quot;+password+&quot;&apos; &quot;;                        //3.获取执行sql的对象                        stmt = conn.createStatement();                        //4.执行查询                        rs = stmt.executeQuery(sql);                        //5.判断                       /* if(rs.next()){//如果有下一行，则返回true                            return true;                        }else{                            return false;                        }*/                       return rs.next();//如果有下一行，则返回true                    } catch (SQLException e) {                        e.printStackTrace();                    }finally {                        JDBCUtils.close(rs,stmt,conn);                    }                    return false;                }            }</code></pre><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><pre><code>1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。2. 操作：    1. 开启事务    2. 提交事务    3. 回滚事务3. 使用Connection对象来管理事务    * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务        * 在执行sql之前开启事务    * 提交事务：commit()         * 当所有sql都执行完提交事务    * 回滚事务：rollback()         * 在catch中回滚事务4. 代码：    public class JDBCDemo10 {        public static void main(String[] args) {            Connection conn = null;            PreparedStatement pstmt1 = null;            PreparedStatement pstmt2 = null;            try {                //1.获取连接                conn = JDBCUtils.getConnection();                //开启事务                conn.setAutoCommit(false);                //2.定义sql                //2.1 张三 - 500                String sql1 = &quot;update account set balance = balance - ? where id = ?&quot;;                //2.2 李四 + 500                String sql2 = &quot;update account set balance = balance + ? where id = ?&quot;;                //3.获取执行sql对象                pstmt1 = conn.prepareStatement(sql1);                pstmt2 = conn.prepareStatement(sql2);                //4. 设置参数                pstmt1.setDouble(1,500);                pstmt1.setInt(2,1);                pstmt2.setDouble(1,500);                pstmt2.setInt(2,2);                //5.执行sql                pstmt1.executeUpdate();                // 手动制造异常                int i = 3/0;                pstmt2.executeUpdate();                //提交事务                conn.commit();            } catch (Exception e) {                //事务回滚                try {                    if(conn != null) {                        conn.rollback();                    }                } catch (SQLException e1) {                    e1.printStackTrace();                }                e.printStackTrace();            }finally {                JDBCUtils.close(pstmt1,conn);                JDBCUtils.close(pstmt2,null);            }        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA核心技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> mysql数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程04--网络通信</title>
      <link href="/2019/05/02/Java%E7%BC%96%E7%A8%8B04--%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/05/02/Java%E7%BC%96%E7%A8%8B04--%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="【网络编程】"><a href="#【网络编程】" class="headerlink" title="【网络编程】"></a>【网络编程】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>软件架构CS／BS</li><li>网络通信三要素</li><li>TCP通信</li><li>Socket套接字</li><li>ServerSocket</li></ul><h1 id="第一章-网络编程入门"><a href="#第一章-网络编程入门" class="headerlink" title="第一章 网络编程入门"></a>第一章 网络编程入门</h1><h2 id="1-1软件结构"><a href="#1-1软件结构" class="headerlink" title="1.1软件结构"></a>1.1软件结构</h2><ul><li><strong>C/S结构</strong> ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1_cs.jpg" alt=""></p><p><strong>B/S结构</strong> ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2_bs.jpg" alt=""></p><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h2 id="1-2-网络通信协议"><a href="#1-2-网络通信协议" class="headerlink" title="1.2 网络通信协议"></a>1.2 网络通信协议</h2><ul><li><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li></ul><ul><li><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/3_tcp_ip.jpg" alt=""></p><p>上图中，TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br>运输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。<br>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</p><h2 id="1-3-协议分类"><a href="#1-3-协议分类" class="headerlink" title="1.3 协议分类"></a>1.3 协议分类</h2><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/UDP%E9%80%9A%E4%BF%A1%E5%9B%BE%E8%A7%A3.bmp" alt="UDP通信图解"></p><p>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</p><p>数据报(Datagram):网络传输的基本单位 </p><ul><li><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</li></ul></li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/4_tcp.jpg" alt=""></p><p>​    完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h2 id="1-4-网络编程三要素"><a href="#1-4-网络编程三要素" class="headerlink" title="1.4 网络编程三要素"></a>1.4 网络编程三要素</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><strong>协议：</strong>计算机网络通信必须遵守的规则，已经介绍过了，不再赘述。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li></ul><p><strong>IP地址分类</strong></p><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><p><strong>常用命令</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>检查网络是否连通，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 空格 IP地址</span><br><span class="line">ping <span class="number">220.181</span><span class="number">.57</span><span class="number">.216</span></span><br></pre></td></tr></table></figure><p><strong>特殊的IP地址</strong></p><ul><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code> 。</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h1 id="第二章-TCP通信程序"><a href="#第二章-TCP通信程序" class="headerlink" title="第二章 TCP通信程序"></a>第二章 TCP通信程序</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h2 id="2-2-Socket类"><a href="#2-2-Socket类" class="headerlink" title="2.2 Socket类"></a>2.2 Socket类</h2><p><code>Socket</code> 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><code>public Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><blockquote><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote></li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br></pre></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><p><code>public InputStream getInputStream()</code> ： 返回此套接字的输入流。</p><ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public OutputStream getOutputStream()</code> ： 返回此套接字的输出流。</p><ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public void close()</code> ：关闭此套接字。</p><ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。 </li></ul></li><li><p><code>public void shutdownOutput()</code> ： 禁用此套接字的输出流。   </p><ul><li>任何先前写出的数据将被发送，随后终止输出流。 </li></ul><h2 id="2-3-ServerSocket类"><a href="#2-3-ServerSocket类" class="headerlink" title="2.3 ServerSocket类"></a>2.3 ServerSocket类</h2></li></ul><p><code>ServerSocket</code>类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ServerSocket(int port)</code> ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br></pre></td></tr></table></figure><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><code>public Socket accept()</code> ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><h2 id="2-4-简单的TCP网络程序"><a href="#2-4-简单的TCP网络程序" class="headerlink" title="2.4 简单的TCP网络程序"></a>2.4 简单的TCP网络程序</h2><h3 id="TCP通信分析图解"><a href="#TCP通信分析图解" class="headerlink" title="TCP通信分析图解"></a>TCP通信分析图解</h3><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li></ol><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg" alt=""></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote><ol start="6"><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">      <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b)；</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="comment">//5.关闭资源.</span></span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line"><span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.获取流对象 . 输出流</span></span><br><span class="line">OutputStream os = client.getOutputStream();</span><br><span class="line"><span class="comment">// 3.写出数据.</span></span><br><span class="line">os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line"><span class="comment">// 4. 关闭资源 .</span></span><br><span class="line">os.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">      <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b)；</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">      <span class="comment">// =================回写数据=======================</span></span><br><span class="line">      <span class="comment">// 5. 通过 socket 获取输出流</span></span><br><span class="line">       OutputStream out = server.getOutputStream();</span><br><span class="line">      <span class="comment">// 6. 回写数据</span></span><br><span class="line">       out.write(<span class="string">"我很好,谢谢你"</span>.getBytes());</span><br><span class="line">      <span class="comment">// 7.关闭资源.</span></span><br><span class="line">      out.close();</span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line"><span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.通过Scoket,获取输出流对象 </span></span><br><span class="line">OutputStream os = client.getOutputStream();</span><br><span class="line"><span class="comment">// 3.写出数据.</span></span><br><span class="line">os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line">      <span class="comment">// ==============解析回写=========================</span></span><br><span class="line">      <span class="comment">// 4. 通过Scoket,获取 输入流对象</span></span><br><span class="line">      InputStream in = client.getInputStream();</span><br><span class="line">      <span class="comment">// 5. 读取数据数据</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> len = in.read(b);</span><br><span class="line">      System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 6. 关闭资源 .</span></span><br><span class="line">      in.close();</span><br><span class="line">os.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章 综合案例"></a>第三章 综合案例</h1><h2 id="3-1-文件上传案例"><a href="#3-1-文件上传案例" class="headerlink" title="3.1 文件上传案例"></a>3.1 文件上传案例</h2><h3 id="文件上传分析图解"><a href="#文件上传分析图解" class="headerlink" title="文件上传分析图解"></a>文件上传分析图解</h3><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6_upload.jpg" alt="">    </p><h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">      ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">  <span class="comment">// 2. 建立连接 </span></span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">      <span class="comment">// 3. 创建流对象</span></span><br><span class="line">      <span class="comment">// 3.1 获取输入流,读取文件数据</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">        <span class="comment">// 3.2 创建输出流,保存到本地 .</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.jpg"</span>));</span><br><span class="line"><span class="comment">// 4. 读写数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 关闭 资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUPload_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件  </span></span><br><span class="line">        BufferedInputStream bis  = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端 </span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream   bos   = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据. </span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ; </span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line"></span><br><span class="line">        bos.close(); </span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close(); </span><br><span class="line">        System.out.println(<span class="string">"文件上传完毕 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传优化分析"><a href="#文件上传优化分析" class="headerlink" title="文件上传优化分析"></a>文件上传优化分析</h3><ol><li><p><strong>文件名称写死的问题</strong></p><p>服务端，保存文件的名称如果写死，那么最终导致服务器硬盘，只会保留一个文件，建议使用系统时间优化，保证文件名称唯一，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis()+<span class="string">".jpg"</span>) <span class="comment">// 文件名称</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>循环接收的问题</strong></p><p>服务端，指保存一个文件就关闭了，之后的用户无法再上传，这是不符合实际的，使用循环改进，可以不断的接收不同用户的文件，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次接收新的连接,创建一个Socket</span></span><br><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>效率问题</strong></p><p>服务端，在接收大文件时，可能耗费几秒钟的时间，此时不能接收其他用户上传，所以，使用多线程技术优化，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    <span class="comment">// accept 交给子线程处理.</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      ......</span><br><span class="line">        InputStream bis = accept.getInputStream();</span><br><span class="line">      ......</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">      <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/* </span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                      bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//4. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信息回写分析图解"><a href="#信息回写分析图解" class="headerlink" title="信息回写分析图解"></a>信息回写分析图解</h3><p>前四步与基本文件上传一致.</p><ol start="5"><li>【服务端】获取输出流，回写数据。</li><li>【客户端】获取输入流，解析回写数据。</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6_upload2.jpg" alt=""></p><h4 id="回写实现"><a href="#回写实现" class="headerlink" title="回写实现"></a>回写实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4.=======信息回写===========================</span></span><br><span class="line">                    System.out.println(<span class="string">"back ........"</span>);</span><br><span class="line">                    OutputStream out = accept.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    out.close();</span><br><span class="line">                    <span class="comment">//================================</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据.</span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭输出流,通知服务端,写出数据完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3. =====解析回写============</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        in.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">// ============================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-模拟B-S服务器-扩展知识点"><a href="#3-2-模拟B-S服务器-扩展知识点" class="headerlink" title="3.2 模拟B\S服务器(扩展知识点)"></a>3.2 模拟B\S服务器(扩展知识点)</h2><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>准备页面数据，web文件夹。</p><p>复制到我们Module中，比如复制到day08中</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%A4%8D%E5%88%B6.png" alt=""></p></li><li><p>我们模拟服务器端，ServerSocket类监听端口，使用浏览器访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">    Socket socket = server.accept();</span><br><span class="line">    InputStream in = socket.getInputStream();</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = in.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">    socket.close();</span><br><span class="line">    server.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE.jpg" alt=""></p></li><li><p>服务器程序中字节输入流可以读取到浏览器发来的请求信息</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E8%AF%BB%E5%8F%96%E8%AE%BF%E9%97%AE%E4%BF%A1%E6%81%AF.jpg" alt=""></p></li></ol><p>GET/web/index.html HTTP/1.1是浏览器的请求消息。/web/index.html为浏览器想要请求的服务器端的资源,使用字符串切割方式获取到请求的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">BufferedReader readWb = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">String requst = readWb.readLine();</span><br><span class="line"><span class="comment">//取出请求资源的路径</span></span><br><span class="line">String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//去掉web前面的/</span></span><br><span class="line">String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">System.out.println(path);</span><br></pre></td></tr></table></figure><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p>服务端实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端  启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 创建ServerSocket 对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 转换流读取浏览器的请求消息</span></span><br><span class="line">        BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        String requst = readWb.readLine();</span><br><span class="line">        <span class="comment">// 取出请求资源的路径</span></span><br><span class="line">        String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">// 去掉web前面的/</span></span><br><span class="line">        String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 读取客户端请求的资源文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 字节输出流,将文件写会客户端</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 写入HTTP协议响应头,固定写法</span></span><br><span class="line">        out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 必须要写入空行,否则浏览器不解析</span></span><br><span class="line">        out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        readWb.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问效果"><a href="#访问效果" class="headerlink" title="访问效果"></a>访问效果</h3><ul><li><strong>火狐</strong></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E6%95%88%E6%9E%9C%E5%9B%BE1.png" alt=""></p><blockquote><p>小贴士：不同的浏览器，内核不一样，解析效果有可能不一样。</p></blockquote><p>发现浏览器中出现很多的叉子,说明浏览器没有读取到图片信息导致。</p><p>浏览器工作原理是遇到图片会开启一个线程进行单独的访问,因此在服务器端加入线程技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Web(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Web</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket=socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">                BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">                        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String requst = readWb.readLine();</span><br><span class="line">                <span class="comment">//取出请求资源的路径</span></span><br><span class="line">                String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">                System.out.println(Arrays.toString(strArr));</span><br><span class="line">                String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                System.out.println(path);</span><br><span class="line"></span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">                System.out.println(fis);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">                <span class="comment">//向浏览器 回写数据</span></span><br><span class="line">                OutputStream out = socket.getOutputStream();</span><br><span class="line">                out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                out.close();</span><br><span class="line">                readWb.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问效果：</strong></p><p>图解：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/BS%E9%80%9A%E4%BF%A1.bmp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA编程 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python小工具01 -- notebook笔记本</title>
      <link href="/2019/04/27/python%E5%B0%8F%E5%B7%A5%E5%85%B701%20--%20notebook%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
      <url>/2019/04/27/python%E5%B0%8F%E5%B7%A5%E5%85%B701%20--%20notebook%E7%AC%94%E8%AE%B0%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h2><p>Jupyter Notebook（又称IPython Notebook）是一个交互式的笔记本，支持运行超过40种编程语言。将介绍Jupyter Notebook的主要特点，了解为什么它能成为人们创造优美的可交互式文档和教育资源的一个强大工具。</p><p>自从Jupyter Notebook 1.0发布以来，越来越多科学家、研究者、教师使用IPython Notebook处理数据、写研究报告、甚至编写书籍。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>安装 <code>pip install notebook</code></li><li>启动 <code>jupyter notebook</code> 其用户为当前使用的目录</li><li>修改工作目录 </li></ul><blockquote><p>`jupyter notebook –generate-config</p><p>编辑jupyter-generate-config 里notebook_dir指到你的目录</p><p><code>c.NotebookApp.notebook_dir = r&#39;/Users/jwang/pyworkplace/note&#39;</code></p></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>新建文件与导入文件，直接导入或者将需要的文件放入运行目录</li></ul><p><img src="" alt="new和上传"></p><p><img src="" alt="运行界面"></p><ul><li>H唤出快捷键提示</li></ul><p><img src="" alt=""></p><ul><li>单元格分类：code, markdown</li><li>命令模式（蓝色边框）与编辑模式（绿色边框）–esc进入命令模式</li><li>常用快捷键</li></ul><blockquote><p>单元格类型转换：Y,M</p><p>插入单元格:A,B</p><p>进入命令模式:esc</p><p>代码补全:Tab</p><p>运行单元格: ctr/shift/alt + enter</p><p>删除单元格: DD</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python编程06 -- 连接MysqlAPI</title>
      <link href="/2019/04/26/python%E7%BC%96%E7%A8%8B06%20--%20%E8%BF%9E%E6%8E%A5MysqlAPI/"/>
      <url>/2019/04/26/python%E7%BC%96%E7%A8%8B06%20--%20%E8%BF%9E%E6%8E%A5MysqlAPI/</url>
      
        <content type="html"><![CDATA[<h2 id="pymysql-等同于MySQLdb"><a href="#pymysql-等同于MySQLdb" class="headerlink" title="pymysql(等同于MySQLdb)"></a>pymysql(等同于MySQLdb)</h2><p>说明：pymysql与MySQLdb模块的使用基本相同，学会pymysql，使用MySQLdb也就不是问题</p><h3 id="安装API模块"><a href="#安装API模块" class="headerlink" title="安装API模块"></a>安装API模块</h3><p><code>pip install pymysql</code></p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'172.25.50.13'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'123456'</span>, db=<span class="string">'test'</span>)</span><br><span class="line"><span class="comment"># 开启自动提交SQL，如果这里不设置，以后的命令需要执行</span></span><br><span class="line"><span class="comment">#  conn.commit()来提交执行，否则都在内存中</span></span><br><span class="line">conn.autocommit(<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建游标</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行普通SQL，并返回受影响行数</span></span><br><span class="line">effect_row = cur.execute(<span class="string">"insert into t1 values (1, 'Boss')"</span>)</span><br><span class="line">print(effect_row) <span class="comment"># out：1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 执行带占位符的SQL，并返回受影响行数</span></span><br><span class="line">effect_row = cur.execute(<span class="string">"insert into t1 values (2,'%s')"</span> </span><br><span class="line">%<span class="string">"xiaodi"</span>)</span><br><span class="line">print(effect_row) <span class="comment"># out：1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 执行多行数据的SQL，并返回受影响行数</span></span><br><span class="line">effect_row = cur.executemany(<span class="string">"insert into t1(id,name) </span></span><br><span class="line"><span class="string">values (%s, %s)"</span> , [(<span class="number">3</span>,<span class="string">'zhubajie'</span>),(<span class="number">4</span>,<span class="string">'sunwukong'</span>)])</span><br><span class="line">print(effect_row) <span class="comment"># out: 2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取最新自增ID，注意：如果该表的列是非自增类型的，则获取到的数值为0</span></span><br><span class="line">id = cur.lastrowid</span><br><span class="line">print(id)  <span class="comment"># out :4</span></span><br><span class="line">cur.execute(<span class="string">'select * from t1'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取第一行数据</span></span><br><span class="line">row_1 = cur.fetchone()</span><br><span class="line">print(row_1) <span class="comment"># out:  (1, 'Boss')</span></span><br><span class="line"><span class="comment"># 获取前n行数据</span></span><br><span class="line">row_2 = cur.fetchmany(<span class="number">3</span>)</span><br><span class="line">print(row_2) <span class="comment"># out: ((2, 'xiaodi'), (3, 'zhubajie'), </span></span><br><span class="line">(<span class="number">4</span>, <span class="string">'sunwukong'</span>))</span><br><span class="line"><span class="comment"># 获取所有数据</span></span><br><span class="line">row_3 = cur.fetchall()</span><br><span class="line">print(row_3) <span class="comment"># out: ((1, 'Boss'), (2, 'xiaodi'), </span></span><br><span class="line">(<span class="number">3</span>, <span class="string">'zhubajie'</span>), (<span class="number">4</span>, <span class="string">'sunwukong'</span>))</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cur.close()</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><ul><li>注：在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：</li></ul><blockquote><p>cur.scroll(1,mode=’relative’) # 相对当前位置移动，数字1 也可以为负数，只是移动方向不同而已</p><p>cur.scroll(2,mode=’absolute’) # 相对绝对位置移动</p></blockquote><ul><li>扩展：通过pymysql获取Dict数据类型</li></ul><blockquote><p>从上边的案例可以看出，pymysql获取的结果，是以元组的形式输出，对于不了解表结构的人来说，无疑不知道每个元素对应的列。</p></blockquote><blockquote><p>因此，如果想要或者字典类型的数据，需要创建游标的时候，设置返回的数据集类型，即：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 游标设置为字典类型</span></span><br><span class="line">cur = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure><h2 id="Python-MySQL-ORM框架–-gt-SQLAlchemy"><a href="#Python-MySQL-ORM框架–-gt-SQLAlchemy" class="headerlink" title="Python MySQL ORM框架–&gt; SQLAlchemy"></a>Python MySQL ORM框架–&gt; SQLAlchemy</h2><ul><li>SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/python%E7%BC%96%E7%A8%8B/MYSQLIN.png" alt=""></p><ul><li>说明：<blockquote><p>SQLAchemy 本身无法操作数据库，其本质上是依赖pymysql.MySQLdb,mssql等第三方插件。</p></blockquote></li></ul><blockquote><p>Dialect用于和数据库API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作</p></blockquote><h3 id="配置SQLAlchemy，使用不同API"><a href="#配置SQLAlchemy，使用不同API" class="headerlink" title="配置SQLAlchemy，使用不同API"></a>配置SQLAlchemy，使用不同API</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MySQL-Python</span><br><span class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">   </span><br><span class="line">pymysql</span><br><span class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line">   </span><br><span class="line">MySQL-Connector</span><br><span class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">   </span><br><span class="line">cx_Oracle</span><br><span class="line">    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</span><br></pre></td></tr></table></figure><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><ul><li>使用 Engine/ConnectionPooling/Dialect 进行数据库操作：Engine使用ConnectionPooling连接数据库，然后再通过Dialect执行SQL语句。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 等效于创建游标</span></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123</span></span><br><span class="line"><span class="string">@127.0.0.1:3306/t1"</span>, max_overflow=<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行SQL</span></span><br><span class="line">cur = engine.execute(</span><br><span class="line">    <span class="string">"INSERT INTO hosts (host, color_id) VALUES ('1.1.1.22', 3)"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 其余操作同游标操作一样，就不一一列举。</span></span><br></pre></td></tr></table></figure><h3 id="ORM功能使用"><a href="#ORM功能使用" class="headerlink" title="ORM功能使用"></a>ORM功能使用</h3><ul><li>使用 ORM/Schema Type/SQL Expression Language/Engine/ConnectionPooling/Dialect 所有组件对数据进行操作。根据类创建对象，对象转换成SQL，执行SQL。</li></ul><h3 id="创建表和删除表"><a href="#创建表和删除表" class="headerlink" title="创建表和删除表"></a>创建表和删除表</h3><ul><li>sqlalchemy 创建表和删除表、</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, </span><br><span class="line">UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br></pre></td></tr></table></figure><ul><li>创建连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456</span></span><br><span class="line"><span class="string">@127.0.0.1:3306/test"</span>, max_overflow=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>创建基类。这个是固定写法，创建表必须这么写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Base = declarative_base()</span><br></pre></td></tr></table></figure><ul><li>创建单表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>))</span><br><span class="line">    extra = Column(String(<span class="number">16</span>))</span><br><span class="line">    <span class="comment"># 创建联合索引</span></span><br><span class="line">    __table_args__ = (</span><br><span class="line">    UniqueConstraint(<span class="string">'id'</span>, <span class="string">'name'</span>, name=<span class="string">'uix_id_name'</span>),</span><br><span class="line">        Index(<span class="string">'ix_id_name'</span>, <span class="string">'name'</span>, <span class="string">'extra'</span>),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li>一对多</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Favor</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'favor'</span></span><br><span class="line">    nid = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    caption = Column(String(<span class="number">50</span>), default=<span class="string">'red'</span>, unique=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span></span><br><span class="line">    nid = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">True</span>)</span><br><span class="line">    favor_id = Column(Integer, ForeignKey(<span class="string">"favor.nid"</span>))</span><br></pre></td></tr></table></figure><ul><li>多对多</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerToGroup</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'servertogroup'</span></span><br><span class="line">    nid = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    server_id = Column(Integer, ForeignKey(<span class="string">'server.id'</span>))</span><br><span class="line">    group_id = Column(Integer, ForeignKey(<span class="string">'group.id'</span>))</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'group'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'server'</span></span><br><span class="line"> </span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    hostname = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    port = Column(Integer, default=<span class="number">22</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span><span class="params">()</span>:</span></span><br><span class="line">    Base.metadata.drop_all(engine)</span><br></pre></td></tr></table></figure><h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><blockquote><p>要想操作表，需要经过如下2个步骤</p></blockquote><ul><li>步骤1：创建session</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br></pre></td></tr></table></figure><ul><li>步骤2：执行SQL。这里需要注意，如果是新增的话，需要新建对象，如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增单条数据</span></span><br><span class="line">obj = Users(name=<span class="string">"guanyu"</span>, extra=<span class="string">'hanjiang'</span>)</span><br><span class="line">session.add(obj)</span><br><span class="line"><span class="comment"># 新增多条数据</span></span><br><span class="line">session.add_all([</span><br><span class="line">    Users(name=<span class="string">"liubei"</span>, extra=<span class="string">'leader'</span>),</span><br><span class="line">    Users(name=<span class="string">"zhangfei"</span>, extra=<span class="string">'xiaodi'</span>),</span><br><span class="line">])</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><ul><li>其他的SQL，仅需要执行session.query方法，进行相关操作即可</li></ul><blockquote><p>1）删除表数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除user表中id大于2的条目</span></span><br><span class="line">session.query(Users).filter(Users.id &gt; <span class="number">2</span>).delete()</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><blockquote><p>2）修改表数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新user表中id大于2的name列为099</span></span><br><span class="line">session.query(Users).filter(Users.id &gt; <span class="number">2</span>).update(&#123;<span class="string">"name"</span> : <span class="string">"099"</span>&#125;)</span><br><span class="line"><span class="comment"># 更新user表中id大于2的name列，在原字符串后边增加099</span></span><br><span class="line">session.query(Users).filter(Users.id &gt; <span class="number">2</span>).update(&#123;Users.name: </span><br><span class="line">Users.name + <span class="string">"099"</span>&#125;, synchronize_session=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 更新user表中id大于2的num列，使最终值在原来数值基础上加1</span></span><br><span class="line">session.query(Users).filter(Users.id &gt; <span class="number">2</span>).update(</span><br><span class="line">&#123;<span class="string">"num"</span>: Users.num + <span class="number">1</span>&#125;, synchronize_session=<span class="string">"evaluate"</span>) </span><br><span class="line"><span class="comment"># 数字相加，必须设置synchronize_session="evaluate"</span></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><blockquote><p>3）查询数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users).all() <span class="comment"># 查询所有</span></span><br><span class="line">sql = session.query(Users) <span class="comment"># 查询生成的sql</span></span><br><span class="line">print(sql)</span><br><span class="line">ret = session.query(Users.name, Users.extra).all() </span><br><span class="line"><span class="comment">#查询User表的name和extra列的所有数据</span></span><br><span class="line">ret = session.query(Users).filter_by(name=<span class="string">'alex'</span>).all()  </span><br><span class="line"><span class="comment"># 取全部name列为alex的数据</span></span><br><span class="line">ret = session.query(Users).filter_by(name=<span class="string">'alex'</span>).first() </span><br><span class="line"><span class="comment"># 第一个匹配name列为alex的数据</span></span><br><span class="line"> </span><br><span class="line">Ps: ret是一个对象列表。这个对象可以通过 “对象[索引].字段”来获取对应的值</span><br></pre></td></tr></table></figure><ul><li>其他</li></ul><blockquote><p>　条件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users).filter_by(name=<span class="string">'alex'</span>).all() <span class="comment">#</span></span><br><span class="line">ret = session.query(Users).filter(Users.id &gt; <span class="number">1</span>, </span><br><span class="line">Users.name == <span class="string">'eric'</span>).all()</span><br></pre></td></tr></table></figure><blockquote><p>且的关系</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users).filter(Users.id.between(<span class="number">1</span>, <span class="number">3</span>), </span><br><span class="line">Users.name == <span class="string">'eric'</span>).all()</span><br><span class="line">ret = session.query(Users).filter(Users.id.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).all()</span><br><span class="line">ret = session.query(Users).filter(~Users.id.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).all()</span><br></pre></td></tr></table></figure><blockquote><p>~表示非。就是not in的意思</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret =session.query(Users).filter(Users.id.in_(session.query</span><br><span class="line">(Users.id).filter_by(name=<span class="string">'eric'</span>))).all()</span><br></pre></td></tr></table></figure><blockquote><p>联表查询 : <code>from sqlalchemy import and_, or_</code><br>且和or的关系</p></blockquote><p><code>ret = session.query(Users).filter(       and_(Users.id &gt; 3, Users.name == &#39;eric&#39;)).all()</code></p><blockquote><p>条件以and方式排列</p></blockquote><p><code>ret = session.query(Users).filter(or_(Users.id &lt; 2, Users.name == &#39;eric&#39;)).all()</code> </p><blockquote><p>条件以or方式排列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users).filter(</span><br><span class="line">    or_( <span class="comment">#这部分表示括号中的条件都以or的形式匹配</span></span><br><span class="line">        Users.id &lt; <span class="number">2</span>, <span class="comment"># 或者 or User.id &lt; 2</span></span><br><span class="line">        and_(Users.name == <span class="string">'eric'</span>, Users.id &gt; <span class="number">3</span>),</span><br><span class="line">        <span class="comment"># 表示括号中这部分进行and匹配</span></span><br><span class="line">        Users.extra != <span class="string">""</span></span><br><span class="line">    )).all()</span><br></pre></td></tr></table></figure><blockquote><p>通配符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users).filter(Users.name.like(<span class="string">'e%'</span>)).all()</span><br><span class="line">ret = session.query(Users).filter(~Users.name.like(<span class="string">'e%'</span>)).all() </span><br><span class="line"><span class="comment"># 表示not like</span></span><br></pre></td></tr></table></figure><blockquote><p>限制 limit用法<br><code>ret = session.query(Users)[1:2]</code> </p></blockquote><blockquote><p>排序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users).order_by(Users.name.desc()).all()</span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc(), </span><br><span class="line">Users.id.asc()).all() </span><br><span class="line"><span class="comment"># 按照name从大到小排列，如果name相同，按照id从小到大排列</span></span><br></pre></td></tr></table></figure><blockquote><p>分组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"> </span><br><span class="line">ret = session.query(Users).group_by(Users.extra).all()</span><br><span class="line">ret = session.query(</span><br><span class="line">    func.max(Users.id),</span><br><span class="line">    func.sum(Users.id),</span><br><span class="line">    func.min(Users.id)).group_by(Users.name).all()</span><br><span class="line"> </span><br><span class="line">ret = session.query(</span><br><span class="line">    func.max(Users.id),</span><br><span class="line">    func.sum(Users.id),</span><br><span class="line">    func.min(Users.id)).group_by(Users.name).</span><br><span class="line">    having(func.min(Users.id) &gt;<span class="number">2</span>).all() </span><br><span class="line">    <span class="comment"># having对聚合的内容再次进行过滤</span></span><br></pre></td></tr></table></figure><blockquote><p>连表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ret = session.query(Users, Favor).</span><br><span class="line">  filter(Users.id == Favor.nid).all()</span><br><span class="line"> </span><br><span class="line">ret = session.query(Person).join(Favor).all()</span><br><span class="line"><span class="comment"># 默认是inner join</span></span><br><span class="line">ret = session.query(Person).join(Favor, isouter=<span class="literal">True</span>).all() </span><br><span class="line"><span class="comment"># isouter表示是left join</span></span><br></pre></td></tr></table></figure><blockquote><p>组合</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">q1 = session.query(Users.name).filter(Users.id &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).filter(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union(q2).all() <span class="comment">#union默认会去重</span></span><br><span class="line"> </span><br><span class="line">q1 = session.query(Users.name).filter(Users.id &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).filter(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union_all(q2).all() <span class="comment"># union_all不去重</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python编程 </tag>
            
            <tag> pymysql </tag>
            
            <tag> SQLAIchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python框架05 -- 浅谈Django微信小程序后台开发</title>
      <link href="/2019/04/17/python%E6%A1%86%E6%9E%B605%20--%20%E6%B5%85%E8%B0%88Django%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
      <url>/2019/04/17/python%E6%A1%86%E6%9E%B605%20--%20%E6%B5%85%E8%B0%88Django%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Django微信小程序后台开发浅析"><a href="#Django微信小程序后台开发浅析" class="headerlink" title="Django微信小程序后台开发浅析"></a>Django微信小程序后台开发浅析</h2><p><a href="#1">1.申请小程序，创建hello world小程序</a></p><p><a href="#2">2.添加交互框和按钮</a></p><p><a href="#3">3.服务器配置</a></p><p><a href="#4">4.配置服务器将后端与微信小程序连接</a></p><more--><h2 id="申请小程序，创建hello-world小程序"><a href="#申请小程序，创建hello-world小程序" class="headerlink" title="申请小程序，创建hello world小程序"></a>申请小程序，创建hello world小程序</h2><p><a name="1"></a></p><h3 id="在微信开发平台http-mp-weixin-qq-com申请小程序并获取APP-id"><a href="#在微信开发平台http-mp-weixin-qq-com申请小程序并获取APP-id" class="headerlink" title="在微信开发平台http://mp.weixin.qq.com申请小程序并获取APP id"></a>在微信开发平台<a href="http://mp.weixin.qq.com" target="_blank" rel="noopener">http://mp.weixin.qq.com</a>申请小程序并获取APP id</h3><ul><li>在微信公众平台注册选择小程序，按照提示进行注册</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat01.jpg" alt=""></p><ul><li>注册成功后，填写小程序基本信息</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat02.jpg" alt=""></p><ul><li>查看小程序详细信息下拉到底部找到AppID</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat03.jpg" alt=""></p><h3 id="下载微信开发者工具"><a href="#下载微信开发者工具" class="headerlink" title="下载微信开发者工具"></a>下载微信开发者工具</h3><ul><li><p>小程序主页选择<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">文档</a>–下载–稳定版Stable build</p></li><li><p>新建小程序项目,将AppID填写进去,不使用云服务（只是测试，如果需要再详细解决）</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat04.jpg" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat05.jpg" alt=""></p><h2 id="添加交互框和按钮"><a href="#添加交互框和按钮" class="headerlink" title="添加交互框和按钮"></a>添加交互框和按钮</h2><p><a name="2"></a></p><ul><li>index.wxml</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">bindinput</span>=<span class="string">'input'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"calculate"</span>&gt;</span>cal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; result &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>index.wxss</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**index.wxss**/</span><br><span class="line">.input &#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">index</span>.js</span><br><span class="line">//获取应用实例</span><br><span class="line">const app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    resul<span class="variable">t:</span> <span class="string">"暂无结果"</span>,</span><br><span class="line">    formul<span class="variable">a:</span> <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  //事件处理函数</span><br><span class="line">  calculate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      ur<span class="variable">l:</span> <span class="string">'https://192.168.0.100/calculate'</span>,</span><br><span class="line">      dat<span class="variable">a:</span> &#123;</span><br><span class="line">        formul<span class="variable">a:</span> this.data.formula</span><br><span class="line">      &#125;,</span><br><span class="line">      succes<span class="variable">s:</span> <span class="keyword">res</span> =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">res</span>.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">          this.setData(&#123;</span><br><span class="line">            resul<span class="variable">t:</span> <span class="keyword">res</span>.data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  inpu<span class="variable">t:</span> <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> &#123;</span></span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      formul<span class="variable">a:</span> <span class="keyword">e</span>.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="服务器配置（这里采用本地ip-后期部署再修改）"><a href="#服务器配置（这里采用本地ip-后期部署再修改）" class="headerlink" title="服务器配置（这里采用本地ip,后期部署再修改）"></a>服务器配置（这里采用本地ip,后期部署再修改）</h2><p><a name="3"></a></p><ul><li>安装python虚拟环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ pip install virtualenv</span><br><span class="line">$ pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">$ pip install virtualenvwrapper-win (windows系列)</span><br><span class="line"></span><br><span class="line">$ export WORKON_HOME=~/Envs</span><br><span class="line">$ mkdir -p $WORKON_HOME</span><br><span class="line">$ source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><blockquote><p>注意点 virtualenv是初级的工具 只能用在你当前文件夹的目录下面去新建</p></blockquote><blockquote><p>wrapper所带的 mkvirtualenv 和 workon命令可以让你在任何地方管理虚拟环境 不用考虑文件夹位置</p></blockquote><ul><li>创建空文件夹，进入其中新建虚拟环境并激活和安装Django</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtualenv ruimi_django -p python3<span class="number">.6</span></span><br><span class="line">source ruimi_django/bin/activate</span><br><span class="line">pip install django==<span class="number">1.11</span></span><br><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><ul><li><p>pycharm安装Django环境,并选择虚拟环境，详情看<a href="https://learn666-gif.github.io/2019/05/03/Django%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">Django浅析</a></p></li><li><p>创建Django项目并试运行,查看是否成功</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject calculator</span><br><span class="line">cd calculator</span><br><span class="line"></span><br><span class="line"><span class="comment">##修改calculator/settings.py中的ALLOWED_HOSTS = []为ALLOWED_HOSTS = ['*']</span></span><br><span class="line"></span><br><span class="line">cd calculator</span><br><span class="line">python3 manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><h3 id="实现计算机接口"><a href="#实现计算机接口" class="headerlink" title="实现计算机接口"></a>实现计算机接口</h3><ul><li>创建app，并注册该app到setting.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp CalculateApi</span><br></pre></td></tr></table></figure><ul><li>进行URL转发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## calculator&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(&#39;^&#39;, include(&#39;CalculateApi.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">## CalculateApi&#x2F;新建urls.py</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(&#39;calculate&#39;, views.calculate)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在views中添加calulate函数进行计算并返回（报文头）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(request)</span>:</span></span><br><span class="line">    formula = request.GET[<span class="string">'formula'</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = eval(formula, &#123;&#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result = <span class="string">'Error formula'</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行服务器，访问http://服务器ip:8000/calculate?formula=2*2-3即可得到结果1</span></span><br></pre></td></tr></table></figure><h2 id="配置服务器将后端与微信小程序连接"><a href="#配置服务器将后端与微信小程序连接" class="headerlink" title="配置服务器将后端与微信小程序连接"></a>配置服务器将后端与微信小程序连接</h2><p><a name="4"></a></p><p>由于微信要求使用https协议进行通讯，我们使用nginx + uwsgi + django来配置https服务器</p><h3 id="uwsgi配置"><a href="#uwsgi配置" class="headerlink" title="uwsgi配置"></a>uwsgi配置</h3><ul><li>安装uwsgi并配置Django项目的uwsgi.ini，在主项目文件夹中新建uwsgi.ini文件添加配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">## pip3 install uwsgi</span><br><span class="line">## touch uwsgi.ini</span><br><span class="line"></span><br><span class="line">[uwsgi]</span><br><span class="line"># django项目监听的socket文件（可以使用端口代替）</span><br><span class="line">socket &#x3D; .&#x2F;calculator.sock</span><br><span class="line"># django项目所在目录</span><br><span class="line">chdir &#x3D; .</span><br><span class="line"># django项目wsgi文件</span><br><span class="line">wsgi-file &#x3D; .&#x2F;calculator&#x2F;wsgi.py</span><br><span class="line"></span><br><span class="line">master &#x3D; true</span><br><span class="line">processes &#x3D; 2</span><br><span class="line">threads &#x3D; 4</span><br><span class="line">vacuum &#x3D; true</span><br><span class="line"></span><br><span class="line"># 通过touch reload可以重启uwsgi服务器</span><br><span class="line">touch-reload &#x3D; .&#x2F;reload</span><br><span class="line"># 日志输出</span><br><span class="line">daemonize &#x3D; calculator.log</span><br></pre></td></tr></table></figure><h3 id="http协议（80端口）"><a href="#http协议（80端口）" class="headerlink" title="http协议（80端口）"></a>http协议（80端口）</h3><ul><li>安装nginx并配置</li></ul><p>Mac下</p><blockquote><p>/usr/local/etc/nginx/nginx.conf （配置文件路径）</p></blockquote><blockquote><p>/usr/local/var/www （服务器默认路径）</p></blockquote><blockquote><p>/usr/local/Cellar/nginx/1.6.2  （貌似是安装路径）</p></blockquote><p>Linux下：</p><blockquote><p>/etc/nginx</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 安装nginx</span><br><span class="line">#sudo apt-get install nginx</span><br><span class="line">#cd &#x2F;etc&#x2F;nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 修改nginx用户</span><br><span class="line">#vim nginx.conf 第一行修改为: user 用户名;</span><br><span class="line"></span><br><span class="line">## 添加80端口的配置文件或者直接在nginx.conf中添加</span><br><span class="line"># sudo touch calculator.conf</span><br><span class="line"># sudo vi calculator.conf</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen         80;</span><br><span class="line">    server_name    服务器ip;</span><br><span class="line">    charset UTF-8;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;calculate &#123;</span><br><span class="line">   &#x2F;&#x2F; replace &quot;path&quot; to the path of your project</span><br><span class="line">        uwsgi_pass unix:&#x2F;&#x2F;&#x2F;&quot;path&quot;&#x2F;calculator&#x2F;calculator.sock;</span><br><span class="line">        include &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx服务器. </li></ul><blockquote><p>mac <code>nginx</code></p><p>linux <code>sudo service nginx restart</code></p></blockquote><blockquote><p>重启：nginx -s reload</p></blockquote><blockquote><p>访问服务器的80端口即可访问calculate接口，如http://服务器ip/calculate?formula=2*2-3</p></blockquote><h3 id="https协议（443端口）下nginx配置"><a href="#https协议（443端口）下nginx配置" class="headerlink" title="https协议（443端口）下nginx配置"></a>https协议（443端口）下nginx配置</h3><ul><li>前提：有自己的域名和ssl证书，将calculator.conf配置文件修改如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen         <span class="number">443</span>;</span><br><span class="line">    server_name    your.domain;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate path/to/your/ssl.pem;</span><br><span class="line">    ssl_certificate_key path/to/your/ssl.key;</span><br><span class="line">    ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    charset UTF<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">    client_max_body_size <span class="number">75</span>M;</span><br><span class="line"></span><br><span class="line">    location ~ ^/calculate &#123;</span><br><span class="line">        uwsgi_pass unix:///path/to/calculator/calculator.sock;</span><br><span class="line">        include /etc/nginx/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx服务器，访问服务器443端口即可访问其接口</li></ul><h3 id="配置微信小程序的服务器信息"><a href="#配置微信小程序的服务器信息" class="headerlink" title="配置微信小程序的服务器信息"></a>配置微信小程序的服务器信息</h3><ul><li>小程序只可以跟指定的域名进行网络通信（需要填写到开发后台管理里面）</li><li>小程序必须使用HTTPS发起网络请求</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat06.jpg" alt="服务器配置"></p><ul><li>若没有，可以在微信开发者工具中选择设置-项目设置-勾选-不校验合法域名，建立本地开发对接Django后台进行操作</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat08.jpg" alt=""></p><h3 id="远端部署测试"><a href="#远端部署测试" class="headerlink" title="远端部署测试"></a>远端部署测试</h3><ul><li><p>使用git远端同步代码</p></li><li><p>管理依赖环境</p></li></ul><blockquote><p>requirements.txt</p><p>pip install -r requirements.txt</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程08 -- 自定义实现列表类</title>
      <link href="/2019/04/13/python%E7%BC%96%E7%A8%8B08%20--%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E7%B1%BB/"/>
      <url>/2019/04/13/python%E7%BC%96%E7%A8%8B08%20--%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇文章主要是通过自己的方法去实现列表以及存在的一些基础方法，比如添加、删除等</p><p>使用语言：python</p><a id="more"></a><h2 id="列表生成"><a href="#列表生成" class="headerlink" title="列表生成"></a>列表生成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span> </span><br><span class="line">    <span class="comment">#采用指针</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v, n)</span>:</span></span><br><span class="line">        self.value = v</span><br><span class="line">        self.next = n</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="comment">#头指针定义为None</span></span><br><span class="line">        self.first_node = Node(<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        self.length = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">            self.append(i)</span><br><span class="line">        self.listxx = args</span><br></pre></td></tr></table></figure><h2 id="实现基础方法"><a href="#实现基础方法" class="headerlink" title="实现基础方法"></a>实现基础方法</h2><ul><li><p>列表添加新元素–append</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        给列表添加一个新的元素</span></span><br><span class="line"><span class="string">        :param v:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#找到最后一个元素</span></span><br><span class="line">        node = self.find_last_node()</span><br><span class="line">        node.next = Node(v, <span class="literal">None</span>)</span><br><span class="line">        self.length += <span class="number">1</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_last_node</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        找到最后一个元素</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.first_node</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> node.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure></li><li><p>获取一个元素下标和值–get</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> index &gt;= self.length:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    node = self.first_node</span><br><span class="line">    <span class="keyword">if</span> counter == index:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">while</span> counter != index:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 找到下一个元素</span></span><br><span class="line">        node = node.next</span><br><span class="line">    <span class="keyword">return</span> node.value</span><br></pre></td></tr></table></figure></li><li><p>删除最后一个元素–pop</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, index=<span class="number">-1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    把列表最后一个元素删除</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.length &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">-1</span>:</span><br><span class="line">        index = self.length - <span class="number">2</span></span><br><span class="line">    n = self.get(index)</span><br><span class="line">    next = n.next  <span class="comment"># 要删除元素的最后一个元素</span></span><br><span class="line">    pre = self.get(index - <span class="number">1</span>)  <span class="comment"># 要删除元素前面一个元素</span></span><br><span class="line">    pre.next = next</span><br><span class="line">    self.length -= <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>实现clear、count、remove</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.first_node.next = <span class="literal">None</span></span><br><span class="line">    self.length = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    node = self.first_node.next</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> node.value == value:</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self,value)</span>:</span></span><br><span class="line">    pre_node = self.first_node</span><br><span class="line">    current_node = pre_node.next</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> current_node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"&#123;&#125; not in &#123;&#125;"</span>.</span><br><span class="line">            format(value,self.__class__.__name__))</span><br><span class="line">        <span class="keyword">if</span> current_node.value == value:</span><br><span class="line">            pre_node.next = current_node.next</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pre_node = pre_node.next</span><br><span class="line">        current_node = current_node.next</span><br></pre></td></tr></table></figure></li><li><p>索引查找 index</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    找出value所在的第一个节点</span></span><br><span class="line"><span class="string">    :param value:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    node = self.first_node.next</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> node.value == value:</span><br><span class="line">                <span class="keyword">return</span> counter</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">                node = node.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"&#123;&#125; is not in list"</span>.format(value))</span><br></pre></td></tr></table></figure></li><li><p>按照下标插入一个值 insert</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, value)</span>:</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    pre_node = self.first_node</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> pre_node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.append(value)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> counter == index:</span><br><span class="line">            next_node = pre_node.next</span><br><span class="line">            new_node = Node(value, <span class="literal">None</span>)</span><br><span class="line">            pre_node.next = new_node</span><br><span class="line">            new_node.next = next_node</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            pre_node = pre_node.next</span><br></pre></td></tr></table></figure></li><li><p>转换为字符串–<code>__str__</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    string = <span class="string">"["</span></span><br><span class="line">    node = self.first_node.next</span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        v = node.value</span><br><span class="line">        string += str(v)</span><br><span class="line">        node = node.next</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            string += <span class="string">", "</span> + str(node.value)</span><br><span class="line">            node = node.next</span><br><span class="line">    string += <span class="string">"]"</span></span><br><span class="line">    <span class="keyword">return</span> string</span><br></pre></td></tr></table></figure></li><li><p>反转列表–reverse</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self)</span>:</span></span><br><span class="line">       counter = <span class="number">0</span></span><br><span class="line">       <span class="keyword">while</span> self.length<span class="number">-2</span> &gt; counter:</span><br><span class="line">           node = self.first_node.next</span><br><span class="line">           <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">               <span class="keyword">return</span></span><br><span class="line">           self.insert(self.length<span class="number">-1</span>-counter,node.value)</span><br><span class="line">           counter += <span class="number">1</span></span><br><span class="line">           self.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>内置函数功能 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># timsort</span></span><br><span class="line"> <span class="comment"># &lt;__main__.MyListV2 object at 0x103aa1bd0&gt;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">global</span> __name__</span><br><span class="line">      string = <span class="string">"&lt;"</span></span><br><span class="line">      string += __name__</span><br><span class="line">      string += <span class="string">".MyList"</span></span><br><span class="line">      string += <span class="string">'  object at &#123;0:x&#125;'</span>.format(id(self))</span><br><span class="line">      string += <span class="string">"&gt;"</span></span><br><span class="line">      <span class="keyword">return</span> string</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> item == <span class="number">-1</span>:</span><br><span class="line">         item = self.length - <span class="number">2</span></span><br><span class="line">     node = self.get(item)</span><br><span class="line">     <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, *args, **kwargs)</span>:</span>  </span><br><span class="line"> <span class="comment"># real signature unknown</span></span><br><span class="line">     <span class="string">""" Delete self[key]. """</span></span><br><span class="line">     self.pop(args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span>  </span><br><span class="line"> <span class="comment">#other表示另一个对象，self表示本次的对象   __gt__(&gt;)  __at__(&lt;)</span></span><br><span class="line">     <span class="keyword">if</span> self.length &gt; other.length:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"></span><br><span class="line">     len1 = len(self)</span><br><span class="line">     len2 = len(other)</span><br><span class="line">     l3 = MyList()</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len1):</span><br><span class="line">         l3.append(self.get(i))</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> range(len2):</span><br><span class="line">         l3.append(other.get(j))</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> l3</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">l1 = MyList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(l1.get(<span class="number">2</span>))</span><br><span class="line">l2 = MyList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(l1+l2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># l.reverse()</span></span><br><span class="line"><span class="comment"># #l1.remove(77)</span></span><br><span class="line"><span class="comment"># # l.insert(10,77)</span></span><br><span class="line"><span class="comment"># # l.clear()</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # l = [9,2,9,4,9,2,7,8,9]</span></span><br><span class="line"><span class="comment"># # print(l.index(9))</span></span><br><span class="line"><span class="comment"># # print(l1.index(9))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # print(l1)</span></span><br><span class="line"><span class="comment"># print(l)</span></span><br><span class="line"><span class="comment"># print(len(l))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class MyListV2(MyList):</span></span><br><span class="line"><span class="comment">#     def sort(self):</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class MyListV3(MyListV2):</span></span><br><span class="line"><span class="comment">#     def reverse(self):</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># l = MyListV2(6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># l.append(9)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> python编程 </tag>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程03 -- 十大排序算法</title>
      <link href="/2019/04/03/python%E7%BC%96%E7%A8%8B03%20--%20%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/04/03/python%E7%BC%96%E7%A8%8B03%20--%20%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文对十大排序算法进行总结和归纳，以及使用装饰器计算程序运行消耗时间，便于在后续使用中查阅和使用</p><a id="more"></a><h2 id="十大排序算法之七"><a href="#十大排序算法之七" class="headerlink" title="十大排序算法之七"></a>十大排序算法之七</h2><h3 id="资料博客"><a href="#资料博客" class="headerlink" title="资料博客"></a>资料博客</h3><p><a href="https://www.jianshu.com/p/47170b1ced23" target="_blank" rel="noopener">十大金典排序</a></p><h3 id="鸡尾酒排序-左右同时进行冒泡排序"><a href="#鸡尾酒排序-左右同时进行冒泡排序" class="headerlink" title="鸡尾酒排序 左右同时进行冒泡排序"></a>鸡尾酒排序 左右同时进行冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cocktaisort</span><span class="params">(list2)</span>:</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = len(list2) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(list2[i] &gt; list2[i + <span class="number">1</span>]):</span><br><span class="line">                temp1 = list2[i+<span class="number">1</span>]</span><br><span class="line">                list2[i+<span class="number">1</span>] = list2[i]          </span><br><span class="line">                <span class="comment">#交换python可以直接使用：list2[i],list2[i+1] = list2[i+1], list2[i]</span></span><br><span class="line">                list2[i] = temp1</span><br><span class="line">        right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(right,left,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span>(list2[i] &lt; list2[i - <span class="number">1</span>]):</span><br><span class="line">                temp1 = list2[i]</span><br><span class="line">                list2[i] = list2[i <span class="number">-1</span>]</span><br><span class="line">                list2[i - <span class="number">1</span>] = temp1</span><br><span class="line">        left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> list2</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote><p>顺序比较  两两比较，依次后移        性能较低</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(list1)</span>:</span></span><br><span class="line">    num = len(list1)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,num,<span class="number">1</span>):</span><br><span class="line">        iswap = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,num - <span class="number">1</span> - i,<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> list1[j + <span class="number">1</span>] &lt; list1[j]:</span><br><span class="line">                temp = list1[j + <span class="number">1</span>]</span><br><span class="line">                list1[j + <span class="number">1</span>] = list1[j]</span><br><span class="line">                list1[j] = temp</span><br><span class="line">                iswap = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> iswap):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span>  list1</span><br></pre></td></tr></table></figure><h3 id="简化冒泡排序"><a href="#简化冒泡排序" class="headerlink" title="简化冒泡排序"></a>简化冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_bubble</span><span class="params">(list1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1)):</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; (len(list1) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list1[j] &gt; list1[j + <span class="number">1</span>]:</span><br><span class="line">                temp = list1[j]</span><br><span class="line">                list1[j] = list1[j+<span class="number">1</span>]</span><br><span class="line">                list1[j+<span class="number">1</span>] = temp</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simpesort</span><span class="params">(list1)</span>:</span></span><br><span class="line">    num = len(list1)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,num):</span><br><span class="line">        min = i                       <span class="comment">#最小值下标</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i,num):         <span class="comment">#i开始后推</span></span><br><span class="line">            <span class="keyword">if</span> list1[j] &lt; list1[min]:   <span class="comment"># 最小值与该值比较，符合则交换下标</span></span><br><span class="line">                min = j</span><br><span class="line">        temp = list1[min]              <span class="comment">#下标对应值交换</span></span><br><span class="line">        list1[min] = list1[i]</span><br><span class="line">        list1[i] = temp</span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><blockquote><p>取出i + 1的元素 与前面排好序的元素从后向前比较，小于等于则将i+1元素插入到该位置（有一定序的时候效率最高）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(list1)</span>:</span></span><br><span class="line">    length = len(list1)</span><br><span class="line">    <span class="keyword">if</span> len(list1) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length,<span class="number">1</span>):</span><br><span class="line">        temp = list1[i]</span><br><span class="line">        preindex = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> preindex &gt;= <span class="number">0</span> <span class="keyword">and</span> temp &lt; list1[preindex]:</span><br><span class="line">            list1[preindex + <span class="number">1</span>] = list1[preindex]</span><br><span class="line">            preindex -= <span class="number">1</span></span><br><span class="line">        list1[preindex + <span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><h3 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h3><blockquote><p>排好序的为一个数组，未排好序的为另一个</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def Binaryinsertsort(list1):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(list1) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(list1)):</span><br><span class="line">        <span class="keyword">left</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">right</span> = i - <span class="number">1</span>   #有序边界</span><br><span class="line">        temp = list1[i]</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt;= righ<span class="variable">t:</span></span><br><span class="line">            mid = <span class="keyword">left</span> + (<span class="keyword">right</span> - <span class="keyword">left</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> list1[mid] &gt; temp:</span><br><span class="line">                <span class="keyword">right</span> = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">left</span> = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(i - <span class="number">1</span>,<span class="keyword">left</span>,-<span class="number">1</span>):</span><br><span class="line">            list1[<span class="keyword">j</span>+<span class="number">1</span>] = list1[<span class="keyword">j</span>]</span><br><span class="line">        list1[<span class="keyword">left</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><blockquote><p>空间换时间，多了一个tmp列表占用内存，但时间减少为n*logn</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">def</span> <span class="string">merge_sort(list1):</span></span><br><span class="line">    <span class="attr">if</span> <span class="string">len(list1) &lt; 2:</span></span><br><span class="line">        <span class="attr">return</span> <span class="string">list1</span></span><br><span class="line">    <span class="attr">else</span>:                               <span class="string"></span></span><br><span class="line"><span class="comment">    #递归函数分解列表</span></span><br><span class="line">        <span class="attr">mid</span> = <span class="string">len(list1) // 2</span></span><br><span class="line">        <span class="attr">list1_left</span> = <span class="string">merge_sort(list1[:mid])</span></span><br><span class="line">        <span class="attr">list1_right</span> = <span class="string">merge_sort(list1[mid:])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attr">tmp</span> = <span class="string">list()                   </span></span><br><span class="line"><span class="comment">        #tmp 为新列表 存放排好序的元素</span></span><br><span class="line">        <span class="attr">i</span> = <span class="string">0</span></span><br><span class="line">        <span class="attr">j</span> = <span class="string">0</span></span><br><span class="line">        <span class="attr">k</span> = <span class="string">0</span></span><br><span class="line">        <span class="attr">while</span> <span class="string">i &lt; len(list1_left) or j &lt; len(list1_right):     </span></span><br><span class="line"><span class="comment">        #循环条件</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">i &lt; len(list1_left) and j &lt; len(list1_right):   </span></span><br><span class="line"><span class="comment">            #两个有序列表相比较，开始为一个元素，直接累积为两个有序列表</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">list1_left[i] &lt; list1_right[j]:             </span></span><br><span class="line"><span class="comment">                #判断两个列表中元素的大小，小的放入tmp列表</span></span><br><span class="line">                    <span class="attr">tmp.append(list1_left[i])</span></span><br><span class="line">                    <span class="meta">i+</span>=<span class="string">1</span></span><br><span class="line">                <span class="attr">else</span>:<span class="string"></span></span><br><span class="line">                    <span class="attr">tmp.append(list1_right[j])</span></span><br><span class="line">                    <span class="attr">j</span> <span class="string">+= 1</span></span><br><span class="line">            <span class="attr">elif</span> <span class="string">i &gt;= len(list1_left):                        </span></span><br><span class="line"><span class="comment">            #分别判断是否超出左右列表最大下标，则只需要把左右列表合并到tmp里 反之一样</span></span><br><span class="line">                <span class="attr">tmp.append(list1_right[j])</span></span><br><span class="line">                <span class="attr">j</span> <span class="string">+= 1</span></span><br><span class="line">            <span class="attr">else</span>:<span class="string"></span></span><br><span class="line">                <span class="attr">tmp.append(list1_left[i])</span></span><br><span class="line">                <span class="attr">i</span> <span class="string">+= 1</span></span><br><span class="line">        <span class="attr">return</span> <span class="string">tmp</span></span><br></pre></td></tr></table></figure><h2 id="调用所有排序"><a href="#调用所有排序" class="headerlink" title="调用所有排序"></a>调用所有排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_sort</span><span class="params">(sort_name)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    list1 = list()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        list1.append(random.randint(<span class="number">0</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"使用%s排序结是%s"</span>%(sort_name.__name__,sort_name(list1)))</span><br><span class="line"></span><br><span class="line">list2 = [cocktaisort,sort,sort_bubble,simpesort,Binaryinsertsort,merge_sort]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xx <span class="keyword">in</span> list2:</span><br><span class="line">    random_sort(xx)</span><br></pre></td></tr></table></figure><h2 id="使用装饰器计算程序运行时间"><a href="#使用装饰器计算程序运行时间" class="headerlink" title="使用装饰器计算程序运行时间"></a>使用装饰器计算程序运行时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(fun)</span>:</span>             <span class="comment">#装饰器：计算运行时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">res</span><span class="params">(*args,**kwarges)</span>:</span></span><br><span class="line">        print(<span class="string">'--------%s 算法-------------'</span> % (fun.__name__))</span><br><span class="line">        start = time.perf_counter()</span><br><span class="line">        a = fun(*args,**kwarges)</span><br><span class="line">        print(<span class="string">'消耗的时间为 %s'</span> %(time.perf_counter() - start))</span><br><span class="line">        print(<span class="string">'******************'</span>)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">在需要计算时间的函数前加上 @dec 即可（详见test19.py）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
            <tag> python编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程01--基础知识总结</title>
      <link href="/2019/03/06/Java%E7%BC%96%E7%A8%8B01--%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/06/Java%E7%BC%96%E7%A8%8B01--%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java能做什么</p><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服 务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><p>更新：每日更新学习动态及学习内容，总结今日内容，做到勉励自己的作用</p><a id="more"></a><h2 id="计算机基础知识（查看python基础）"><a href="#计算机基础知识（查看python基础）" class="headerlink" title="计算机基础知识（查看python基础）"></a>计算机基础知识（查看python基础）</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><blockquote><p>计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含 0、1两个数，逢二进一，1+1=10。每一个0或者每一个1，叫做一个bit(比特)。</p></blockquote><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><blockquote><p>字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性， 我们可以查看文件的字节大小。</p><p>8个bit(二进制位) 0000-0000表示为1个字节，写成1 byte或者1 B。</p></blockquote><h2 id="Java语言开发环境搭建"><a href="#Java语言开发环境搭建" class="headerlink" title="Java语言开发环境搭建"></a>Java语言开发环境搭建</h2><h3 id="Java虚拟机—JVM"><a href="#Java虚拟机—JVM" class="headerlink" title="Java虚拟机—JVM"></a>Java虚拟机—JVM</h3><ul><li><p>JVM(Java Virtual Machine ):Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在 JVM 之上。</p></li><li><p>跨平台:任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系 统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM 运行在操作系统上。<br>  <img src="" alt="JVM"></p></li><li><p>如图所示，Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p></li></ul><h3 id="JRE-和-JDK"><a href="#JRE-和-JDK" class="headerlink" title="JRE 和 JDK"></a>JRE 和 JDK</h3><ul><li><p>JRE (Java Runtime Environment) :是Java程序的运行时环境，包含 JVM 和运行时所需要的 核心类库 。 JDK (Java Development Kit):是Java程序开发工具包，包含 JRE 和开发人员使用的工具。</p></li><li><p>我们想要运行一个已有的Java程序，那么只需安装 JRE 即可。 我们想要开发一个全新的Java程序，那么必须安装 JDK 。</p></li><li><p>三者关系: JDK &gt; JRE &gt; JVM</p><p>  <img src="" alt="关系图"></p></li></ul><h3 id="JAVA-HOME环境配置"><a href="#JAVA-HOME环境配置" class="headerlink" title="JAVA_HOME环境配置"></a>JAVA_HOME环境配置</h3><ul><li>请面向百度查询</li></ul><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="程序开发步骤说明"><a href="#程序开发步骤说明" class="headerlink" title="程序开发步骤说明"></a>程序开发步骤说明</h3><ul><li>开发环境已经搭建完毕，可以开发我们第一个Java程序了。 </li><li>Java程序开发三步骤:编写、编译、运行。<br>  <img src="" alt="步骤"></li></ul><h3 id="编写Java源程序"><a href="#编写Java源程序" class="headerlink" title="编写Java源程序"></a>编写Java源程序</h3><ul><li><p>在 d:\day01 目录下新建文本文件，完整的文件名修改为 HelloWorld.java ，其中文件名为 HelloWorld ，后 缀名必须为 .java 。</p></li><li><p>用记事本打开 使用notepad++记事本软件。</p></li><li><p>在文件中键入文本并保存，代码如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件名必须是 HelloWorld ，保证文件名和类的名字是一致的，注意大小写。</p><p>每个字母和符号必须与示例代码一模一样。</p></blockquote><p>  第一个 HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我 们必须将编写好的 Java源文件 编译成JVM可以看懂的 字节码文件 。</p></li></ul><h3 id="编译Java源文件"><a href="#编译Java源文件" class="headerlink" title="编译Java源文件"></a>编译Java源文件</h3><ul><li><p>在DOS命令行中，进入Java源文件的目录，使用 javac 命令进行编译。</p><blockquote><p>命令:</p></blockquote><pre><code>javac Java源文件名.后缀名 </code></pre><blockquote><p>举例:</p></blockquote><pre><code>javac HelloWorld.java</code></pre><blockquote><p>编译成功后，命令行没有任何提示。打开 d:\day01 目录，发现产生了一个新的文件 HelloWorld.class ，该文件 就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。</p></blockquote></li><li><p>Java源文件的编译工具 javac.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目 录下使用。</p></li><li><p>运行Java程序 在DOS命令行中，进入Java源文件的目录，使用 java 命令进行运行。</p><blockquote><p>命令:</p></blockquote><pre><code>java 类名字 </code></pre><blockquote><p>举例:</p></blockquote><p>  java HelloWorld</p><blockquote><p>java HelloWord 不要写 不要写 不要写 .class</p></blockquote></li><li><p>Java程序 .class文件 的运行工具 java.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可 以再任意目录下使用。</p></li></ul><h3 id="入门程序说明"><a href="#入门程序说明" class="headerlink" title="入门程序说明"></a>入门程序说明</h3><ul><li><p>编译和运行是两回事</p><blockquote><p>编译:是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们 所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</p></blockquote><blockquote><p>运行:是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p></blockquote></li><li><p>关于main方法 </p><blockquote><p>main方法:称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。 3.6 添加注释comment</p></blockquote><blockquote><p>注释:就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须 要的，它不影响程序的编译和运行。</p></blockquote><blockquote><blockquote><p>Java中有单行注释和多行注释 单行注释以 //开头 换行结束</p></blockquote></blockquote><blockquote><blockquote><p>多行注释以 <code>/*</code>开头 以<code>*/</code>结束 3.7 关键字keywords</p></blockquote></blockquote></li><li><p>关键字:是指在程序中，Java已经定义好的单词，具有特殊含义。</p><blockquote><p>HelloWorld案例中，出现的关键字有 public 、 class 、 static 、 void 等，这些单词已经被 Java定义好，全部都是小写字母，notepad++中颜色特殊。</p></blockquote></li><li><p>标识符</p><blockquote><p>标识符:是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。 HelloWorld案例中，出现的标识符有类名字 HelloWorld 。</p></blockquote></li><li><p><strong>命名规则: 硬性要求</strong></p><blockquote><p>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $(美元符号) 和 _(下划线) 。 </p><p>标识符不能以数字开头。</p></blockquote><blockquote><p>标识符不能是关键字。</p></blockquote></li><li><p>命名规范: 软性建议</p><blockquote><p>类名规范:首字母大写，后面每个单词首字母大写(大驼峰式)。 </p></blockquote><blockquote><p>方法名规范: 首字母小写，后面每个单词首字母大写(小驼峰式)。 </p></blockquote><blockquote><p>变量名规范:全部小写。</p></blockquote></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量:是指在Java程序中固定不变的数据。 </p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">整数常量</td><td align="center">所有的整数</td></tr><tr><td align="center">小数常量</td><td align="center">所有的小数</td></tr><tr><td align="center">字符常量</td><td align="center">单引号引起来,只能写一个字符,必须有内容</td></tr><tr><td align="center">字符串常量</td><td align="center">双引号引起来,可以写多个字符,也可以不写</td></tr><tr><td align="center">布尔常量</td><td align="center">只有两个值(流程控制中讲解)</td></tr><tr><td align="center">空常量</td><td align="center">只有一个值(引用数据类型中讲解)</td></tr></tbody></table><ul><li><p>需求:输出各种类型的常量。</p><p>  ```java<br>  public class ConstantDemo {</p><pre><code>public static void main(String[] args){    //输出整数常量     System.out.println(123);     //输出小数常量     System.out.println(0.125);     //输出字符常量     System.out.println(&apos;A&apos;);     //输出布尔常量     System.out.println(true);     //输出字符串常量     System.out.println(&quot;你好Java&quot;);    }</code></pre><p>  }</p>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 变量和数据类型</span><br><span class="line"></span><br><span class="line">### 变量概述</span><br><span class="line"></span><br><span class="line">* 变量:常量是固定不变的数据，那么在程序中可以变化的量称为变量。</span><br><span class="line">&gt;数学中，可以使用字母代替数字运算,例如 x=<span class="number">1</span>+<span class="number">5</span> 或者 <span class="number">6</span>=x+<span class="number">5</span>。 程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存<span class="number">5</span>，x也可</span><br><span class="line">以保存<span class="number">6</span>，这样x保存的数据是可以改变的，也就是我们所讲解的变量。 Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</span><br><span class="line"></span><br><span class="line">* 数据类型</span><br><span class="line"></span><br><span class="line">&gt;数据类型分类 Java的数据类型分为两大类:</span><br><span class="line">&gt;&gt;基本数据类型:包括 整数、浮点数、字符、布尔。 </span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;引用数据类型:包括 类 、 数组 、 接口 。</span><br><span class="line">   </span><br><span class="line">* 基本数据类型 四类八种基本数据类型:</span><br><span class="line"></span><br><span class="line">|数据类型 |关键字| 内存占用 |取值范围</span><br><span class="line">|:-:|:-:|:-:|:-:|</span><br><span class="line">|字节型| byte|<span class="number">1</span>个字节 |<span class="number">-128</span>~<span class="number">127</span></span><br><span class="line">|短整型 |short|<span class="number">2</span>个字节 |<span class="number">-32768</span>~<span class="number">32767</span></span><br><span class="line">|整型 |<span class="built_in">int</span>(默认) |<span class="number">4</span>个字节 |<span class="number">-231</span>次方~<span class="number">2</span>的<span class="number">31</span>次方<span class="number">-1</span> </span><br><span class="line">|长整型 |long |<span class="number">8</span>个字节 |<span class="number">-2</span>的<span class="number">63</span>次方~<span class="number">2</span>的<span class="number">63</span>次方<span class="number">-1</span> </span><br><span class="line">|单精度浮点数 |<span class="built_in">float</span> |<span class="number">4</span>个字节 |<span class="number">1.4013E-45</span>~<span class="number">3.4028E+38</span> </span><br><span class="line">|双精度浮点数 |<span class="built_in">double</span>(默认) |<span class="number">8</span>个字节 |<span class="number">4.9E-324</span>~<span class="number">1.7977E+308</span> </span><br><span class="line">|字符型 |char|<span class="number">2</span>个字节 |<span class="number">0</span><span class="number">-65535</span></span><br><span class="line">|布尔类型 |<span class="built_in">bool</span>ean|<span class="number">1</span>个字节 |<span class="literal">true</span>，<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            &gt;Java中的默认类型:整数类型是 <span class="built_in">int</span> 、浮点类型是 <span class="built_in">double</span> 。 <span class="number">5.3</span> 变量的定义</span><br><span class="line">  </span><br><span class="line">### 变量定义</span><br><span class="line"></span><br><span class="line">* 变量定义的格式包括三个要素: 数据类型 、 变量名 、 数据值 。 </span><br><span class="line">* 格式</span><br><span class="line"></span><br><span class="line">数据类型 变量名 = 数据值; 练习</span><br><span class="line"></span><br><span class="line">* 定义所有基本数据类型的变量，代码如下:</span><br><span class="line"></span><br><span class="line">```java<span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Variable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line"><span class="comment">//定义字节型变量</span></span><br><span class="line">byte b = <span class="number">100</span>; System.<span class="keyword">out</span>.println(b); </span><br><span class="line"><span class="comment">//定义短整型变量</span></span><br><span class="line">short s = <span class="number">1000</span>; System.<span class="keyword">out</span>.println(s); </span><br><span class="line"><span class="comment">//定义整型变量</span></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">123456</span>; System.<span class="keyword">out</span>.println(i); </span><br><span class="line"><span class="comment">//定义长整型变量</span></span><br><span class="line">long l = <span class="number">12345678900</span>L; System.<span class="keyword">out</span>.println(l); </span><br><span class="line"><span class="comment">//定义单精度浮点型变量 </span></span><br><span class="line"><span class="built_in">float</span> f = <span class="number">5.5</span>F; System.<span class="keyword">out</span>.println(f);</span><br><span class="line"> <span class="comment">//定义双精度浮点型变量 </span></span><br><span class="line"> <span class="built_in">double</span> d = <span class="number">8.5</span>; System.<span class="keyword">out</span>.println(d); </span><br><span class="line"> <span class="comment">//定义布尔型变量</span></span><br><span class="line"><span class="built_in">bool</span>ean <span class="built_in">bool</span> = <span class="literal">false</span>; System.<span class="keyword">out</span>.println(<span class="built_in">bool</span>); </span><br><span class="line"><span class="comment">//定义字符型变量</span></span><br><span class="line">char c = <span class="string">'A'</span>; System.<span class="keyword">out</span>.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>long类型:建议数据后加L表示。</p></li><li><p>float类型:建议数据后加F表示。</p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>变量名称:在同一个大括号范围内，变量的名字不可以相同。 </p><p>变量赋值:定义的变量，不赋值不能使用。</p></blockquote><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</p><h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><ul><li><p>一个 int 类型变量和一个 byte 类型变量进行加法运算， 结果会是什么数据类型?</p><blockquote><p>运算结果，变量的类型将是 int 类型，这就是出现了数据类型的自动类型转换现象。<br>自动转换:将 取值范围小的类型 自动提升为 取值范围大的类型 。</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//bytex=b+i;</span></span><br><span class="line"><span class="comment">// 报错 //int类型和byte类型运算，</span></span><br><span class="line">结果是<span class="keyword">int</span>类型 <span class="keyword">int</span> j = b + i; </span><br><span class="line">System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>byte 类型内存占有1个字节，在和 int 类型运算时会提升为 int 类型 ，自动补充3个字节，因此计算后的结果还是 int 类 型。</p></blockquote><blockquote><p>同样道理，当一个 int 类型变量和一个 double 变量运算时， int 类型将会自动提升为 double 类型进行运算。</p></blockquote></li><li><p>转换规则</p><blockquote><p>范围小的类型向范围大的类型提升， byte、short、char 运算时直接提升为 int 。</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">2.5</span>; </span><br><span class="line"><span class="comment">//int类型和double类型运算，结果是double类型 </span></span><br><span class="line"><span class="comment">//int类型会提升为double类型</span></span><br><span class="line"><span class="keyword">double</span> e = d+i;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>byte、short、char‐‐&gt;int‐‐&gt;long‐‐&gt;float‐‐&gt;double</p></blockquote></li></ul><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><ul><li><p>强制转换</p><blockquote><p>将 1.5 赋值到 int 类型变量会发生什么?产生编译失败，肯定无法赋值。</p></blockquote><pre><code>inti=1.5;// 错误</code></pre><blockquote><p>double 类型内存8个字节， int 类型内存4个字节。 1.5 是 double 类型，取值范围大于 int 。可以理解为 double 是8升的水壶， int 是4升的水壶，不能把大水壶中的水直接放进小水壶去。 想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值。</p></blockquote></li><li><p>强制类型转换:将 取值范围大的类型 强制转换成 取值范围小的类型 。 </p><blockquote><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。 </p></blockquote></li><li><p>转换格式:</p><pre><code>数据类型 变量名 = (数据类型)被转数据值; </code></pre></li><li><p>将 1.5 赋值到 int 类型，代码修改为:</p><pre><code>// double类型数据强制转成int类型，直接去掉小数点。 int i = (int)1.5;</code></pre><blockquote><p>同样道理，当一个 short 类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给short类型变量，就需要强制转换。</p></blockquote>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">//short类型变量，内存中2个字节</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现编译失败 s和1做运算的时候，1是int类型，s会被提升为int类型 s+1后的结果</span></span><br><span class="line"><span class="comment">是int类型，将结果在赋值会short类型时发生错误 short内存2个字节，int类型4个</span></span><br><span class="line"><span class="comment">字节 必须将int强制转成short才能完成赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = s + <span class="number">1</span>;<span class="comment">//编译失败</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s+<span class="number">1</span>);<span class="comment">//编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>强烈注意 </p><blockquote><p>浮点转成整数，直接取消小数点，可能造成数据损失精度。</p><p>int 强制转成 short 砍掉2个字节，可能造成数据丢失。</p></blockquote></li><li><p>ASCII编码表</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><ul><li><p>算数运算符包括:</p><blockquote><p><code>+</code> 加法运算，字符串连接运算 </p></blockquote><blockquote><p><code>-</code> 减法运算</p><p><code>*</code> 乘法运算</p><p><code>/</code> 除法运算</p></blockquote><blockquote><p><code>%</code> 取模运算，两个数字相除取余数 </p></blockquote><blockquote><p><code>++ 、 --</code> 自增自减运算</p></blockquote><p>  java中，整数使用以上运算符，无论怎么计算，也不会得到小数。</p></li></ul><ul><li><p><code>++</code> 运算，变量自己增长1。反之， <code>--</code> 运算，变量自己减少1，用法与 ++ 一致。 </p><blockquote><p>独立运算:</p></blockquote><blockquote><blockquote><p>变量在独立运算时， 前++ 和 后++ 没有区别 。 </p><p>变量前++ :例如++i。</p></blockquote></blockquote><blockquote><blockquote><p>变量后++ :例如i++。</p></blockquote></blockquote><blockquote><p>混合运算:</p></blockquote><blockquote><blockquote><p>和其他变量放在一起， 前++ 和 后++ 就产生了不同。</p><p>变量 前++ :变量a自己加1，将加1后的结果赋值给b，也就是说a先计算。a和b的结果都是2。</p></blockquote></blockquote><blockquote><blockquote><p>变量 后++ :变量a先把自己的值1，赋值给变量b，此时变量b的值就是1，变量a自己再加1。a的结果是2，b 的结果是1。</p></blockquote></blockquote><blockquote><p><code>+</code> 符号在字符串中的操作:</p><blockquote><p><code>+</code> 符号在遇到字符串的时候，表示连接、拼接的含义。</p><p>“a”+”b”的结果是“ab”，连接含义</p></blockquote></blockquote></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>赋值运算符包括:</p><blockquote><p><code>=</code> 等于号 </p><p><code>+=</code> 加等于</p><p><code>-=</code> 减等于 </p></blockquote><blockquote><p><code>*=</code> 乘等于</p><p><code>/=</code> 除等于 </p></blockquote><blockquote><p><code>%=</code> 取模等</p></blockquote><p>  赋值运算符，就是将符号右边的值，赋给左边的变量。</p></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li><p>比较运算符包括:</p><blockquote><p><code>==</code> 比较符号两边数据是否相等，相等结果是true。</p></blockquote><blockquote><p><code>&lt;</code> 比较符号左边的数据是否小于右边的数据，如果小于结果是true。</p></blockquote><blockquote><p><code>&gt;</code> 比较符号左边的数据是否大于右边的数据，如果大于结果是true。</p></blockquote><blockquote><p><code>&lt;=</code> 比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。 </p></blockquote><blockquote><p><code>&gt;=</code> 比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。 </p></blockquote><blockquote><p><code>!=</code> 不等于符号 ，如果符号两边的数据不相等，结果是true。</p></blockquote><p>  比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值 true 或者 false 。</p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>逻辑运算符包括：</p><blockquote><p><code>&amp;&amp;</code> </p><blockquote><ol><li><p>两边都是true，结果是true</p></li><li><p>一边是false，结果是false 短路特点:符号左边是false，右边不再运算</p></li></ol></blockquote><p><code>||</code></p><blockquote><ol><li>两边都是false，结果是false || 短路或 </li></ol><p>2.一边是true，结果是true</p><p>短路特点: 符号左边是true，右边不再运算</p></blockquote><p><code>!</code>   </p><blockquote><ol><li><p>! true 结果是false </p></li><li><p>! false结果是true</p></li></ol></blockquote></blockquote><p> 逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值 true 或者 false</p></li></ul><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li>三元运算符格式:</li></ul><p><code>数据类型 变量名 = 布尔类型表达式?结果1:结果2</code> </p><ul><li><p>三元运算符计算方式:</p><blockquote><p>布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。 </p></blockquote><blockquote><p>布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。</p></blockquote></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且 重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。</p><ul><li>方法:就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。 当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</li></ul><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li><p>定义格式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表)&#123; </span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义格式解释:</p><p>修饰符: 目前固定写法 public static 。</p><p>返回值类型: 目前固定写法 void 。 </p></blockquote><blockquote><p>方法名:为我们定义的方法起名，满足标识符的规范，用来调用方法。 </p><p>参数列表: 目前无参数， 带有参数的方法在后面。 </p></blockquote><blockquote><p>return:方法结束。因为返回值类型是void，方法大括号内的return可以不写。</p></blockquote></li></ul><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><ul><li><p>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名字就可以调用了。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//调用定义的方法method</span></span><br><span class="line">method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，被main方法调用 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自己定义的方法，需要被main调用运行"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三元运算调用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//调用定义的方法operator</span></span><br><span class="line">operator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，方法中定义三元运算符 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span>:<span class="number">200</span>); </span><br><span class="line">System.out.println(i); <span class="keyword">int</span> j = <span class="number">0</span> ;</span><br><span class="line">j = (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span>:<span class="number">600</span>); </span><br><span class="line">System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法定义注意事项:</p><blockquote><p>方法必须定义在一类中方法外 </p><p>方法不能定义在另一个方法的里面</p></blockquote></li><li><p>常量和变量的运算</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line"><span class="keyword">byte</span> b1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b2=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> b3=<span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> b4=b1 + b2; </span><br><span class="line">System.out.println(b3); </span><br><span class="line">System.out.println(b4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析: b3 = 1 + 2 ， 1 和 2 是常量，为固定不变的数据，在编译的时候(编译器javac)，已经确定了 1+2 的结果并没 有超过byte类型的取值范围，可以赋值给变量 b3 ，因此 b3=1 + 2 是正确的。</p></blockquote><blockquote><p>反之， b4 = b2 + b3 ， b2 和 b3 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定b2+b3的结果是什 么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析02--spark运用</title>
      <link href="/2019/03/06/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9002--spark%E8%BF%90%E7%94%A8/"/>
      <url>/2019/03/06/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9002--spark%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://spark.apache.org/docs/2.4.4/" target="_blank" rel="noopener">官方文档</a></p><h3 id="什么是spark"><a href="#什么是spark" class="headerlink" title="什么是spark"></a>什么是spark</h3><blockquote><p>Spark 是一个用来实现快速而通用的集群计算的平台。优点：</p></blockquote><ul><li>极快的处理速度。spark是基于内存的计算框架，因此不需要对磁盘进行多次的读写。</li><li>适用于各种各样原先需要多种不同的分布式平台的场景，包括批处理、迭代算法、交互式查询、流处理。</li><li>拥有丰富的编程接口。支持python, java, scalar等语言。</li></ul><a id="more"></a><h2 id="spark结构图"><a href="#spark结构图" class="headerlink" title="spark结构图"></a>spark结构图</h2><pre> +-----------+     +----------+  +----------+  +----------+ |           |     |          |  |          |  |          |   | spark SQL |     |  spark   |  |  MLIB    |  | GragH X  | |           |     | streaming|  |          |  |          | +-----------+     +----------+  +----------+  +----------+ +--------------------------------------------------------+ |                                                        | |            SPARK                  CORE                 | |                                                        | +--------------------------------------------------------+ +-----------+     +--------------------+  +----------+ |           |     |                    |  |          | | 独立调度器  |     |       YARN         |  |  MESOS   | |           |     |                    |  |          | +-----------+     +--------------------+  +----------+  </pre><p>1) spark core: 定义了rdd的接口，实现spark的基本功能例如：任务调度，内存管理，错误恢复，与存储系统交互等模块。<br>2) spark sql: 用于操作结构化数据的程序包。<br>3) spark streaming: 提供对实时数据流式计算的组件。<br>4) spark MLIB: 提供用于一组机器学习的库。<br>5) spark GraphX: 用于操作图的程序库。<br>6) 群集管理器：用于让spark高效的在数千计的节点之间伸缩计算。</p><h2 id="spark的用途"><a href="#spark的用途" class="headerlink" title="spark的用途"></a>spark的用途</h2><ul><li>数据科学任务（对科学家）</li><li>数据处理应用（对工程师）</li></ul><h1 id="spark安装与运行"><a href="#spark安装与运行" class="headerlink" title="spark安装与运行"></a>spark安装与运行</h1><h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li><p>配置JAVA</p><pre>  #vim ~/.bash_profile or ~/.bashrc     export JAVA_HOME=INSTALLATION_PATH     export PATH=$PATH:$JAVA_HOME/bin     #可选  #. ~/.bash_profile or ~/.bashrc</pre><ul><li>配置spark<pre> #vim ~/.bash_profile or ~/.bashrc   export SPARK_HOME=SPARK_INSTALLATION_PATH   export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin     #可选 #. ~/.bash_profile or ~/.bashrc</pre></li><li>测试配置是否成功<pre>  # PYSPARK_PYTHON=python3 pyspark</pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2></li></ul></li><li><p>启动master</p><pre>#start-master.sh -h IP -p PORT</pre></li><li><p>启动slave</p><pre>#start-slave.sh spark://IP:PORT</pre></li></ul><h2 id="打开shell"><a href="#打开shell" class="headerlink" title="打开shell"></a>打开shell</h2>  <pre> #pyspark --master spark://HOST:PORT or PYSPARK_DRIVER_PYTHON=ipython SPARK_DIST_CLASSPATH=$(hadoop classpath) pyspark --master spark://localhost:7077 </pre><h2 id="提交独立应用"><a href="#提交独立应用" class="headerlink" title="提交独立应用"></a>提交独立应用</h2><p>#spark-submit test.py</p><h1 id="spark核心概念"><a href="#spark核心概念" class="headerlink" title="spark核心概念"></a>spark核心概念</h1><p> spark程序由一个驱动器（driver）与多个执行器（executor）组成。</p><ul><li>驱动器：包含了应用的main函数，并且定义了集群上的分布式数据集与对这些数据的相关操作。</li><li>执行器：用于执行操作的执行对象。</li></ul><h1 id="spark编程"><a href="#spark编程" class="headerlink" title="spark编程"></a>spark编程</h1><p>每一spark应用都应该包含一个sparkcontext对象。初始化过程如下：<br>from pyspark import SparkConf, SparkContext<br>conf = SparkConf().setMaster(“localhost:7077”).setAppName(“my app”)<br>sc = SparkContext(conf)</p><p>sc.stop()</p><h1 id="RDD编程"><a href="#RDD编程" class="headerlink" title="RDD编程"></a>RDD编程</h1><p>RDD称为分布式弹性数据集，在spark中对数据的操作不外乎就是创建rdd，转化rdd与调用rdd等。</p><h2 id="RDD基础"><a href="#RDD基础" class="headerlink" title="RDD基础"></a>RDD基础</h2><p>rdd就是spark中不可变的分布式对象集合，每个rdd都被分为多个分区，这些分区运行在集群中的不同节点上。</p><h3 id="rdd的创建"><a href="#rdd的创建" class="headerlink" title="rdd的创建"></a>rdd的创建</h3><ul><li>读取外部数据集。<pre>    rdd = sc.textFile("file:///test.txt")</pre></li><li>在驱动器程序里分发驱动器程序的对象集合。<pre>    rdd = sc.parallelize((1,2,3,4,5,6,7,8,9))<pre></li></ul><h3 id="rdd的操作"><a href="#rdd的操作" class="headerlink" title="rdd的操作"></a>rdd的操作</h3><ul><li><p>转化（transform)。生成新的rdd,转化操作为惰性操作，每一次转化不会真的发生除非被“行动操作”进行触发</p><pre>filter,返回一个由通过传给filter的函数的元素组成的RDDmap，将函数用于RDD中的每个元素并返回新的RDD。flatMap，将函数用于RDD中的每个元素并将返回的迭代器中的元素生成新的RDDdistinct，去重union，生成一个包含两个RDD中所有元素的RDDintersection，求两个RDD共同的元素的RDDsubtract，移除一个RDD中的内容cartesian，求与另一个RDD的笛卡尔乘积</pre></li><li><p>PairRDD转化操作</p><pre>reduceByKey(func),合并相同键的值。groupByKey()，对具有相同键的值进行分组。combineByKey()，使用不同的返回类型合并具有相同的键。mapValues(func)，对Pair RDD中的每个值应用一个函数而不改变键值。flatMapValues(func)keys()，返回一个包含键的RDD。values()，返回一个包含值的RDD。sortByKey()，返回一个根据键排序的RDD。subtractByKey(),删除掉RDD中与其它RDD中键相同的元素。join，对两个RDD进行内连接。</pre></li><li><p>行动 (action)。执行转化操作并收集结果。</p><pre>reduce,并行整合RDD中所有数据aggregate，与reduce类似，但是通常返回不同类型的函数collect,返回RDD中所有的元素take，从RDD中返回num个元素first，返回第一个元素count，求元素个数top，从RDD中返回最前面num个元素foreach，对RDD中的每个元素使用给定的函数</pre><h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><p>当数据集以键值的形式组织的时候，聚合具有相同键的元素进行一些统计是很常见的操作。下面几个方法用于常见的聚合：</p><pre>foldcombinereducereduceByKeyfoldByKey</pre></li></ul><h1 id="数据的读取与保存"><a href="#数据的读取与保存" class="headerlink" title="数据的读取与保存"></a>数据的读取与保存</h1><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><table><thead><tr><th>格式名称</th><th>结构化</th><th>备注</th></tr></thead><tbody><tr><td>文本文件</td><td>否</td><td>文本文件的每一行作为记录</td></tr><tr><td>json</td><td>半结构化数据</td><td>要求每行一条记录</td></tr><tr><td>csv</td><td>是</td><td>文本格式，在电子表格中使用</td></tr><tr><td>sequence file</td><td>是</td><td>一种hadoop中常见的文件格式</td></tr><tr><td>protocol buffer</td><td>是</td><td>快速，节约空间的语言格式</td></tr><tr><td>对象文件</td><td>是</td><td>用来将spark作业中的数据存储下来以让共享</br>的代码读取</td></tr></tbody></table><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><pre>input = sc.textFile("file:///myfile.txt") #读取本地文件hdfs_file = sc.textFile("hdfs://192.168.34.45:9099/myfile.txt") #读取hdfs文本文件。input = sc.wholeTextFiles("file:///20190101.logs") #返回一个pair RDD，键为文件名，值为文本见类容。</pre><p><b style="color:red">注意:</b> 当传递的路径为一个文件夹路径时，则会读出所有的文件。</p><h3 id="保存文本文件"><a href="#保存文本文件" class="headerlink" title="保存文本文件"></a>保存文本文件</h3><pre>result.saveAsTextFile(outputFile)</pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h3><pre>import jsondata = input.map(lambda x: json.loads(x))</pre><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><pre>result.map(lambda x: json.dumps(x)).saveAsTextFile(output)</pre><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><h3 id="读取-2"><a href="#读取-2" class="headerlink" title="读取"></a>读取</h3><pre>def map_to_csv(line):    input = StringIO.StringIO(line)         reader = csv.DictReader(input,             fieldnames= ["姓名", "年龄"])         return reader.next()rdd = sc.textFile("file:///users.txt).map(map_to_csv)</pre><h3 id="保存-1"><a href="#保存-1" class="headerlink" title="保存"></a>保存</h3><pre>import csvimport StringIOdef map_records_to_csv(records):    output = StringIO()    csv_writer = csv.DictWriter(output, fieldnames=("姓名", "年龄"))    for r in records:        csv_writer.write_row(r)    return [output.getValues()]rdd.map(map_records_to_csv).saveAsTextFile(output_path)</pre><h1 id="Spark-SQL结构化数据"><a href="#Spark-SQL结构化数据" class="headerlink" title="Spark SQL结构化数据"></a>Spark SQL结构化数据</h1><p>在各种情况下，我们把一条 SQL 查询给 Spark SQL，让它对一个数据源执行查询（选出一些字段或者对字段使用一些函数），然后得到由 Row 对象组成的 RDD，每个 Row 对象表示一条记录。在 Python 中，可以使用 row[column_number] 以及 row.column_name 来访问元素。</p><h2 id="JSON-1"><a href="#JSON-1" class="headerlink" title="JSON"></a>JSON</h2><pre>from pyspark.sql.dataframe import DataFramesf = SparkConf().setMaster("spark://192.168.0.104:7077").setAppName("WordCount")hiveCtx = SparkSession.builder.config(conf=sf).getOrCreate()hiveCtx.sparkContext.setLogLevel("WARN")json_file = hiveCtx.read.json("file:///media/psf/Home/Workspace/Rimi/P1901/lessons/spark/users.json")# json_file = hiveCtx.createDataFrame([{"name":"john", "age":34}, {"name":"bob", "age": 45}])df = json_file.select(["name", "age"])df.show()</pre><h3 id="使用sql查询表"><a href="#使用sql查询表" class="headerlink" title="使用sql查询表"></a>使用sql查询表</h3><p>json_file.createOrReplaceTempView(“user”) # 将读出的结构化数据创建一张临时表<br>users = hiveCtx.sql(“select name, age from user”) # 执行sql语句<br>users.show()</p><h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><p>users.write.save(“file:///users.json”, format=”json”)</p><h2 id="CSV-1"><a href="#CSV-1" class="headerlink" title="CSV"></a>CSV</h2><pre>from pyspark.sql.dataframe import DataFramesf = SparkConf().setMaster("spark://192.168.0.104:7077").setAppName("WordCount")hiveCtx = SparkSession.builder.config(conf=sf).getOrCreate()hiveCtx.sparkContext.setLogLevel("WARN")csv_file = hiveCtx.read.csv("file:///media/psf/Home/Workspace/Rimi/P1901/lessons/spark/users.csv", sep=",", header=True)df = csv_file.select(["name", "age"])df.show()</pre><h3 id="保存文件-1"><a href="#保存文件-1" class="headerlink" title="保存文件"></a>保存文件</h3><p>users.write.save(“file:///users.csv”, format=”csv”)</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><pre>table = hiveCtx.read.jdbc("jdbc:mysql://localhost/roc", "django_migrations",                           properties={ 'user' : 'root', 'password' : '123456' })table.show()</pre><h3 id="保存到数据库"><a href="#保存到数据库" class="headerlink" title="保存到数据库"></a>保存到数据库</h3><pre>data.write.save(format="jdbc", url="jdbc:mysql://localhost/ggchat", dbtable="test2", user="root", password="123456")</pre><h2 id="用户自定义函数（UDF）"><a href="#用户自定义函数（UDF）" class="headerlink" title="用户自定义函数（UDF）"></a>用户自定义函数（UDF）</h2><p>用户自定义函数，也叫 UDF，可以让我们使用 Python/Java/Scala 注册自定义函数，并在 SQL 中调用。这种方法很常用，通常用来给机构内的</p><ul><li>9-36：Python 版本耳朵字符串长度 UDF</li></ul><pre>hiveCtx.registerFunction("strLenPython", lambda x: len(x), IntegerType()) lengthSchemaRDD = hiveCtx.sql("SELECT strLenPython('text') FROM tweets LIMIT 10")</pre><h1 id="Spark配置与调优"><a href="#Spark配置与调优" class="headerlink" title="Spark配置与调优"></a>Spark配置与调优</h1><h2 id="使用SparkConf配置Spark"><a href="#使用SparkConf配置Spark" class="headerlink" title="使用SparkConf配置Spark"></a>使用SparkConf配置Spark</h2><pre>sc = SparkConf()sc.set("spark.app.name", "spark test")sc.set("spark.master", "spark://localhost:7077")sc.set("spark.ui.port", 4444)</pre><h2 id="常用的选项"><a href="#常用的选项" class="headerlink" title="常用的选项"></a>常用的选项</h2><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>spark.executor.memory</td><td>512m</td><td>为每个执行器进程分配的内存</td></tr><tr><td>spark.executor.cores</td><td>1</td><td>限制应用使用的核心数量</td></tr><tr><td>spark.cores.max</td><td>无</td><td>使用的核心总数</td></tr><tr><td>spark.speculation</td><td>false</td><td>是否开启任务预测</td></tr><tr><td>spark.[X].port</td><td>任意值</td><td>设置spark用到的端口</td></tr></tbody></table><h1 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h1><p>许多应用需要即时处理收到的数据，例如用来实时追踪页面访问统计的应用、训练机器学习模型的应用，还有自动检测异常的应用。Spark Streaming 是 Spark 为这些应用而设计的模型。它允许用户使用一套和批处理非常接近的 API 来编写流式计算应用，这样就可以大量重用批处理应用的技术甚至代码。</p><h2 id="Streaming例子"><a href="#Streaming例子" class="headerlink" title="Streaming例子"></a>Streaming例子</h2><pre>from pyspark.streaming import StreamingContextfrom pyspark import SparkConf,SparkContext# 设置集群信息sf = SparkConf().setMaster("spark://192.168.0.104:7077").setAppName("xxxxxx")sc = SparkContext(conf=sf)sc.setLogLevel("ERROR")# 初始化streaming对象s = StreamingContext(sc, 1)# 设置检查点机制s.checkpoint("file:///media/psf/Home/Workspace/Rimi/P1901/lessons/spark/checkpoints")# 通过网络读取数据流形成dstreamdstream = s.socketTextStream("192.168.0.103", 7777)# 设置滑动窗口dstream = dstream.window(3)# dstream转化操作dstream = dstream.flatMap(lambda x: x.split()).map(lambda x: (x, 1)).groupByKey().mapValues(lambda x: len([w for w in x]))dstream.pprint()s.start()s.awaitTermination()</pre><h2 id="DStream"><a href="#DStream" class="headerlink" title="DStream"></a>DStream</h2><p>DStream被称为离散化流，和spark中的rdd类似。它会随着时间的推移而收到数据的队列。<br>在内部每个时间区间收到的数据都作为rdd存在，而dstream由这些rdd组成。</p><h3 id="DStream的输入源"><a href="#DStream的输入源" class="headerlink" title="DStream的输入源"></a>DStream的输入源</h3><ul><li>flume</li><li>kafka</li><li>hdfs</li><li>其它网络io</li></ul><h3 id="DStream的操作"><a href="#DStream的操作" class="headerlink" title="DStream的操作"></a>DStream的操作</h3><ul><li>转化</li><li>输出</li></ul><h2 id="架构与抽象"><a href="#架构与抽象" class="headerlink" title="架构与抽象"></a>架构与抽象</h2><p>使用“微批次”的架构，把流式计算当作一系列连续的小规模批处理来对待。Spark Streaming 从各种输入源中读取数据，并把数据分组为小的批次。新的批次按均匀的时间间隔创建出来。在每个时间区间开始的时候，一个新的批次就创建出来，在该区间内收到的数据都会被添加到这个批次中。在时间区间结束时，批次停止增长。时间区间的大小是由批次间隔这个参数决定的。批次间隔一般设在 500 毫秒到几秒之间，由应用开发者配置。每个输入批次都形成一个</p><pre>        +---+--------------------------------+------->| r |  +-----+ +-----+    +------+   |        | c |  |     | |     | ...|      |   |   output------->| e |  |     | |     |    |      |   | ---------->        | v |  +-----+ +-----+    +------+   |------->|   |    Spark Streaming             |        +---+--------------------------------+</pre><pre>             +------+ +------+ +------+DStream ---> | 0-1s | | 1-2s | | 2-3s | --->             +------+ +------+ +------+              RDD1    RDD2    RDD3</pre><h2 id="转化操作"><a href="#转化操作" class="headerlink" title="转化操作"></a>转化操作</h2><h3 id="无状态转化"><a href="#无状态转化" class="headerlink" title="无状态转化"></a>无状态转化</h3><p>在无状态转化操作中，每个批次的处理不依赖于之前批次的数据。转化操作，例如 map() 、 filter() 、 reduceByKey() 等，都是无状态转化操作。</p><pre>map: 对 DStream 中的每个元素应用给定函数，返回由各元素输出的元素组成的 DStream。flatMap:filter: 对 DStream 中的每个元素应用给定函数，返回由各元素输出的元素组成的 DStream。repartition: 改变 DStream 的分区数。reduceByKey: 将每个批次中键相同的记录归约。groupByKey: 将每个批次中的记录根据键分组。</pre><h3 id="有状态转化"><a href="#有状态转化" class="headerlink" title="有状态转化"></a>有状态转化</h3><p>相对地，有状态转化操作需要使用之前批次的数据或者是中间结果来计算当前批次的数据。有状态转化操作包括基于滑动窗口的转化操作和追踪状态变化的转化操作。</p><ul><li>设置窗口大小与滑动步长<pre>...stream.checkpoint("/checkpoint")...ds = stream.socketTextStream("192.168.0.103", 7777)ds.window(3, 1) # 窗口大小与步长必须是时间间隔的整数倍。</pre></li></ul><h2 id="输入源"><a href="#输入源" class="headerlink" title="输入源"></a>输入源</h2><ul><li><p>读取文件目录中的文本文件流</p> <pre> s = stream.textFileStream("logs") </pre></li><li><p>网络文本流</p><pre>s = stream.socketTextStream("127.0.0.1", 7777)</pre></li><li><p>其它流（flume, kafka etc）</p></li></ul><h3 id="数据源的合并"><a href="#数据源的合并" class="headerlink" title="数据源的合并"></a>数据源的合并</h3><p>如前文所述，可以使用类似 union() 这样的操作将多个 DStream 合并。通过这些操作符，可以把多个输入的 DStream 合并起来。有时，使用多个接收器对于提高聚合操作中的数据获取的吞吐量非常必要（如果只用一个接收器，可能会成为性能瓶颈）。另外，有时我们需要用不同的接收器来从不同的输入源中接收各种数据，然后使用</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>将dstream输出到数据库或文件系统之中，实现输出的api如下：</p><table><thead><tr><th>输出方法</th><th>说明</th></tr></thead><tbody><tr><td>print</td><td>将dstream数据输出到终端</td></tr><tr><td>saveAsTextFiles</td><td>将dstream保存到文本文本</td></tr><tr><td>saveAsObjectFiles</td><td>将dstream保存成对象文件</td></tr><tr><td>saveAsHadoopFiles</td><td>将dstream保存成hadoop文件</td></tr><tr><td>foreachRDD</td><td>迭代dstream，通过提供的回调函数处理传递的RDD</td></tr></tbody></table><h1 id="Spark大数据分析实例"><a href="#Spark大数据分析实例" class="headerlink" title="Spark大数据分析实例"></a>Spark大数据分析实例</h1><h2 id="购物篮分析"><a href="#购物篮分析" class="headerlink" title="购物篮分析"></a>购物篮分析</h2><p>购物篮分析(MarketBasketAnalysis,MBA)是一个流行的数据挖掘技术,市场营销和<br>电子商务专业人员经常用这个技术来揭示不同商品或商品组之间的相似度。数据挖掘的<br>一般目标是从庞大的数据集合中提取有趣的关联信息,例如数百万超市或信用卡销售交<br>易。购物篮分析可以帮助我们找出很可能会一起购买的商品,关联规则挖掘会发现一个<br>交易集中商品之间的相关性。然后市场营销人员可以使用这些关联规则在商店货架上或<br>在线将相关的商品搜放在相邻的位置,使顾客能购买更多的商品。为购物篮分析挖掘关<br>联规则时要找出频繁商品集,这是一个计算密集型问题,所以非常适合利用MapReduce<br>来解决。</p><p>在数据挖掘中，关联规则有两个度量标准：</p><ul><li>支持度。一个项集出现的频度，例如：Support({A,C}) = 2表示只在两个交易中同时出现</li><li>置信度。关联规则左件与右件共同出现的频繁程度。</li></ul><p>购物篮分析是用于回答以下问题：</p><ul><li>哪些商品会一起购买</li><li>每个购物篮有哪些商品</li><li>哪些商品应当降价</li><li>商品应当如何相邻摆放已实现最大利润</li></ul><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><p>1) 给定交易清单：<br>        t1: crackers, icecream, coke, apple<br>        t2: chicken, pizza, coke, bread<br>        t3: baguette, soda, shampoo, crackers, pepsi, apple<br>        t4: baguette, cream, cheese, diapers, milk<br>        t5: crackers, coke, apple, baguette, soda</p><p>2) 构建项集(1阶，2阶，3阶), 对于每次交易以两个组合。<br>   例如：((crackers, icecream), 1), ((crackers, coke), 1), ….<br>       ((chiken, pizza), 1), ((chiken, coke), 1), ((chiken, bread), 1), ((pizza, coke), 1), …<br>       ((crackers, icecream, coke), 1), ((baguette, soda, apple), 2) …<br>       (crackers, 1), (icecream, 1), (coke, 1) ….</p><p>3) 统计各个阶出现的频度<br>   例如：((crackers, icecream), 1), ((coke, apple), 2), ((baguette, soda), 2) …<br>        (crackers, 2), (coke, 3) ….</p><p>4) 生成所有子模式<br>   例如： ((a, b, c), 2) =&gt;<br>         ((a, b, c), (null, 2))<br>         ((a, b), ((a, b ,c), 2))<br>         ((a, c), ((a, b, c), 2))<br>         ((b, c), ((a, b, c), 2))</p><p>5) 组合子模式(groupByKey)<br>   例如：<br>        ([a,b],[(null,2),([a,b,d],1),([a,b,c],1)])<br>        ([a,b,d],[(null,1)])<br>        ([c],[(nu1l,3),([b,c],3),([a,c],1)])<br>        ([b,d],[([a,b,d],1),(null,1)])<br>        ([d],[([b,d],1),(null,1),([a,d],1)])<br>6) 生成关联规则<br>   例如：<br>   [([a, b], [d], 0.5), ([a, b], [c], 0.5)]<br>   []<br>   [([c], [b], 1), ([c], [a], 0.33333)]<br>   ….</p><pre># 导出spark库from pyspark import SparkContext, SparkConfimport re# 组合算法def combine(s, n):    def _iterator(collector, s, i, c, n, data=None):        if c >= n:            collector.append(tuple(data))            return        for x in range(i, len(s)):            data.append(s[x])            _iterator(collector, s, x + 1, c + 1, n, data)            data.pop()    data_set = []    chars = []    _iterator(data_set, s, 0, 0, n, chars)    return data_setsparkConf = SparkConf()sparkConf.set("spark.master", "spark://10.0.0.252:7077")sparkConf.set("spark.app.name", "MBA")sparkConf.set("spark.executor.memory", "512m")sparkConf.set("spark.executor.cores", "2")sparkContext = SparkContext.getOrCreate(sparkConf)sparkContext.setLogLevel("ERROR")rdd = sparkContext.textFile("file:///root/transaction.txt")def parse_T(x):    _, info = re.split(":\\s*", x)    data = re.split("\\s*,\\s*", info)    data_set = []    for d in combine(data, 2) + combine(data, 3):        data_set.append((d, 1))    return data_set# 按二阶三阶进行组合，分组并求出分组后的总和rdd1 = rdd.flatMap(f=parse_T).groupByKey().mapValues(lambda v: sum(v))def gen_sub_seq(x):    key, value = x    sub_data_set = [(key, (None, value))]    keys = combine(key, len(key) - 1)    for k in keys:        sub_data_set.append((k, (key, value)))    return sub_data_set# 求子序列rdd2 = rdd1.flatMap(f=gen_sub_seq).groupByKey().mapValues(lambda v: [i for i in v])def not_list(src, dst):    for x in dst:        src.remove(x)    return srcdef do_result(x):    key, value = x    data_set = []    total = 0    for c in value:        if c[0] == None:            total = c[1]        else:            data_set.append(c)    if not data_set:        return data_set    results = []    for k, v in data_set:        if total == 0:            continue        pp = float(v) / float(total)        results.append((pp, (key, not_list(list(k), key))))    return results# 求关联性，并排序打印rdd3 = rdd2.flatMap(f=do_result).sortByKey(ascending=False)for x in rdd3.top(100):    print(x)sparkContext.stop()</pre><h1 id="MLIB机器学习"><a href="#MLIB机器学习" class="headerlink" title="MLIB机器学习"></a>MLIB机器学习</h1><h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><ul><li>分类</li><li>回归</li><li>聚类</li></ul><h2 id="机器学习一般流程"><a href="#机器学习一般流程" class="headerlink" title="机器学习一般流程"></a>机器学习一般流程</h2><ul><li>使用字符串RDD表示消息</li><li>使用特征提取算法把文本数据转化为数值特征</li><li>对向量RDD调用分类算法，并返回模型</li><li>使用模型在测试数据集上测试</li><li>评估</li><li>部署</li></ul><h2 id="常用的机器学习算法"><a href="#常用的机器学习算法" class="headerlink" title="常用的机器学习算法"></a>常用的机器学习算法</h2><ul><li>分布式随机森林</li><li>K-means聚类算法</li><li>最小二乘发</li><li>支持向量机</li><li>等</li></ul><h2 id="spark机器学习"><a href="#spark机器学习" class="headerlink" title="spark机器学习"></a>spark机器学习</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>Vector</li></ul><p>既支持稠密向量也支持稀疏向量，前者表示向量的每一位都存储下来，后者则只存储非零位以节约空间。后面会简单讨论不同种类的向量。</p><ul><li>LabeledPoint</li></ul><p>用来表示带标签的数据点。它包含一个特征向量与一个标签（由一个浮点数表示)</p><ul><li>Rating</li></ul><p>用户对一个产品的评分，在 mllib.recommendation 包中，用于产品推荐。</p><ul><li>Model类</li></ul><p>每个 Model 都是训练算法的结果，一般有一个 predict() 方法可以用来对新的数据点或数据点组成的 RDD 应用该模型进行预测。</p><h3 id="分类与回归"><a href="#分类与回归" class="headerlink" title="分类与回归"></a>分类与回归</h3><p>分类与回归是监督式学习的两种主要形式。监督式学习指算法尝试使用有标签的训练数据（也就是已知结果的数据点）根据对象的特征预测结果。分类和回归的区别在于预测的变量的类型：在分类中，预测出的变量是离散的（也就是一个在有限集中的值，叫作类别）；比如，分类可能是将邮件分为垃圾邮件和非垃圾邮件，也有可能是文本所使用的语言。在回归中，预测出的变量是连续的（例如根据年龄和体重预测一个人的身高）。</p><p>1) 线性回归</p><p>线性回归是回归中最常用的方法之一，是指用特征的线性组合来预测输出值。MLlib 也支 持 L1 和 L2 的正则的回归，通常称为 Lasso 和 ridge 回归。</p><pre>from pyspark.mllib.regression import LabeledPoint from pyspark.mllib.regression import LinearRegressionWithSGD points = # (创建LabeledPoint组成的RDD) model = LinearRegressionWithSGD.train(points, iterations=200, intercept=True) print "weights: %s, intercept: %s" % (model.weights, model.intercept)model.predict()</pre><p>2) 逻辑回归</p><p>逻辑回归是一种二元分类方法，用来寻找一个分隔阴性和阳性示例的线性分割平面。逻辑回归是一种二元分类方法，用来寻找一个分隔阴性和阳性示例的线性分割平面。在MLlib中，它接收一组标签为0或1的LabeledPoint，返回可以预测新点的分类的 LogisticRegressionModel 对象。</p><p>3) 支持向量机</p><p>支持向量机（简称 SVM）算法是另一种使用线性分割平面的二元分类算法，同样只预期 0 或者 1 的标签。通过 SVMWithSGD 类，我们可以访问这种算法，它的参数与线性回归和逻辑回归的参数差不多。返回的 SVMModel 与 LogisticRegressionModel 一样使用阈值的方式进行预测。</p><p>4) 朴素贝叶斯</p><p>朴素贝叶斯（Naive Bayes）算法是一种多元分类算法，它使用基于特征的线性函数计算将一个点分到各类中的得分。这种算法通常用于使用 TF-IDF 特征的文本分类，以及其他一些应用。MLlib 实现了多项朴素贝叶斯算法，需要非负的频次（比如词频）作为输入特征。</p><p>5) 决策树与随机森林</p><p>决策树是一个灵活的模型，可以用来进行分类，也可以用来进行回归。决策树以节点树的形式表示，每个节点基于数据的特征作出一个二元决定（比如，这个人的年龄是否大于20 ？），而树的每个叶节点则包含一种预测结果（例如，这个人是不是会买一个产品？）。决策树的吸引力在于模型本身容易检查，而且决策树既支持分类的特征，也支持连续的特征。</p><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>聚类算法是一种无监督学习任务，用于将对象分到具有高度相似性的聚类中。前面提到的监督式任务中的数据都是带标签的，而聚类可以用于无标签的数据。该算法主要用于数据探索（查看一个新数据集是什么样子）以及异常检测（识别与任意聚类都相距较远的点）。</p><p>1) K-means</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python框架01 -- Django部署</title>
      <link href="/2019/03/04/python%E6%A1%86%E6%9E%B601%20--%20Django%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/03/04/python%E6%A1%86%E6%9E%B601%20--%20Django%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Django部署简介"><a href="#Django部署简介" class="headerlink" title="Django部署简介"></a>Django部署简介</h2><blockquote><p>1.通过yum安装python3.5以上 使python程序不和系统本身python冲突(宝塔后台使用了默认<br>python)</p></blockquote><blockquote><p>2.安装虚拟环境</p></blockquote><blockquote><p>3.通过git ssh公钥下载部署代码</p></blockquote><blockquote><p>4.书写supervisord脚本，使用脚本启动项目</p></blockquote><blockquote><p>5.安装nginx</p></blockquote><a id="more"></a><h2 id="app服务器部署"><a href="#app服务器部署" class="headerlink" title="app服务器部署"></a>app服务器部署</h2><h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/mypython3</span><br><span class="line">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</span><br><span class="line">tar -zxvf Python-3.6.5.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.6.5</span><br><span class="line">./configure --prefix=/opt/mypython3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/opt/mypython3/bin</span></span><br><span class="line"></span><br><span class="line"><span class="string">./pip3</span> install virtualenvwrapper</span><br></pre></td></tr></table></figure><ul><li><p>配置虚拟环境</p>  <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~<span class="string">/Envs</span></span><br><span class="line"><span class="keyword">cd</span> ~<span class="string">/Envs</span></span><br><span class="line">virtualenv movie_online -p <span class="string">/opt/mypython3/bin/python3.6</span></span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/Envs/m</span>ovie_online<span class="regexp">/bin/</span>activate</span><br></pre></td></tr></table></figure></li></ul><h3 id="部署代码"><a href="#部署代码" class="headerlink" title="部署代码"></a>部署代码</h3><ul><li><p>生成ssh公钥</p>  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure><blockquote><p>把公钥放入gitee私人设置</p></blockquote></li><li><p>建目录 托代码</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /project</span><br><span class="line"><span class="keyword">cd</span> /project</span><br><span class="line">git clone git@gitee.<span class="keyword">com</span>:pengmao/MoDuXiXiaAPP.git movie_online</span><br><span class="line"><span class="built_in">mkdir</span> /project/movie_online/backend/<span class="built_in">log</span></span><br><span class="line"><span class="built_in">mkdir</span> /project/movie_online/backend/<span class="built_in">log</span>/gunicorn</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装supervisor并使用"><a href="#安装supervisor并使用" class="headerlink" title="安装supervisor并使用"></a>安装supervisor并使用</h3><ul><li><p>给虚拟环境安装pip 包</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r <span class="regexp">/project/m</span>ovie_online<span class="regexp">/backend/</span>requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>使用自带的python2.6安装supervisord</p>  <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">pip install supervisor</span><br><span class="line"></span><br><span class="line">mkdir <span class="string">/project/supervisor</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/project/supervisor</span></span><br><span class="line"><span class="keyword">echo</span>_supervisord_conf &gt; supervisor.conf</span><br><span class="line"></span><br><span class="line">mkdir <span class="string">/project/supervisor/movie_online_log</span></span><br></pre></td></tr></table></figure></li><li><p>supervisord配置文件</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:movie_online]</span><br><span class="line"><span class="attribute">command</span>=/root/Envs/movie_online/bin/gunicorn -c </span><br><span class="line">gunicorn_conf.py movie_1.wsgi</span><br><span class="line"><span class="attribute">directory</span>=/project/movie_online/backend</span><br><span class="line"><span class="attribute">startsecs</span>=0</span><br><span class="line"><span class="attribute">stopwaitsecs</span>=0</span><br><span class="line"><span class="attribute">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">stdout_logfile</span>=/project/supervisor/movie_online_log/</span><br><span class="line">gunicorn.log</span><br><span class="line"><span class="attribute">stderr_logfile</span>=/project/supervisor/movie_online_log/</span><br><span class="line">gunicorn.err</span><br></pre></td></tr></table></figure></li><li><p>supervisord启动命令</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">supervisord -<span class="keyword">c</span> /project/supervisor/supervisor.<span class="keyword">conf</span></span><br><span class="line">supervisorctl -<span class="keyword">c</span> /project/supervisor/supervisor.<span class="keyword">conf</span> status </span><br><span class="line">察看supervisor的状态</span><br><span class="line">supervisorctl -<span class="keyword">c</span> /project/supervisor/supervisor.<span class="keyword">conf</span> reload </span><br><span class="line">重新载入 配置文件</span><br><span class="line">supervisorctl -<span class="keyword">c</span> supervisor.<span class="keyword">conf</span> <span class="keyword">stop</span> 停止</span><br></pre></td></tr></table></figure></li></ul><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="新建日志文件夹"><a href="#新建日志文件夹" class="headerlink" title="新建日志文件夹"></a>新建日志文件夹</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /project/logs</span><br><span class="line"><span class="built_in">mkdir</span> /project/logs/movie_online</span><br></pre></td></tr></table></figure><ul><li><p>nginx配置参考</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"> <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"> <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"> <span class="comment">#server_name api.coolcity.tangrenapp.com;</span></span><br><span class="line"></span><br><span class="line"> <span class="attribute">client_max_body_size</span> <span class="number">5</span>;</span><br><span class="line"> <span class="attribute">location</span> /static &#123;</span><br><span class="line">         <span class="attribute">client_max_body_size</span> <span class="number">50m</span>;</span><br><span class="line">         <span class="attribute">alias</span> /project/movie_online/backend/static;</span><br><span class="line">         <span class="attribute">allow</span> all;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">         <span class="attribute">client_max_body_size</span> <span class="number">50m</span>;</span><br><span class="line">         <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">         <span class="attribute">proxy_pass</span> http://0.0.0.0:8005;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log /root/project/logs/modou/error.log;</span></span><br><span class="line"><span class="attribute">error_log</span> /project/logs/movie_online/error.log;</span><br><span class="line"><span class="attribute">access_log</span> /project/logs/movie_online/access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后收集静态文件</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /project/movie_online/backend</span><br><span class="line"><span class="keyword">source</span> ~/Envs/movie_online/bin/activate</span><br><span class="line"><span class="keyword">python3</span>.<span class="number">6</span> manage.<span class="keyword">py</span> collectstatic</span><br></pre></td></tr></table></figure></li></ul><h2 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h2><h3 id="搭建nginx-dav服务器"><a href="#搭建nginx-dav服务器" class="headerlink" title="搭建nginx dav服务器"></a>搭建nginx dav服务器</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget http:<span class="string">//nginx.org/download/nginx-1.12.2.tar.gz</span></span><br><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line"><span class="keyword">cd</span> nginx-1.12.2</span><br><span class="line">mkdir <span class="string">/opt/mynginx</span></span><br><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/opt/mynginx</span> <span class="params">--with-http_dav_module</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li><p>dav配置</p><blockquote><p>10.19.96.0/24; 开放内网网段</p></blockquote>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">server</span>&#123;</span><br><span class="line">        <span class="keyword">listen</span> <span class="number">30081</span>;</span><br><span class="line">        <span class="keyword">location</span> / &#123;</span><br><span class="line">            #root /var/www/media;</span><br><span class="line">            root /www/wwwroot/file.coolcity.tangrenapp.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         #   client_body_temp_path /data/client_temp;</span><br><span class="line"></span><br><span class="line">            dav_methods PUT <span class="keyword">DELETE</span> MKCOL <span class="keyword">COPY</span> <span class="keyword">MOVE</span>;</span><br><span class="line"></span><br><span class="line">            create_full_put_path  <span class="keyword">on</span>;</span><br><span class="line">            dav_access            <span class="keyword">group</span>:rw  <span class="keyword">all</span>:r;</span><br><span class="line">            allow <span class="number">10.19</span><span class="number">.96</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">            deny <span class="keyword">all</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        error_log  logs/pic_error.<span class="keyword">log</span>;</span><br><span class="line">        access_log  logs/pic_access.<span class="keyword">log</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>user = 我 or 其他人</p></blockquote></li></ul><pre><code>&gt;发帖人(我) 删除权限  对 我的帖子&gt;看帖子的人(其他人) 没有删除权限 对 我的帖子&gt;小吧主(其他人) 有删除权限 对 我的帖子&gt;权限管理系统 --》 第三方</code></pre><ul><li><p>实现的一种 -&gt; guradian</p></li><li><p>权限管理系统 -&gt; RBAC-&gt; guradian</p><ol><li>赋予权限</li><li>查看权限</li><li>删除权限</li></ol></li><li><p>短评:</p><p>  1.用户发帖的时候 使用 guradian</p><pre><code>1.赋予用户删帖权限2.赋予管理员删除权限3.赋予用户修改权限</code></pre><ol start="2"><li><p>在查看帖子的时候:<br> 去查看一下你有没有删除的权限</p></li><li><p>请求删除的时候:<br> 去查看一下你有没有删除的权限</p></li></ol></li></ul><pre><code>代码:    from guardian.shortcuts import assign_perm    from guardian.shortcuts import check_perm    from guardian.shortcuts import remove_perm</code></pre>]]></content>
      
      
      <categories>
          
          <category> python框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术06--RabbitMQ</title>
      <link href="/2019/02/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF06--RabbitMQ%20/"/>
      <url>/2019/02/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF06--RabbitMQ%20/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="案例分析–搜索与商品服务的问题"><a href="#案例分析–搜索与商品服务的问题" class="headerlink" title="案例分析–搜索与商品服务的问题"></a>案例分析–搜索与商品服务的问题</h2><p>如果存在下面的问题：</p><ul><li>商品的原始数据保存在数据库中，增删改查都在数据库中完成。</li><li>搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。</li><li>商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。</li></ul><p>在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？</p><p>这里有两种解决方案：</p><ul><li>方案1：每当后台对商品做增删改操作，同时要修改索引库数据及静态页面</li><li>方案2：搜索服务和商品页面服务对外提供操作接口，后台在商品增删改后，调用接口</li></ul><p>以上两种方式都有同一个严重问题：就是代码耦合，后台服务中需要嵌入搜索和商品页面服务，违背了微服务的<code>独立</code>原则。</p><p>所以，我们会通过另外一种方式来解决这个问题：消息队列</p><h2 id="消息队列（MQ）"><a href="#消息队列（MQ）" class="headerlink" title="消息队列（MQ）"></a>消息队列（MQ）</h2><h3 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h3><p>消息队列，即MQ，Message Queue。</p><p>消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p><p>结合前面所说的问题：</p><ul><li>商品服务对商品增删改以后，无需去操作索引库或静态页面，只是发送一条消息，也不关心消息被谁接收。</li><li>搜索服务和静态页面服务接收消息，分别去处理索引库和静态页面。</li></ul><p>如果以后有其它系统也依赖商品服务的数据，同样监听消息即可，商品服务无需任何代码修改。</p><h3 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h3><p>MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><h3 id="常见MQ产品"><a href="#常见MQ产品" class="headerlink" title="常见MQ产品"></a>常见MQ产品</h3><ul><li>ActiveMQ：基于JMS</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</li><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li><li>Kafka：分布式消息系统，高吞吐量</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527064606029.png" alt=""></p><h3 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p><a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">官网</a>  <a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">官方教程</a></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527064762982.png" alt=""></p><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">官网下载地址</a></p><h1 id="五种消息模型"><a href="#五种消息模型" class="headerlink" title="五种消息模型"></a>五种消息模型</h1><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527068544487.png" alt=""></p><h2 id="了解下RabbitMQ的工作方式"><a href="#了解下RabbitMQ的工作方式" class="headerlink" title="了解下RabbitMQ的工作方式"></a>了解下RabbitMQ的工作方式</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jwang.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="连接工具类"><a href="#连接工具类" class="headerlink" title="连接工具类"></a>连接工具类</h3><p>我们抽取一个建立RabbitMQ连接的工具类，方便其他程序获取连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立与RabbitMQ的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.56.101"</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/leyou"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"leyou"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"leyou"</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本消息模型"><a href="#基本消息模型" class="headerlink" title="基本消息模型"></a>基本消息模型</h2><p>官方介绍：</p><p>RabbitMQ是一个消息代理：它接收和转发消息。 你可以把它想象成一个邮局：当你把邮件放在邮箱里时，你可以确定邮差先生最终会把邮件发送给你的收件人。 在这个比喻中，RabbitMQ是邮政信箱，邮局和邮递员。</p><p>RabbitMQ与邮局的主要区别是它不处理纸张，而是接受，存储和转发数据消息的二进制数据块。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532762975546.png" alt=""></p><p>P（producer/ publisher）：生产者，一个发送消息的用户应用程序。</p><p>C（consumer）：消费者，消费和接收有类似的意思，消费者是一个主要用来等待接收消息的用户应用程序</p><p>队列（红色区域）：rabbitmq内部类似于邮箱的一个概念。虽然消息流经rabbitmq和你的应用程序，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制，实质上是一个大的消息缓冲区。许多生产者可以发送消息到一个队列，许多消费者可以尝试从一个队列接收数据。</p><p>总之：</p><p>生产者将消息发送到队列，消费者从队列中获取消息，队列是存储消息的缓冲区。</p><p>我们将用Java编写两个程序;发送单个消息的生产者，以及接收消息并将其打印出来的消费者。我们将详细介绍Java API中的一些细节，这是一个消息传递的“Hello World”。</p><p>我们将调用我们的消息发布者（发送者）Send和我们的消息消费者（接收者）Recv。发布者将连接到RabbitMQ，发送一条消息，然后退出。</p><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接以及mq通道</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道，这是完成大部分API的地方。</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明（创建）队列，必须声明队列才能够发送消息，我们可以把消息发送到队列中。</span></span><br><span class="line">        <span class="comment">// 声明一个队列是幂等的 - 只有当它不存在时才会被创建</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532763328424.png" alt=""></p><h3 id="管理工具中查看消息"><a href="#管理工具中查看消息" class="headerlink" title="管理工具中查看消息"></a>管理工具中查看消息</h3><p>进入队列页面，可以看到新建了一个队列：simple_queue</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532763817830.png" alt=""></p><p>点击队列名称，进入详情页，可以查看消息：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532763489858.png" alt=""></p><p>在控制台查看消息并不会将消息消费，所以消息还在。</p><h3 id="消费者获取消息"><a href="#消费者获取消息" class="headerlink" title="消费者获取消息"></a>消费者获取消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认。</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532763733443.png" alt=""></p><p>这个时候，队列中的消息就没了：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532763773208.png" alt=""></p><p>我们发现，消费者已经获取了消息，但是程序没有停止，一直在监听队列中是否有新的消息。一旦有新的消息进入队列，就会立即打印.</p><h3 id="消息确认机制（ACK）"><a href="#消息确认机制（ACK）" class="headerlink" title="消息确认机制（ACK）"></a>消息确认机制（ACK）</h3><p>通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。</p><p>那么问题来了：RabbitMQ怎么知道消息被接收了呢？</p><p>如果消费者领取消息后，还没执行操作就挂掉了呢？或者抛出了异常？消息消费失败，但是RabbitMQ无从得知，这样消息就丢失了！</p><p>因此，RabbitMQ有一个ACK机制。当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p><ul><li>自动ACK：消息一旦被接收，消费者自动发送ACK</li><li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li></ul><p>大家觉得哪种更好呢？</p><p>这需要看消息的重要性：</p><ul><li>如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便</li><li>如果消息非常重要，不容丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK，RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li></ul><p>我们之前的测试都是自动ACK的，如果要手动ACK，需要改动我们的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">                <span class="comment">// 手动进行ACK</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数false，手动进行ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到最后一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure><p>如果第二个参数为true，则会自动进行ACK；如果为false，则需要手动ACK。方法的声明：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764253019.png" alt=""></p><h4 id="自动ACK存在的问题"><a href="#自动ACK存在的问题" class="headerlink" title="自动ACK存在的问题"></a>自动ACK存在的问题</h4><p>修改消费者，添加异常，如下：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764600849.png" alt=""></p><p>生产者不做任何修改，直接运行，消息发送成功：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764694290.png" alt=""></p><p>运行消费者，程序抛出异常。但是消息依然被消费：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764717995.png" alt=""></p><p>管理界面：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764734232.png" alt=""></p><h4 id="演示手动ACK"><a href="#演示手动ACK" class="headerlink" title="演示手动ACK"></a>演示手动ACK</h4><p>修改消费者，把自动改成手动（去掉之前制造的异常）</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764831241.png" alt=""></p><p>生产者不变，再次运行：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764895239.png" alt=""></p><p>运行消费者</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532764957092.png" alt=""></p><p>但是，查看管理界面，发现：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532765013834.png" alt=""></p><p>停掉消费者的程序，发现：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532765038088.png" alt=""></p><p>这是因为虽然我们设置了手动ACK，但是代码中并没有进行消息确认！所以消息并未被真正消费掉。</p><p>当我们关掉这个消费者，消息的状态再次称为Ready</p><p>修改代码手动ACK：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532765123282.png" alt=""></p><p>执行：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532765151039.png" alt=""></p><p>消息消费成功！</p><h2 id="work消息模型"><a href="#work消息模型" class="headerlink" title="work消息模型"></a>work消息模型</h2><p>工作队列或者竞争消费者模式</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532765197277.png" alt=""></p><p>我们编写了一个程序，从一个命名队列中发送并接受消息。在这里，我们将创建一个工作队列，在多个工作者之间分配耗时任务。</p><p>工作队列，又称任务队列。主要思想就是避免执行资源密集型任务时，必须等待它执行完成。相反我们稍后完成任务，我们将任务封装为消息并将其发送到队列。 在后台运行的工作进程将获取任务并最终执行作业。当你运行许多工人时，任务将在他们之间共享，但是一个消息只能被一个消费者获取。</p><p>这个概念在Web应用程序中特别有用，因为在短的HTTP请求窗口中无法处理复杂的任务。</p><p>接下来我们来模拟这个流程：</p><p>​    P：生产者：任务的发布者</p><p>​    C1：消费者，领取任务并且完成任务，假设完成速度较快</p><p>​    C2：消费者2：领取任务并完成任务，假设完成速度慢</p><p>面试题：避免消息堆积？</p><p>1） 采用workqueue，多个消费者监听同一队列。</p><p>2）接收到消息以后，而是通过线程池，异步消费。</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>生产者与案例1中的几乎一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">"task .. "</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里我们是循环发送50条消息。</p><h3 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527085386747.png" alt=""></p><h3 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527085448377.png" alt=""></p><p>与消费者1基本类似，就是没有设置消费耗时时间。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，两个消费者一同启动，然后发送50条消息：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527085826462.png" alt=""></p><p>可以发现，两个消费者各自消费了25条消息，而且各不相同，这就实现了任务的分发。</p><h3 id="能者多劳"><a href="#能者多劳" class="headerlink" title="能者多劳"></a>能者多劳</h3><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长</li><li>然而两人最终消费的消息数量是一样的</li><li>消费者2大量时间处于空闲状态，消费者1一直忙碌</li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。</p><p>怎么实现呢？</p><p>我们可以使用basicQos方法和prefetchCount = 1设置。 这告诉RabbitMQ一次不要向工作人员发送多于一条消息。 或者换句话说，不要向工作人员发送新消息，直到它处理并确认了前一个消息。 相反，它会将其分派给不是仍然忙碌的下一个工作人员。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532765689904.png" alt=""></p><p>再次测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527086159534.png" alt=""></p><h2 id="订阅模型分类"><a href="#订阅模型分类" class="headerlink" title="订阅模型分类"></a>订阅模型分类</h2><p>在之前的模式中，我们创建了一个工作队列。 工作队列背后的假设是：每个任务只被传递给一个工作人员。 在这一部分，我们将做一些完全不同的事情 - 我们将会传递一个信息给多个消费者。 这种模式被称为“发布/订阅”。 </p><p>解读：</p><p>1、1个生产者，多个消费者</p><p>2、每一个消费者都有自己的一个队列</p><p>3、生产者没有将消息直接发送到队列，而是发送到了交换机</p><p>4、每个队列都要绑定到交换机</p><p>5、生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者获取的目的</p><p>X（Exchanges）：交换机一方面：接收生产者发送的消息。另一方面：知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p><p>Exchange类型有以下几种：</p><p>​         Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>​         Direct：定向，把消息交给符合指定routing key 的队列</p><p>​         Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p>我们这里先学习</p><p>​    Fanout：即广播模式</p><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="订阅模型-Fanout"><a href="#订阅模型-Fanout" class="headerlink" title="订阅模型-Fanout"></a>订阅模型-Fanout</h2><p>Fanout，也称为广播。</p><ul><li>1）  可以有多个消费者</li><li>2）  每个<strong>消费者有自己的queue</strong>（队列）</li><li>3）  每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4）  <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5）  交换机把消息发送给绑定过的所有队列</li><li>6）  队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><p>两个变化：</p><ul><li>1）  声明Exchange，不再声明Queue</li><li>2）  发送消息到Exchange，不再发送到Queue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为fanout</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello everyone"</span>;</span><br><span class="line">        <span class="comment">// 发布消息到Exchange</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [生产者] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意代码中：<strong>队列需要和交换机绑定</strong></p><h3 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，手动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们运行两个消费者，然后发送1条消息：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532766264386.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532766291204.png" alt=""></p><h2 id="订阅模型-Direct"><a href="#订阅模型-Direct" class="headerlink" title="订阅模型-Direct"></a>订阅模型-Direct</h2><p>有选择性的接收消息</p><p>在订阅模式中，生产者发布消息，所有消费者都可以获取所有消息。</p><p>在路由模式中，我们将添加一个功能 - 我们将只能订阅一部分消息。 例如，我们只能将重要的错误消息引导到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。</p><p>但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p>在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</p><p>消息的发送方在向Exchange发送消息时，也必须指定消息的routing key。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532766437787.png" alt=""></p><p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p><p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p><p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><p>此处我们模拟商品的增删改，发送消息的RoutingKey分别是：insert、update、delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为direct</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"商品新增了， id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者1-2"><a href="#消费者1-2" class="headerlink" title="消费者1"></a>消费者1</h3><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。假设此处需要update和delete消息</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者2-2"><a href="#消费者2-2" class="headerlink" title="消费者2"></a>消费者2</h3><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"insert"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>我们分别发送增、删、改的RoutingKey，发现结果：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527088296131.png" alt=""></p><h2 id="订阅模型-Topic"><a href="#订阅模型-Topic" class="headerlink" title="订阅模型-Topic"></a>订阅模型-Topic</h2><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p>​         <code>#</code>：匹配一个或多个词</p><p>​         <code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p>​         <code>audit.#</code>：能够匹配<code>audit.irs.corporate</code> 或者 <code>audit.irs</code></p><p>​         <code>audit.*</code>：只能匹配<code>audit.irs</code></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532766712166.png" alt=""></p><p>在这个例子中，我们将发送所有描述动物的消息。消息将使用由三个字（两个点）组成的routing key发送。路由关键字中的第一个单词将描述速度，第二个颜色和第三个种类：“<speed>.<color>.<species>”。</p><p>我们创建了三个绑定：Q1绑定了绑定键<code>“* .orange.*”</code>，Q2绑定了<code>“*.*.rabbit”</code>和<code>“lazy.＃”</code>。</p><p>Q1匹配所有的橙色动物。</p><p>Q2匹配关于兔子以及懒惰动物的消息。</p><p>生产者发送如下消息，会进入那个队列：</p><p>quick.orange.rabbit à Q1 Q2</p><p>lazy.orange.elephant à Q1 Q2</p><p>quick.orange.fox à Q1</p><p>lazy.pink.rabbit à Q2</p><p>quick.brown.fox à 不匹配任意队列，被丢弃</p><p>quick.orange.male.rabbit à </p><p>orange à </p><h3 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h3><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.isnert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为topic</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"新增商品 : id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者1-3"><a href="#消费者1-3" class="headerlink" title="消费者1"></a>消费者1</h3><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者2-3"><a href="#消费者2-3" class="headerlink" title="消费者2"></a>消费者2</h3><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>如何避免消息丢失？</p><p>1）  消费者的ACK机制。可以防止消费者丢失消息。</p><p>2）  但是，如果在消费者消费之前，MQ就宕机了，消息就没了。</p><p>是可以将消息进行持久化呢？</p><p> 要将消息持久化，前提是：队列、Exchange都持久化</p><h3 id="交换机持久化"><a href="#交换机持久化" class="headerlink" title="交换机持久化"></a>交换机持久化</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532766951432.png" alt=""></p><h3 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532766981230.png" alt=""></p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532767057491.png" alt=""></p><h1 id="Spring-AMQP"><a href="#Spring-AMQP" class="headerlink" title="Spring AMQP"></a>Spring AMQP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Sprin有很多不同的项目，其中就有对AMQP的支持：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532767136007.png" alt=""></p><p><a href="http://spring.io/projects/spring-amqp" target="_blank" rel="noopener">Spring AMQP的页面</a></p><p>注意这里一段描述：                                         </p><p>​         Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是RabbitMQ。</p><h2 id="依赖和配置"><a href="#依赖和配置" class="headerlink" title="依赖和配置"></a>依赖和配置</h2><p>添加AMQP的启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中添加RabbitMQ地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h2 id="监听者"><a href="#监听者" class="headerlink" title="监听者"></a>监听者</h2><p>在SpringAmqp中，对消息的消费者进行了封装和抽象，一个普通的JavaBean中的普通方法，只要通过简单的注解，就可以成为一个消费者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"spring.test.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"spring.test.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC</span><br><span class="line">            ),</span><br><span class="line">            key = &#123;<span class="string">"#.#"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Componet</code>：类上的注解，注册到Spring容器</li><li><code>@RabbitListener</code>：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性：<ul><li><code>bindings</code>：指定绑定关系，可以有多个。值是<code>@QueueBinding</code>的数组。<code>@QueueBinding</code>包含下面属性：<ul><li><code>value</code>：这个消费者关联的队列。值是<code>@Queue</code>，代表一个队列</li><li><code>exchange</code>：队列所绑定的交换机，值是<code>@Exchange</code>类型</li><li><code>key</code>：队列和交换机绑定的<code>RoutingKey</code></li></ul></li></ul></li></ul><p>类似listen这样的方法在一个类中可以写多个，就代表多个消费者。</p><h2 id="AmqpTemplate"><a href="#AmqpTemplate" class="headerlink" title="AmqpTemplate"></a>AmqpTemplate</h2><p>Spring最擅长的事情就是封装，把他人的框架进行封装和整合。</p><p>Spring为AMQP提供了统一的消息处理模板：AmqpTemplate，非常方便的发送消息，其发送方法：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1527090258083.png" alt=""></p><p>红框圈起来的是比较常用的3个方法，分别是：</p><ul><li>指定交换机、RoutingKey和消息体</li><li>指定消息</li><li>指定RoutingKey和消息，会向默认的交换机发送消息</li></ul><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MqDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String msg = <span class="string">"hello, Spring boot amqp"</span>;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"spring.test.exchange"</span>,<span class="string">"a.b"</span>, msg);</span><br><span class="line">        <span class="comment">// 等待10秒后再结束</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后查看日志：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532767726274.png" alt=""></p><h1 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h1><p>接下来，我们就改造项目，实现搜索服务、商品静态页的数据同步。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><blockquote><p>发送方：商品微服务</p></blockquote><ul><li><p>什么时候发？</p><p>当商品服务对商品进行写操作：增、删、改的时候，需要发送一条消息，通知其它服务。</p></li><li><p>发送什么内容？</p><p>对商品的增删改时其它服务可能需要新的商品数据，但是如果消息内容中包含全部商品信息，数据量太大，而且并不是每个服务都需要全部的信息。因此我们<strong>只发送商品id</strong>，其它服务可以根据id查询自己需要的信息。</p></li></ul><blockquote><p>接收方：搜索微服务、静态页微服务</p></blockquote><p>接收消息后如何处理？</p><ul><li>搜索微服务：<ul><li>增/改：添加新的数据到索引库</li><li>删：删除索引库数据</li></ul></li><li>静态页微服务：<ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并删除原来的</li></ul></li></ul><h2 id="商品服务发送消息"><a href="#商品服务发送消息" class="headerlink" title="商品服务发送消息"></a>商品服务发送消息</h2><p>我们先在商品微服务<code>leyou-item-service</code>中实现发送消息。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>我们在application.yml中添加一些有关RabbitMQ的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">exchange:</span> <span class="string">leyou.item.exchange</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>template：有关<code>AmqpTemplate</code>的配置<ul><li>retry：失败重试<ul><li>enabled：开启失败重试</li><li>initial-interval：第一次重试的间隔时长</li><li>max-interval：最长重试间隔，超过这个间隔将不再重试</li><li>multiplier：下次重试间隔的倍数，此处是2即下次重试间隔是上次的2倍</li></ul></li><li>exchange：缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个</li></ul></li><li>publisher-confirms：生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试</li></ul><h3 id="改造GoodsService"><a href="#改造GoodsService" class="headerlink" title="改造GoodsService"></a>改造GoodsService</h3><p>在GoodsService中封装一个发送消息到mq的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Long id, String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"item."</span> + type, id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"&#123;&#125;商品消息发送异常，商品id：&#123;&#125;"</span>, type, id, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有指定交换机，因此默认发送到了配置中的：<code>leyou.item.exchange</code></p><p><strong>注意：这里要把所有异常都try起来，不能让消息的发送影响到正常的业务逻辑</strong></p><p>然后在新增的时候调用：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532768930797.png" alt=""></p><p>修改的时候调用：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532769005960.png" alt=""></p><h2 id="搜索服务接收消息"><a href="#搜索服务接收消息" class="headerlink" title="搜索服务接收消息"></a>搜索服务接收消息</h2><p>搜索服务接收到消息后要做的事情：</p><ul><li>增：添加新的数据到索引库</li><li>删：删除索引库数据</li><li>改：修改索引库数据</li></ul><p>因为索引库的新增和修改方法是合二为一的，因此我们可以将这两类消息一同处理，删除另外处理。</p><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="编写监听器"><a href="#编写监听器" class="headerlink" title="编写监听器"></a>编写监听器</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532769181819.png" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理insert和update的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.create.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建或更新索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.createIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理delete的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.delete.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.deleteIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写创建和删除索引方法"><a href="#编写创建和删除索引方法" class="headerlink" title="编写创建和删除索引方法"></a>编写创建和删除索引方法</h3><p>这里因为要创建和删除索引，我们需要在SearchService中拓展两个方法，创建和删除索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(Long id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsClient.querySpuById(id);</span><br><span class="line">    <span class="comment">// 构建商品</span></span><br><span class="line">    Goods goods = <span class="keyword">this</span>.buildGoods(spu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存数据到索引库</span></span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.save(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建索引的方法可以从之前导入数据的测试类中拷贝和改造。</p><h2 id="静态页服务接收消息"><a href="#静态页服务接收消息" class="headerlink" title="静态页服务接收消息"></a>静态页服务接收消息</h2><p>商品静态页服务接收到消息后的处理：</p><ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并删除原来的</li></ul><p>不过，我们编写的创建静态页的方法也具备覆盖以前页面的功能，因此：增和改的消息可以放在一个方法中处理，删除消息放在另一个方法处理。</p><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="编写监听器-1"><a href="#编写监听器-1" class="headerlink" title="编写监听器"></a>编写监听器</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532769581964.png" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsHtmlService goodsHtmlService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.create.web.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        goodsHtmlService.createHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"leyou.delete.web.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"leyou.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        goodsHtmlService.deleteHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加删除页面方法"><a href="#添加删除页面方法" class="headerlink" title="添加删除页面方法"></a>添加删除页面方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHtml</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"C:\\project\\nginx-1.14.0\\html\\item\\"</span>, id + <span class="string">".html"</span>);</span><br><span class="line">    file.deleteOnExit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><h3 id="查看RabbitMQ控制台"><a href="#查看RabbitMQ控制台" class="headerlink" title="查看RabbitMQ控制台"></a>查看RabbitMQ控制台</h3><p>重新启动项目，并且登录RabbitMQ管理界面：<a href="http://192.168.56.101:15672" target="_blank" rel="noopener">http://192.168.56.101:15672</a></p><p>可以看到，交换机已经创建出来了：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532772446520.png" alt=""></p><p>队列也已经创建完毕：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532772471931.png" alt=""></p><p>并且队列都已经绑定到交换机：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/ribittMQ/assets/1532772521932.png" alt=""></p><h3 id="修改数据试一试"><a href="#修改数据试一试" class="headerlink" title="修改数据试一试"></a>修改数据试一试</h3><p>在后台修改商品数据的价格，分别在搜索及商品详情页查看是否统一。</p>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术05--Docker</title>
      <link href="/2019/02/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF05--Docker/"/>
      <url>/2019/02/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF05--Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>​    Docker 是一个开源项目，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><h2 id="为什么选择Docker"><a href="#为什么选择Docker" class="headerlink" title="为什么选择Docker?"></a>为什么选择Docker?</h2><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><pre><code>随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</code></pre><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="容器与虚拟机比较"><a href="#容器与虚拟机比较" class="headerlink" title="容器与虚拟机比较"></a>容器与虚拟机比较</h2><ul><li>​容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</li><li>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</li></ul><h2 id="Docker-组件"><a href="#Docker-组件" class="headerlink" title="Docker 组件"></a>Docker 组件</h2><h3 id="Docker服务器与客户端"><a href="#Docker服务器与客户端" class="headerlink" title="Docker服务器与客户端"></a>Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><h3 id="Docker镜像与容器"><a href="#Docker镜像与容器" class="headerlink" title="Docker镜像与容器"></a>Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么。</p><p>Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p><h3 id="Registry（注册中心）"><a href="#Registry（注册中心）" class="headerlink" title="Registry（注册中心）"></a>Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像。<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a></p><h1 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>（1）yum 包更新到最新</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo yum update</span></span><br></pre></td></tr></table></figure><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -<span class="symbol">y</span> yum-utils device-mapper-<span class="symbol">persistent</span>-data lvm2</span><br></pre></td></tr></table></figure><p>（3）设置yum源为阿里云</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">add</span>-repo http://mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure><p>（4）安装docker</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> docker-ce</span><br></pre></td></tr></table></figure><p>（5）安装后查看docker版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker -v</span></span><br></pre></td></tr></table></figure><h2 id="设置ustc的镜像"><a href="#设置ustc的镜像" class="headerlink" title="设置ustc的镜像"></a>设置ustc的镜像</h2><p>ustc是linux镜像服务提供者，ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>docker<span class="regexp">/daemon.json</span></span><br></pre></td></tr></table></figure><p>在该文件中输入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Docker的启动与停止"><a href="#Docker的启动与停止" class="headerlink" title="Docker的启动与停止"></a>Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure><p>停止docker：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">stop</span> docker</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>查看docker状态：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl status docker</span></span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure><p>查看docker概要信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span></span><br></pre></td></tr></table></figure><p>查看docker帮助文档</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="comment">--help</span></span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><ul><li>REPOSITORY：镜像名称</li><li>TAG：镜像标签</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像的创建日期（不是获取该镜像的日期）</li><li>SIZE：镜像大小</li></ul><blockquote><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p></blockquote><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">search</span> 镜像名称</span><br></pre></td></tr></table></figure><ul><li>NAME：仓库名称</li><li>DESCRIPTION：镜像描述</li><li>STARS：用户评价，反应一个镜像的受欢迎程度</li><li>OFFICIAL：是否官方</li><li>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</li></ul><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull 镜像名称</span><br></pre></td></tr></table></figure><p>例如，我要下载centos7镜像</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:<span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>按镜像ID删除镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rmi 镜像ID</span><br></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi <span class="string">`docker images -q`</span></span><br></pre></td></tr></table></figure><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>查看正在运行的容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">docker</span> <span class="comment">ps</span> <span class="comment">–a</span></span><br></pre></td></tr></table></figure><p>查看最后一次运行的容器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> ps –l</span><br></pre></td></tr></table></figure><p>查看停止的容器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f <span class="attribute">status</span>=exited</span><br></pre></td></tr></table></figure><h3 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h3><h4 id="创建容器常用的参数说明"><a href="#创建容器常用的参数说明" class="headerlink" title="创建容器常用的参数说明"></a>创建容器常用的参数说明</h4><p>创建容器命令：docker run</p><ul><li>-i：表示运行容器</li><li>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</li><li>–name :为创建的容器命名。</li><li>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</li><li>-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</li><li>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</li></ul><h4 id="交互式方式创建容器"><a href="#交互式方式创建容器" class="headerlink" title="交互式方式创建容器"></a>交互式方式创建容器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -it <span class="attribute">--name</span>=容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器（当退出时，该容器也会关闭）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h4 id="守护式方式创建容器"><a href="#守护式方式创建容器" class="headerlink" title="守护式方式创建容器"></a>守护式方式创建容器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><blockquote><p>出现一串16进制字符串代表创建成功</p></blockquote><ul><li>登录守护式容器方式(退出时候不会关闭容器)：</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">docker</span> <span class="variable">exec</span> -<span class="variable">it</span> 容器名称 (或者容器<span class="variable">ID</span>)  /<span class="variable">bin</span>/<span class="function"><span class="title">bash</span>(加载<span class="variable">centos</span>的命令行，使其可以执行)</span></span><br></pre></td></tr></table></figure><h3 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h3><p>停止容器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">stop</span> 容器名称（或者容器<span class="keyword">ID</span>）</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">start</span> 容器名称（或者容器<span class="keyword">ID</span>）</span><br></pre></td></tr></table></figure><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="meta">cp</span> 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="meta">cp</span> 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -di -v /usr/<span class="keyword">local</span>/myhtml:/usr/<span class="keyword">local</span>/myhtml <span class="comment">--name=mycentos3 centos:7</span></span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><h3 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">inspect</span> 容器名称（容器ID）</span><br></pre></td></tr></table></figure><p>也可以直接执行下面的命令直接输出IP地址</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker inspect --format</span>=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除指定的容器：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h1 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h1><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><h3 id="拉取mysql镜像"><a href="#拉取mysql镜像" class="headerlink" title="拉取mysql镜像"></a>拉取mysql镜像</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos/mysql<span class="number">-57</span>-centos7</span><br></pre></td></tr></table></figure><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=tensquare_mysql -p 33306:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 centos/mysql-57-centos7（镜像名称repostory属性的值）</span><br></pre></td></tr></table></figure><ul><li>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</li><li>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</li></ul><h3 id="远程登录mysql"><a href="#远程登录mysql" class="headerlink" title="远程登录mysql"></a>远程登录mysql</h3><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h2><h3 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:<span class="number">7</span>-jre7</span><br></pre></td></tr></table></figure><h3 id="创建容器-1"><a href="#创建容器-1" class="headerlink" title="创建容器"></a>创建容器</h3><p>创建容器  -p表示地址映射</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -di <span class="comment">--name=mytomcat -p 9000:8080 </span></span><br><span class="line">-v（挂载目录） /usr/<span class="keyword">local</span>/webapps:/usr/<span class="keyword">local</span>/tomcat/webapps（本地：容器tomcat路径） tomcat:<span class="number">7</span>-jre7</span><br></pre></td></tr></table></figure><h3 id="上传web应用并转移到相关目录"><a href="#上传web应用并转移到相关目录" class="headerlink" title="上传web应用并转移到相关目录"></a>上传web应用并转移到相关目录</h3><p>将web应用上传到宿主机的相关目录（会自动解压）</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">put</span> d:\web\cas.war</span><br><span class="line">mv cas.war /usr/<span class="keyword">local</span>/webapps</span><br></pre></td></tr></table></figure><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><h3 id="拉取镜像-2"><a href="#拉取镜像-2" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker pull nginx</span></span><br></pre></td></tr></table></figure><h3 id="创建Nginx容器"><a href="#创建Nginx容器" class="headerlink" title="创建Nginx容器"></a>创建Nginx容器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=mynginx（容器名称） -p 80:80(映射端口) nginx（镜像名称）</span><br></pre></td></tr></table></figure><h3 id="上传到宿主机"><a href="#上传到宿主机" class="headerlink" title="上传到宿主机"></a>上传到宿主机</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">put</span> -r /html/dist</span><br></pre></td></tr></table></figure><h3 id="容器中查看配置目录"><a href="#容器中查看配置目录" class="headerlink" title="容器中查看配置目录"></a>容器中查看配置目录</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mynginx  /bin/bash</span><br></pre></td></tr></table></figure><p>etc目录下的nginx查看基本配置文件nginx.conf中的include行 是导入其他配置的目录所在地，进入该文件夹，cat defalut.conf 其中location属性中root目录就是可以保存静态页面的位置，只需要退出将其目录保存到相关目录</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv dist html</span><br><span class="line">docker cp html <span class="string">mynginx:</span><span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span></span><br></pre></td></tr></table></figure><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><h3 id="拉取镜像-3"><a href="#拉取镜像-3" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker pull redis</span></span><br></pre></td></tr></table></figure><h3 id="创建容器-2"><a href="#创建容器-2" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span> -h 宿主<span class="built_in">ip</span></span><br></pre></td></tr></table></figure><h1 id="迁移与备份"><a href="#迁移与备份" class="headerlink" title="迁移与备份"></a>迁移与备份</h1><h2 id="容器保存为镜像"><a href="#容器保存为镜像" class="headerlink" title="容器保存为镜像"></a>容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker commit mynginx mynginx_i</span></span><br></pre></td></tr></table></figure><h2 id="镜像备份"><a href="#镜像备份" class="headerlink" title="镜像备份"></a>镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span>  <span class="selector-tag">save</span> <span class="selector-tag">-o</span> <span class="selector-tag">mynginx</span><span class="selector-class">.tar</span> <span class="selector-tag">mynginx_i</span></span><br></pre></td></tr></table></figure><h2 id="镜像恢复与迁移"><a href="#镜像恢复与迁移" class="headerlink" title="镜像恢复与迁移"></a>镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">load</span> <span class="selector-tag">-i</span> <span class="selector-tag">mynginx</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure><ul><li>-i 输入的文件</li></ul><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h2 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> –p /usr/<span class="built_in">local</span>/dockerjdk8</span><br></pre></td></tr></table></figure><h4 id="下载jdk并上传到该目录"><a href="#下载jdk并上传到该目录" class="headerlink" title="下载jdk并上传到该目录"></a>下载jdk并上传到该目录</h4><p>下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><h4 id="创建文件Dockerfile"><a href="#创建文件Dockerfile" class="headerlink" title="创建文件Dockerfile"></a>创建文件Dockerfile</h4><p><code>vi Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#依赖镜像名称和ID</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment">#指定镜像创建者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> ITCAST</span><br><span class="line"><span class="comment">#切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir  /usr/<span class="built_in">local</span>/java</span></span><br><span class="line"><span class="comment">#ADD 是相对路径jar,把java添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h4 id="执行命令构建镜像"><a href="#执行命令构建镜像" class="headerlink" title="执行命令构建镜像"></a>执行命令构建镜像</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker build -t</span>=<span class="string">'jdk1.8'</span> .</span><br></pre></td></tr></table></figure><p>注意后边的空格和点，不要省略</p><h4 id="查看镜像是否建立完成"><a href="#查看镜像是否建立完成" class="headerlink" title="查看镜像是否建立完成"></a>查看镜像是否建立完成</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><h2 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h2><h3 id="拉取私有仓库镜像（此步省略）"><a href="#拉取私有仓库镜像（此步省略）" class="headerlink" title="拉取私有仓库镜像（此步省略）"></a>拉取私有仓库镜像（此步省略）</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker pull registry</span></span><br></pre></td></tr></table></figure><h3 id="启动私有仓库容器"><a href="#启动私有仓库容器" class="headerlink" title="启动私有仓库容器"></a>启动私有仓库容器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -di <span class="attribute">--name</span>=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><h3 id="打开浏览器"><a href="#打开浏览器" class="headerlink" title="打开浏览器"></a>打开浏览器</h3><p>输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><h3 id="修改daemon-json"><a href="#修改daemon-json" class="headerlink" title="修改daemon.json"></a>修改daemon.json</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>docker<span class="regexp">/daemon.json</span></span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.184.141:5000"</span>]&#125;</span><br></pre></td></tr></table></figure><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h2 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h2><h3 id="标记此镜像为私有仓库的镜像"><a href="#标记此镜像为私有仓库的镜像" class="headerlink" title="标记此镜像为私有仓库的镜像"></a>标记此镜像为私有仓库的镜像</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag jdk1<span class="number">.8</span> <span class="number">192.168</span><span class="number">.184</span><span class="number">.141</span>:<span class="number">5000</span>/jdk1<span class="number">.8</span></span><br></pre></td></tr></table></figure><h3 id="再次启动私服容器"><a href="#再次启动私服容器" class="headerlink" title="再次启动私服容器"></a>再次启动私服容器</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> registry</span><br></pre></td></tr></table></figure><h3 id="上传标记的镜像"><a href="#上传标记的镜像" class="headerlink" title="上传标记的镜像"></a>上传标记的镜像</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push <span class="number">192.168</span><span class="number">.184</span><span class="number">.141</span>:<span class="number">5000</span>/jdk1<span class="number">.8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术07--JWT授权</title>
      <link href="/2019/02/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF07--JWT%E6%8E%88%E6%9D%83/"/>
      <url>/2019/02/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF07--JWT%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="无状态登录原理"><a href="#无状态登录原理" class="headerlink" title="无状态登录原理"></a>无状态登录原理</h1><p>本篇所有都是案例操作，谨慎使用</p><h2 id="什么是有状态？"><a href="#什么是有状态？" class="headerlink" title="什么是有状态？"></a>什么是有状态？</h2><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p>缺点是什么？</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><h2 id="什么是无状态"><a href="#什么是无状态" class="headerlink" title="什么是无状态"></a>什么是无状态</h2><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><ul><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><h2 id="如何实现无状态"><a href="#如何实现无状态" class="headerlink" title="如何实现无状态"></a>如何实现无状态</h2><p>无状态登录的流程：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务端对token进行解密，判断是否有效。</li></ul><p>流程图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527300483893.png" alt=""></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<code>JWT + RSA非对称加密</code></p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；<a href="https://jwt.io" target="_blank" rel="noopener">官网</a></p><p><a href="https://github.com/jwtk/jjwt">GitHub上jwt的java客户端</a></p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>JWT包含三部分数据：</p><ul><li><p>Header：头部，通常头部有两部分信息：</p><ul><li>声明类型，这里是JWT</li><li>加密算法，自定义</li></ul><p>我们会对头部进行base64加密（可解密），得到第一部分数据</p></li><li><p>Payload：载荷，就是有效数据，一般包含下面信息：</p><ul><li>用户身份信息（注意，这里因为采用base64加密，可解密，因此不要存放敏感信息）</li><li>注册声明：如token的签发时间，过期时间，签发人等</li></ul><p>这部分也会采用base64加密，得到第二部分数据</p></li><li><p>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥（secret）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</p></li></ul><p>生成的数据格式：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527322512370.png" alt=""></p><p>可以看到分为3段，每段就是上面的一部分数据</p><h3 id="JWT交互流程"><a href="#JWT交互流程" class="headerlink" title="JWT交互流程"></a>JWT交互流程</h3><p>流程图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527305891424.png" alt=""></p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给浏览器</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：  </p><ul><li>对称加密，如AES<ul><li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li><li>优势：算法公开、计算量小、加密速度快、加密效率高</li><li>缺陷：双方都使用同样密钥，安全性得不到保证 </li></ul></li><li>非对称加密，如RSA<ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端<ul><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul></li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时</li></ul></li><li>不可逆加密，如MD5，SHA<ul><li>基本原理：加密过程中不需要使用<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener">密钥</a>，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</li></ul></li></ul><p>RSA算法历史：</p><p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字缩写：RSA</p><h2 id="结合Zuul的鉴权流程"><a href="#结合Zuul的鉴权流程" class="headerlink" title="结合Zuul的鉴权流程"></a>结合Zuul的鉴权流程</h2><p>我们逐步演进系统架构设计。需要注意的是：secret是签名的关键，因此一定要保密，我们放到鉴权中心保存，其它任何服务中都不能获取secret。</p><h3 id="没有RSA加密时"><a href="#没有RSA加密时" class="headerlink" title="没有RSA加密时"></a>没有RSA加密时</h3><p>在微服务架构中，我们可以把服务的鉴权操作放到网关中，将未通过鉴权的请求直接拦截，如图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527312464328.png" alt=""></p><ul><li>1、用户请求登录</li><li>2、Zuul将请求转发到授权中心，请求授权</li><li>3、授权中心校验完成，颁发JWT凭证</li><li>4、客户端请求其它功能，携带JWT</li><li>5、Zuul将jwt交给授权中心校验，通过后放行</li><li>6、用户请求到达微服务</li><li>7、微服务将jwt交给鉴权中心，鉴权同时解析用户信息</li><li>8、鉴权中心返回用户数据给微服务</li><li>9、微服务处理请求，返回响应</li></ul><p>发现什么问题了？</p><p>每次鉴权都需要访问鉴权中心，系统间的网络请求频率过高，效率略差，鉴权中心的压力较大。</p><h3 id="结合RSA的鉴权"><a href="#结合RSA的鉴权" class="headerlink" title="结合RSA的鉴权"></a>结合RSA的鉴权</h3><p>直接看图：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527313765010.png" alt=""></p><ul><li>我们首先利用RSA生成公钥和私钥。私钥保存在授权中心，公钥保存在Zuul和各个微服务</li><li>用户请求登录</li><li>授权中心校验，通过后用私钥对JWT进行签名加密</li><li>返回jwt给用户</li><li>用户携带JWT访问</li><li>Zuul直接通过公钥解密JWT，进行验证，验证通过则放行</li><li>请求到达微服务，微服务直接用公钥解析JWT，获取用户信息，无需访问授权中心</li></ul><h1 id="授权中心"><a href="#授权中心" class="headerlink" title="授权中心"></a>授权中心</h1><h2 id="创建授权中心"><a href="#创建授权中心" class="headerlink" title="创建授权中心"></a>创建授权中心</h2><p>授权中心的主要职责：</p><ul><li>用户鉴权：<ul><li>接收用户的登录请求，通过用户中心的接口进行校验，通过后生成JWT</li><li>使用私钥生成JWT并返回</li></ul></li><li>服务鉴权：微服务间的调用不经过Zuul，会有风险，需要鉴权中心进行认证<ul><li>原理与用户鉴权类似，但逻辑稍微复杂一些（此处我们不做实现）</li></ul></li></ul><p>因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具。我们把鉴权中心进行聚合，一个工具module，一个提供服务的module</p><h3 id="创建父module"><a href="#创建父module" class="headerlink" title="创建父module"></a>创建父module</h3><p>将pom打包方式改为pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通用module"><a href="#通用module" class="headerlink" title="通用module"></a>通用module</h3><p>然后是授权服务的通用模块：auth-common：</p><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="授权服务"><a href="#授权服务" class="headerlink" title="授权服务"></a>授权服务</h3><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引导类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouAuthApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LeyouAuthApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auth-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>在leyou-gateway工程的application.yml中，修改路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 路由路径前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span> <span class="comment"># 商品微服务的映射路径</span></span><br><span class="line">    <span class="attr">search-service:</span> <span class="string">/search/**</span> <span class="comment"># 搜索微服务</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user/**</span> <span class="comment"># 用户微服务</span></span><br><span class="line">    <span class="attr">auth-service:</span> <span class="string">/auth/**</span> <span class="comment"># 授权中心微服务</span></span><br></pre></td></tr></table></figure><h2 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a>JWT工具类</h2><p>需要在<code>leyou-auth-common</code>中引入JWT依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试工具类"><a href="#测试工具类" class="headerlink" title="测试工具类"></a>测试工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String pubKeyPath = <span class="string">"C:\\tmp\\rsa\\rsa.pub"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String priKeyPath = <span class="string">"C:\\tmp\\rsa\\rsa.pri"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RsaUtils.generateKey(pubKeyPath, priKeyPath, <span class="string">"234"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenerateToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 生成token</span></span><br><span class="line">        String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(<span class="number">20L</span>, <span class="string">"jack"</span>), privateKey, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"token = "</span> + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = <span class="string">"eyJhbGciOiJSUzI1NiJ9.eyJpZCI6MjAsInVzZXJuYW1lIjoiamFjayIsImV4cCI6MTUzMzI4MjQ3N30.EPo35Vyg1IwZAtXvAx2TCWuOPnRwPclRNAM4ody5CHk8RF55wdfKKJxjeGh4H3zgruRed9mEOQzWy79iF1nGAnvbkraGlD6iM-9zDW8M1G9if4MX579Mv1x57lFewzEo-zKnPdFJgGlAPtNWDPv4iKvbKOk1-U7NUtRmMsF1Wcg"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        UserInfo user = JwtUtils.getInfoFromToken(token, publicKey);</span><br><span class="line">        System.out.println(<span class="string">"id: "</span> + user.getId());</span><br><span class="line">        System.out.println(<span class="string">"userName: "</span> + user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试生成公钥和私钥，我们运行这段代码：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533282630089.png" alt=""></p><p>运行之后，查看目标目录：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533282665940.png" alt=""></p><p>公钥和私钥已经生成了！</p><p>测试生成token，把@Before的注释去掉的：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533282760203.png" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533282875434.png" alt=""></p><p>测试解析token：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533282931796.png" alt=""></p><p>正常情况：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533282968301.png" alt=""></p><p>任意改动token，发现报错了：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533283024844.png" alt=""></p><h2 id="编写登录授权接口"><a href="#编写登录授权接口" class="headerlink" title="编写登录授权接口"></a>编写登录授权接口</h2><p>接下来，我们需要在<code>leyou-auth-servcice</code>编写一个接口，对外提供登录授权服务。基本流程如下：</p><ul><li>客户端携带用户名和密码请求登录</li><li>授权中心调用客户中心接口，根据用户名和密码查询用户信息</li><li>如果用户名密码正确，能获取用户，否则为空，则登录失败</li><li>如果校验成功，则生成JWT并返回</li></ul><h3 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h3><p>我们需要在授权中心生成真正的公钥和私钥。我们必须有一个生成公钥和私钥的secret，这个可以配置到<code>application.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">leyou@Login(Auth&#125;*^31)&amp;heiMa%</span> <span class="comment"># 登录校验的密钥</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span> <span class="string">C:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">priKeyPath:</span> <span class="string">C:\\tmp\\rsa\\rsa.pri</span> <span class="comment"># 私钥地址</span></span><br><span class="line">    <span class="attr">expire:</span> <span class="number">30</span> <span class="comment"># 过期时间,单位分钟</span></span><br></pre></td></tr></table></figure><p>然后编写属性类，加载这些数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String secret; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String priKeyPath;<span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;<span class="comment">// token过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey; <span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtProperties<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostContruct</span>：在构造方法执行之后执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File pubKey = <span class="keyword">new</span> File(pubKeyPath);</span><br><span class="line">            File priKey = <span class="keyword">new</span> File(priKeyPath);</span><br><span class="line">            <span class="keyword">if</span> (!pubKey.exists() || !priKey.exists()) &#123;</span><br><span class="line">                <span class="comment">// 生成公钥和私钥</span></span><br><span class="line">                RsaUtils.generateKey(pubKeyPath, priKeyPath, secret);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取公钥和私钥</span></span><br><span class="line">            <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">            <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"初始化公钥和私钥失败！"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>编写授权接口，我们接收用户名和密码，校验成功后，写入cookie中。</p><ul><li>请求方式：post</li><li>请求路径：/accredit</li><li>请求参数：username和password</li><li>返回结果：无</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"accredit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">authentication</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">            HttpServletRequest request,</span></span><br><span class="line"><span class="function">            HttpServletResponse response) </span>&#123;</span><br><span class="line">        <span class="comment">// 登录校验</span></span><br><span class="line">        String token = <span class="keyword">this</span>.authService.authentication(username, password);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将token写入cookie,并指定httpOnly为true，防止通过JS获取和修改</span></span><br><span class="line">        CookieUtils.setCookie(request, response, prop.getCookieName(),</span><br><span class="line">                token, prop.getCookieMaxAge(), <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cookie的name和生存时间，我们配置到属性文件：application.yml：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533295409903.png" alt=""></p><p>然后在<code>JwtProperties</code>中添加属性：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533295465634.png" alt=""></p><h3 id="CookieUtils"><a href="#CookieUtils" class="headerlink" title="CookieUtils"></a>CookieUtils</h3><p>要注意，这里我们使用了一个工具类，CookieUtils，添加到<code>leyou-common</code>中，然后引入servlet相关依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：略</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533295716082.png" alt=""></p><h3 id="UserClient"><a href="#UserClient" class="headerlink" title="UserClient"></a>UserClient</h3><p>接下来我们肯定要对用户密码进行校验，所以我们需要通过FeignClient去访问 user-service微服务：</p><p>引入user-service依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写FeignClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在leyou-user-interface工程中添加api接口：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533296452053.png" alt=""></p><p>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authentication</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用微服务，执行查询</span></span><br><span class="line">            User user = <span class="keyword">this</span>.userClient.queryUser(username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果查询结果为null，则直接返回null</span></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果有查询结果，则生成token</span></span><br><span class="line">            String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(user.getId(), user.getUsername()),</span><br><span class="line">                    properties.getPrivateKey(), properties.getExpire());</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533301291420.png" alt=""></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533301145953.png" alt=""></p><h2 id="解决cookie写入问题"><a href="#解决cookie写入问题" class="headerlink" title="解决cookie写入问题"></a>解决cookie写入问题</h2><p>接下来我们查看首页cookie：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533302034190.png" alt=""></p><p>什么都没有，为什么？</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们在之前测试时，清晰的看到了响应头中，有Set-Cookie属性，为什么在这里却什么都没有？</p><p>我们之前在讲cors跨域时，讲到过跨域请求cookie生效的条件：</p><ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li><li>浏览器发起ajax需要指定withCredentials 为true</li></ul><p>看看我们的服务端cors配置：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527518456220.png" alt=""></p><p>没有任何问题。</p><p>再看客户端浏览器的ajax配置，我们在<code>js/common.js</code>中对axios进行了统一配置：</p><p> <img src="assets/1527518532739.png" alt="1527518532739"></p><p>一切OK。</p><p>那说明，问题一定出在响应的set-cookie头中。我们再次仔细看看刚才的响应头：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1527518532739.png" alt=""></p><p>我们发现cookie的 <code>domain</code>属性似乎不太对。</p><p>cookie也是有<code>域</code> 的限制，<strong>一个网页，只能操作当前域名下的cookie</strong>，但是现在我们看到的地址是0.0.1，而页面是<a href="http://www.leyou.com,域名不匹配，cookie设置肯定失败了！" target="_blank" rel="noopener">www.leyou.com,域名不匹配，cookie设置肯定失败了！</a></p><h3 id="跟踪CookieUtils"><a href="#跟踪CookieUtils" class="headerlink" title="跟踪CookieUtils"></a>跟踪CookieUtils</h3><p>我们去Debug跟踪CookieUtils，看看到底是怎么回事：</p><p>我们发现内部有一个方法，用来获取Domain：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533303181817.png" alt=""></p><p>它获取domain是通过服务器的host来计算的，然而我们的地址竟然是：127.0.0.1:8087，因此后续的运算，最终得到的domain就变成了：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533303213902.png" alt=""></p><p>问题找到了：我们请求时的serverName明明是：api.leyou.com，现在却被变成了：127.0.0.1，因此计算domain是错误的，从而导致cookie设置失败！</p><h3 id="解决host地址的变化"><a href="#解决host地址的变化" class="headerlink" title="解决host地址的变化"></a>解决host地址的变化</h3><p>那么问题来了：为什么我们这里的请求serverName变成了：127.0.0.1:8087呢？</p><p>这里的server name其实就是请求时的主机名：Host，之所以改变，有两个原因：</p><ul><li>我们使用了nginx反向代理，当监听到api.leyou.com的时候，会自动将请求转发至127.0.0.1:10010，即Zuul。</li><li>而后请求到达我们的网关Zuul，Zuul就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了 127.0.0.1:8087 ，即我们的授权中心。</li></ul><p>我们首先去更改nginx配置，让它不要修改我们的host：<code>proxy_set_header Host $host;</code></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533303544219.png" alt=""></p><p>把nginx进行reload：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure><p>这样就解决了nginx这里的问题。但是Zuul还会有一次转发，所以要去修改网关的配置（leyou-gateway工程）：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533303659673.png" alt=""></p><p>重启后，我们再次测试。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533716093162.png" alt=""></p><h3 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h3><p>我们再次登录，发现依然没有cookie！！</p><p>我们通过RestClient访问下看看：</p><p>发现，响应头中根本没有<code>set-cookie</code>了。</p><p>这是怎么回事？？</p><h3 id="Zuul的敏感头过滤"><a href="#Zuul的敏感头过滤" class="headerlink" title="Zuul的敏感头过滤"></a>Zuul的敏感头过滤</h3><p>Zuul内部有默认的过滤器，会对请求和响应头信息进行重组，过滤掉敏感的头信息：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533732985089.png" alt=""></p><p>会发现，这里会通过一个属性为<code>SensitiveHeaders</code>的属性，来获取敏感头列表，然后添加到<code>IgnoredHeaders</code>中，这些头信息就会被忽略。</p><p>而这个<code>SensitiveHeaders</code>的默认值就包含了<code>set-cookie</code>：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533733081367.png" alt=""></p><p>解决方案有两种：</p><p>全局设置：</p><ul><li><code>zuul.sensitive-headers=</code> </li></ul><p>指定路由设置：</p><ul><li><code>zuul.routes.&lt;routeName&gt;.sensitive-headers=</code></li><li><code>zuul.routes.&lt;routeName&gt;.custom-sensitive-headers=true</code></li></ul><p>思路都是把敏感头设置为null</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533733356133.png" alt=""></p><h1 id="首页判断登录状态"><a href="#首页判断登录状态" class="headerlink" title="首页判断登录状态"></a>首页判断登录状态</h1><p>虽然cookie已经成功写入，但是我们首页的顶部，登录状态依然没能判断出用户信息：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533733618901.png" alt=""></p><p>这里需要向后台发起请求，根据cookie获取当前用户的信息。</p><p>我们先看页面实现</p><h2 id="页面JS代码"><a href="#页面JS代码" class="headerlink" title="页面JS代码"></a>页面JS代码</h2><p>页面的顶部已经被我们封装为一个独立的Vue组件，在<code>/js/pages/shortcut.js</code>中</p><p>打开js，发现里面已经定义好了Vue组件，并且在created函数中，查询用户信息：</p><p>查看网络控制台，发现发起了请求：</p><p>因为token在cookie中，因此本次请求肯定会携带token信息在头中。</p><h2 id="后台实现校验用户接口"><a href="#后台实现校验用户接口" class="headerlink" title="后台实现校验用户接口"></a>后台实现校验用户接口</h2><p>我们在<code>leyou-auth-service</code>中定义用户的校验接口，通过cookie获取token，然后校验通过返回用户信息。</p><ul><li>请求方式：GET</li><li>请求路径：/verify</li><li>请求参数：无，不过我们需要从cookie中获取token信息</li><li>返回结果：UserInfo，校验成功返回用户信息；校验失败，则返回401</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 验证用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"verify"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title">verifyUser</span><span class="params">(@CookieValue(<span class="string">"LY_TOKEN"</span>)</span>String token)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从token中解析token信息</span></span><br><span class="line">        UserInfo userInfo = JwtUtils.getInfoFromToken(token, <span class="keyword">this</span>.properties.getPublicKey());</span><br><span class="line">        <span class="comment">// 解析成功返回用户信息</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出现异常则，响应500</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h2><p>每当用户在页面进行新的操作，都应该刷新token的过期时间，否则30分钟后用户的登录信息就无效了。而刷新其实就是重新生成一份token，然后写入cookie即可。</p><p>那么问题来了：我们怎么知道用户有操作呢？</p><p>事实上，每当用户来查询其个人信息，就证明他正在浏览网页，此时刷新cookie是比较合适的时机。因此我们可以对刚刚的校验用户登录状态的接口进行改进，加入刷新token的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 验证用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"verify"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title">verifyUser</span><span class="params">(@CookieValue(<span class="string">"LY_TOKEN"</span>)</span>String token, HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从token中解析token信息</span></span><br><span class="line">        UserInfo userInfo = JwtUtils.getInfoFromToken(token, <span class="keyword">this</span>.properties.getPublicKey());</span><br><span class="line">        <span class="comment">// 解析成功要重新刷新token</span></span><br><span class="line">        token = JwtUtils.generateToken(userInfo, <span class="keyword">this</span>.properties.getPrivateKey(), <span class="keyword">this</span>.properties.getExpire());</span><br><span class="line">        <span class="comment">// 更新cookie中的token</span></span><br><span class="line">        CookieUtils.setCookie(request, response, <span class="keyword">this</span>.properties.getCookieName(), token, <span class="keyword">this</span>.properties.getCookieMaxAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析成功返回用户信息</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出现异常则，响应500</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网关的登录拦截器"><a href="#网关的登录拦截器" class="headerlink" title="网关的登录拦截器"></a>网关的登录拦截器</h1><p>接下来，我们在Zuul编写拦截器，对用户的token进行校验，如果发现未登录，则进行拦截。</p><h2 id="引入jwt相关配置"><a href="#引入jwt相关配置" class="headerlink" title="引入jwt相关配置"></a>引入jwt相关配置</h2><p>既然是登录拦截，一定是前置拦截器，我们在<code>leyou-gateway</code>中定义。</p><p>首先在pom.xml中，引入所需要的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.auth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写application.yml属性文件，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">pubKeyPath:</span>  <span class="string">C:\\tmp\\rsa\\rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line">    <span class="attr">cookieName:</span> <span class="string">LY_TOKEN</span> <span class="comment"># cookie的名称</span></span><br></pre></td></tr></table></figure><p>编写属性类，读取公钥：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533736124053.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"leyou.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtProperties<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取公钥和私钥</span></span><br><span class="line">            <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"初始化公钥失败！"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPubKeyPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pubKeyPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPubKeyPath</span><span class="params">(String pubKeyPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pubKeyPath = pubKeyPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PublicKey <span class="title">getPublicKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublicKey</span><span class="params">(PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCookieName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cookieName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCookieName</span><span class="params">(String cookieName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cookieName = cookieName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写过滤器逻辑"><a href="#编写过滤器逻辑" class="headerlink" title="编写过滤器逻辑"></a>编写过滤器逻辑</h2><p>基本逻辑：</p><ul><li>获取cookie中的token</li><li>通过JWT对token进行校验</li><li>通过：则放行；不通过：则重定向到登录页</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取request</span></span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, <span class="keyword">this</span>.properties.getCookieName());</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验通过什么都不做，即放行</span></span><br><span class="line">            JwtUtils.getInfoFromToken(token, <span class="keyword">this</span>.properties.getPublicKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 校验出现异常，返回403</span></span><br><span class="line">            context.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            context.setResponseStatusCode(HttpStatus.FORBIDDEN.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启，刷新页面，发现请求校验的接口也被拦截了：</p><p>证明我们的拦截器生效了，但是，似乎有什么不对的。这个路径似乎不应该被拦截啊！</p><h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><p>要注意，并不是所有的路径我们都需要拦截，例如：</p><ul><li>登录校验接口：<code>/auth/**</code></li><li>注册接口：<code>/user/register</code></li><li>数据校验接口：<code>/user/check/**</code></li><li>发送验证码接口：<code>/user/code</code></li><li>搜索接口：<code>/search/**</code></li></ul><p>另外，跟后台管理相关的接口，因为我们没有做登录和权限，因此暂时都放行，但是生产环境中要做登录校验：</p><ul><li>后台商品服务：<code>/item/**</code></li></ul><p>所以，我们需要在拦截时，配置一个白名单，如果在名单内，则不进行拦截。</p><p>在<code>application.yaml</code>中添加规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leyou:</span></span><br><span class="line">  <span class="attr">filter:</span></span><br><span class="line">    <span class="attr">allowPaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/search</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/user/register</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/user/check</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/user/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/api/item</span></span><br></pre></td></tr></table></figure><p>然后读取这些属性：</p><p>内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"leyou.filter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowPaths;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllowPaths</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allowPaths;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllowPaths</span><span class="params">(List&lt;String&gt; allowPaths)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.allowPaths = allowPaths;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在过滤器中的<code>shouldFilter</code>方法中添加判断逻辑：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533737832161.png" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;JwtProperties<span class="class">.<span class="keyword">class</span>, <span class="title">FilterProperties</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FilterProperties filterProp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LoginFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取request</span></span><br><span class="line">        HttpServletRequest req = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 获取路径</span></span><br><span class="line">        String requestURI = req.getRequestURI();</span><br><span class="line">        <span class="comment">// 判断白名单</span></span><br><span class="line">        <span class="keyword">return</span> !isAllowPath(requestURI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAllowPath</span><span class="params">(String requestURI)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个标记</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 遍历允许访问的路径</span></span><br><span class="line">        <span class="keyword">for</span> (String path : <span class="keyword">this</span>.filterProp.getAllowPaths()) &#123;</span><br><span class="line">            <span class="comment">// 然后判断是否是符合</span></span><br><span class="line">            <span class="keyword">if</span>(requestURI.startsWith(path))&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取request</span></span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, jwtProp.getCookieName());</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 校验通过什么都不做，即放行</span></span><br><span class="line">            JwtUtils.getInfoFromToken(token, jwtProp.getPublicKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 校验出现异常，返回403</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">403</span>);</span><br><span class="line">            logger.error(<span class="string">"非法访问，未登录，地址：&#123;&#125;"</span>, request.getRemoteHost(), e );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/JWT/assets/1533737743491.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程01 -- 基础知识</title>
      <link href="/2019/02/02/python%E7%BC%96%E7%A8%8B01%20--%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/02/02/python%E7%BC%96%E7%A8%8B01%20--%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要对运用的python语言知识进行归纳和回顾使用，不定期更新，主要是对语言特性、数据类型、语句块、函数、类、模块、错误、线程、进程等内容的积累</p><a id="more"></a><h2 id="python2-python3"><a href="#python2-python3" class="headerlink" title="python2/python3"></a>python2/python3</h2><h3 id="核心类差异"><a href="#核心类差异" class="headerlink" title="核心类差异"></a>核心类差异</h3><ul><li><p>python3对unicode字符原生支持</p><blockquote><p>python2中使用ascil码作为默认编码方式导致string有两种类型str和uniclde</p></blockquote><blockquote><p>python3只支持unicode的string</p></blockquote><table><thead><tr><th align="center">python2</th><th align="center">python3</th><th align="center">表现</th><th align="center">转换</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">str</td><td align="center">bytes</td><td align="center">字节</td><td align="center">encode</td><td align="center">存储</td></tr><tr><td align="center">unicode</td><td align="center">str</td><td align="center">字符</td><td align="center">decode</td><td align="center">显示</td></tr></tbody></table></li><li><p>import导入方式</p><pre><code>python3采用绝对路径方式import，若需要导入同一目录的文件必须使用绝对路径，否则只能用相关导入的方式，python2采用的相对路径，容易混淆</code></pre></li><li><p>类</p><blockquote><p>python3只有新式类没有老式类。新式类申明要求继承object，必须用新式类应用多重继承</p></blockquote></li><li><p>缩进</p><p>  python3使用更加严格的缩进，不被允许tab和space共存，一个tab只能找另外的tab替代，共存报错<br>  <code>TabError:inconsistent use of tabs and space in indentation</code></p></li></ul><h3 id="废弃类差异"><a href="#废弃类差异" class="headerlink" title="废弃类差异"></a>废弃类差异</h3><ul><li><p>print语句被Python3废弃，统一使用print函数</p></li><li><p>exec语句被python3废弃，统一使用exec函数</p></li><li><p>execfile语句被Python3废弃，推荐使用exec(open(“./filename”).read())</p></li><li><p>不相等操作符”&lt;&gt;”被Python3废弃，统一使用”!=”</p></li><li><p>long整数类型被Python3废弃，统一使用int</p></li><li><p>xrange函数被Python3废弃，统一使用range，Python3中range的机制也进行修改并提高了大数据集生成效率</p></li><li><p>Python3中这些方法再不再返回list对象：dictionary关联的keys()、values()、items()，zip()，map()，filter()，但是可以通过list强行转换：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mydict&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">mydict.keys()  #&lt;built-in method keys of dict object at 0x000000000040B4C8&gt;</span><br><span class="line">list(mydict.keys()) #[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;]</span><br></pre></td></tr></table></figure></li><li><p>迭代器iterator的next()函数被Python3废弃，统一使用next(iterator)</p></li><li><p>raw_input函数被Python3废弃，统一使用input函数</p></li><li><p>字典变量的has_key函数被Python废弃，统一使用in关键词</p></li><li><p>file函数被Python3废弃，统一使用open来处理文件，可以通过io.IOBase检查文件类型</p></li><li><p>apply函数被Python3废弃</p></li><li><p>异常StandardError 被Python3废弃，统一使用Exception</p></li></ul><h3 id="修改类差异"><a href="#修改类差异" class="headerlink" title="修改类差异"></a>修改类差异</h3><ul><li><p>浮点数除法操作符“/”和“//”的区别</p><p>  <code>“ / ”</code>：</p><blockquote><p>Python2：若为两个整形数进行运算，结果为整形，但若两个数中有一个为浮点数，则结果为浮点数；</p></blockquote><blockquote><p>Python3:为真除法，运算结果不再根据参加运算的数的类型。</p></blockquote><p>  <code>“//”</code>：</p><blockquote><p>Python2：返回小于除法运算结果的最大整数；从类型上讲，与”/“运算符返回类型逻辑一致。</p></blockquote><blockquote><p>Python3：和Python2运算结果一样。</p></blockquote></li><li><p>异常抛出和捕捉机制区别</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python2</span><br><span class="line">raise IOError, &quot;file error&quot; #抛出异常</span><br><span class="line">except NameError, err:  #捕捉异常</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python3</span><br><span class="line">raise IOError(&quot;file error&quot;) #抛出异常</span><br><span class="line">except NameError as err: #捕捉异常</span><br></pre></td></tr></table></figure></li><li><p>for循环中变量值区别</p><blockquote><p>Python2，for循环会修改外部相同名称变量的值</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1</span><br><span class="line">print （&#39;comprehension: &#39;, [i for i in range(5)]）</span><br><span class="line">print （&#39;after: i &#x3D;&#39;, i  ） #i&#x3D;4</span><br></pre></td></tr></table></figure><blockquote><p>Python3，for循环不会修改外部相同名称变量的值</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1</span><br><span class="line">print （&#39;comprehension: &#39;, [i for i in range(5)]）</span><br><span class="line">print （&#39;after: i &#x3D;&#39;, i  ） #i&#x3D;1</span><br></pre></td></tr></table></figure></li><li><p>round函数返回值区别</p><blockquote><p>Python2，round函数返回float类型值 <code>isinstance(round(15.5),int)</code>#False</p></blockquote><blockquote><p>Python3，round函数返回int类型值 <code>isinstance(round(15.5),float)</code>#False</p></blockquote></li><li><p>比较操作符区别</p><blockquote><p>Python2中任意两个对象都可以比较<br><code>11 &lt; &#39;test&#39;</code> #True</p></blockquote><blockquote><p>Python3中只有同一数据类型的对象可以比较<br><code>11 &lt; &#39;test&#39;</code># TypeError: unorderable types: int() &lt; str()</p></blockquote></li></ul><h3 id="工具安装问题"><a href="#工具安装问题" class="headerlink" title="工具安装问题"></a>工具安装问题</h3><ul><li><p>windows环境</p><blockquote><p>1.Python2 无法安装mysqlclient。Python3 无法安装MySQL-python、 flup、functools32、Gooey、Pywin32、 webencodings。</p></blockquote><blockquote><p>2.matplotlib在python3环境中安装报错：<code>The following required packages can not be built:freetype, png</code>。需要手动下载安装源码包安装解决。</p></blockquote><blockquote><p>3.scipy在Python3环境中安装报错，<code>numpy.distutils.system_info.NotFoundError</code>，需要自己手工下载对应的安装包，依赖numpy,pandas必须严格根据python版本、操作系统、64位与否。</p></blockquote><blockquote><p>4.运行matplotlib后发现基础包numpy+mkl安装失败，需要自己下载，国内暂无下载源</p></blockquote></li><li><p>centos环境下</p><blockquote><p>1.Python2无法安装mysql-python和mysqlclient包，报错：<code>EnvironmentError: mysql_config not found</code>，解决方案是安装mysql-devel包解决。</p></blockquote><blockquote><p>2.使用matplotlib报错：<code>no module named _tkinter</code>，安装Tkinter、tk-devel、tc-devel解决。</p></blockquote></li><li><p>pywin32也无法在centos环境下安装。</p></li></ul><h2 id="python3内核"><a href="#python3内核" class="headerlink" title="python3内核"></a>python3内核</h2><h3 id="提升性能"><a href="#提升性能" class="headerlink" title="提升性能"></a>提升性能</h3><ul><li>使用多进程，充分利用机器的多核性能</li><li>对于性能影响较大的部分代码，可以使用C或C++编写</li><li>对于IO阻塞造成的性能影响，可以使用IO多路复用来解决</li><li>尽量使用Python的内建函数</li><li>尽量使用局部变量</li></ul><h3 id="内存管理与垃圾回收机制"><a href="#内存管理与垃圾回收机制" class="headerlink" title="内存管理与垃圾回收机制"></a>内存管理与垃圾回收机制</h3><ul><li><p>Python的内存管理机制及调优手段</p><pre><code>内存管理机制：引用计数、垃圾回收、内存池</code></pre></li><li><p>引用计数：</p><blockquote><p>引用计数是一种非常高效的内存管理手段， 当一个 Python 对象被引用时其引用计数增加1， 当其不再被一个变量引用时则计数减 1. 当引用计数等于0时对象被删除。</p></blockquote></li><li><p>垃圾回收 ：</p><blockquote><p>引用计数</p></blockquote><blockquote><blockquote><p>引用计数也是一种垃圾收集机制，而且也是一种最直观，最简单的垃圾收集技术。当 Python 的某个对象的引用计数降为 0 时，说明没有任何引用指向该对象，该对象就成为要被回收的垃圾了。比如某个新建对象，它被分配给某个引用，对象的引用计数变为 1。如果引用被删除，对象的引用计数为 0，那么该对象就可以被垃圾回收。不过如果出现循环引用的话，引用计数机制就不再起有效的作用了</p></blockquote></blockquote><blockquote><p>标记清除</p></blockquote><blockquote><blockquote><p>如果两个对象的引用计数都为 1，但是仅仅存在他们之间的循环引用，那么这两个对象都是需要被回收的，也就是说，它们的引用计数虽然表现为非 0，但实际上有效的引用计数为 0。所以先将循环引用摘掉，就会得出这两个对象的有效计数。</p></blockquote></blockquote><blockquote><p>分代回收</p></blockquote><blockquote><blockquote><p>从前面“标记-清除”这样的垃圾收集机制来看，这种垃圾收集机制所带来的额外操作实际上与系统中总的内存块的数量是相关的，当需要回收的内存块越多时，垃圾检测带来的额外操作就越多，而垃圾回收带来的额外操作就越少；反之，当需回收的内存块越少时，垃圾检测就将比垃圾回收带来更少的额外操作。</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>举个例子：<br>当某些内存块 M 经过了 3 次垃圾收集的清洗之后还存活时，我们就将内存块 M 划到一个集合 A 中去，而新分配的内存都划分到集合 B 中去。当垃圾收集开始工作时，大多数情况都只对集合 B 进行垃圾回收，而对集合 A 进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合 B 中的某些内存块由于存活时间长而会被转移到集合 A 中，当然，集合 A 中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p></blockquote></blockquote></blockquote><blockquote><p>内存池：</p></blockquote><blockquote><blockquote><p>Python 的内存机制呈现金字塔形状，-1，-2 层主要有操作系统进行操作；<br>第 0 层是 C 中的 malloc，free 等内存分配和释放函数进行操作；<br>第1 层和第 2 层是内存池，有 Python 的接口函数 PyMem_Malloc 函数实现，当对象小于 256K 时有该层直接分配内存；<br>第3层是最上层，也就是我们对 Python 对象的直接操作；<br>Python 在运行期间会大量地执行 malloc 和 free 的操作，频繁地在用户态和核心态之间进行切换，这将严重影响 Python 的执行效率。为了加速Python 的执行效率，Python 引入了一个内存池机制，用于管理对小块内存的申请和释放。</p></blockquote></blockquote><blockquote><blockquote><p>Python 内部默认的小块内存与大块内存的分界点定在 256 个字节，当申请的内存小于 256 字节时，PyObject_Malloc会在内存池中申请内存；当申请的内存大于 256 字节时，PyObject_Malloc 的行为将蜕化为 malloc 的行为。当然，通过修改 Python 源代码，我们可以改变这个默认值，从而改变 Python 的默认内存管理行为。</p></blockquote></blockquote></li><li><p>调优手段（了解）</p><blockquote><p>1.手动垃圾回收</p></blockquote><blockquote><p>2.调高垃圾回收阈值</p></blockquote><blockquote><p>3.避免循环引用（手动解循环引用和使用弱引用）</p></blockquote></li></ul><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><pre><code>    指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。导致程序运行速度减慢甚至系统崩溃等严重后果。</code></pre><blockquote><p>有 <strong>del</strong>() 函数的对象间的循环引用是导致内存泄漏的主凶</p></blockquote><pre><code>    不使用一个对象时使用:del object 来删除一个对象的引用计数就可以有效防止内存泄漏问题。</code></pre><blockquote><p>通过Python 扩展模块 gc 来查看不能回收的对象的详细信息。</p></blockquote><pre><code>    可以通过 sys.getrefcount(obj) 来获取对象的引用计数，并根据返回值是否为 0 来判断是否内存泄漏。</code></pre><h2 id="类型和变量"><a href="#类型和变量" class="headerlink" title="类型和变量"></a>类型和变量</h2><h3 id="常用内置对象"><a href="#常用内置对象" class="headerlink" title="常用内置对象"></a>常用内置对象</h3><table><thead><tr><th align="center">对象类型</th><th align="center">类型名称</th><th align="center">示例</th><th align="center">简要说明</th></tr></thead><tbody><tr><td align="center">数字</td><td align="center">int、float</td><td align="center">1、3.14</td><td align="center">数字大小没有限制，内置支持复数及其运算</td></tr><tr><td align="center">字符串</td><td align="center">str</td><td align="center">‘hello’、”python”、’‘’world’’’、r’abc’、R’bcd’</td><td align="center">使用单引号、双引号、三引号作为界定符，以字母r和R引导表示原生字符串</td></tr><tr><td align="center">列表</td><td align="center">list</td><td align="center">[1,2,3]、[‘a’,’b’]</td><td align="center">元素可为任意类型</td></tr><tr><td align="center">字典</td><td align="center">dict</td><td align="center">{“aa”:”11”}</td><td align="center">元素形式为：键：值</td></tr><tr><td align="center">元组</td><td align="center">tuple</td><td align="center">(2,-2,1)、(3,)</td><td align="center">不可变的列表，如果只有一个元素，后面的逗号不能省略</td></tr><tr><td align="center">布尔</td><td align="center">bool</td><td align="center">True、False</td><td align="center">逻辑值</td></tr><tr><td align="center">空类型</td><td align="center">NoneType</td><td align="center">None</td><td align="center">空值</td></tr><tr><td align="center">异常</td><td align="center">ValueError、TypeError…</td><td align="center"></td><td align="center">python内置异常，对应不同类型的异常</td></tr></tbody></table><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><table><thead><tr><th align="center">type</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">d i u</td><td align="center">十进制整数</td></tr><tr><td align="center">o</td><td align="center">八进制整数</td></tr><tr><td align="center">x X</td><td align="center">十六进制整数（x的话数字里字母为小写，X为大写）</td></tr><tr><td align="center">e E</td><td align="center">科学技数法</td></tr><tr><td align="center">f F</td><td align="center">浮点数（默认保留6位小数）</td></tr><tr><td align="center">g G</td><td align="center">自动选择最优表示法（整数、浮点数、科学技数）</td></tr><tr><td align="center">c</td><td align="center">单个字符或整数转化为字符</td></tr><tr><td align="center">s</td><td align="center">用str()转化为字符串</td></tr><tr><td align="center">r</td><td align="center">用repr()转化为字符串</td></tr><tr><td align="center">a</td><td align="center">用ascii（）转化为字符串</td></tr></tbody></table><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>变量命名</p><pre><code>变量中不能有空格以及标点符号大小写敏感数字不出现在开头内置关键字不会出现在其中（查询关键：导入keyword包，print(keyword.kwlist)）符合常识并有意义</code></pre></li><li><p>对象</p><blockquote><p>python 中一切皆对象 </p></blockquote><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center">内存地址（身份id）</td></tr><tr><td align="center">类型（type）</td></tr><tr><td align="center">值（实际值）</td></tr></tbody></table></li></ul><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><ul><li><p>运算符说明</p><table><thead><tr><th align="center">运算符</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">算数加法，列表、元组、字符串合并与连接，正号</td></tr><tr><td align="center">-</td><td align="center">算数减法，集合差集，相反数</td></tr><tr><td align="center">*</td><td align="center">算数乘法，序列重复</td></tr><tr><td align="center">/</td><td align="center">真除法</td></tr><tr><td align="center">//</td><td align="center">整除，若其中包含实数，结果也为实数</td></tr><tr><td align="center">%</td><td align="center">余数，字符串格式化</td></tr><tr><td align="center">**</td><td align="center">幂运算</td></tr><tr><td align="center">&lt; &gt; &lt;= &gt;= != ==</td><td align="center">值比较符，集合的包含关系比较</td></tr></tbody></table></li><li><p>python 运算符与功能</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">or</span>: 逻辑或</span><br><span class="line"><span class="keyword">and</span>:逻辑与</span><br><span class="line"><span class="keyword">not</span>：逻辑非</span><br><span class="line"><span class="keyword">in</span>:成员测试</span><br><span class="line"><span class="keyword">is</span>:对象测试，即判断是否为同一对象或内存地址是否相同</span><br></pre></td></tr></table></figure></li><li><p>二进制位运算符：如果为十进制会将其先转化为二进制进行下述运算</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| ：位或</span><br><span class="line">^ : 位异或</span><br><span class="line">&amp; ：位与</span><br><span class="line">&lt;&lt; : 左位移</span><br><span class="line">&gt;&gt; : 右位移</span><br><span class="line">～ ：位求反</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数基本定义"><a href="#函数基本定义" class="headerlink" title="函数基本定义"></a>函数基本定义</h3><ul><li>申明 函数命名规则与变量一样</li><li>函数需要调用后才会运行，并函数可重复调用</li><li>函数内部申明的变量在外部无法使用，即函数作用域</li><li>全局变量：在函数外部定义的变量，可以拿到函数内部使用，只需要在需要使用该变量的函数内部将该变量变为全局变量：global 变量名</li><li>变量的传递：将需要传递的变量放入函数头（）中,传递多个参数时，用, 隔开，在调用函数时需要注意一一对应其变量值，即 参数：可随意改变的值</li><li>函数返回值：return 返回变量 ，调用函数则会返回return的结果，，其函数中若没有return 会在结尾自动加一个，存在输出语句则也会输出</li><li>自定义函数/内置函数</li><li>return: 返回的为函数时，会暂停运行并调用相关函数，直到返回值为确定值，则继续运行该函数</li><li>递归函数：函数调用函数本身</li></ul><h3 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h3><ul><li><p>1.1 * 2 * 3 * 4 * 5 * 。。。n =</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">步骤： 1. 停止条件：n &#x3D; 1</span><br><span class="line">  2. 分解条件（规律）： 若 n &#x3D; 5  （确认一个后面的数，往前推）</span><br><span class="line">  </span><br><span class="line">5 * num_sum(4)</span><br><span class="line">   4   *  num_sum(3)</span><br><span class="line">        3   *  num_sum(2)</span><br><span class="line">    2  * num_sum(1) --&gt; num_sum(1)&#x3D;&#x3D;1</span><br><span class="line">5 * 4  * 3 *    2 *   1</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_sum</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> n == <span class="number">1</span>:            <span class="comment">#添加停止条件</span></span><br><span class="line">       <span class="keyword">return</span> n</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> n * num_sum(n - <span class="number">1</span>)    <span class="comment">#递归函数，分解条件</span></span><br><span class="line">print(num_sum(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li><li><p>斐波拉契数：1 1 2 3 5 8 …</p><p>  步骤：</p><pre><code>1.停止条件：n = 1或者 n = 2 即 num_qq(1) = 1 num_qq(2) = 1 （即最小元子确认）2.循环条件：若 n = 5 ：  bile(n) + bile(n-1)                     bile(5)                     /     \            bile(4)  +   bile(3)           /      \                        bile(3)+ bile(2)          /     \    1             bile(2)+bile(1)       1       1</code></pre></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def num_qq(n):</span><br><span class="line">   if n &#x3D;&#x3D; 1 or n &#x3D;&#x3D; 2:     #添加停止条件</span><br><span class="line">       return 1</span><br><span class="line">   else:</span><br><span class="line">       return num_qq(n - 1) + num_qq(n - 2)   </span><br><span class="line">       #递归函数分解条件，反推或者正推 数值太大会卡顿</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>汉诺塔</p><blockquote><p>递归函数：解题思路，将n==1的写出来 即将底层的结果写出来，然后<br>  将自己知道的过程或者下一步写出来，将下一步的如2 当成n </p></blockquote>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def is<span class="constructor">_equeue(<span class="params">n</span>,<span class="params">start</span>, <span class="params">mid</span>, <span class="params">end</span>)</span>:</span><br><span class="line">   <span class="keyword">if</span> n<span class="operator"> == </span><span class="number">1</span>:</span><br><span class="line">       print(<span class="string">"&#123;&#125; to &#123;&#125;"</span>.format(start,<span class="keyword">end</span>))     </span><br><span class="line">       #一个的时候移动步骤</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       is<span class="constructor">_equeue(<span class="params">n</span> -1,<span class="params">start</span>,<span class="params">end</span>,<span class="params">mid</span>)</span>           </span><br><span class="line">       #两个时候的移动步骤，当成n     <span class="number">2</span>-<span class="number">1</span></span><br><span class="line">       is<span class="constructor">_equeue(1,<span class="params">start</span>,<span class="params">mid</span>,<span class="params">end</span>)</span></span><br><span class="line">       is<span class="constructor">_equeue(<span class="params">n</span>-1,<span class="params">mid</span>,<span class="params">start</span>,<span class="params">end</span>)</span></span><br><span class="line"></span><br><span class="line">is<span class="constructor">_equeue(3,'<span class="params">a</span>','<span class="params">b</span>','<span class="params">c</span>')</span></span><br></pre></td></tr></table></figure></li><li><p>二分法查找</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(i, l)</span>:</span></span><br><span class="line">   num = len(l) // <span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span> len(l) == <span class="number">0</span>:</span><br><span class="line">       print(<span class="string">"0"</span>)</span><br><span class="line">   <span class="keyword">elif</span> i &gt; l[num]:</span><br><span class="line">       find(i,l[(num + <span class="number">1</span>): ]) </span><br><span class="line">       <span class="comment">#可以不再判断这个中间值 直接+1</span></span><br><span class="line">   <span class="keyword">elif</span> i &lt; l[num]:</span><br><span class="line">       find(i,l[ :num])</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       print(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">find(<span class="number">13</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">查找并定位</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(l,num,start,end)</span>:</span></span><br><span class="line">   mid_index = (end + start) // <span class="number">2</span></span><br><span class="line">   <span class="keyword">if</span> start &gt; end:</span><br><span class="line">       print(<span class="string">"列表中不存在%d"</span>%num)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">if</span> l[mid_index] &gt; num:</span><br><span class="line">           <span class="keyword">return</span> find(l,num,<span class="number">1</span>,mid_index <span class="number">-1</span>)</span><br><span class="line">       <span class="keyword">elif</span> l[mid_index] &lt; num:</span><br><span class="line">           <span class="keyword">return</span> find(l,num,mid_index + <span class="number">1</span>,end)</span><br><span class="line">       <span class="keyword">elif</span> l[mid_index] == num:</span><br><span class="line">           print(<span class="string">"%d 的位置为：%d"</span>%(num,mid_index))</span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">45</span>]</span><br><span class="line">find_i = len(l)</span><br><span class="line">find(l,<span class="number">3</span>,<span class="number">0</span>,find_i)</span><br></pre></td></tr></table></figure></li><li><p>一等函数，和变量一样，可传递和赋值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">   print(<span class="number">2112</span>)</span><br><span class="line">a = fun1   <span class="comment">#当成变量进行赋值</span></span><br><span class="line">b = a</span><br><span class="line">b()     <span class="comment">#此时才是运行函数</span></span><br></pre></td></tr></table></figure></li><li><p>高阶函数  接受函数作为参数的函数 详见pysort.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sorted  排序，</span><br><span class="line">fruits=[<span class="string">'strawberry'</span>,<span class="string">'fig'</span>,<span class="string">'apple'</span>,<span class="string">'cherry'</span></span><br><span class="line">,<span class="string">'raspberry'</span>,<span class="string">'banana'</span>]</span><br><span class="line"></span><br><span class="line">list2 = sorted(fruits,key=len)   <span class="comment">#根据len产生的返回值进行排序</span></span><br><span class="line">print(list2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_num</span><span class="params">(list1)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> list1[<span class="number">0</span>]</span><br><span class="line">list4 = sorted(fruits,key=first_num)</span><br><span class="line">print(list4)</span><br><span class="line">lamda  无法复用，简单结构可以使用</span><br><span class="line">list5 = sorted(fruits,key=<span class="keyword">lambda</span> list_1: list_1[<span class="number">0</span>])</span><br><span class="line">print(list5)</span><br></pre></td></tr></table></figure></li></ul><h2 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h2><h3 id="if-判断语句"><a href="#if-判断语句" class="headerlink" title="if 判断语句"></a>if 判断语句</h3><pre><code>只接受True/False，只运行判断为真的语句快。语句快中pass会不执行这一块语句可以在判断语句中先赋值，再在语句外调用该值if   else:if elif else: 满足其中一个条件则执行该条件后直接跳出语句块</code></pre><h3 id="基础判断举例"><a href="#基础判断举例" class="headerlink" title="基础判断举例"></a>基础判断举例</h3><ul><li><p>该成员是否是会员</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">is_plus = <span class="literal">True</span> <span class="comment">#是否是会员    # 基础判断</span></span><br><span class="line"><span class="keyword">if</span> is_plus:</span><br><span class="line">    print(<span class="string">"恭喜你，会员大大 "</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> is_plus:</span><br><span class="line">    print(<span class="string">"垃圾小号"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"请充钱"</span>)</span><br><span class="line">print(<span class="string">"用薪创造快乐"</span>)</span><br></pre></td></tr></table></figure></li><li><p>折扣计算</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buy_sum = float(input(<span class="string">"购买后金额为："</span>))     <span class="comment">#折扣计算</span></span><br><span class="line"><span class="keyword">if</span> buy_sum &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"非法操作"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> buy_sum &gt; <span class="number">400</span>:</span><br><span class="line">        buy_sum = buy_sum * <span class="number">0.85</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        buy_sum = buy_sum * <span class="number">0.95</span></span><br><span class="line">    print(<span class="string">"实际支付金额：%.2f"</span> % buy_sum)</span><br></pre></td></tr></table></figure></li><li><p>分数等级判断</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">score = float(input(<span class="string">"分数： "</span>))     <span class="comment">#输入分数并判断其等级</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"无法判断"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">"等级为： A"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"等级为： F"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li><p>while：</p><blockquote><p>若判断条件为真，循环运行其中的语句块，若为假，运行语句块外语句  注意：每次循环都会执行一次while进行判断</p></blockquote><blockquote><p>break：停止循环</p></blockquote><blockquote><p>continu：结束本次循环继续下一次循环</p></blockquote></li></ul><h3 id="while循环举例"><a href="#while循环举例" class="headerlink" title="while循环举例"></a>while循环举例</h3><ul><li>成绩录入</li></ul><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    n = input(<span class="string">"请输入第&#123;&#125;科成绩: "</span>.format(num))</span><br><span class="line">    n = int(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">100</span> <span class="keyword">or</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        n = input(<span class="string">"输入错误，请重新输入第&#123;0&#125;科成绩"</span>.format(num))     <span class="comment">#print（"输入错误，请重新输入"） continue</span></span><br><span class="line">        n = int(n)                                               <span class="comment">#使用continu可以结束本次循环</span></span><br><span class="line">    score = score + n</span><br><span class="line">    <span class="keyword">if</span> num &gt;=<span class="number">5</span>:</span><br><span class="line">        print(<span class="string">"总成绩为：&#123;0&#125;,平均成绩为：&#123;1&#125;"</span>.format(score, </span><br><span class="line">        score/num))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>九九乘法表</p><blockquote><p>利用while循环进行，声明变量需要清晰表达所表达的内容</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">倒九九乘法表</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">9</span></span><br><span class="line">    xx =<span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= i:</span><br><span class="line">        xx += (<span class="string">"&#123;0:d&#125; * &#123;1:d&#125; = &#123;2:2d&#125;  |  "</span>.format(i,j,i * j))</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">    print(xx)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>图形数字输出</p><blockquote><p>在做类似多个循环嵌套时，可以将循环拆分开一步一步分拆成单个变量循环，最后嵌套在一起。对于本题，整个：先输出空格，再输出数字</p></blockquote></li></ul><pre><code>        1       2 3       4 5 6     7 8 9 0<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">space_num = n - <span class="number">1</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">n = <span class="number">4</span></span><br><span class="line"><span class="keyword">while</span> space_num &gt;= <span class="number">0</span>:</span><br><span class="line">    string = (<span class="string">" "</span>*space_num)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (n - space_num) &gt; j:</span><br><span class="line">        string += str(i % <span class="number">10</span>) + <span class="string">" "</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print(string)</span><br><span class="line">    space_num -= <span class="number">1</span></span><br></pre></td></tr></table></figure>         *        **       ***      ****     *****<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lines = <span class="number">6</span></span><br><span class="line">start_num = <span class="number">6</span></span><br><span class="line">j = lines</span><br><span class="line"><span class="keyword">while</span> j &gt; <span class="number">0</span>:</span><br><span class="line">    space_num = lines - start_num</span><br><span class="line"></span><br><span class="line">    print(<span class="string">" "</span> * space_num + <span class="string">"*"</span> * start_num)</span><br><span class="line">    start_num -= <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br></pre></td></tr></table></figure>            *           ***          *****         *******          *****           ***            *    分析：         （1）先确认行数：n                          n = 7         （2）再判断图形组成元素即对象数量，并确认命名    两个对象：         空格（space_num） *号 (star_num)        （3）发现每个对象的循环规律，最好与循环或已知变量关联           space_num = abs(中间行数mid - 循环1.2.3...)        规律： 等差数列                     star_num = (mid - space_num)* 2 - 1                     （4）确认循环结束条件： n &gt; 0 n递减  i递增                       （5）编写 测试<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">7</span></span><br><span class="line">mid = n // <span class="number">2</span> + <span class="number">1</span> <span class="comment">#中间那一排</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    space_num = abs(mid-i) <span class="comment">#3</span></span><br><span class="line">    base_num = mid-space_num <span class="comment">#1</span></span><br><span class="line">    star_num = base_num*<span class="number">2</span><span class="number">-1</span></span><br><span class="line">    print(<span class="string">' '</span>*space_num + <span class="string">"*"</span>*star_num)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">****<span class="strong">*</span></span><br><span class="line"><span class="strong"> *</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">  *</span></span><br><span class="line"><span class="code"> ***</span></span><br><span class="line">****<span class="strong">*</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span>                          <span class="comment"># 中间一行的行数</span></span><br><span class="line">a = n                          <span class="comment">#3</span></span><br><span class="line">j = <span class="number">2</span> * n + <span class="number">1</span>                  <span class="comment">#7 一共7行</span></span><br><span class="line"><span class="keyword">while</span> j &gt; <span class="number">0</span>:                   <span class="comment">#循环7次</span></span><br><span class="line">    space_num = n - abs(a)     <span class="comment"># 初始化</span></span><br><span class="line">    j -= <span class="number">1</span>                     <span class="comment">#j控制循环</span></span><br><span class="line">    line_num = abs(<span class="number">2</span> * a) + <span class="number">1</span>  <span class="comment">#  *  数</span></span><br><span class="line">    a -= <span class="number">1</span>                     <span class="comment">#  a递减 3 2 1 0 -1 -2 -3</span></span><br><span class="line">    print(<span class="string">" "</span>* (space_num) + <span class="string">"*"</span> *line_num )</span><br></pre></td></tr></table></figure>&gt;输入一个整数n，输出所有0~n之间的质数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_peime</span><span class="params">(num)</span>:</span>           </span><br><span class="line"><span class="comment">#判断是否为质数</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> num &gt; i:           </span><br><span class="line">    <span class="comment">#循环条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> num % i:      </span><br><span class="line">        <span class="comment">#质数判断，若为真（不是质数）则执行判断语句</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span>            </span><br><span class="line">            <span class="comment">#符合该条件则直接跳出循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">num1 = int(input(<span class="string">"请输入一个大于1的整数： "</span>))    </span><br><span class="line"><span class="comment">#输出所有符合条件的质数</span></span><br><span class="line"><span class="keyword">while</span> num1 &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> is_peime(num1):      </span><br><span class="line">    <span class="comment">#调用质数函数</span></span><br><span class="line">        print(num1)</span><br><span class="line">    num1 -= <span class="number">1</span></span><br></pre></td></tr></table></figure>&gt;当比较大小时，需要注意比较值的初始化，最好与初始值输入值一样，不定义成0<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、从键盘输入10个数，求出最大数</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">max_num = int(input(<span class="string">"请依次输入第&#123;&#125;个数："</span>.format(num)))    </span><br><span class="line"><span class="comment">#初始化最大值，防止输入的数为负数，若比较大小都需要初始化比较值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    num1 = int(input(<span class="string">"请依次输入第&#123;&#125;个数："</span>.format(num)))</span><br><span class="line">    <span class="keyword">if</span> num1 &gt; max_num:                           </span><br><span class="line">    <span class="comment">#若max_num=0，出现负数比较则直接会使max_num=0</span></span><br><span class="line">        max_num = num1</span><br><span class="line">print(max_num)</span><br></pre></td></tr></table></figure></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><pre><code>数据结构：组织并存取数据list:有序的集合，列表 ，是一种数据结构</code></pre><ul><li><p>申明方式</p><p>  <code>list1 = [&#39;a&#39;,2,3,[1,2,3,4,[1,2,3]],&#39;abcde&#39;]</code></p></li><li><p>将字符串转化为列表</p><p>  <code>list2 = list(&quot;a,b&quot;)</code><br>  <code>print(list2)</code></p></li><li><p>下标取值,下标取首不取尾,与数组相似取值方式</p><p>  <code>print(list1[3][4][1])</code></p><p>  <code>print(list1[0:3])</code></p></li><li><p>最后一个元素取法</p><p>  <code>print(list1[-1])</code></p><p>  <code>print(list1[len(list1)-1])</code>    #列表不能为空</p></li><li><p>使用的len语句是计算的该列表中有多少个元素</p><p>  <code>print(len(list1[3]))</code></p></li><li><p>元素更改</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(list1[<span class="number">1</span>])</span><br><span class="line">list1[<span class="number">1</span>] = <span class="string">"b"</span>         </span><br><span class="line"><span class="comment">#元素修改</span></span><br><span class="line">print(list1[<span class="number">1</span>])</span><br><span class="line">list1.append(<span class="string">'f'</span>)      </span><br><span class="line"><span class="comment">#尾部增加元素   其内置函数中没有return 所以print(list1.append())</span></span><br><span class="line">返回值为none</span><br><span class="line">list1.insert(<span class="number">1</span>,<span class="string">'b'</span>)    </span><br><span class="line"><span class="comment">#在下标1处添加元素 返回值为none</span></span><br><span class="line">print(list1.insert(<span class="number">1</span>,<span class="string">'3'</span>))</span><br><span class="line">x = list1.pop(<span class="number">1</span>)       </span><br><span class="line"><span class="comment">#删除下标所在位置的元素，若无下标，则将尾部元素删除，返回值为删除的元素</span></span><br><span class="line">list1.remove(<span class="string">'a'</span>)        </span><br><span class="line"><span class="comment">#找到该元素并移除 返回为none</span></span><br><span class="line">range(start_num,end_num,间隔)：有序的一组数字</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>,<span class="string">'hello'</span>, <span class="string">'world'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">5</span>]]   </span><br><span class="line"><span class="comment">#打印输出列表所有元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list2:                                  </span><br><span class="line"><span class="comment">#for循环会将列表中存在的字符串也分开打印，例如'asd',for后为'a','s','d'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> type(i) == list:                     </span><br><span class="line">    <span class="comment">#判断类别</span></span><br><span class="line">        print(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            print(j)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">for_list</span><span class="params">(list1)</span>:</span>                 </span><br><span class="line"><span class="comment">#使用函数打印所有列表中的元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> type(i) == list:</span><br><span class="line">            for_list(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(i)</span><br><span class="line">for_list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">12</span>,<span class="number">34</span>,[<span class="string">'aasas'</span>,<span class="string">'asadadf'</span>]]]]])</span><br></pre></td></tr></table></figure></li><li><p>列表切分</p><p>  <code>list3 = [1,2,3,4,5]</code></p><p>  <code>print(list3[1:3])</code>   #切分1-2下标元素 长度为下标差</p></li><li><p>容器序列（容器）和编排序列（真正的数据）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">list1 --&gt; 容器(列表，元祖等） [1,2,3,4,5],[True,False] --&gt; 编排序列</span><br><span class="line"></span><br><span class="line">传统生成方式</span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"></span><br><span class="line">列表生成式：将一个编排序列放入列表中</span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]       </span><br><span class="line"><span class="comment">#性能更高</span></span><br><span class="line">list2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'asdfghjk'</span>]</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">list3 = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">for</span> j <span class="keyword">in</span> list2]   </span><br><span class="line"><span class="comment">#注意：(i,j)</span></span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line">l1 = [<span class="string">'spades'</span>, <span class="string">'diamonda'</span>,<span class="string">'clubs'</span>,<span class="string">'hearts'</span>]</span><br><span class="line">l2 = [<span class="string">'A'</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'j'</span>,<span class="string">'q'</span>,<span class="string">'k'</span>,<span class="number">10</span>]</span><br><span class="line">list4 = [((i,j)) <span class="keyword">for</span> i <span class="keyword">in</span> l2 <span class="keyword">for</span> j <span class="keyword">in</span> l1]    </span><br><span class="line"><span class="comment">#注意循环次序</span></span><br><span class="line"></span><br><span class="line">i  = <span class="number">0</span></span><br><span class="line">l2 = list()</span><br><span class="line"><span class="keyword">while</span> i &lt; (len(list4)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"k"</span> <span class="keyword">in</span> list4[i]:</span><br><span class="line">        l2 += list4[i:i+<span class="number">1</span>]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure></li><li><p>切片  取左不取右 前闭后开</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">list1= [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">1</span>)]</span><br><span class="line">print(list1)</span><br><span class="line">xx = list1[<span class="number">2</span>:<span class="number">4</span>]   <span class="comment">#2,3  便于计算切片的数量：4-2</span></span><br><span class="line">yy = list1[<span class="number">1</span>:]    <span class="comment">#list1[1:len(list1)]</span></span><br><span class="line">zz = list1[:<span class="number">3</span>]    <span class="comment">#不包括3之前的</span></span><br><span class="line">print(xx)</span><br><span class="line"></span><br><span class="line">l1 = list1[<span class="number">-1</span>]</span><br><span class="line">l2 = list1[<span class="number">-1</span>:]</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)     <span class="comment">#两者区分，一个取值一个切片仍是列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(id(list1))</span></span><br><span class="line"><span class="comment"># print(id(list1[2:5]))</span></span><br><span class="line"><span class="comment"># print(id(list1[3:4]))</span></span><br><span class="line"><span class="comment"># print(id(xx))</span></span><br><span class="line"><span class="comment"># print(id(yy))</span></span><br></pre></td></tr></table></figure></li><li><p>引用规则：python中变量是引用而不是赋值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a              </span><br><span class="line"><span class="comment">#直接将a的地址给了b，未重新开空间 对两个变量进行操作时，都是对同</span></span><br><span class="line">一个地址中存储的数据操作</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(id(a))</span><br><span class="line">print(b)</span><br><span class="line">print(id(b))</span><br></pre></td></tr></table></figure></li><li><p>Python函数调用的时候参数的传递方式是值传递还是引用传递</p><blockquote><p>Python的参数传递有：位置参数、默认参数、可变参数、关键字参数。</p></blockquote><blockquote><p>函数的传值到底是值传递还是引用传递，要分情况：</p></blockquote><blockquote><blockquote><p>不可变参数用值传递：</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>可变参数是引用传递的：</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>比如像列表，字典这样的对象是通过引用传递、和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变。</p></blockquote></blockquote></blockquote></li><li><p>对缺省参数的理解</p><p>  缺省参数指在调用函数的时候没有传入参数的情况下，调用默认的参数，在调用函数的同时赋值时，所传入的参数会替代默认参数。</p><p>  <code>*args</code> 是不定长参数，他可以表示输入参数是不确定的，可以是任意多个。</p><p>  <code>**kwargs</code> 是关键字参数，赋值的时候是以键 = 值的方式，参数是可以任意多对在定义函数的时候不确定会有多少参数会传入时，就可以使用两个参数。</p></li><li><p>为什么函数名字可以当做参数用</p><pre><code>Python中一切皆对象，函数名是函数在内存中的空间，也是一个对象。</code></pre></li></ul><h3 id="字典-键值对-key-value"><a href="#字典-键值对-key-value" class="headerlink" title="字典: 键值对 key - value"></a>字典: 键值对 key - value</h3><ul><li><p>申明</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;   <span class="comment">#其中的每一个键值对都与下标无关，即与位置无关</span></span><br><span class="line">dict2 = &#123;<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line">print(dict1[<span class="string">'a'</span>])</span><br></pre></td></tr></table></figure></li><li><p>dict内置方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dict3 = &#123;<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'c'</span>:<span class="number">3</span>,<span class="string">'d'</span>:dict1&#125;</span><br><span class="line">print(dict3.keys())        <span class="comment">#打印所有的键</span></span><br><span class="line"></span><br><span class="line">print(list(dict3.keys()))</span><br><span class="line"></span><br><span class="line">print(list(dict3.values())) <span class="comment">#打印所有的值</span></span><br><span class="line"></span><br><span class="line">print(list(dict3.items()))  <span class="comment">#打印所有的键和值</span></span><br><span class="line"></span><br><span class="line">print(dict3.get(<span class="string">'a'</span>,<span class="string">'aa'</span>))  </span><br><span class="line"><span class="comment">#判断其是否存在该键值,有则返回对应的值，（键，值）</span></span><br><span class="line"></span><br><span class="line">print(dict3.setdefault(<span class="string">'hello'</span>,<span class="string">'w'</span>)) </span><br><span class="line"><span class="comment">#不存在该键值则更新字典，将其加入</span></span><br><span class="line">print(dict3)</span><br><span class="line"></span><br><span class="line">dict4 = &#123;<span class="string">'f'</span>:<span class="number">134</span>&#125;</span><br><span class="line">dict4.update(dict2)    <span class="comment">#把dict2中的键值对更新到dict4中</span></span><br><span class="line">print(dict4)</span><br><span class="line"></span><br><span class="line">dict1.pop(<span class="string">'a'</span>)         <span class="comment">#将dict1中的键'a'对应的键值对删除</span></span><br><span class="line">print(dict1)</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">'b'</span>]         <span class="comment">#删除该键值对</span></span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line">dict11 = dict.fromkeys(dict1)  </span><br><span class="line"><span class="comment">#新建一个与dict1有相同键的字典，其值为none</span></span><br><span class="line">print(dict11)</span><br><span class="line"></span><br><span class="line"><span class="comment">#键值对添加修改</span></span><br><span class="line">dict2[<span class="string">'world'</span>] = <span class="string">'e'</span>    <span class="comment">#无则添加该键值</span></span><br><span class="line">print(dict2)</span><br><span class="line">dict2[<span class="string">'c'</span>] = <span class="string">'f'</span>    <span class="comment">#有则修改该键对应的值</span></span><br><span class="line">print(dict2)</span><br></pre></td></tr></table></figure></li><li><p>优化斐波拉契</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> dict1.get(n<span class="number">-1</span>,<span class="string">''</span>):</span><br><span class="line">            x1 = dict1.get(n<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = fib(n<span class="number">-1</span>)</span><br><span class="line">            dict1[n<span class="number">-1</span>] = x1</span><br><span class="line">        <span class="keyword">if</span> dict1.get(n<span class="number">-2</span>,<span class="string">''</span>):</span><br><span class="line">            x2 = dict1.get(n<span class="number">-2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x2 = fib(n<span class="number">-2</span>)</span><br><span class="line">            dict1[n<span class="number">-2</span>] = x2</span><br><span class="line">        <span class="keyword">return</span> x1 + x2</span><br><span class="line">print(fib(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="元祖tuple-不可修改的列表"><a href="#元祖tuple-不可修改的列表" class="headerlink" title="元祖tuple  不可修改的列表"></a>元祖tuple  不可修改的列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可拆包</span><br><span class="line">不可变 （针对某些元素）</span><br><span class="line">用于轻量级数据中</span><br><span class="line"></span><br><span class="line"> tup1 = (<span class="string">'asdf'</span>,<span class="string">'s'</span>)</span><br><span class="line"> tup4 = (<span class="string">'d'</span>,) <span class="comment">#但元素加，</span></span><br><span class="line"> tup2,tup3 = (<span class="string">'aa'</span>,<span class="string">'bb'</span>)  <span class="comment">#可以拆包</span></span><br><span class="line"> print(tup3)</span><br><span class="line"> print(tup2)</span><br></pre></td></tr></table></figure><ul><li><p>tuple取值：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,下标取值</span><br><span class="line"><span class="number">2</span>。拆包</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> tup1,tup2 <span class="keyword">in</span> d.items():     <span class="comment">#若不需要tup1则可以写成 _ , tup2</span></span><br><span class="line">    print(tup2)</span><br><span class="line"><span class="keyword">for</span> _,v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(v)</span><br><span class="line">l2 = [(k,v) <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()] <span class="comment">#变成列表</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set:集合"></a>set:集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">元素不重合</span><br><span class="line">可做集合运算 &amp;（交集） |（并集） -（差集）</span><br><span class="line"></span><br><span class="line">s = set(<span class="string">'2235462346'</span>)</span><br><span class="line">s1 = (&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;)    </span><br><span class="line"><span class="comment">#自动去掉重复的元素，不能嵌套list,dict.</span></span><br><span class="line"><span class="comment">#里面的元素必须是可hash的</span></span><br><span class="line">print(s)</span><br><span class="line">print(s1)</span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"> b = a[:]       </span><br><span class="line"> <span class="comment">#此时b重新指向另一个地址 但如果其中内嵌容器，则只会对数值改变，</span></span><br><span class="line"> 容器仍指向原地址</span><br><span class="line"></span><br><span class="line"> l1 = [<span class="number">1</span>,[<span class="number">22</span>,<span class="number">33</span>],(<span class="number">11</span>,<span class="number">22</span>,[<span class="number">33</span>,<span class="number">44</span>])]</span><br><span class="line"></span><br><span class="line"> l2 = list(l1)     </span><br><span class="line"> <span class="comment">#新的列表创建。但内嵌列表和元祖的指向地址未改变</span></span><br><span class="line"></span><br><span class="line"> l3 = l1[:]        </span><br><span class="line"> <span class="comment">#新列表创建，内嵌容器仍指向原地址</span></span><br><span class="line"> print(l1 == l2)</span><br><span class="line"> print(l1 <span class="keyword">is</span> l2)</span><br><span class="line"></span><br><span class="line"> l1[<span class="number">1</span>].append(<span class="number">1111111</span>)</span><br><span class="line"> l1[<span class="number">2</span>][<span class="number">2</span>].append(<span class="number">2333</span>)  </span><br><span class="line"> <span class="comment">#改变的为元祖中的内嵌列表，其仍可进行添加</span></span><br><span class="line"></span><br><span class="line"> l1[<span class="number">0</span>] = <span class="number">9</span>          </span><br><span class="line"> <span class="comment">#改变的是列表中的数值，其L1发生改变，对L2和L3无影响</span></span><br><span class="line"></span><br><span class="line"> print(l1)</span><br><span class="line"> print(l2)</span><br><span class="line"> print(l3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">2</span>,[<span class="number">44</span>,<span class="number">55</span>],(<span class="number">44</span>,<span class="number">55</span>,[<span class="number">3</span>,<span class="number">1</span>])]</span><br><span class="line">l2 = list(l1)</span><br><span class="line">l1.append(<span class="number">100</span>)</span><br><span class="line">l1[<span class="number">1</span>].remove(<span class="number">44</span>)</span><br><span class="line">l2[<span class="number">1</span>] += [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">l2[<span class="number">2</span>] += (<span class="number">2</span>,<span class="number">3</span>)     </span><br><span class="line"><span class="comment">#生成新的tuple但其内嵌的列表地址未改变，相当于浅复制</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象：先有类（抽象）才有对象（具体）</p><blockquote><p>class:</p></blockquote><blockquote><blockquote><p>可继承  class Mylist(list):  括号里为其它的对象等   ：可多继承，层层继承，本次继承拥有被继承以及上面所有继承父类的init时，需要使用supper().<strong>init</strong>()</p></blockquote></blockquote><blockquote><blockquote><p>可重写：可以在继承的类中重写其中的方法或功能（多态）</p></blockquote></blockquote><blockquote><blockquote><p>可扩展：继承中可以增加新的方法或功能</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#类的申明方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span>  <span class="comment">#在这个下面可以有无数函数  命名：首字母必须大写</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>        </span><br><span class="line">    <span class="comment">#面向对象中的所有东西可共享（通过self挂载，再通过self调用，只用于类）</span></span><br><span class="line">    init中为确定的功能</span><br><span class="line">        self.coloer = <span class="string">'red'</span></span><br><span class="line">        self.ppai = <span class="string">'jili'</span></span><br><span class="line">        self.kuandu = <span class="number">1900</span></span><br><span class="line">        print(<span class="string">'对象初始化'</span>)</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.coloer)</span><br><span class="line">        self.laba()</span><br><span class="line">        <span class="keyword">return</span> self.ppai</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">laba</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.changd = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">de_self</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x)     <span class="comment">#挂载在self上，每次调用地址不同</span></span><br><span class="line">        print(id(self.x))</span><br><span class="line">        xx = random.randint(<span class="number">0</span>,<span class="number">100</span>) </span><br><span class="line">         <span class="comment">#依附于class上，相当于函数变量，每次调用地址相同</span></span><br><span class="line">        print(xx)</span><br><span class="line">        print(id(xx))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">de1_self</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.de_self()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># car1 = Car()         </span></span><br><span class="line">类的实例化(对象) 会直接调用类中的__init__（初始化）函数</span><br><span class="line"> (魔法函数都以__名称__为命名格式)初始化</span><br><span class="line"><span class="comment"># car2 = Car()         </span></span><br><span class="line">可实例化多次</span><br><span class="line"><span class="comment"># # print(car1.test())   </span></span><br><span class="line">调用功能函数</span><br><span class="line"><span class="comment"># # print(car1.coloer)    </span></span><br><span class="line">调用self的属性</span><br><span class="line"><span class="comment"># car1.laba()             </span></span><br><span class="line">属于类里除__init__函数之外的self需要先运行其类中对应的函数，</span><br><span class="line">才能挂载在self上，对象才能继续调用</span><br><span class="line"><span class="comment"># print(car1.changdu)</span></span><br></pre></td></tr></table></figure><h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><blockquote><p>self：相当于挂载器，可以将类中的各个属性通过其挂载，再使用，属于对象，可以在类中互相传递,每个self都有一个独立的空间</p></blockquote><p><code>car1 = Car()</code><br><code>car1.de_self()</code><br><code>car1.de1_self()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import random</span></span><br><span class="line"><span class="comment"># class Student:</span></span><br><span class="line"><span class="comment">#     def __init__(self):</span></span><br><span class="line"><span class="comment">#         self.cla_num = random.randint(1,5)</span></span><br><span class="line"><span class="comment">#         self.cla_stunum = random.randint(1,50)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def cla_girls(self):</span></span><br><span class="line"><span class="comment">#         stunum = self.cla_stunum</span></span><br><span class="line"><span class="comment">#         self.girls = random.randint(1,stunum)</span></span><br><span class="line"><span class="comment">#         print("女生人数：%d"%self.girls)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def cla_boysnum(self):</span></span><br><span class="line"><span class="comment">#         cla_boyssnum = self.cla_stunum - self.girls</span></span><br><span class="line"><span class="comment">#         print("男生人数：%d"%cla_boyssnum)</span></span><br><span class="line"><span class="comment"># student1 = Student</span></span><br><span class="line"><span class="comment"># student1.cla_girls()</span></span><br><span class="line"><span class="comment"># student1.cla_boysnum()</span></span><br></pre></td></tr></table></figure><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name_num)</span>:</span>  <span class="comment">#初始化时，可以加入参数</span></span><br><span class="line">        self.__password = <span class="number">111</span>   <span class="comment">#在前面+__后 该属性变成私有，只能在内部调用</span></span><br><span class="line">        self.__card = <span class="number">111111</span></span><br><span class="line">        self.n = name_num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">card_get</span><span class="params">(self)</span>:</span>      <span class="comment">#可以通过函数传出，但可以修改成其它值</span></span><br><span class="line">        <span class="keyword">return</span> self.__card / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_password</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'12365'</span></span><br><span class="line"></span><br><span class="line">xx = Room(<span class="string">'aaaa'</span>)  <span class="comment">#参数值传入并初始化</span></span><br><span class="line"></span><br><span class="line">print(xx.card_get())</span><br><span class="line">print(xx.get_password())</span><br><span class="line"><span class="comment">#每一个类中都存在默认函数：如__str__(魔法函数，会自动调用)</span></span><br></pre></td></tr></table></figure><h3 id="内置函数调用装饰器"><a href="#内置函数调用装饰器" class="headerlink" title="内置函数调用装饰器"></a>内置函数调用装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,id)</span>:</span></span><br><span class="line">        self.__age = age       </span><br><span class="line">        <span class="comment">#私有属性：进行运行时无法查看（被保护）,可隐藏真实数据</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.id = id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__age//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self,age)</span>:</span>  </span><br><span class="line">    <span class="comment">#判断输入的参数是否符合规则，符合就修改该参数</span></span><br><span class="line">        <span class="keyword">if</span> age &lt; <span class="number">50</span>:</span><br><span class="line">            self.__age = age</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__age = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property  </span></span><br><span class="line">    <span class="comment"># 可以直接使用函数名调用的内置装饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">id_c</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'xxx'</span>,<span class="number">50</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">print(p.age())  <span class="comment">#只能通过函数调用该属性，并且函数能改原数据</span></span><br><span class="line"></span><br><span class="line">print(p.name)   <span class="comment">#不需要加（）即可调用该函数</span></span><br><span class="line"></span><br><span class="line">p.id = <span class="number">14</span>    <span class="comment">#可修改类中的参数。</span></span><br><span class="line">p.id_c()</span><br><span class="line"></span><br><span class="line">p.set_age(<span class="number">30</span>)   <span class="comment">#判断参数规则并修改该参数</span></span><br><span class="line">print(p.age())</span><br></pre></td></tr></table></figure><h3 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataBaset</span>:</span></span><br><span class="line">    <span class="comment">#在设置属性时会直接调用，控制其对象只能存在的属性</span></span><br><span class="line">    __slots__ = (<span class="string">'__password'</span>,<span class="string">'__database_name'</span>,<span class="string">'__name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__name = <span class="string">''</span></span><br><span class="line">        self.__password = <span class="string">''</span></span><br><span class="line">        self.__database_name = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"><span class="meta">    @property  </span></span><br><span class="line">     <span class="comment">#将函数变成属性  若有相关联的setting则需要对setting中的语句再执行该变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>.format(<span class="string">'*'</span> * len(self.__password))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        iswasp = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> iswasp == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> type(len(name)) == str:</span><br><span class="line">                print(<span class="string">"非字符串"</span>)</span><br><span class="line">                iswasp = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> len(name) &lt; <span class="number">6</span>:</span><br><span class="line">                print(<span class="string">'账户名错误'</span>)</span><br><span class="line">                iswasp = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">48</span> &lt;= ord(name[<span class="number">0</span>])&lt;= <span class="number">57</span>:</span><br><span class="line">                print(<span class="string">"首字母为数字"</span>)</span><br><span class="line">                iswasp = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.__name = name</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="meta">    @password.setter   </span></span><br><span class="line">    <span class="comment">#在变成属性的函数赋值时会调用此setting函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self,password)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(password) != str:</span><br><span class="line">            print(<span class="string">'错误'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(password) &lt; <span class="number">8</span>:</span><br><span class="line">            print(<span class="string">'长度不够'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql = DataBaset()</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><blockquote><p><code>mysql.name = &#39;aaaaaa&#39;</code>  #未修改类中的任何，只是单纯定义（直接在类中设置控制函数就可）</p></blockquote><blockquote><p>在使用property后 如果需要直接使用赋值语法修改被保护的，可在相关判断条件下使用  </p></blockquote><blockquote><p>@判断名(需要与函数名一样).setter</p></blockquote><p><code>mysql.password = &#39;aaa&#39;</code></p><p><code>print(mysql.password)</code></p><h2 id="错误类"><a href="#错误类" class="headerlink" title="错误类"></a>错误类</h2><h3 id="异常类-：报告错误-–-gt-中断-运行"><a href="#异常类-：报告错误-–-gt-中断-运行" class="headerlink" title="异常类 ：报告错误 –&gt; 中断 运行"></a>异常类 ：报告错误 –&gt; 中断 运行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只会监听特殊类型的错误</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    xx = [qxaas]</span><br><span class="line"><span class="comment">#监听与 NameError 相关的错误，监听所有报错只需要监听其父类（Exception）即可    </span></span><br><span class="line"><span class="keyword">except</span> NameError:      </span><br><span class="line">    print(<span class="string">'cuo  wu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># class TestError(Exception):  #exception属于报错的父类，继承即可</span></span><br></pre></td></tr></table></figure><h3 id="自定义报错"><a href="#自定义报错" class="headerlink" title="自定义报错"></a>自定义报错</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestError</span><span class="params">(Exception)</span>:</span>  <span class="comment">#自定义一个报错</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rujiao</span><span class="params">(age)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">30</span>:</span><br><span class="line">        print(age)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TestError(<span class="string">'xiajibaluanxie'</span>)  </span><br><span class="line">        <span class="comment">#报错目标 ：中止程序，并输出错误提示</span></span><br><span class="line"><span class="comment"># try:                </span></span><br><span class="line"><span class="comment">#出现报错并继续运行后面的代码</span></span><br><span class="line"><span class="comment">#     rujiao(333)</span></span><br><span class="line"><span class="comment"># except TestError:</span></span><br><span class="line"><span class="comment">#     print("xxx")   </span></span><br><span class="line"><span class="comment">#若输入pass 则会直接跳过并不会报错</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print('xxxxxxxxxx')</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">try</span>:                </span><br><span class="line"><span class="comment">#出现报错并继续运行后面的代码</span></span><br><span class="line">    l[<span class="number">7</span>]             </span><br><span class="line">    <span class="comment">#出现错误则直接报错，不会执行下面的语句快</span></span><br><span class="line">    rujiao(<span class="number">60</span>)</span><br><span class="line"><span class="comment">#打印错误提示 (as后接错误提示)   可以重复抓取不同的错误，显示抓取的只有一种</span></span><br><span class="line"><span class="keyword">except</span> TestError <span class="keyword">as</span> errortype:  </span><br><span class="line">    print(errortype)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">"下标错误"</span>)</span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    print(<span class="string">'无法赋值'</span>)</span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line"><span class="comment">#上述若未发现错误，就执行else中语句</span></span><br><span class="line">    print(<span class="string">'++++++++'</span>)</span><br><span class="line"><span class="keyword">finally</span>:  </span><br><span class="line"><span class="comment">#若上述未出现错误或中断：至少会执行该命令</span></span><br><span class="line">    print(<span class="string">'-------'</span>)</span><br><span class="line">print(<span class="string">'xxxxxxxxxx'</span>)</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块的引用与创建"><a href="#模块的引用与创建" class="headerlink" title="模块的引用与创建"></a>模块的引用与创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test1.py</span><br><span class="line"></span><br><span class="line">小技巧，程序自动识别当前执行的python文件名   __file__</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a.py'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span>     <span class="comment">#return 为空 调用会多一个返回值空，以及执行该函数打印出aaaa</span></span><br><span class="line">    print(<span class="string">"aaaaa"</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:   <span class="comment">#该命令下的不会被引用执行</span></span><br><span class="line">    print(<span class="string">"不可被引用的命令test1"</span>)</span><br><span class="line">print(<span class="string">'可以被调用的test1'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test2.py</span><br><span class="line"><span class="keyword">from</span> module.test1 <span class="keyword">import</span> a_test,test  <span class="comment">#引用来自module包下test1.py中的a_test函数，</span></span><br><span class="line">module包必须含有_init_.py文件</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'b.py'</span></span><br><span class="line"></span><br><span class="line">print(a_test())   <span class="comment">#输出test1中的a_test函数运行结果</span></span><br><span class="line">print(test())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test3.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module.test1    <span class="comment">#引用目标文件名 -- 会先执行import下的文件</span></span><br><span class="line"><span class="keyword">import</span> module.a_test</span><br><span class="line">print(module.test1.a_test())  <span class="comment">#直接调用该文件下的为a_test的函数，并打印输出  </span></span><br><span class="line">若有其它文件调用该文件下函数，会执行该文件下的命令，解决方案见test1.py</span><br><span class="line">print(module.test1.test())    <span class="comment">#会先执行module下test1中的所有，</span></span><br><span class="line">再执行函数test若无<span class="keyword">return</span>会返回空</span><br><span class="line">print(module.a_test.get_path())  <span class="comment">#调用的执行目标文件所在路径，</span></span><br><span class="line">而不是该命令所在文件的路径</span><br></pre></td></tr></table></figure><h3 id="引用内置库"><a href="#引用内置库" class="headerlink" title="引用内置库"></a>引用内置库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os    <span class="comment">#引进os模块，详见a_test.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>) <span class="comment">#程序暂停2秒</span></span><br><span class="line">time.time()<span class="comment">#时间戳</span></span><br><span class="line">datetime.time() <span class="comment">#运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">0</span>,<span class="number">10</span>)  <span class="comment">#伪随机</span></span><br><span class="line">random.random()  <span class="comment">#随机浮点数</span></span><br></pre></td></tr></table></figure><h3 id="引用第三方库"><a href="#引用第三方库" class="headerlink" title="引用第三方库"></a>引用第三方库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装外部库：pycharm -- preferences -- project interpreter -- + -- <span class="string">'选择库'</span> -- install</span><br><span class="line">相当于执行了：pip3 install requests(浏览网页)</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h3 id="建立自己的库"><a href="#建立自己的库" class="headerlink" title="建立自己的库"></a>建立自己的库</h3><blockquote><p>在需要的文件夹下建立一个<strong>init</strong>.py文件,或者系统自动生成，该文件夹会成为一个库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> test1</span><br><span class="line">test1.test()</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">r w a --&gt;读 写（会覆盖文件中的内容） 追加写（末尾添加）读写文件性能会很低，</span><br><span class="line">因为文件存在磁盘，需要转到CPU运行</span><br><span class="line"></span><br><span class="line"> w = open(<span class="string">'open.txt'</span>,<span class="string">'r'</span>)  <span class="comment">#每次都只能操作一个方法</span></span><br><span class="line"> w.write(<span class="string">'测试写'</span>)</span><br><span class="line"> w.close()          <span class="comment">#文件操作后需要关闭，文件描述符有关</span></span><br><span class="line"></span><br><span class="line">r.readlines():一行一行读</span><br><span class="line"></span><br><span class="line"> r = open(<span class="string">'open.txt'</span>,<span class="string">'r'</span>)  <span class="comment">#读取文档中所有内容（字节读取）</span></span><br><span class="line"> read_txt = <span class="string">''</span></span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     x = r.read(<span class="number">1</span>)      <span class="comment">#一个字节一个字节读取</span></span><br><span class="line">     <span class="keyword">if</span> len(x) == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">     read_txt += x</span><br><span class="line"> r.close()</span><br><span class="line"> print(read_txt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> r = open(<span class="string">'open.txt'</span>,<span class="string">'r'</span>)  <span class="comment">#读取文档中的所有内容（行读取）</span></span><br><span class="line"> read_txt = <span class="string">''</span></span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     x = r.readlines()</span><br><span class="line">     <span class="keyword">if</span> len(x) == <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">     print(x)</span><br><span class="line"> r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#无需关闭文件的方法：</span></span><br><span class="line"> <span class="keyword">with</span> open(<span class="string">'open.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> r:  <span class="comment">#在其中的文件操作代码运行后会自动关掉</span></span><br><span class="line">     read_txt = <span class="string">''</span></span><br><span class="line">     <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">         x = r.readlines()</span><br><span class="line">         <span class="keyword">if</span> len(x) == <span class="number">0</span>:</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">         print(x)</span><br></pre></td></tr></table></figure><h3 id="os-shtuil模块常用命令"><a href="#os-shtuil模块常用命令" class="headerlink" title="os/shtuil模块常用命令"></a>os/shtuil模块常用命令</h3><ul><li><p>os模块</p><blockquote><p>path函数os模块中的<code>abspath</code>:找出当前运行函数的绝对路径</p></blockquote><blockquote><p><code>os.mkdir</code>:不能递归创建目录</p></blockquote><blockquote><p><code>os.path.join</code>:相当于”+/“，如果是windos则是”+“</p></blockquote><blockquote><p><code>os.makedirs</code>: 可递归创建文件</p></blockquote><blockquote><p><code>os.path.abspath</code>:显示同层文件的绝对路径</p></blockquote><blockquote><p><code>os.path.dirname</code>:显示同层文件上层目录</p></blockquote><blockquote><p><code>os.rmdir</code>:删除空文件</p></blockquote></li><li><p>shutil模块</p><blockquote><p><code>shutil rmtree</code>:强制删除文件</p></blockquote><blockquote><p><code>shutil move</code>:移动文件</p></blockquote><blockquote><p><code>shutil copy</code>:</p></blockquote><blockquote><p><code>shutil copytree</code>:</p></blockquote></li></ul><ul><li><p>文件路径的查找</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil <span class="comment">#更高级一点的库</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_path</span><span class="params">()</span>:</span></span><br><span class="line">     xx = os.path.abspath(__file__)  <span class="comment">#__file__相当于当前所在文件名</span></span><br><span class="line">     <span class="keyword">return</span> xx</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一直找上层路径直到项目路径</span><br><span class="line"> c_path = os.path.abspath(__file__)</span><br><span class="line"> module_path = os.path.dirname(c_path)</span><br><span class="line"> pycode_path = os.path.dirname(module_path)</span><br><span class="line"> print(os.path.dirname(pycode_path))</span><br><span class="line"></span><br><span class="line">相当于下面代码</span><br><span class="line"> BASE_DIR = os.path.dirname(os.path.dirname(__file__))</span><br><span class="line"> print(BASE_DIR)</span><br><span class="line"> os.mkdir(BASE_DIR+<span class="string">'/b_test'</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建或删除文件/文件夹</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> xx = os.path.join(BASE_DIR,<span class="string">'text1'</span>,<span class="string">'text2'</span>) </span><br><span class="line"> <span class="comment">#在BASE_DIR的路径下创建text1并在该文件下再创建text2</span></span><br><span class="line"> os.mkdir(xx)   <span class="comment">#不能递归创建</span></span><br><span class="line"> os.makedirs(xx) <span class="comment">#可递归创建文件</span></span><br><span class="line"> os.makedirs(xx,exist_ok=<span class="literal">True</span>)  </span><br><span class="line"> <span class="comment">#若有该文件名存在则不会再报错</span></span><br><span class="line"></span><br><span class="line"> os.rmdir(os.path.join(BASE_DIR,<span class="string">'b_test'</span>))  </span><br><span class="line"> <span class="comment">#只能删除空目录</span></span><br><span class="line"></span><br><span class="line">shutil.rmtree(os.path.join(BASE_DIR,<span class="string">'text1'</span>)) </span><br><span class="line"><span class="comment">#使用shutil库函数删除文件夹(包括非空文件夹)</span></span><br></pre></td></tr></table></figure></li><li><p>文件/文件夹的移动，以及文件夹遍历</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">将位于BASE_PATH路径下的a_text移动到b_text下</span><br><span class="line"></span><br><span class="line"> os.mkdir(os.path.join(BASE_DIR,<span class="string">'a_text'</span>))</span><br><span class="line"> os.mkdir(os.path.join(BASE_DIR,<span class="string">'b_text'</span>))</span><br><span class="line"> shutil.move(os.path.join(BASE_DIR,<span class="string">'a_text'</span>),</span><br><span class="line"> os.path.join(BASE_DIR,<span class="string">'b_text'</span>))  </span><br><span class="line"> </span><br><span class="line"> 拷贝文件到一个新文件中  操作的是文件</span><br><span class="line"> shutil.copy(<span class="string">'test1.py'</span>,<span class="string">'test4.py'</span>) </span><br><span class="line"> 拷贝文件夹到新文件夹中，操作的是文件夹   </span><br><span class="line"> shutil.copytree(os.path.join(BASE_DIR,<span class="string">'module'</span>),</span><br><span class="line"> os.path.join(BASE_DIR,<span class="string">'module2'</span>)) </span><br><span class="line"> </span><br><span class="line"> 遍历文件夹</span><br><span class="line"> yy = os.listdir(BASE_DIR+<span class="string">'/module'</span>)  </span><br><span class="line"> print(yy)</span><br></pre></td></tr></table></figure></li><li><p>遍历文件夹</p><blockquote><p>深度遍历文件夹</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep_first</span><span class="params">(dir)</span>:</span>  </span><br><span class="line">    dir_lists = os.listdir(dir)</span><br><span class="line">    <span class="keyword">if</span> len(dir_lists) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dir_lists:</span><br><span class="line">        print(d)</span><br><span class="line">        deep_first(os.path.join(dir,d))</span><br><span class="line">deep_first(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>广度遍历文件夹</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brand_first</span><span class="params">(dir)</span>:</span>   </span><br><span class="line">    buckets = []</span><br><span class="line">    buckets.append(dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(buckets) &gt; <span class="number">0</span>:</span><br><span class="line">        tmp = buckets.pop(<span class="number">0</span>)</span><br><span class="line">        print(tmp)</span><br><span class="line">        files = os.listdir(tmp)    <span class="comment">#listdir中容易乱序，需要排序</span></span><br><span class="line">        files.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> files:</span><br><span class="line">            buckets.append(os.path.join(tmp,i))</span><br><span class="line"></span><br><span class="line">brand_first(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python知识汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2019/01/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/01/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java-基本功"><a href="#1-Java-基本功" class="headerlink" title="1. Java 基本功"></a>1. Java 基本功</h2><h3 id="1-1-Java-入门（基础概念与常识）"><a href="#1-1-Java-入门（基础概念与常识）" class="headerlink" title="1.1. Java 入门（基础概念与常识）"></a>1.1. Java 入门（基础概念与常识）</h3><h4 id="1-1-1-Java-语言有哪些特点"><a href="#1-1-1-Java-语言有哪些特点" class="headerlink" title="1.1.1. Java 语言有哪些特点?"></a>1.1.1. Java 语言有哪些特点?</h4><ol><li>简单易学；</li><li>面向对象（封装，继承，多态）；</li><li>平台无关性（ Java 虚拟机实现平台无关性）；</li><li>可靠性；</li><li>安全性；</li><li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li><li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li><li>编译与解释并存；</li></ol><blockquote><p>修正（参见： <a href="https://github.com/Snailclimb/JavaGuide/issues/544">issue#544</a>）：C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用<code>std::thread</code>和<code>std::async</code>来创建线程。参考链接：<a href="http://www.cplusplus.com/reference/thread/thread/?kw=thread" target="_blank" rel="noopener">http://www.cplusplus.com/reference/thread/thread/?kw=thread</a></p></blockquote><h4 id="1-1-2-关于-JVM-JDK-和-JRE-最详细通俗的解答"><a href="#1-1-2-关于-JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="1.1.2. 关于 JVM JDK 和 JRE 最详细通俗的解答"></a>1.1.2. 关于 JVM JDK 和 JRE 最详细通俗的解答</h4><h5 id="1-1-2-1-JVM"><a href="#1-1-2-1-JVM" class="headerlink" title="1.1.2.1. JVM"></a>1.1.2.1. JVM</h5><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码?采用字节码的好处是什么?</strong></p><blockquote><p>在 Java 中，JVM 可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><p><strong>Java 程序从源代码到运行一般有下面 3 步：</strong></p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/1.jpg?Expires=1607356410&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=5K5ia89DHlWFvxr124AhnUobZaA%3D&versionId=CAEQNRiBgMD0iOH2sRciIDQ0ZDY3ZmNmZDAwNzQ4ZDk5Nzk2ODg4OWFkODYzMTcy&response-content-type=application%2Foctet-stream" alt="Java程序运行过程"></p><p>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><p><strong>总结：</strong></p><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><h5 id="1-1-2-2-JDK-和-JRE"><a href="#1-1-2-2-JDK-和-JRE" class="headerlink" title="1.1.2.2. JDK 和 JRE"></a>1.1.2.2. JDK 和 JRE</h5><p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h4 id="1-1-3-Oracle-JDK-和-OpenJDK-的对比"><a href="#1-1-3-Oracle-JDK-和-OpenJDK-的对比" class="headerlink" title="1.1.3. Oracle JDK 和 OpenJDK 的对比"></a>1.1.3. Oracle JDK 和 OpenJDK 的对比</h4><p>可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。</p><p>对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案：</p><blockquote><p>问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？</p><p>答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。</p></blockquote><p><strong>总结：</strong></p><ol><li>Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。详情参见：<a href="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence" target="_blank" rel="noopener">https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence</a> 。</li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li><li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 根据二进制代码许可协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。</li></ol><h4 id="1-1-4-Java-和-C-的区别"><a href="#1-1-4-Java-和-C-的区别" class="headerlink" title="1.1.4. Java 和 C++的区别?"></a>1.1.4. Java 和 C++的区别?</h4><p>我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来！</p><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存</li><li><strong>在 C 语言中，字符串或字符数组最后都会有一个额外的字符<code>&#39;\0&#39;</code>来表示结束。但是，Java 语言中没有结束符这一概念。</strong> 这是一个值得深度思考的问题，具体原因推荐看这篇文章： <a href="https://blog.csdn.net/sszgg2006/article/details/49148189" target="_blank" rel="noopener">https://blog.csdn.net/sszgg2006/article/details/49148189</a></li></ul><h4 id="1-1-5-什么是-Java-程序的主类-应用程序和小程序的主类有何不同"><a href="#1-1-5-什么是-Java-程序的主类-应用程序和小程序的主类有何不同" class="headerlink" title="1.1.5. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?"></a>1.1.5. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?</h4><p>一个程序中可以有多个类，但只能有一个类是主类。在 Java 应用程序中，这个主类是指包含 <code>main()</code> 方法的类。而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。</p><h4 id="1-1-6-import-java-和-javax-有什么区别？"><a href="#1-1-6-import-java-和-javax-有什么区别？" class="headerlink" title="1.1.6. import java 和 javax 有什么区别？"></a>1.1.6. import java 和 javax 有什么区别？</h4><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。</p><p>所以，实际上 java 和 javax 没有区别。这都是一个名字。</p><h4 id="1-1-7-为什么说-Java-语言“编译与解释并存”？"><a href="#1-1-7-为什么说-Java-语言“编译与解释并存”？" class="headerlink" title="1.1.7. 为什么说 Java 语言“编译与解释并存”？"></a>1.1.7. 为什么说 Java 语言“编译与解释并存”？</h4><p>高级编程语言按照程序的执行方式分为编译型和解释型两种。简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。比如，你想阅读一本英文名著，你可以找一个英文翻译人员帮助你阅读，<br>有两种选择方式，你可以先等翻译人员将全本的英文名著（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p><p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（*.class 文件），这种字节码必须由 Java 解释器来解释执行。因此，我们可以认为 Java 语言编译与解释并存。</p><h3 id="1-2-Java-语法"><a href="#1-2-Java-语法" class="headerlink" title="1.2. Java 语法"></a>1.2. Java 语法</h3><h4 id="1-2-1-字符型常量和字符串常量的区别"><a href="#1-2-1-字符型常量和字符串常量的区别" class="headerlink" title="1.2.1. 字符型常量和字符串常量的区别?"></a>1.2.1. 字符型常量和字符串常量的区别?</h4><ol><li><p>形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的 0 个或若干个字符</p></li><li><p>含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</p></li><li><p>占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 (<strong>注意： char 在 Java 中占两个字节</strong>),</p><blockquote><p>字符封装类 <code>Character</code> 有一个成员常量 <code>Character.SIZE</code> 值为 16,单位是<code>bits</code>,该值除以 8(<code>1byte=8bits</code>)后就可以得到 2 个字节</p></blockquote></li></ol><blockquote><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/2.jpg?Expires=1607356509&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=XViiZ2dWSDGK2%2Bsv3HU%2B4%2FWaHV0%3D&versionId=CAEQNRiBgIC_iOH2sRciIGJmODk5ZDgwM2IzYTRkYzI5ZDY3Y2Y1NzgwZjY0OWJl&response-content-type=application%2Foctet-stream" alt=""></p></blockquote><h4 id="1-2-2-关于注释？"><a href="#1-2-2-关于注释？" class="headerlink" title="1.2.2. 关于注释？"></a>1.2.2. 关于注释？</h4><p>Java 中的注释有三种：</p><ol><li><p>单行注释</p></li><li><p>多行注释</p></li><li><p>文档注释。</p></li></ol><p>在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。</p><p>《Clean Code》这本书明确指出：</p><blockquote><p><strong>代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。</strong></p><p><strong>若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。</strong></p><p>举个例子：</p><p>去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check to see if the employee is eligible for full benefits</span></span><br><span class="line"><span class="keyword">if</span> ((employee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="number">65</span>))</span><br></pre></td></tr></table></figure><p>应替换为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (employee.isEligibleForFullBenefits())</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-2-3-标识符和关键字的区别是什么？"><a href="#1-2-3-标识符和关键字的区别是什么？" class="headerlink" title="1.2.3. 标识符和关键字的区别是什么？"></a>1.2.3. 标识符和关键字的区别是什么？</h4><p>在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符，简单来说，标识符就是一个名字。但是有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这种特殊的标识符就是关键字。因此，关键字是被赋予特殊含义的标识符。比如，在我们的日常生活中 ，“警察局”这个名字已经被赋予了特殊的含义，所以如果你开一家店，店的名字不能叫“警察局”，“警察局”就是我们日常生活中的关键字。</p><h4 id="1-2-4-Java-中有哪些常见的关键字？"><a href="#1-2-4-Java-中有哪些常见的关键字？" class="headerlink" title="1.2.4. Java 中有哪些常见的关键字？"></a>1.2.4. Java 中有哪些常见的关键字？</h4><table><thead><tr><th>访问控制</th><th>private</th><th>protected</th><th>public</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>类，方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr><td></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td></td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr><td></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>default</td><td></td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr><td></td><td>short</td><td>null</td><td>true</td><td>false</td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="1-2-5-自增自减运算符"><a href="#1-2-5-自增自减运算符" class="headerlink" title="1.2.5. 自增自减运算符"></a>1.2.5. 自增自减运算符</h4><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（–）。</p><p>++和–运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。</p><h4 id="1-2-6-continue、break、和-return-的区别是什么？"><a href="#1-2-6-continue、break、和-return-的区别是什么？" class="headerlink" title="1.2.6. continue、break、和 return 的区别是什么？"></a>1.2.6. continue、break、和 return 的区别是什么？</h4><p>在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：</p><ol><li>continue ：指跳出当前的这一次循环，继续下一次循环。</li><li>break ：指跳出整个循环体，继续执行循环下面的语句。</li></ol><p>return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：</p><ol><li><code>return;</code> ：直接使用 return 结束方法执行，用于没有返回值函数的方法</li><li><code>return value;</code> ：return 一个特定值，用于有返回值函数的方法</li></ol><h4 id="1-2-7-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？"><a href="#1-2-7-Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？" class="headerlink" title="1.2.7. Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？"></a>1.2.7. Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h4><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p><strong>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。</strong> 更多关于类型擦除的问题，可以查看这篇文章：<a href="https://www.cnblogs.com/wuqinglong/p/9456193.html" target="_blank" rel="noopener">《Java 泛型类型擦除以及类型擦除带来的问题》</a> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//这里直接添加会报错</span></span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">Class&lt;? extends List&gt; clazz = list.getClass();</span><br><span class="line">Method add = clazz.getDeclaredMethod(<span class="string">"add"</span>, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//但是通过反射添加，是可以的</span></span><br><span class="line">add.invoke(list, <span class="string">"kl"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list)</span><br></pre></td></tr></table></figure><p>泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。</p><p><strong>1.泛型类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何实例化泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure><p><strong>2.泛型接口</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，不指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.泛型方法</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">         System.out.printf( <span class="string">"%s "</span>, element );</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">"Hello"</span>, <span class="string">"World"</span> &#125;;</span><br><span class="line">printArray( intArray  );</span><br><span class="line">printArray( stringArray  );</span><br></pre></td></tr></table></figure><p><strong>常用的通配符为： T，E，K，V，？</strong></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><p>更多关于 Java 泛型中的通配符可以查看这篇文章：<a href="https://juejin.im/post/5d5789d26fb9a06ad0056bd9" target="_blank" rel="noopener">《聊一聊-JAVA 泛型中的通配符 T，E，K，V，？》</a></p><h4 id="1-2-8-和-equals-的区别"><a href="#1-2-8-和-equals-的区别" class="headerlink" title="1.2.8. ==和 equals 的区别"></a>1.2.8. ==和 equals 的区别</h4><p><strong><code>==</code></strong> : 它的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。(<strong>基本数据类型==比较的是值，引用数据类型==比较的是内存地址</strong>)</p><blockquote><p>因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p></blockquote><p><strong><code>equals()</code></strong> : 它的作用也是判断两个对象是否相等，它不能用于比较基本数据类型的变量。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类。</p><p><code>Object</code>类<code>equals()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>equals()</code> 方法存在两种使用情况：</p><ul><li>情况 1：类没有覆盖 <code>equals()</code>方法。则通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象。使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li><li>情况 2：类覆盖了 <code>equals()</code>方法。一般，我们都覆盖 <code>equals()</code>方法来两个对象的内容相等；若它们的内容相等，则返回 true(即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">"ab"</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">"ab"</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">        String aa = <span class="string">"ab"</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">        String bb = <span class="string">"ab"</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">        <span class="keyword">if</span> (aa == bb) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">"aa==bb"</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="comment">// false，非同一对象</span></span><br><span class="line">            System.out.println(<span class="string">"a==b"</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.equals(b)) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">"aEQb"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>) &#123; <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">"true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><code>String</code> 中的 <code>equals</code> 方法是被重写过的，因为 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址，而 <code>String</code> 的 <code>equals</code> 方法比较的是对象的值。</li><li>当创建 <code>String</code> 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 <code>String</code> 对象。</li></ul><p><code>String</code>类<code>equals()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-9-hashCode-与-equals"><a href="#1-2-9-hashCode-与-equals" class="headerlink" title="1.2.9. hashCode()与 equals()"></a>1.2.9. hashCode()与 equals()</h4><p>面试官可能会问你：“你重写过 <code>hashcode</code> 和 <code>equals</code>么，为什么重写 <code>equals</code> 时必须重写 <code>hashCode</code> 方法？”</p><p><strong>1)hashCode()介绍:</strong></p><p><code>hashCode()</code> 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。<code>hashCode()</code>定义在 JDK 的 <code>Object</code> 类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code> 函数。另外需要注意的是： <code>Object</code> 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><p><strong>2)为什么要有 hashCode？</strong></p><p>我们以“<code>HashSet</code> 如何检查重复”为例子来说明为什么要有 hashCode？</p><p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code> 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，<code>HashSet</code> 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals()</code> 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，<code>HashSet</code> 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head First Java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p><strong>3)为什么重写 <code>equals</code> 时必须重写 <code>hashCode</code> 方法？</strong></p><p>如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。<strong>因此，equals 方法被覆盖过，则 <code>hashCode</code> 方法也必须被覆盖。</strong></p><blockquote><p><code>hashCode()</code>的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p></blockquote><p><strong>4)为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？</strong></p><p>在这里解释一位小伙伴的问题。以下内容摘自《Head Fisrt Java》。</p><p>因为 <code>hashCode()</code> 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 <code>hashCode</code>。</p><p>我们刚刚也提到了 <code>HashSet</code>,如果 <code>HashSet</code> 在对比的时候，同样的 hashcode 有多个对象，它会使用 <code>equals()</code> 来判断是否真的相同。也就是说 <code>hashcode</code> 只是用来缩小查找成本。</p><p>更多关于 <code>hashcode()</code> 和 <code>equals()</code> 的内容可以查看：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html" target="_blank" rel="noopener">Java hashCode() 和 equals()的若干问题解答</a></p><h3 id="1-3-基本数据类型"><a href="#1-3-基本数据类型" class="headerlink" title="1.3. 基本数据类型"></a>1.3. 基本数据类型</h3><h4 id="1-3-1-Java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"><a href="#1-3-1-Java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？" class="headerlink" title="1.3.1. Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"></a>1.3.1. Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？</h4><p>Java<strong>中</strong>有 8 种基本数据类型，分别为：</p><ol><li>6 种数字类型 ：byte、short、int、long、float、double</li><li>1 种字符类型：char</li><li>1 种布尔型：boolean。</li></ol><p>这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean</p><table><thead><tr><th align="left">基本类型</th><th align="left">位数</th><th align="left">字节</th><th>默认值</th></tr></thead><tbody><tr><td align="left">int</td><td align="left">32</td><td align="left">4</td><td>0</td></tr><tr><td align="left">short</td><td align="left">16</td><td align="left">2</td><td>0</td></tr><tr><td align="left">long</td><td align="left">64</td><td align="left">8</td><td>0L</td></tr><tr><td align="left">byte</td><td align="left">8</td><td align="left">1</td><td>0</td></tr><tr><td align="left">char</td><td align="left">16</td><td align="left">2</td><td>‘u0000’</td></tr><tr><td align="left">float</td><td align="left">32</td><td align="left">4</td><td>0f</td></tr><tr><td align="left">double</td><td align="left">64</td><td align="left">8</td><td>0d</td></tr><tr><td align="left">boolean</td><td align="left">1</td><td align="left"></td><td>false</td></tr></tbody></table><p>对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><p>注意：</p><ol><li>Java 里使用 long 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析：</li><li><code>char a = &#39;h&#39;</code>char :单引号，<code>String a = &quot;hello&quot;</code> :双引号</li></ol><h4 id="1-3-2-自动装箱与拆箱"><a href="#1-3-2-自动装箱与拆箱" class="headerlink" title="1.3.2. 自动装箱与拆箱"></a>1.3.2. 自动装箱与拆箱</h4><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>更多内容见：<a href="https://www.cnblogs.com/dolphin0520/p/3780005.html" target="_blank" rel="noopener">深入剖析 Java 中的装箱和拆箱</a></p><h4 id="1-3-3-8-种基本类型的包装类和常量池"><a href="#1-3-3-8-种基本类型的包装类和常量池" class="headerlink" title="1.3.3. 8 种基本类型的包装类和常量池"></a>1.3.3. 8 种基本类型的包装类和常量池</h4><p><strong>Java 基本类型的包装类的大部分都实现了常量池技术，即 Byte,Short,Integer,Long,Character,Boolean；前面 4 种包装类默认创建了数值[-128，127] 的相应类型的缓存数据，Character 创建了数值在[0,127]范围的缓存数据，Boolean 直接返回 True Or False。如果超出对应范围仍然会去创建新的对象。</strong> 为啥把缓存设置为[-128，127]区间？（<a href="https://github.com/Snailclimb/JavaGuide/issues/461">参见 issue/461</a>）性能和资源之间的权衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CharacterCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Character((<span class="keyword">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">33</span>;</span><br><span class="line">Integer i2 = <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// 输出 true</span></span><br><span class="line">Integer i11 = <span class="number">333</span>;</span><br><span class="line">Integer i22 = <span class="number">333</span>;</span><br><span class="line">System.out.println(i11 == i22);<span class="comment">// 输出 false</span></span><br><span class="line">Double i3 = <span class="number">1.2</span>;</span><br><span class="line">Double i4 = <span class="number">1.2</span>;</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><p><strong>Integer 缓存源代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此方法将始终缓存-128 到 127（包括端点）范围内的值，并可以缓存此范围之外的其他值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景：</strong></p><ol><li>Integer i1=40；Java 在编译的时候会直接将代码封装成 Integer i1=Integer.valueOf(40);，从而使用常量池中的对象。</li><li>Integer i1 = new Integer(40);这种情况下会创建新的对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">//输出 false</span></span><br></pre></td></tr></table></figure><p><strong>Integer 比较更丰富的一个例子:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="number">40</span>;</span><br><span class="line">Integer i3 = <span class="number">0</span>;</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"i1=i2   "</span> + (i1 == i2));</span><br><span class="line">System.out.println(<span class="string">"i1=i2+i3   "</span> + (i1 == i2 + i3));</span><br><span class="line">System.out.println(<span class="string">"i1=i4   "</span> + (i1 == i4));</span><br><span class="line">System.out.println(<span class="string">"i4=i5   "</span> + (i4 == i5));</span><br><span class="line">System.out.println(<span class="string">"i4=i5+i6   "</span> + (i4 == i5 + i6));</span><br><span class="line">System.out.println(<span class="string">"40=i5+i6   "</span> + (<span class="number">40</span> == i5 + i6));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">i1</span>=<span class="keyword">i2</span>   <span class="keyword">true</span></span><br><span class="line"><span class="keyword">i1</span>=<span class="keyword">i2</span>+<span class="keyword">i3</span>   <span class="keyword">true</span></span><br><span class="line"><span class="keyword">i1</span>=<span class="keyword">i4</span>   <span class="keyword">false</span></span><br><span class="line"><span class="keyword">i4</span>=<span class="keyword">i5</span>   <span class="keyword">false</span></span><br><span class="line"><span class="keyword">i4</span>=<span class="keyword">i5</span>+<span class="keyword">i6</span>   <span class="keyword">true</span></span><br><span class="line"><span class="number">40</span>=<span class="keyword">i5</span>+<span class="keyword">i6</span>   <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>语句 i4 == i5 + i6，因为+这个操作符不适用于 Integer 对象，首先 i5 和 i6 进行自动拆箱操作，进行数值相加，即 i4 == 40。然后 Integer 对象无法与数值进行直接比较，所以 i4 自动拆箱转为 int 值 40，最终这条语句转为 40 == 40 进行数值比较。</p><h3 id="1-4-方法（函数）"><a href="#1-4-方法（函数）" class="headerlink" title="1.4. 方法（函数）"></a>1.4. 方法（函数）</h3><h4 id="1-4-1-什么是方法的返回值-返回值在类的方法里的作用是什么"><a href="#1-4-1-什么是方法的返回值-返回值在类的方法里的作用是什么" class="headerlink" title="1.4.1. 什么是方法的返回值?返回值在类的方法里的作用是什么?"></a>1.4.1. 什么是方法的返回值?返回值在类的方法里的作用是什么?</h4><p>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！</p><h4 id="1-4-2-为什么-Java-中只有值传递？"><a href="#1-4-2-为什么-Java-中只有值传递？" class="headerlink" title="1.4.2. 为什么 Java 中只有值传递？"></a>1.4.2. 为什么 Java 中只有值传递？</h4><p>首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。<strong>按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</strong> 它用来描述各种程序设计语言（不只是 Java)中方法参数传递方式。</p><p><strong>Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</strong></p><p><strong>下面通过 3 个例子来给大家说明</strong></p><blockquote><p><strong>example 1</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    swap(num1, num2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"num1 = "</span> + num1);</span><br><span class="line">    System.out.println(<span class="string">"num2 = "</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">    System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = <span class="number">20</span></span><br><span class="line"><span class="attr">b</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">num1</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">num2</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/3.jpg?Expires=1607356570&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=PtyE9KiZtMAsiV9KZlFetRuPZKE%3D&versionId=CAEQNRiBgMDeiOH2sRciIGExNmZhYjI0MmE5YjRhZmJiMWQ3Zjg0MzU5YWUwMzk0&response-content-type=application%2Foctet-stream" alt="example 1 "></p><p>在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p><p><strong>通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看 example2.</strong></p><blockquote><p><strong>example 2</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">change(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/4.jpg?Expires=1607356587&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=%2B29exLnGDs4voj14RO7nw78Jt3o%3D&versionId=CAEQNRiBgIDhhuH2sRciIDc5NjA3NmMwNzUyYjRhN2Q5YWUwYzkyMmJmYTNjOWQy&response-content-type=application%2Foctet-stream" alt="example 2"></p><p>array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。</p><p><strong>通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</strong></p><p><strong>很多程序设计语言（特别是，C++和 Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为 Java 程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。</strong></p><blockquote><p><strong>example 3</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">"小张"</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"小李"</span>);</span><br><span class="line">Test.swap(s1, s2);</span><br><span class="line">System.out.println(<span class="string">"s1:"</span> + s1.getName());</span><br><span class="line">System.out.println(<span class="string">"s2:"</span> + s2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Student x, Student y)</span> </span>&#123;</span><br><span class="line">Student temp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp;</span><br><span class="line">System.out.println(<span class="string">"x:"</span> + x.getName());</span><br><span class="line">System.out.println(<span class="string">"y:"</span> + y.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">x:</span>小李</span><br><span class="line"><span class="symbol">y:</span>小张</span><br><span class="line"><span class="symbol">s1:</span>小张</span><br><span class="line"><span class="symbol">s2:</span>小李</span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><p>交换之前：</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/5.jpg?Expires=1607356614&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=44JiPjzTpMO7jWIzuoVt4DymbNU%3D&versionId=CAEQNRiBgIDuhuH2sRciIGRkZGU1ZGM2OGY1YTRkMjViOWE2YjljNGM2YTIxOWM2&response-content-type=application%2Foctet-stream" alt=""></p><p>交换之后：</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/6.jpg?Expires=1607356637&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=OMhKdQ3yVFWJ1bwn1NEOb8O0kr4%3D&versionId=CAEQNRiBgMCqiOH2sRciIDAxYzJlZWFmY2E1MzRiOGU5NmI0MGI1M2ZkYmVlM2Ni&response-content-type=application%2Foctet-stream" alt=""></p><p>通过上面两张图可以很清晰的看出： <strong>方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</strong></p><blockquote><p><strong>总结</strong></p></blockquote><p>Java 程序设计语言对对象采用的不是引用调用，实际上，对象引用是按<br>值传递的。</p><p>下面再总结一下 Java 中方法参数的使用情况：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p><strong>参考：</strong></p><p>《Java 核心技术卷 Ⅰ》基础知识第十版第四章 4.5 小节</p><h4 id="1-4-3-重载和重写的区别"><a href="#1-4-3-重载和重写的区别" class="headerlink" title="1.4.3. 重载和重写的区别"></a>1.4.3. 重载和重写的区别</h4><blockquote><p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p><p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p></blockquote><p><strong>重载：</strong></p><p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p><p>下面是《Java 核心技术》对重载这个概念的介绍：</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/7.jpg?Expires=1607356654&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=E4UQ3muycd6KVDLWfnccmcku6NU%3D&versionId=CAEQNRiBgIDIh.H2sRciIDliNjBlNmUwZWViODRmYjk5MjRkOTU0OWI0ZDEwZDVh&response-content-type=application%2Foctet-stream" alt=""></p><p>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</p><p><strong>重写：</strong></p><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p><ol><li>返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li><li>如果父类方法访问修饰符为 <code>private/final/static</code> 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。</li><li>构造方法无法被重写</li></ol><p>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</p><p>暖心的 Guide 哥最后再来个图表总结一下！</p><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">发生范围</td><td align="left">同一个类</td><td align="left">子类</td></tr><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可修改</td><td align="left">子类方法返回值类型应比父类方法返回值类型更小或相等</td></tr><tr><td align="left">异常</td><td align="left">可修改</td><td align="left">子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</td></tr><tr><td align="left">访问修饰符</td><td align="left">可修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr><tr><td align="left">发生阶段</td><td align="left">编译期</td><td align="left">运行期</td></tr></tbody></table><p><strong>方法的重写要遵循“两同两小一大”</strong>（以下内容摘录自《疯狂 Java 讲义》,<a href="https://github.com/Snailclimb/JavaGuide/issues/892">issue#892</a> ）：</p><ul><li>“两同”即方法名相同、形参列表相同；</li><li>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</li><li>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li></ul><h4 id="1-4-4-深拷贝-vs-浅拷贝"><a href="#1-4-4-深拷贝-vs-浅拷贝" class="headerlink" title="1.4.4. 深拷贝 vs 浅拷贝"></a>1.4.4. 深拷贝 vs 浅拷贝</h4><ol><li><strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li><li><strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li></ol><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/8.jpg?Expires=1607356674&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=oSvVG1lyLxjrUue8fbK1c1RZcxw%3D&versionId=CAEQNRiBgICxgeH2sRciIGQ0ZGVkNzRjZTZlZTRiMjU5YzhiZmRhYWRjNjc4NmIx&response-content-type=application%2Foctet-stream" alt="deep and shallow copy"></p><h4 id="1-4-5-方法的四种类型"><a href="#1-4-5-方法的四种类型" class="headerlink" title="1.4.5. 方法的四种类型"></a>1.4.5. 方法的四种类型</h4><p>1、无参数无返回值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参数无返回值的方法(如果方法没有返回值，不能不写，必须写void，表示没有返回值)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"无参数无返回值的方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、有参数无返回值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 有参数无返回值的方法</span></span><br><span class="line"><span class="comment">* 参数列表由零组到多组“参数类型+形参名”组合而成，多组参数之间以英文逗号（,）隔开，形参类型和形参名之间以英文空格隔开</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> a, String b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">"--&gt;"</span> + b + <span class="string">"--&gt;"</span> + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、有返回值无参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有返回值无参数的方法（返回值可以是任意的类型,在函数里面必须有return关键字返回对应的类型）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"有返回值无参数的方法"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、有返回值有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有返回值有参数的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、return 在无返回值方法的特殊使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return在无返回值方法的特殊使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//表示结束所在方法 （f5方法）的执行,下方的输出语句不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Java-面向对象"><a href="#2-Java-面向对象" class="headerlink" title="2. Java 面向对象"></a>2. Java 面向对象</h2><h3 id="2-1-类和对象"><a href="#2-1-类和对象" class="headerlink" title="2.1. 类和对象"></a>2.1. 类和对象</h3><h4 id="2-1-1-面向对象和面向过程的区别"><a href="#2-1-1-面向对象和面向过程的区别" class="headerlink" title="2.1.1. 面向对象和面向过程的区别"></a>2.1.1. 面向对象和面向过程的区别</h4><ul><li><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li><li><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</li></ul><p>参见 issue : <a href="https://github.com/Snailclimb/JavaGuide/issues/431">面向过程 ：面向过程性能比面向对象高？？</a></p><blockquote><p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java 性能差的主要原因并不是因为它是面向对象语言，而是 Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执行的二进制机械码。</p><p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比 Java 好。</p></blockquote><h4 id="2-1-2-构造器-Constructor-是否可被-override"><a href="#2-1-2-构造器-Constructor-是否可被-override" class="headerlink" title="2.1.2. 构造器 Constructor 是否可被 override?"></a>2.1.2. 构造器 Constructor 是否可被 override?</h4><p>Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h4 id="2-1-3-在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#2-1-3-在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="2.1.3. 在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>2.1.3. 在 Java 中定义一个不做事且没有参数的构造方法的作用</h4><p>Java 程序在执行子类的构造方法之前，如果没有用 <code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 <code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h4 id="2-1-4-成员变量与局部变量的区别有哪些？"><a href="#2-1-4-成员变量与局部变量的区别有哪些？" class="headerlink" title="2.1.4. 成员变量与局部变量的区别有哪些？"></a>2.1.4. 成员变量与局部变量的区别有哪些？</h4><ol><li>从语法形式上看:成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li>从变量在内存中的存储方式来看:如果成员变量是使用<code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用<code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ol><h4 id="2-1-5-创建一个对象用什么运算符-对象实体与对象引用有何不同"><a href="#2-1-5-创建一个对象用什么运算符-对象实体与对象引用有何不同" class="headerlink" title="2.1.5. 创建一个对象用什么运算符?对象实体与对象引用有何不同?"></a>2.1.5. 创建一个对象用什么运算符?对象实体与对象引用有何不同?</h4><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</p><h4 id="2-1-6-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"><a href="#2-1-6-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么" class="headerlink" title="2.1.6. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?"></a>2.1.6. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?</h4><p>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会再添加默认的无参数的构造方法了，这时候，就不能直接 new 一个对象而不传递参数了，所以我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。</p><h4 id="2-1-7-构造方法有哪些特性？"><a href="#2-1-7-构造方法有哪些特性？" class="headerlink" title="2.1.7. 构造方法有哪些特性？"></a>2.1.7. 构造方法有哪些特性？</h4><ol><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ol><h4 id="2-1-8-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"><a href="#2-1-8-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是" class="headerlink" title="2.1.8. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?"></a>2.1.8. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?</h4><p>帮助子类做初始化工作。</p><h4 id="2-1-9-对象的相等与指向他们的引用相等-两者有什么不同"><a href="#2-1-9-对象的相等与指向他们的引用相等-两者有什么不同" class="headerlink" title="2.1.9. 对象的相等与指向他们的引用相等,两者有什么不同?"></a>2.1.9. 对象的相等与指向他们的引用相等,两者有什么不同?</h4><p>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h3 id="2-2-面向对象三大特征"><a href="#2-2-面向对象三大特征" class="headerlink" title="2.2. 面向对象三大特征"></a>2.2. 面向对象三大特征</h3><h4 id="2-2-1-封装"><a href="#2-2-1-封装" class="headerlink" title="2.2.1. 封装"></a>2.2.1. 封装</h4><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法 ，这里只是为了举例子）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//id属性私有化</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//name属性私有化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取id的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置id的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取name的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置name的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-继承"><a href="#2-2-2-继承" class="headerlink" title="2.2.2. 继承"></a>2.2.2. 继承</h4><p>不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h4 id="2-2-3-多态"><a href="#2-2-3-多态" class="headerlink" title="2.2.3. 多态"></a>2.2.3. 多态</h4><p>多态，顾名思义，表示一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。</p><p><strong>多态的特点:</strong></p><ul><li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li><li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li><li>多态不能调用“只在子类存在但在父类不存在”的方法；</li><li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li></ul><h3 id="2-3-修饰符"><a href="#2-3-修饰符" class="headerlink" title="2.3. 修饰符"></a>2.3. 修饰符</h3><h4 id="2-3-1-在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#2-3-1-在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="2.3.1. 在一个静态方法内调用一个非静态成员为什么是非法的?"></a>2.3.1. 在一个静态方法内调用一个非静态成员为什么是非法的?</h4><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h4 id="2-3-2-静态方法和实例方法有何不同"><a href="#2-3-2-静态方法和实例方法有何不同" class="headerlink" title="2.3.2. 静态方法和实例方法有何不同"></a>2.3.2. 静态方法和实例方法有何不同</h4><ol><li><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p></li><li><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p></li></ol><h3 id="2-5-其它重要知识点"><a href="#2-5-其它重要知识点" class="headerlink" title="2.5. 其它重要知识点"></a>2.5. 其它重要知识点</h3><h4 id="2-5-1-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#2-5-1-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="2.5.1. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>2.5.1. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h4><p>简单的来说：<code>String</code> 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以<code>String</code> 对象是不可变的。</p><blockquote><p>补充（来自<a href="https://github.com/Snailclimb/JavaGuide/issues/675">issue 675</a>）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 <code>private final byte[] value</code>;</p></blockquote><p>而 <code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 <code>final</code> 关键字修饰，所以这两种对象都是可变的。</p><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 的构造方法都是调用父类构造方法也就是<code>AbstractStringBuilder</code> 实现的，大家可以自行查阅源码。</p><p><code>AbstractStringBuilder.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The count is the number of characters used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>线程安全性</strong></p><p><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。<code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据: 适用 <code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></li><li>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></li></ol><h4 id="2-5-2-Object-类的常见方法总结"><a href="#2-5-2-Object-类的常见方法总结" class="headerlink" title="2.5.2. Object 类的常见方法总结"></a>2.5.2. Object 类的常见方法总结</h4><p>Object 类是一个特殊的类，是所有类的父类。它主要提供了以下 11 个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()<span class="comment">//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="comment">//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span><span class="comment">//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException<span class="comment">//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span><span class="comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span><span class="comment">//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;<span class="comment">//实例被垃圾回收器回收的时候触发的操作</span></span><br></pre></td></tr></table></figure><h4 id="2-5-3-与-equals-重要"><a href="#2-5-3-与-equals-重要" class="headerlink" title="2.5.3. == 与 equals(重要)"></a>2.5.3. == 与 equals(重要)</h4><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">"ab"</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">"ab"</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">        String aa = <span class="string">"ab"</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">        String bb = <span class="string">"ab"</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">        <span class="keyword">if</span> (aa == bb) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">"aa==bb"</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="comment">// false，非同一对象</span></span><br><span class="line">            System.out.println(<span class="string">"a==b"</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.equals(b)) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">"aEQb"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>) &#123; <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">"true"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h4 id="2-5-4-hashCode-与-equals-重要"><a href="#2-5-4-hashCode-与-equals-重要" class="headerlink" title="2.5.4. hashCode 与 equals (重要)"></a>2.5.4. hashCode 与 equals (重要)</h4><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode 方法？”</p><h5 id="2-5-4-1-hashCode（）介绍"><a href="#2-5-4-1-hashCode（）介绍" class="headerlink" title="2.5.4.1. hashCode（）介绍"></a>2.5.4.1. hashCode（）介绍</h5><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h5 id="2-5-4-2-为什么要有-hashCode"><a href="#2-5-4-2-为什么要有-hashCode" class="headerlink" title="2.5.4.2. 为什么要有 hashCode"></a>2.5.4.2. 为什么要有 hashCode</h5><p><strong>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong> 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与该位置其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals()</code>方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：<code>hashCode()</code> 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个 int 整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。<strong><code>hashCode()</code>在散列表中才有用，在其它情况下没用</strong>。在散列表中 hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><h5 id="2-5-4-3-hashCode（）与-equals（）的相关规定"><a href="#2-5-4-3-hashCode（）与-equals（）的相关规定" class="headerlink" title="2.5.4.3. hashCode（）与 equals（）的相关规定"></a>2.5.4.3. hashCode（）与 equals（）的相关规定</h5><ol><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等,对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p>推荐阅读：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html" target="_blank" rel="noopener">Java hashCode() 和 equals()的若干问题解答</a></p><h4 id="2-5-5-Java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#2-5-5-Java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="2.5.5. Java 序列化中如果有些字段不想进行序列化，怎么办？"></a>2.5.5. Java 序列化中如果有些字段不想进行序列化，怎么办？</h4><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><p>transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。</p><h4 id="2-5-6-获取用键盘输入常用的两种方法"><a href="#2-5-6-获取用键盘输入常用的两种方法" class="headerlink" title="2.5.6. 获取用键盘输入常用的两种方法"></a>2.5.6. 获取用键盘输入常用的两种方法</h4><p>方法 1：通过 Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s  = input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>方法 2：通过 BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String s = input.readLine();</span><br></pre></td></tr></table></figure><h2 id="3-Java-核心技术"><a href="#3-Java-核心技术" class="headerlink" title="3. Java 核心技术"></a>3. Java 核心技术</h2><h3 id="3-1-反射机制"><a href="#3-1-反射机制" class="headerlink" title="3.1. 反射机制"></a>3.1. 反射机制</h3><p>JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 java 语言的反射机制。</p><h4 id="3-1-1-静态编译和动态编译"><a href="#3-1-1-静态编译和动态编译" class="headerlink" title="3.1.1.静态编译和动态编译"></a>3.1.1.静态编译和动态编译</h4><ul><li><strong>静态编译：</strong> 在编译时确定类型，绑定对象</li><li><strong>动态编译：</strong> 运行时确定类型，绑定对象</li></ul><h4 id="3-1-2-反射机制优缺点"><a href="#3-1-2-反射机制优缺点" class="headerlink" title="3.1.2.反射机制优缺点"></a>3.1.2.反射机制优缺点</h4><ul><li><strong>优点：</strong> 运行期类型的判断，动态加载类，提高代码灵活度。</li><li><strong>缺点：</strong> 1,性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的 java 代码要慢很多。2,安全问题，让我们可以动态操作改变类的属性同时也增加了类的安全隐患。</li></ul><h4 id="3-1-3-反射的应用场景"><a href="#3-1-3-反射的应用场景" class="headerlink" title="3.1.3.反射的应用场景"></a>3.1.3.反射的应用场景</h4><p><strong>反射是框架设计的灵魂。</strong></p><p>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。</p><p>举例：</p><ol><li>我们在使用 JDBC 连接数据库时使用 <code>Class.forName()</code>通过反射加载数据库的驱动程序；</li><li>Spring 框架的 IOC（动态加载管理 Bean）创建对象以及 AOP（动态代理）功能都和反射有联系；</li><li>动态配置实例的属性；</li><li>……</li></ol><h3 id="3-2-异常"><a href="#3-2-异常" class="headerlink" title="3.2. 异常"></a>3.2. 异常</h3><h4 id="3-2-1-Java-异常类层次结构图"><a href="#3-2-1-Java-异常类层次结构图" class="headerlink" title="3.2.1. Java 异常类层次结构图"></a>3.2.1. Java 异常类层次结构图</h4><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/9.jpg?Expires=1607356711&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=VIvSbGygFalhvQwjGcGgaDcs1to%3D&versionId=CAEQNRiBgMCygeH2sRciIDFhOTcxMGJkMDFkMDQ5MWY4NTQxOTcxOTYwM2RiMjVi&response-content-type=application%2Foctet-stream" alt=""></p><p style="font-size:13px;text-align:right">图片来自：https://simplesnippets.tech/exception-handling-in-java-part-1/</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/10.jpg?Expires=1607356724&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=2dHJHaz2SgL87EOB7CaEpBi4TDQ%3D&versionId=CAEQNRiBgMCTheH2sRciIGFhOWUxYzQ4ODhjMTRiZmZhMDdjNmRiMWQ3MTdmY2Fk&response-content-type=application%2Foctet-stream" alt=""></p><p style="font-size:13px;text-align:right">图片来自：https://chercher.tech/java-programming/exceptions-java</p><p>在 Java 中，所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <code>Throwable</code> 类。<code>Throwable</code> 类有两个重要的子类 <code>Exception</code>（异常）和 <code>Error</code>（错误）。<code>Exception</code> 能被程序本身处理(<code>try-catch</code>)， <code>Error</code> 是无法处理的(只能尽量避免)。</p><p><code>Exception</code> 和 <code>Error</code> 二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><ul><li><strong><code>Exception</code></strong> :程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 受检查异常(必须处理) 和 不受检查异常(可以不处理)。</li><li><strong><code>Error</code></strong> ：<code>Error</code> 属于程序无法处理的错误 ，我们没办法通过 <code>catch</code> 来进行捕获 。例如，Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li></ul><p><strong>受检查异常</strong></p><p>Java 代码在编译过程中，如果受检查异常没有被 <code>catch</code>/<code>throw</code> 处理的话，就没办法通过编译 。比如下面这段 IO 操作的代码。</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/11.jpg?Expires=1607356737&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=PqCqpJ2JkzEDq2votyfyGicE4Ac%3D&versionId=CAEQNRiBgMD5hOH2sRciIGM1NmZjYTY1NTg4NTQzMDFiNGI5ZGNhNWY3MGI4ZmMw&response-content-type=application%2Foctet-stream" alt="check-exception"></p><p>除了<code>RuntimeException</code>及其子类以外，其他的<code>Exception</code>类及其子类都属于检查异常 。常见的受检查异常有： IO 相关的异常、<code>ClassNotFoundException</code> 、<code>SQLException</code>…。</p><p><strong>不受检查异常</strong></p><p>Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p><p><code>RuntimeException</code> 及其子类都统称为非受检查异常，例如：<code>NullPointExecrption</code>、<code>NumberFormatException</code>（字符串转换为数字）、<code>ArrayIndexOutOfBoundsException</code>（数组越界）、<code>ClassCastException</code>（类型转换错误）、<code>ArithmeticException</code>（算术错误）等。</p><h4 id="3-2-2-Throwable-类常用方法"><a href="#3-2-2-Throwable-类常用方法" class="headerlink" title="3.2.2. Throwable 类常用方法"></a>3.2.2. Throwable 类常用方法</h4><ul><li><strong><code>public string getMessage()</code></strong>:返回异常发生时的简要描述</li><li><strong><code>public string toString()</code></strong>:返回异常发生时的详细信息</li><li><strong><code>public string getLocalizedMessage()</code></strong>:返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage（）</code>返回的结果相同</li><li><strong><code>public void printStackTrace()</code></strong>:在控制台上打印 <code>Throwable</code> 对象封装的异常信息</li></ul><h4 id="3-2-3-try-catch-finally"><a href="#3-2-3-try-catch-finally" class="headerlink" title="3.2.3. try-catch-finally"></a>3.2.3. try-catch-finally</h4><ul><li><strong><code>try</code>块：</strong> 用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。</li><li><strong><code>catch</code>块：</strong> 用于处理 try 捕获到的异常。</li><li><strong><code>finally</code> 块：</strong> 无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</li></ul><p><strong>在以下 4 种特殊情况下，<code>finally</code> 块不会被执行：</strong></p><ol><li>在 <code>finally</code> 语句块第一行发生了异常。 因为在其他行，<code>finally</code> 块还是会得到执行</li><li>在前面的代码中用了 <code>System.exit(int)</code>已退出程序。 exit 是带参函数 ；若该语句在异常语句之后，finally 会执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><p>下面这部分内容来自 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/190">https://github.com/Snailclimb/JavaGuide/issues/190</a>。</p><p><strong>注意：</strong> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value * value;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用 <code>f(2)</code>，返回值将是 0，因为 finally 语句的返回值覆盖了 try 语句块的返回值。</p><h4 id="3-2-4-使用-try-with-resources-来代替try-catch-finally"><a href="#3-2-4-使用-try-with-resources-来代替try-catch-finally" class="headerlink" title="3.2.4. 使用 try-with-resources 来代替try-catch-finally"></a>3.2.4. 使用 <code>try-with-resources</code> 来代替<code>try-catch-finally</code></h4><ol><li><strong>适用范围（资源的定义）：</strong> 任何实现 <code>java.lang.AutoCloseable</code>或者``java.io.Closeable` 的对象</li><li><strong>关闭资源和 final 的执行顺序：</strong> 在 <code>try-with-resources</code> 语句中，任何 catch 或 finally 块在声明的资源关闭后运行</li></ol><p>《Effecitve Java》中明确指出：</p><blockquote><p>面对必须要关闭的资源，我们总是应该优先使用 <code>try-with-resources</code> 而不是<code>try-finally</code>。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。<code>try-with-resources</code>语句让我们更容易编写必须要关闭的资源的代码，若采用<code>try-finally</code>则几乎做不到这点。</p></blockquote><p>Java 中类似于<code>InputStream</code>、<code>OutputStream</code> 、<code>Scanner</code> 、<code>PrintWriter</code>等的资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下我们都是通过<code>try-catch-finally</code>语句来实现这个需求，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取文本文件的内容</span></span><br><span class="line">Scanner scanner = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">"D://read.txt"</span>));</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (scanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Java 7 之后的 <code>try-with-resources</code> 语句改造上面的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">"test.txt"</span>))) &#123;</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException fnfe) &#123;</span><br><span class="line">    fnfe.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然多个资源需要关闭的时候，使用 <code>try-with-resources</code> 实现起来也非常简单，如果你还是用<code>try-catch-finally</code>可能会带来很多问题。</p><p>通过使用分号分隔，可以在<code>try-with-resources</code>块中声明多个资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedInputStream bin = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"test.txt"</span>)));</span><br><span class="line">             BufferedOutputStream bout = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"out.txt"</span>)))) &#123;</span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bout.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-多线程"><a href="#3-3-多线程" class="headerlink" title="3.3. 多线程"></a>3.3. 多线程</h3><h4 id="3-3-1-简述线程、程序、进程的基本概念。以及他们之间关系是什么"><a href="#3-3-1-简述线程、程序、进程的基本概念。以及他们之间关系是什么" class="headerlink" title="3.3.1. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?"></a>3.3.1. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?</h4><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。<br>线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h4 id="3-3-2-线程有哪些基本状态"><a href="#3-3-2-线程有哪些基本状态" class="headerlink" title="3.3.2. 线程有哪些基本状态?"></a>3.3.2. 线程有哪些基本状态?</h4><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/12.jpg?Expires=1607356767&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=or7YFqWsn2%2BiFldwhD1112k2rgo%3D&versionId=CAEQNRiBgIClg.H2sRciIGJmYzJlNjUwOTE0MDRmZDBiNDc5ZDc3ZTE5MDQzYjlj&response-content-type=application%2Foctet-stream" alt="Java线程的状态"></p><p>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/13.jpg?Expires=1607356778&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=9GHKqx%2B7s%2FV7EVnNGLYbs9VHNn4%3D&versionId=CAEQNRiCgID8hOH2sRciIDUyYzU1NzNiNmQzMTQyNDE5ODQ3Zjc4MDUyMTgzM2Uz&response-content-type=application%2Foctet-stream" alt="Java线程状态变迁"></p><p>由上图可以看出：</p><p>线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 <strong>RUNNING（运行）</strong> 状态。</p><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：<a href="https://howtodoinjava.com/" target="_blank" rel="noopener">HowToDoInJava</a>：<a href="https://howtodoinjava.com/java/multi-threading/java-thread-life-cycle-and-thread-states/" target="_blank" rel="noopener">Java Thread Life Cycle and Thread States</a>），所以 Java 系统一般将这两个状态统称为 <strong>RUNNABLE（运行中）</strong> 状态 。</p></blockquote><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/14.jpg?Expires=1607356789&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=lTek%2Fif7DiAaJj%2BWUjxvpcGyHLw%3D&versionId=CAEQNRiBgMCsgeH2sRciIGE5MzA4N2ZhMjczZjQ0MmJiZTRmZjRkOTNkOGI2MDlk&response-content-type=application%2Foctet-stream" alt="RUNNABLE-VS-RUNNING"></p><p>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>WAITING（等待）</strong> 状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 <strong>TIME_WAITING(超时等待)</strong> 状态相当于在等待状态的基础上增加了超时限制，比如通过 <code>sleep（long millis）</code>方法或 <code>wait（long millis）</code>方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 <strong>BLOCKED（阻塞）</strong> 状态。线程在执行 Runnable 的<code>run()</code>方法之后将会进入到 <strong>TERMINATED（终止）</strong> 状态。</p><h3 id="3-4-文件与-I-O-流"><a href="#3-4-文件与-I-O-流" class="headerlink" title="3.4. 文件与 I\O 流"></a>3.4. 文件与 I\O 流</h3><h4 id="3-4-1-Java-中-IO-流分为几种"><a href="#3-4-1-Java-中-IO-流分为几种" class="headerlink" title="3.4.1. Java 中 IO 流分为几种?"></a>3.4.1. Java 中 IO 流分为几种?</h4><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>按操作方式分类结构图：</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/15.jpg?Expires=1607356807&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=igIfwrBMtJmZ2kzbQd%2Bz3MHu0uI%3D&versionId=CAEQNRiBgMCZg.H2sRciIDRlYjJiNzA2OTZmYzQ1MWU4ZDY3NTdkNmUyNGJlYmVm&response-content-type=application%2Foctet-stream" alt="IO-操作方式分类"></p><p>按操作对象分类结构图：</p><p><img src="https://java-utils.oss-cn-chengdu.aliyuncs.com/java_basic_images/basics/16.jpg?Expires=1607356825&OSSAccessKeyId=TMP.3KiychFM5gYXnGetpnPSSRQqFVNsqH1L2NxBohhpLYy5cXNHYsBhLHpHRNJn2MZfEMW9NqaUDXXC953q8SydqbEYaRi2Fx&Signature=YB8SrckTf%2BfBcwYQFAcosxeztmI%3D&versionId=CAEQNRiBgMCVg.H2sRciIDY2OTgwNTNiZmI3NzQ4ZWNhMDY5MjAzYjZiNTg2MDM2&response-content-type=application%2Foctet-stream" alt="IO-操作对象分类"></p><h5 id="3-4-1-1-既然有了字节流-为什么还要有字符流"><a href="#3-4-1-1-既然有了字节流-为什么还要有字符流" class="headerlink" title="3.4.1.1. 既然有了字节流,为什么还要有字符流?"></a>3.4.1.1. 既然有了字节流,为什么还要有字符流?</h5><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h5 id="3-4-1-2-BIO-NIO-AIO-有什么区别"><a href="#3-4-1-2-BIO-NIO-AIO-有什么区别" class="headerlink" title="3.4.1.2. BIO,NIO,AIO 有什么区别?"></a>3.4.1.2. BIO,NIO,AIO 有什么区别?</h5><ul><li><strong>BIO (Blocking I/O):</strong> 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li><strong>NIO (Non-blocking/New I/O):</strong> NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li><strong>AIO (Asynchronous I/O):</strong> AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li><a href="https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre" target="_blank" rel="noopener">https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre</a></li><li><a href="https://www.educba.com/oracle-vs-openjdk/" target="_blank" rel="noopener">https://www.educba.com/oracle-vs-openjdk/</a></li><li><a href="https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk?answertab=active#tab-top" target="_blank" rel="noopener">https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk?answertab=active#tab-top</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA体系构建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA面试 </tag>
            
            <tag> JAVA编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析01--pandas数据结构浅析</title>
      <link href="/2019/01/21/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9001--pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%B5%85%E6%9E%90/"/>
      <url>/2019/01/21/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9001--pandas%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="pandas-数据结构"><a href="#pandas-数据结构" class="headerlink" title="pandas 数据结构"></a>pandas 数据结构</h2><p>Pandas处理以下三个数据结构 （数据结构构建在Numpy数组）</p><ul><li>系列(Series)</li><li>数据帧(DataFrame)</li><li>面板(Panel)</li></ul><h3 id="维数和描述"><a href="#维数和描述" class="headerlink" title="维数和描述"></a>维数和描述</h3><ul><li>DataFrame是Series的容器，Panel是DataFrame的容器。较高维数据结构是其较低维数据结构的容器</li></ul><table><thead><tr><th align="center">数据结构</th><th align="center">维数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">系列</td><td align="center">1</td><td align="center">1D标记均匀数组，大小不变。</td></tr><tr><td align="center">数据帧</td><td align="center">2</td><td align="center">一般2D标记，大小可变的表结构与潜在的异质类型的列。</td></tr><tr><td align="center">面板</td><td align="center">3</td><td align="center">一般3D标记，大小可变数组。</td></tr></tbody></table><ul><li>系列</li></ul><blockquote><p>系列是具有均匀数据的一维数组结构</p></blockquote><ul><li>数据帧</li></ul><blockquote><p>数据帧(DataFrame)是一个具有异构数据的二维数组</p></blockquote><ul><li>面板</li></ul><blockquote><p>面板是具有异构数据的三维数据结构。在图形表示中很难表示面板。但是一个面板可以说明为DataFrame的容器</p></blockquote><h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><ul><li>python导入相关包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure><ul><li>对象创建</li></ul><blockquote><p>传递值列表创建系列，（默认创建一个整数索引）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">s &#x3D; pd.Series([1,3,5,np.nan,6,8])</span><br><span class="line"></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><blockquote><p>通过传递numpy数组，使用datetime索引和标记列来创建DataFrame</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">dates &#x3D; pd.date_range(&#39;20170101&#39;, periods&#x3D;7)</span><br><span class="line">print(dates)</span><br><span class="line"></span><br><span class="line">print(&quot;--&quot;*16)</span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(7,4), index&#x3D;dates, columns&#x3D;list(&#39;ABCD&#39;))</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><ul><li>通过传递可以转换为类似系列的对象的字典来创建DataFrame</li><li>使用IPython，则会自动启用列名(以及公共属性)的选项完成</li></ul><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="查看数据–"><a href="#查看数据–" class="headerlink" title="查看数据–[]"></a>查看数据–<code>[]</code></h3><ul><li><p>查看DataFrame的顶部和底部的数据行</p><pre><code>df.head()：查看顶部数据行, 默认为5df.tail(3)：查看底部的数据行</code></pre></li><li><p>显示索引，列和底层numpy数据</p><pre><code>df.index：索引df.columns：列名df.values：底层numpy数据</code></pre></li><li><p>描述显示数据的快速统计摘要</p><pre><code>df.describe()：快速统计摘要</code></pre></li><li><p>翻转数据，行列交换</p><pre><code>df.T</code></pre></li><li><p>通过轴排序</p><pre><code>df.sort_index(axis=1, ascending=False)</code></pre></li><li><p>按值排序</p><pre><code>df.sort_values(by=&apos;列名&apos;)</code></pre></li></ul><h3 id="选择区块–loc"><a href="#选择区块–loc" class="headerlink" title="选择区块–loc"></a>选择区块–loc</h3><ul><li><p>选择区块应少用，可以用优化的Pandas数据访问方法<code>.at</code>，<code>.iat</code>，<code>.loc</code>，<code>.iloc</code>和<code>.ix</code>。</p></li><li><p>获取</p><pre><code>选择一列，产生一个系列，相当于df.A: df[&apos;A&apos;]选择通过[]操作符，选择切片行df[0:3]或者df[&apos;20170102&apos;:&apos;20170103&apos;]</code></pre></li><li><p>按标签选择</p><pre><code>使用标签获取横截面 df.loc[&apos;行名&apos;]通过标签选择多轴 df.loc[:, [&apos;列名1&apos;, &apos;列名2&apos;]]显示标签切片，包括两个端点 df.loc[&apos;行1&apos;:&apos;行2&apos;,[&apos;列1&apos;,&apos;列2&apos;]]减少返回对象的尺寸(大小) df.loc[&apos;行1&apos;,[&apos;列1&apos;,&apos;列2&apos;]]</code></pre></li><li><p>通过位置选择–iloc</p><pre><code>通过传递的整数的位置选择 df.iloc[确切行数]通过整数切片，类似于numpy/python df.iloc[1:3, 3:4]通过整数位置的列表 df.iloc[[1,2,4],[0,2]]明确切片行/列. df.iloc[1:3, :]明确获取值 df.iloc[1,1]快速访问标量(等同于先前的方法) df.iat[1,1]</code></pre></li><li><p>布尔索引</p><pre><code>使用单列的值来选择数据 df[df.列名 &gt; 0]满足布尔条件的DataFrame中选择值 df[df &gt; 0]使用isin()方法进行过滤 df2[df2[&apos;E&apos;].isin([&apos;two&apos;,&apos;four&apos;])]</code></pre></li></ul><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul><li>系列(Series)是能够保存任何类型的数据(整数，字符串，浮点数，Python对象等)的一维标记数组。轴标签统称为索引。</li></ul><h3 id="pandas-Series"><a href="#pandas-Series" class="headerlink" title="pandas.Series"></a>pandas.Series</h3><ul><li>构造函数 –&gt; <code>pandas.Series( data, index, dtype, copy)</code></li></ul><table><thead><tr><th align="center">编号</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">data</td><td align="center">数据采取各种形式，如：ndarray，list，constants</td></tr><tr><td align="center">2</td><td align="center">index</td><td align="center">索引值必须是唯一的和散列的，与数据的长度相同。 默认np.arange(n)如果没有索引被传递。</td></tr><tr><td align="center">3</td><td align="center">dtype</td><td align="center">dtype用于数据类型。如果没有，将推断数据类型</td></tr><tr><td align="center">4</td><td align="center">copy</td><td align="center">复制数据，默认为false。</td></tr></tbody></table><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul><li><p>可以使用各种输入创建一个系列，如 -数组、字典、标量值或常数</p></li><li><p>创建一个基本系列是一个空系列</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#import the pandas library and aliasing as pd</span><br><span class="line">import pandas as pd</span><br><span class="line">s &#x3D; pd.Series()</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><ul><li>如果数据是ndarray，则传递的索引必须具有相同的长度。 如果没有传递索引值，那么默认的索引将是范围(n)，其中n是数组长度，即[0,1,2,3…. range(len(array))-1] - 1]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#import the pandas library and aliasing as pd</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">data &#x3D; np.array([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line">s &#x3D; pd.Series(data)</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><ul><li>字典(dict)可以作为输入传递，如果没有指定索引，则按排序顺序取得字典键以构造索引。 如果传递了索引，索引中与标签对应的数据中的值将被拉出。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#import the pandas library and aliasing as pd</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">data &#x3D; &#123;&#39;a&#39; : 0., &#39;b&#39; : 1., &#39;c&#39; : 2.&#125;</span><br><span class="line">s &#x3D; pd.Series(data)</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><ul><li>如果数据是标量值，则必须提供索引。将重复该值以匹配索引的长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(<span class="number">5</span>, index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><ul><li><p>从具有位置的系列中访问数据</p><blockquote><p>系列中的数据可以使用类似于访问ndarray中的数据来访问–数组访问一样</p></blockquote></li><li><p>使用标签检索数据(索引) –字典访问方式 <code>s[&#39;a&#39;, &#39;b&#39;]</code></p><pre><code>注意：若不包含该标签，会出现异常</code></pre></li></ul><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><ul><li><p>数据帧(DataFrame)是二维数据结构，即数据以行和列的表格方式排列。<br>数据帧(DataFrame)的功能特点：</p><blockquote><p>潜在的列是不同的类型</p><p>大小可变</p><p>标记轴(行和列)</p><p>可以对行和列执行算术运算</p></blockquote></li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>创建：<code>pandas.DataFrame( data, index, columns, dtype, copy)</code></li></ul><table><thead><tr><th align="center">编号</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">data</td><td align="center">数据采取各种形式，如:ndarray，series，map，lists，dict，constant和另一个DataFrame。</td></tr><tr><td align="center">2</td><td align="center">index</td><td align="center">对于行标签，要用于结果帧的索引是可选缺省值np.arrange(n)，如果没有传递索引值。</td></tr><tr><td align="center">3</td><td align="center">columns</td><td align="center">对于列标签，可选的默认语法是 - np.arange(n)。 这只有在没有索引传递的情况下才是这样。</td></tr><tr><td align="center">4</td><td align="center">dtype</td><td align="center">每列的数据类型。</td></tr><tr><td align="center">5</td><td align="center">copy</td><td align="center">如果默认值为False，则此命令(或任何它)用于复制数据。</td></tr></tbody></table><blockquote><p>输入数据格式: 列表 、字典、 系列、Numpy ndarrays、另一个数据帧(DataFrame)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#1.创建一个空的DataFrame</span><br><span class="line"></span><br><span class="line">#import the pandas library and aliasing as pd</span><br><span class="line">import pandas as pd</span><br><span class="line">df &#x3D; pd.DataFrame()</span><br><span class="line">print df</span><br><span class="line"></span><br><span class="line">#2.从列表创建DataFrame</span><br><span class="line"></span><br><span class="line">使用单个列表或列表列表创建数据帧(DataFrame)</span><br><span class="line">data &#x3D; [1,2,3,4,5]</span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">data &#x3D; [[&#39;Alex&#39;,10],[&#39;Bob&#39;,12],[&#39;Clarke&#39;,13]]</span><br><span class="line">df &#x3D; pd.DataFrame(data,columns&#x3D;[&#39;Name&#39;,&#39;Age&#39;])</span><br><span class="line"></span><br><span class="line">data &#x3D; [[&#39;Alex&#39;,10],[&#39;Bob&#39;,12],[&#39;Clarke&#39;,13]]</span><br><span class="line">df &#x3D; pd.DataFrame(data,columns&#x3D;[&#39;Name&#39;,&#39;Age&#39;],dtype&#x3D;float) </span><br><span class="line"># dtype参数将Age列的类型更改为浮点。 </span><br><span class="line"></span><br><span class="line">#3.ndarrays&#x2F;Lists的字典来创建DataFrame</span><br><span class="line">#所有的ndarrays必须具有相同的长度。如果传递了索引(index)，</span><br><span class="line">则索引的长度应等于数组的长度。</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;&#39;Name&#39;:[&#39;Tom&#39;, &#39;Jack&#39;, &#39;Steve&#39;, &#39;Ricky&#39;],&#39;Age&#39;:[28,34,29,42]&#125;</span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line">#会默认添加一列索引</span><br><span class="line"></span><br><span class="line">#数组创建一个索引的数据帧(DataFrame)</span><br><span class="line">data &#x3D; &#123;&#39;Name&#39;:[&#39;Tom&#39;, &#39;Jack&#39;, &#39;Steve&#39;, &#39;Ricky&#39;],&#39;Age&#39;:[28,34,29,42]&#125;</span><br><span class="line">df &#x3D; pd.DataFrame(data, index&#x3D;[&#39;rank1&#39;,&#39;rank2&#39;,&#39;rank3&#39;,&#39;rank4&#39;])</span><br><span class="line"></span><br><span class="line">#4.列表创建数据帧DataFrame</span><br><span class="line"></span><br><span class="line">#字典列表可作为输入数据传递以用来创建数据帧(DataFrame)，字典键默认为列名</span><br><span class="line">data &#x3D; [&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;,&#123;&#39;a&#39;: 5, &#39;b&#39;: 10, &#39;c&#39;: 20&#125;]</span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">#传递字典列表和行索引来创建数据帧(DataFrame)</span><br><span class="line">data &#x3D; [&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;,&#123;&#39;a&#39;: 5, &#39;b&#39;: 10, &#39;c&#39;: 20&#125;]</span><br><span class="line">df &#x3D; pd.DataFrame(data, index&#x3D;[&#39;first&#39;, &#39;second&#39;])</span><br><span class="line"></span><br><span class="line">#使用字典，行索引和列索引列表创建数据帧(DataFrame)</span><br><span class="line">data &#x3D; [&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;,&#123;&#39;a&#39;: 5, &#39;b&#39;: 10, &#39;c&#39;: 20&#125;]</span><br><span class="line"></span><br><span class="line">#With two column indices, values same as dictionary keys</span><br><span class="line">df1 &#x3D; pd.DataFrame(data, index&#x3D;[&#39;first&#39;, &#39;second&#39;], columns&#x3D;[&#39;a&#39;, &#39;b&#39;])</span><br><span class="line"></span><br><span class="line">#With two column indices with one index with other name</span><br><span class="line">df2 &#x3D; pd.DataFrame(data, index&#x3D;[&#39;first&#39;, &#39;second&#39;], columns&#x3D;[&#39;a&#39;, &#39;b1&#39;])</span><br><span class="line"># 若不存在的列表名出现，会直接在数据中添加NaN</span><br><span class="line"></span><br><span class="line">#5.系列的字典来创建DataFrame</span><br><span class="line">d &#x3D; &#123;&#39;one&#39; : pd.Series([1, 2, 3], index&#x3D;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]),</span><br><span class="line">      &#39;two&#39; : pd.Series([1, 2, 3, 4], index&#x3D;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])&#125;</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.DataFrame(d)</span><br></pre></td></tr></table></figure><h3 id="列操作"><a href="#列操作" class="headerlink" title="列操作"></a>列操作</h3><ul><li><p>从数据帧(DataFrame)中选择一列</p><pre><code>df [&apos;列名&apos;]</code></pre></li><li><p>向现有数据添加一个新列</p><pre><code>df[&apos;three&apos;]=pd.Series([10,20,30],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])# 添加列名为three，索引为a,b,c，值为10,20,30的一列数据df[&apos;four&apos;]=df[&apos;one&apos;]+df[&apos;three&apos;]#添加列名为four，其数据为one和three列的值相加</code></pre></li><li><p>列可以删除或弹出</p><pre><code>del df[&apos;one&apos;]# 删除表中one列df.pop(&apos;two&apos;)# 删除two列</code></pre></li></ul><h3 id="行操作"><a href="#行操作" class="headerlink" title="行操作"></a>行操作</h3><ul><li>行选择</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.标签选择</span><br><span class="line">#将行标签传递给loc()函数来选择行</span><br><span class="line">df.loc[&#39;b&#39;]</span><br><span class="line">#结果是一系列标签作为DataFrame的列名称。 而且，系列的名称是检索的标签。</span><br><span class="line"></span><br><span class="line">#通过将整数位置传递给iloc()函数来选择行</span><br><span class="line">df.iloc[2]</span><br><span class="line">#选择第3行的所有数据，并以标签为列名称</span><br></pre></td></tr></table></figure><ul><li>行切片：<code>df[2:4]</code></li><li>附加行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; pd.DataFrame([[1, 2], [3, 4]], columns &#x3D; [&#39;a&#39;,&#39;b&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame([[5, 6], [7, 8]], columns &#x3D; [&#39;a&#39;,&#39;b&#39;])</span><br><span class="line"></span><br><span class="line">df &#x3D; df.append(df2)</span><br></pre></td></tr></table></figure><ul><li>删除行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用索引标签从DataFrame中删除或删除行。 如果标签重复，则会删除多行</span><br><span class="line">df &#x3D; pd.DataFrame([[1, 2], [3, 4]], columns &#x3D; [&#39;a&#39;,&#39;b&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame([[5, 6], [7, 8]], columns &#x3D; [&#39;a&#39;,&#39;b&#39;])</span><br><span class="line"></span><br><span class="line">df &#x3D; df.append(df2)</span><br><span class="line">df &#x3D; df.drop(0)</span><br></pre></td></tr></table></figure><h2 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h2><ul><li>面板(Panel)是3D容器的数据</li><li>3轴(axis)这个名称旨在给出描述涉及面板数据的操作的一些语义。</li></ul><blockquote><p>items - axis 0，每个项目对应于内部包含的数据帧(DataFrame)。</p><p>major_axis - axis 1，它是每个数据帧(DataFrame)的索引(行)。</p><p>minor_axis - axis 2，它是每个数据帧(DataFrame)的列。</p></blockquote><h3 id="构造和创建"><a href="#构造和创建" class="headerlink" title="构造和创建"></a>构造和创建</h3><ul><li>构造函数：pandas.Panel(data, items, major_axis, minor_axis, dtype, copy)</li></ul><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">data</td><td align="center">数据采取各种形式，如：ndarray，series，map，lists，dict，constant和另一个数据帧(DataFrame)</td></tr><tr><td align="center">items</td><td align="center">axis=0</td></tr><tr><td align="center">major_axis</td><td align="center">axis=1</td></tr><tr><td align="center">minor_axis</td><td align="center">axis=2</td></tr><tr><td align="center">dtype</td><td align="center">每列的数据类型</td></tr><tr><td align="center">copy</td><td align="center">复制数据，默认 - false</td></tr></tbody></table><ul><li>创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 1.3D ndarray创建</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">data &#x3D; np.random.rand(2,4,5)</span><br><span class="line">p &#x3D; pd.Panel(data)</span><br><span class="line"></span><br><span class="line"># 2.DataFrame对象的dict创建面板</span><br><span class="line">data &#x3D; &#123;&#39;Item1&#39; : pd.DataFrame(np.random.randn(4, 3)), </span><br><span class="line">        &#39;Item2&#39; : pd.DataFrame(np.random.randn(4, 2))&#125;</span><br><span class="line">p &#x3D; pd.Panel(data)</span><br><span class="line"></span><br><span class="line"># 3.创建一个空面板</span><br><span class="line">p &#x3D; pd.Panel()</span><br></pre></td></tr></table></figure><h3 id="选择数据"><a href="#选择数据" class="headerlink" title="选择数据"></a>选择数据</h3><ul><li>使用Items <code>p[&#39;Item1&#39;]</code></li><li>使用major_axis <code>p.major_xs(1)</code></li><li>minor_axis <code>p.minor_xs(1)</code></li></ul><h2 id="三种数据结构运用"><a href="#三种数据结构运用" class="headerlink" title="三种数据结构运用"></a>三种数据结构运用</h2><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul><li>series</li></ul><table><thead><tr><th align="center">编号</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">axes</td><td align="center">返回行轴标签列表。</td></tr><tr><td align="center">2</td><td align="center">dtype</td><td align="center">返回对象的数据类型(dtype)。</td></tr><tr><td align="center">3</td><td align="center">empty</td><td align="center">如果系列为空，则返回True。</td></tr><tr><td align="center">4</td><td align="center">ndim</td><td align="center">返回底层数据的维数，默认定义：1。即1维、2维、3维</td></tr><tr><td align="center">5</td><td align="center">size</td><td align="center">返回基础数据中的元素数。即长度</td></tr><tr><td align="center">6</td><td align="center">values</td><td align="center">将系列作为ndarray返回。即数组形式</td></tr><tr><td align="center">7</td><td align="center">head()</td><td align="center">返回前n行。默认5</td></tr><tr><td align="center">8</td><td align="center">tail()</td><td align="center">返回最后n行。默认5</td></tr></tbody></table><ul><li>DataFrame</li></ul><table><thead><tr><th align="center">编号</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">T</td><td align="center">转置行和列。</td></tr><tr><td align="center">2</td><td align="center">axes</td><td align="center">返回一个列，行轴标签和列轴标签作为唯一的成员。</td></tr><tr><td align="center">3</td><td align="center">dtypes</td><td align="center">返回此对象中的数据类型(dtypes)。</td></tr><tr><td align="center">4</td><td align="center">empty</td><td align="center">如果NDFrame完全为空[无项目]，则返回为True; 如任何轴的长度为0。</td></tr><tr><td align="center">5</td><td align="center">ndim</td><td align="center">轴/数组维度大小。</td></tr><tr><td align="center">6</td><td align="center">shape</td><td align="center">返回表示DataFrame的维度的元组。</td></tr><tr><td align="center">7</td><td align="center"></td><td align="center">size</td></tr><tr><td align="center">8</td><td align="center">values</td><td align="center">NDFrame的Numpy表示。</td></tr><tr><td align="center">9</td><td align="center"></td><td align="center">head()</td></tr><tr><td align="center">10</td><td align="center">tail()</td><td align="center">返回最后n行。</td></tr></tbody></table><h3 id="描述性统计"><a href="#描述性统计" class="headerlink" title="描述性统计"></a>描述性统计</h3><ul><li><p>有很多方法用来集体计算DataFrame的描述性统计信息和其他相关操作。 其中大多数是sum()，mean()等聚合函数，但其中一些，如sumsum()，产生一个相同大小的对象。 </p></li><li><p>一般来说，这些方法采用轴参数，就像ndarray.{sum，std，…}，但轴可以通过名称或整数来指定：</p><pre><code>数据帧(DataFrame) - “index”(axis=0，默认)，columns(axis=1)</code></pre></li></ul><h4 id="sum-方法"><a href="#sum-方法" class="headerlink" title="sum()方法"></a>sum()方法</h4><ul><li>返回所请求轴的值的总和。 默认情况下，轴为索引(axis=0)。即每个单独的列单独添加(附加字符串，字符串直接拼接)。<blockquote><p>如果axis=1：返回的为以每个单独行对数字数据求和</p></blockquote></li></ul><h4 id="mean-方法"><a href="#mean-方法" class="headerlink" title="mean()方法"></a>mean()方法</h4><ul><li>对有数值的数据列求平均</li></ul><h4 id="std-方法"><a href="#std-方法" class="headerlink" title="std()方法"></a>std()方法</h4><ul><li>返回数字列的Bressel标准偏差</li></ul><h3 id="函数和说明"><a href="#函数和说明" class="headerlink" title="函数和说明"></a>函数和说明</h3><ul><li>由于DataFrame是异构数据结构。通用操作不适用于所有函数。 </li><li>类似于：sum()，cumsum()函数能与数字和字符(或)字符串数据元素一起工作，不会产生任何错误。字符聚合从来都比较少被使用，虽然这些函数不会引发任何异常。</li><li>由于这样的操作无法执行，因此，当DataFrame包含字符或字符串数据时，像abs()，cumprod()这样的函数会抛出异常。</li></ul><table><thead><tr><th align="center">编号</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">count()</td><td align="center">非空观测数量</td></tr><tr><td align="center">2</td><td align="center">sum()</td><td align="center">所有值之和</td></tr><tr><td align="center">3</td><td align="center">mean()</td><td align="center">所有值的平均值</td></tr><tr><td align="center">4</td><td align="center">median()</td><td align="center">所有值的中位数</td></tr><tr><td align="center">5</td><td align="center">mode()</td><td align="center">值的模值</td></tr><tr><td align="center">6</td><td align="center">std()</td><td align="center">值的标准偏差</td></tr><tr><td align="center">7</td><td align="center">min()</td><td align="center">所有值中的最小值</td></tr><tr><td align="center">8</td><td align="center">max()</td><td align="center">所有值中的最大值</td></tr><tr><td align="center">9</td><td align="center">abs()</td><td align="center">绝对值</td></tr><tr><td align="center">10</td><td align="center">prod()</td><td align="center">数组元素的乘积</td></tr><tr><td align="center">11</td><td align="center">cumsum()</td><td align="center">累计总和</td></tr><tr><td align="center">12</td><td align="center">cumprod()</td><td align="center">累计乘积</td></tr></tbody></table><h3 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h3><ul><li><p>describe()函数是用来计算有关DataFrame列的统计信息的摘要。</p></li><li><p>该函数给出了平均值，标准差和IQR值。 而且，函数排除字符列，并给出关于数字列的摘要。 include是用于传递关于什么列需要考虑用于总结的必要信息的参数。获取值列表; 默认情况下是”数字值”</p><blockquote><p>object - 汇总字符串列. <code>df.describe(include=[&#39;object&#39;])</code></p></blockquote></li></ul><pre><code>&gt;number - 汇总数字列&gt;all - 将所有列汇总在一起(不应将其作为列表值传递)</code></pre><h3 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>使用适当的方法取决于函数是否期望在整个DataFrame，行或列或元素上进行操作。</li></ul><blockquote><p>表合理函数应用：pipe()</p><p>行或列函数应用：apply()</p><p>元素函数应用：applymap()</p></blockquote><h4 id="表格函数"><a href="#表格函数" class="headerlink" title="表格函数"></a>表格函数</h4><ul><li>可以通过将函数和适当数量的参数作为管道参数来执行自定义操作。 因此，对整个DataFrame执行操作。</li><li>例如，为DataFrame中的所有元素相加一个值2。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def adder(ele1,ele2):</span><br><span class="line">    return ele1+ele2</span><br><span class="line"> </span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(5,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">df.pipe(adder,2)</span><br></pre></td></tr></table></figure><h4 id="行或列合理函数"><a href="#行或列合理函数" class="headerlink" title="行或列合理函数"></a>行或列合理函数</h4><ul><li>可以使用apply()方法沿DataFrame或Panel的轴应用任意函数，它与描述性统计方法一样，采用可选的axis参数。 默认情况下，操作按列执行，将每列列为数组。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(5,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">df.apply(np.mean)</span><br><span class="line"></span><br><span class="line">#传递axis参数，可以在行上执行操作</span><br><span class="line">df.apply(np.mean,axis&#x3D;1)</span><br><span class="line">df.apply(lambda x: x.max() - x.min())</span><br></pre></td></tr></table></figure><h4 id="元素合理函数"><a href="#元素合理函数" class="headerlink" title="元素合理函数"></a>元素合理函数</h4><ul><li>并不是所有的函数都可以向量化(也不是返回另一个数组的NumPy数组，也不是任何值)，在DataFrame上的方法applymap()和类似于在Series上的map()接受任何Python函数，并且返回单个值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(5,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line"></span><br><span class="line"># My custom function</span><br><span class="line">df[&#39;col1&#39;].map(lambda x:x*100)</span><br><span class="line">df.applymap(lambda x:x*100)</span><br></pre></td></tr></table></figure><h3 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h3><ul><li>可以通过索引来实现多个操作 -</li></ul><blockquote><p>重新排序现有数据以匹配一组新的标签。</p><p>在没有标签数据的标签位置插入缺失值(NA)标记</p></blockquote><blockquote><p>df.reindex(index=[0,2,5], columns=[‘A’, ‘C’, ‘B’])</p></blockquote><ul><li>重建索引与其他对象对齐</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df1 &#x3D; pd.DataFrame(np.random.randn(10,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.random.randn(7,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line"></span><br><span class="line">df1 &#x3D; df1.reindex_like(df2)</span><br><span class="line">#df1数据帧(DataFrame)被更改并重新编号，如df2。 列名称应该匹配，</span><br><span class="line">否则将为整个列标签添加NAN。</span><br></pre></td></tr></table></figure><ul><li>填充时重新加注</li></ul><blockquote><p>reindex()采用可选参数方法，它是一个填充方法，其值如下：</p></blockquote><blockquote><blockquote><p>pad/ffill - 向前填充值</p><p>bfill/backfill - 向后填充值</p><p>nearest  - 从最近的索引值填充</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df1 &#x3D; pd.DataFrame(np.random.randn(6,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.random.randn(2,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line"></span><br><span class="line"># Padding NAN&#39;s</span><br><span class="line">print df2.reindex_like(df1)</span><br><span class="line"></span><br><span class="line"># Now Fill the NAN&#39;s with preceding Values</span><br><span class="line">print (&quot;Data Frame with Forward Fill:&quot;)</span><br><span class="line">print df2.reindex_like(df1,method&#x3D;&#39;ffill&#39;)</span><br></pre></td></tr></table></figure><ul><li>重建索引时的填充限制</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df1 &#x3D; pd.DataFrame(np.random.randn(6,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.random.randn(2,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line"></span><br><span class="line"># Padding NAN&#39;s</span><br><span class="line">print df2.reindex_like(df1)</span><br><span class="line"></span><br><span class="line"># Now Fill the NAN&#39;s with preceding Values</span><br><span class="line">print (&quot;Data Frame with Forward Fill limiting to 1:&quot;)</span><br><span class="line">print df2.reindex_like(df1,method&#x3D;&#39;ffill&#39;,limit&#x3D;1)</span><br></pre></td></tr></table></figure><ul><li>重命名</li></ul><blockquote><p>rename()方法允许基于一些映射(字典或者系列)或任意函数来重新标记一个轴。看看下面的例子来理解这一概念。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df1 &#x3D; pd.DataFrame(np.random.randn(6,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">print df1</span><br><span class="line"></span><br><span class="line">print (&quot;After renaming the rows and columns:&quot;)</span><br><span class="line">print df1.rename(columns&#x3D;&#123;&#39;col1&#39; : &#39;c1&#39;, &#39;col2&#39; : &#39;c2&#39;&#125;,</span><br><span class="line">index &#x3D; &#123;0 : &#39;apple&#39;, 1 : &#39;banana&#39;, 2 : &#39;durian&#39;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>rename()方法提供了一个inplace命名参数，默认为False并复制底层数据。 指定传递inplace = True则表示将数据重命名</p></blockquote><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ul><li>基本迭代(对于i在对象中)产生 -</li></ul><blockquote><p>Series - 值</p><p>DataFrame - 列标签</p><p>Pannel - 项目标签</p></blockquote><ul><li>迭代DataFrame提供列名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">N&#x3D;20</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.DataFrame(&#123;</span><br><span class="line">    &#39;A&#39;: pd.date_range(start&#x3D;&#39;2016-01-01&#39;,periods&#x3D;N,freq&#x3D;&#39;D&#39;),</span><br><span class="line">    &#39;x&#39;: np.linspace(0,stop&#x3D;N-1,num&#x3D;N),</span><br><span class="line">    &#39;y&#39;: np.random.rand(N),</span><br><span class="line">    &#39;C&#39;: np.random.choice([&#39;Low&#39;,&#39;Medium&#39;,&#39;High&#39;],N).tolist(),</span><br><span class="line">    &#39;D&#39;: np.random.normal(100, 10, size&#x3D;(N)).tolist()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">for col in df:</span><br><span class="line">   print (col)</span><br></pre></td></tr></table></figure><ul><li>要遍历数据帧(DataFrame)中的行，可以使用以下函数 -</li></ul><blockquote><p>iteritems() - 迭代(key，value)对i</p><p>terrows() - 将行迭代为(索引，系列)对</p><p>itertuples() - 以namedtuples的形式迭代行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># iteritems()将每个列作为键，将值与值作为键和列值迭代为Series对象</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(4,3),columns&#x3D;[&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;])</span><br><span class="line">for key,value in df.iteritems():</span><br><span class="line">   print (key,value)</span><br><span class="line"> </span><br><span class="line"># iterrows()返回迭代器，产生每个索引值以及包含每行数据的序列。</span><br><span class="line"></span><br><span class="line">for row_index,row in df.iterrows():</span><br><span class="line">   print (row_index,row)</span><br><span class="line"></span><br><span class="line"># itertuples()方法将为DataFrame中的每一行返回一个产生一个命名元组的迭代器。元组的第一个元素将是行的相应索引值，而剩余的值是行值。</span><br><span class="line">for row in df.itertuples():</span><br><span class="line">    print (row)</span><br></pre></td></tr></table></figure><blockquote><p>不要尝试在迭代时修改任何对象。迭代是用于读取，迭代器返回原始对象(视图)的副本，因此更改将不会反映在原始对象上。</p><p>由于iterrows()遍历行，因此不会跨该行保留数据类型。0,1,2是行索引，col1，col2，col3是列索引。</p></blockquote><h3 id="排序-按标签-实际值"><a href="#排序-按标签-实际值" class="headerlink" title="排序 (按标签 /实际值)"></a>排序 (按标签 /实际值)</h3><ul><li>按标签排序：使用sort_index()方法，通过传递axis参数和排序顺序，可以对DataFrame进行排序。 默认情况下，按照升序对行标签进行排序</li></ul><blockquote><p>（）内参数说明</p><blockquote><p>通过将布尔值传递给升序参数：df.sort_index(ascending=False)</p></blockquote></blockquote><ul><li><p>按列排列：通过传递axis参数值为0或1，可以对列标签进行排序。 默认情况下，axis = 0，逐行排列 df.sort_index(axis=1)</p></li><li><p>按值排序：像索引排序一样，sort_values()是按值排序的方法。它接受一个by参数，它将使用要与其排序值的DataFrame的列名称。df.sort_values(by=’col1’)</p></li></ul><blockquote><p>通过by参数指定需要列值: df.sort_values(by=[‘col1’,’col2’])</p></blockquote><ul><li>排序算法sort_values()提供了从mergeesort，heapsort和quicksort中选择算法的一个配置。Mergesort是唯一稳定的算法</li></ul><blockquote><p>df.sort_values(by=’col1’ ,kind=’mergesor</p></blockquote><h3 id="字符串和文本数据"><a href="#字符串和文本数据" class="headerlink" title="字符串和文本数据"></a>字符串和文本数据</h3><ul><li>andas提供了一组字符串函数，可以方便地对字符串数据进行操作。 最重要的是，这些函数忽略(或排除)丢失/NaN值。几乎这些方法都使用Python字符串函数</li></ul><p><a href="https://docs.python.org/3/library/stdtypes.html#string-methods" target="_blank" rel="noopener">请查阅或参考</a></p><h2 id="选项和自定义"><a href="#选项和自定义" class="headerlink" title="选项和自定义"></a>选项和自定义</h2>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据处理 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA体系构建--持续更新和修订</title>
      <link href="/2019/01/21/JAVA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA--%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/01/21/JAVA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA--%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA体系构建"><a href="#JAVA体系构建" class="headerlink" title="JAVA体系构建"></a>JAVA体系构建</h1><ul><li>本文内容的所有引用都会在相关文章的最前面标注引用链接，若需要进行转载请务必带上原文链接，尊重知识，来之不易，谢谢。</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><a href="https://learn666-gif.github.io/2019/01/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="noopener">Java 基础知识</a></li><li><a href="java/Java疑难点.md">Java 基础知识疑难点总结</a></li><li><a href="java/J2EE基础知识.md">J2EE 基础知识</a></li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li><a href="java/collection/Java集合框架常见面试题.md">Java容器常见面试题/知识点总结</a></li><li><a href="java/collection/ArrayList.md">ArrayList 源码学习</a>  </li><li><a href="java/collection/LinkedList.md">LinkedList 源码学习</a>   </li><li><a href="java/collection/HashMap.md">HashMap(JDK1.8)源码学习</a>  </li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li><a href="java/Multithread/JavaConcurrencyBasicsCommonInterviewQuestionsSummary.md">Java 并发基础常见面试题总结</a></li><li><a href="java/Multithread/JavaConcurrencyAdvancedCommonInterviewQuestions.md">Java 并发进阶常见面试题总结</a></li><li><a href="java/Multithread/并发容器总结.md">并发容器总结</a></li><li><a href="essential-content-for-interview/面试必备之乐观锁与悲观锁.md">乐观锁与悲观锁</a></li><li><a href="java/Multithread/Atomic.md">JUC 中的 Atomic 原子类总结</a></li><li><a href="java/Multithread/AQS.md">AQS 原理以及 AQS 同步组件总结</a></li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li><a href="java/jvm/Java内存区域.md">一 Java内存区域</a></li><li><a href="java/jvm/JVM垃圾回收.md">二 JVM垃圾回收</a></li><li><a href="java/jvm/JDK监控和故障处理工具总结.md">三 JDK 监控和故障处理工具</a></li><li><a href="java/jvm/类文件结构.md">四 类文件结构</a></li><li><a href="java/jvm/类加载过程.md">五 类加载过程</a></li><li><a href="java/jvm/类加载器.md">六 类加载器</a></li></ul><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><ul><li><a href="java/BIO-NIO-AIO.md">BIO,NIO,AIO 总结 </a></li><li><a href="java/Java%20IO与NIO.md">Java IO 与 NIO系列文章</a></li></ul><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><ul><li><a href="java/What's%20New%20in%20JDK8/Java8Tutorial.md">Java 8 新特性总结</a></li><li><a href="java/What's%20New%20in%20JDK8/Java8教程推荐.md">Java 8 学习资源推荐</a></li></ul><h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><ul><li><a href="java/Java编程规范.md">Java 编程规范</a></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><a href="network/计算机网络.md">计算机网络常见面试题</a></li><li><a href="network/干货：计算机网络知识总结.md">计算机网络基础知识总结</a></li><li><a href="network/HTTPS中的TLS.md">HTTPS中的TLS</a></li></ul><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="Linux相关"><a href="#Linux相关" class="headerlink" title="Linux相关"></a>Linux相关</h3><ul><li><a href="operating-system/后端程序员必备的Linux基础知识.md">后端程序员必备的 Linux 基础知识</a>  </li><li><a href="operating-system/Shell.md">Shell 编程入门</a> </li></ul><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li><a href="dataStructures-algorithms/数据结构.md">数据结构知识学习与面试</a></li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><a href="dataStructures-algorithms/算法学习资源推荐.md">算法学习资源推荐</a>  </li><li><a href="dataStructures-algorithms/几道常见的子符串算法题.md">几道常见的字符串算法题总结 </a></li><li><a href="dataStructures-algorithms/几道常见的链表算法题.md">几道常见的链表算法题总结 </a>   </li><li><a href="dataStructures-algorithms/剑指offer部分编程题.md">剑指offer部分编程题</a></li><li><a href="dataStructures-algorithms/公司真题.md">公司真题</a></li><li><a href="dataStructures-algorithms/Backtracking-NQueens.md">回溯算法经典案例之N皇后问题</a></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><a href="database/MySQL.md">MySQL 学习与面试</a></li><li><a href="database/一千行MySQL命令.md">一千行MySQL学习笔记</a></li><li><a href="database/MySQL高性能优化规范建议.md">MySQL高性能优化规范建议</a></li><li><a href="database/MySQL%20Index.md">数据库索引总结</a></li><li><a href="database/事务隔离级别(图文详解).md">事务隔离级别(图文详解)</a></li><li><a href="database/一条sql语句在mysql中如何执行的.md">一条SQL语句在MySQL中如何执行的</a></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><a href="database/Redis/Redis.md">Redis 总结</a></li><li><a href="database/Redis/Redlock分布式锁.md">Redlock分布式锁</a></li><li><a href="database/Redis/如何做可靠的分布式锁，Redlock真的可行么.md">如何做可靠的分布式锁，Redlock真的可行么</a></li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><a href="system-design/设计模式.md">设计模式系列文章</a></li></ul><h3 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><ul><li><a href="system-design/framework/spring/Spring.md">Spring 学习与面试</a></li><li><a href="system-design/framework/spring/SpringInterviewQuestions.md">Spring 常见问题总结</a></li><li><a href="system-design/framework/spring/SpringBean.md">Spring中bean的作用域与生命周期</a></li><li><a href="system-design/framework/spring/SpringMVC-Principle.md">SpringMVC 工作原理详解</a></li><li><a href="system-design/framework/spring/Spring-Design-Patterns.md">Spring中都用到了那些设计模式?</a></li></ul><h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h4><ul><li><a href="system-design/framework/ZooKeeper.md">ZooKeeper 相关概念总结</a></li><li><a href="system-design/framework/ZooKeeper数据模型和常见命令.md">ZooKeeper 数据模型和常见命令</a></li></ul><h3 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h3><ul><li><a href="system-design/data-communication/summary.md">数据通信(RESTful、RPC、消息队列)相关知识点总结</a></li><li><a href="system-design/data-communication/dubbo.md">Dubbo 总结：关于 Dubbo 的重要知识点</a></li><li><a href="system-design/data-communication/message-queue.md">消息队列总结</a></li><li><a href="system-design/data-communication/rabbitmq.md">RabbitMQ 入门</a></li><li><a href="system-design/data-communication/RocketMQ-Questions.md">RocketMQ的几个简单问题与答案</a></li></ul><h3 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h3><ul><li><a href="system-design/website-architecture/分布式.md">一文读懂分布式应该学什么</a></li><li><a href="system-design/website-architecture/8%20张图读懂大型网站技术架构.md">8 张图读懂大型网站技术架构</a></li><li><a href="system-design/website-architecture/【面试精选】关于大型网站系统架构你不得不懂的10个问题.md">【面试精选】关于大型网站系统架构你不得不懂的10个问题</a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul><li><a href="tools/Git.md">Git入门</a></li></ul><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li><a href="tools/Docker.md">Docker 入门</a></li><li><a href="tools/Docker-Image.md">一文搞懂 Docker 镜像的常用操作！</a></li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h3><ul><li><a href="data/java-recommended-books.md">Java程序员必备书单</a></li></ul><h3 id="Github榜单"><a href="#Github榜单" class="headerlink" title="Github榜单"></a>Github榜单</h3><ul><li><a href="github-trending/JavaGithubTrending.md">Java 项目月榜单</a></li></ul><hr><h2 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA体系构建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA面试 </tag>
            
            <tag> JAVA编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术04--Linux</title>
      <link href="/2019/01/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF04--Linux/"/>
      <url>/2019/01/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF04--Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>主要内容：Linux基础操作、文件操作、权限设置、ssh命令、远程服务器搭建、vim编辑器、翻墙服务器搭建</p><p>更新    ：对一些失效的方法会舍弃并进行更新，如出现无法使用可以通过下方留言或者右下角微信图标联系我</p><a id="more"></a><h2 id="Linux基本"><a href="#Linux基本" class="headerlink" title="Linux基本"></a>Linux基本</h2><h3 id="Linux版本之间的区别"><a href="#Linux版本之间的区别" class="headerlink" title="Linux版本之间的区别"></a>Linux版本之间的区别</h3><pre><code>        redhat  RHEL CentOs                 Fedora               --&gt; 稳定版本        Debian  UbuntuLinux           Mint Linux   knopix  --&gt; 最新版本        SlackWare  SUSE   SLEs                          openSuse        其它发行家族 </code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>top : 查看电脑当前状态，比如CPU的使用率，物理内存（Physcmem）,可看作一个<br>  任务管理器（使用q键退出）</li><li>date：日期。其中取的时区为CST 代表 中国上海</li><li>cal ：日历</li><li>echo : 将字符串输出到屏幕  &gt; ：输出重定向  &gt;&gt; : 输出追加重定向</li><li>echo ‘hello’ &gt; tmp.txt : 将字符串输出重定向，若当前目录下没有该文件，<br>  则会新建该文件并将字符串输出到文件，若存在该文件，则会覆盖该文件中的内容</li><li>echo ‘hello’ &gt;&gt; tmp.txt : 与上述一样，但存在该文件时会在该文件内容后<br>  追加字符串</li><li>2&gt; : 标准错误截获，将错误提示输出到文件中</li><li>unix时间戳（timestamp）: 以格林威治时间为准，计算机开始时间1970开始</li><li>Tab键：命令自动补全，多个相同命令则按两下，会将全部相似的命令显示在屏幕上</li></ul><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><ul><li><code>cd</code>  进入目标文件夹中</li><li><code>cd .</code>  当前目录</li><li><code>cd ..</code>  返回上一个文件夹下</li><li><code>ls</code>  查看当前所在文件夹下面所拥有的文件夹清单</li><li><code>pwd</code> 查看当前所在文件夹路径，属于绝对路径</li><li><code>mkdir</code> 创建文件夹</li><li><code>rm -r -f</code> 删除文件夹（不可恢复）</li><li><code>/</code> 文件路径分隔符 <code>\</code>转义字符</li><li><code>～</code> 用户根目录 <code>./</code> 当前目录</li><li><code>ls -la</code> 可显示隐藏文件  隐藏文件的创建为在名字前+“.”,例如：.match</li><li><code>less 文件名</code>  查看文件内信息  more可查看部分文件内信息</li><li><code>cp 文件夹1 文件夹2</code>  考本文件夹1到文件夹2（需要是文件夹全名）与文件操作一样</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li><code>cp -r</code>   : 文件复制</li><li><code>cp -r {文件1，文件2} 目标文件夹</code>  ： 拷贝多个文件到一个文件夹中</li><li><code>rm -rf</code>  : 删除任何相关的文件或文件夹 删除多个使用 空格隔开或者通配符</li><li><code>touch</code>   : 新建文件（使用通配符可创建多个）</li><li><code>mkdir -p</code> : 可以创建一个新文件夹下创建新文件</li><li><code>&gt; text.txt</code> : 创建空文件</li></ul><h3 id="进制计算"><a href="#进制计算" class="headerlink" title="进制计算"></a>进制计算</h3><pre><code>二进制 ： 以111（2） 为例：1*2^0 + 1*2^1 + 1*2^2 =7 十六进制：以16为底：0～9 A～F三十六进制：以32为低：0-9 A-Z 除开 i o s z</code></pre><h3 id="Linux权限设置"><a href="#Linux权限设置" class="headerlink" title="Linux权限设置"></a>Linux权限设置</h3><ul><li><p>例：使用ls -lh 文件属性字段显示信息如下</p><pre><code>d  rwx  r_x  r_x  d(文件夹) r(可读) w(可写) x(可执行)   111  101  101   7    5    5   u    g    o</code></pre><p> 整个信息段表示：文件属性字段 文件硬链接数/目录子文件数 文件拥有者 文件拥有者所在组 文件大小（以字节为单位） 文件创建时间 文件名（–&gt;符号为指向目标文件夹）</p></li><li><p>修改权限：chmod 权限的十进制 文件名 （chmod 755 1.txt）权限最高为777<br> 修改文件夹权限：chmod -R</p></li><li><p>修改某一个权限：chmod u-x 文件名 （u-x 为 user 用户去掉可执行，还可以为u+x、u-wx、g+rx）</p></li></ul><h3 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h3><blockquote><p>最早的字符编码表：Ascil码（不能存汉字）</p></blockquote><blockquote><p>中文编码：gbk（简体） big5(繁体)</p></blockquote><blockquote><p>世界性文字编码：unicode32  通过加工–通用编码：utf-8(可变长)、utf-16(即固定又可变)、utf-32(固定)</p></blockquote><h2 id="vpn搭建"><a href="#vpn搭建" class="headerlink" title="vpn搭建"></a>vpn搭建</h2><ul><li><p>海底光缆：CN1（日本）CN2（美国加州） GIA</p></li><li><p>端口 ：一台服务器（一个IP）可有多个程序或功能，每一个程序或功能都会被分配一个不可重复的端口，端口号1024已经被系统应用占据，我们可以使用1024-65535之间的端口号，配置多个端口需写一个配置文件.</p></li><li><p>墙：国家监管，若浏览不正当网站会直接关闭</p></li><li><p>解决“墙”的问题：</p><pre><code>加密      解密</code></pre><p>  解决方案： 本地 —-&gt; 墙 —-&gt; 美国服务器</p><pre><code>（加密软件）          （解密软件）</code></pre></li></ul><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><ol><li><p>ssh:加密登录方式（多用于银行，军队），我们常用的https就是一个加密协议，不会被监控</p></li><li><p>加密方式：RSA加密  （第一个加密方式：凯撒加密CASER，常见加密方式BASE 64）</p></li><li><p>RSA原理：双方交换公钥，但保留私钥，用私钥加密，公钥解密</p></li><li><p>查看密钥 ：其保存在～/.ssh/文件夹中 使用less命令拷贝密钥</p></li><li><p>创建密钥 ：ssh -keygen</p></li><li><p>交换密钥：ssh-copy-id root@对方ip -p 端口号</p><pre><code>若失败，需要重新创建密钥若成功，运行：ssh root@对方ip -p 端口号 可免密码登录</code></pre></li><li><p>使用ssh远程拷贝文件：scp -P 端口 文件名 root@远程服务器ip:绝对路径</p></li></ol><h3 id="实现步骤（简易版单人）"><a href="#实现步骤（简易版单人）" class="headerlink" title="实现步骤（简易版单人）"></a>实现步骤（简易版单人）</h3><ul><li><p>登陆远程服务器：ssh root@远程服务器ip地址 -p 端口 （需要输入远程服务器密码，在买服务器网站的个人信息中）</p></li><li><p>安装解密软件： pip install shadowsocks  (远程服务器上)</p></li><li><p>设置端口、密码：ssserver -p 端口 -k 密码 -m 加密方式  （远程服务器）</p></li><li><p>本地下载加密软件： 官网下载shadowsocks-NG </p></li></ul><h2 id="Linux文档编辑器（vim）"><a href="#Linux文档编辑器（vim）" class="headerlink" title="Linux文档编辑器（vim）"></a>Linux文档编辑器（vim）</h2><h3 id="vim-运用"><a href="#vim-运用" class="headerlink" title="vim 运用"></a>vim 运用</h3><ol><li><p>安装vim：yum install vim </p></li><li><p>确认是否安装：vi   (Shift+q :退出)</p></li><li><p>vim text.txt ：新建txt文件并编辑</p></li><li><p>vim两种模式</p><blockquote><p>输入模式：可以在其中输入文本，与文档编辑器一样，esc键退出该模式，esc+i:进入该模式，esa+a:在光标之后进入该模式</p><p>命令模式：只能进行命令操作，shift+: 进入长命令输入，下方</p></blockquote></li></ol><h3 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h3><ol><li><code>x</code>: 消除光标之前字符</li><li><code>hjkl</code>:上下左右移动</li><li><code>yy</code>:复制光标所在行内容</li><li><code>p</code>:粘贴复制内容</li><li><code>dd</code>:删除光标所在行内容</li><li><code>N（数字键）+ yy/dd</code>:批量复制/删除光标之下的N行</li><li><code>u</code>:撤销上一步操作</li><li><code>I</code>：将光标移到光标所在行行首，并进入编辑模式</li><li><code>A</code>：光标移到行尾</li><li><code>shift+:下输入wq</code>:保存并退出（进入直接：vim 文件名）</li><li><code>数字(N) gg</code>：光标移到第N行；<code>gg</code>:跳到首行</li><li><code>o</code>:在光标下新开一行并进入编辑模式</li></ol><h3 id="高级步骤（多人端口版）"><a href="#高级步骤（多人端口版）" class="headerlink" title="高级步骤（多人端口版）"></a>高级步骤（多人端口版）</h3><ol><li><p>端口文件配置shadow.conf，</p><pre><code>{&quot;server&quot;:&quot;93.179.99.149&quot;,&quot;local_address&quot;: &quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;: {        &quot;55501&quot;: &quot;add55555&quot;,        &quot;55502&quot;: &quot;add55555&quot;,        &quot;55503&quot;: &quot;add55555&quot;（此处无逗号） },&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;: false     </code></pre></li><li><p>登陆远程服务器并在其中编写该端口文件配置</p></li><li><p>读取该配置文件：ssserver -c shadow.conf (该命令可先运行，检测成功性) -d start （之后运行完整命令）</p></li><li><p>运行成功</p></li></ol><pre><code>小提示：1.su 直接切换到超级用户        2.sudo 代替执行超级用户的权限</code></pre>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> ssh </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用技术01--Git运用</title>
      <link href="/2019/01/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF01--Git%E8%BF%90%E7%94%A8/"/>
      <url>/2019/01/03/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF01--Git%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇内容：Git的一些基础操作运用，如何使用git的一些延伸</p><p>更新      ：不定期更新，有好的建议可以通过下方登陆后留言，会尽快回复</p><a id="more"></a><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="认知git"><a href="#认知git" class="headerlink" title="认知git"></a>认知git</h3><ol><li>git知识库：<a href="https://git-scm.com/book/zh/v1/Git-基础" target="_blank" rel="noopener">https://git-scm.com/book/zh/v1/Git-基础</a></li><li>安装git：brew install git 升级：brew update git</li><li>git: 版本控制，将一个项目（文件）作为一个仓库并对其进行监控（需要进入当前文件或者项目中）</li></ol><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><ol><li>git init: 初始化文件（仓库），启动文件git仓库</li><li>git status: 监听该文件（项目）发生的变化</li><li>git add 文件名: 将工作区产生的变化记录并暂存到缓冲区</li><li>git commit -m “注释内容”：将add 的变化添加注释并提交本次记录（若没有-m，则会进入vim编辑器中进行编译注释）</li><li>git log :查看其记录，使用 jk 上下移动光标，Q键退出</li><li>git reset –hard 记录编号：回到该编号所在记录（编号可只截取一部分）</li><li>git diff:若在add前对文本进行编辑并修改过，则可通过该命令进行显示修改的内容</li><li>git config –global user,name “ “(user.email 邮箱)</li><li>git merge 分支名：合并分支</li><li>git log –graph :查看详细分支记录</li><li>删除分支：git branch -d 分支名    </li><li>git rm –cached 缓冲区存在的记录名: 删除加入缓冲区的该记录</li><li>.gitignore文件：将不想记录其改变的文件名写入该文件，此后将不会产生写入文件夹发生的变化</li></ol><blockquote><p>注意：若在git管理的文件夹下创建空的文件夹，该变化不会被记录。</p></blockquote><h3 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h3><ol><li>git分支：在mmaster分支上再创建其它分支记录（使用指针head进行移动记录点）</li><li>git checkout -b ‘分支名’： 新建并切换到新分支</li><li>git branch ‘分支名’： 新建分支</li><li>git checkout ‘分支名’： 切换到该分支</li></ol><blockquote><p>注意：若从某一个记录移到另一个分支的某一编码上时，需先切换（checkout）分支再切换(reset –hard)到某一个记录。</p></blockquote><h3 id="git-分支合并"><a href="#git-分支合并" class="headerlink" title="git 分支合并"></a>git 分支合并</h3><ol><li>快进合并：只有一条分支记录发生改变，另一个未发生改变的分支合并该分支：只需要将未发生改变的分支指针直接移到另一分支末端，即：先进入未发生改变的分支（checkout） 再合并发生记录的分支（git merge 发生改变的分支）</li><li>非冲突合并：与快进合并一样，因其两天分支的记录或者变化互不干扰</li><li>冲突合并：与上述操作一样，但需要在发生冲突的地方进行手动确认，并修改，此时产生的新变化也需要进行提交并注释。</li></ol><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="GitHub创建"><a href="#GitHub创建" class="headerlink" title="GitHub创建"></a>GitHub创建</h3><ol><li><p>github：远程仓库，还有：code、码云</p></li><li><p>建立仓库步骤：</p><blockquote><p>(1). 新建远程仓库 （GitHub网站上新建，会产生一个https或者ssh）</p><p>(2). 将https或ssh添加到本地仓库并重命名：<br> <code>git remote add 别名 https(ssh)</code>–若不是一个仓库需要进行初始化</p></blockquote><blockquote><p>(3). 推送本地仓库到GitHub：<code>git push 链接别名 分支名</code></p></blockquote></li><li><p>删除远程仓库链接：<code>git remote rm 链接别名</code></p></li><li><p>查看远程仓库：<code>git remote</code></p></li><li><p>删除远程地址：<code>git remote remove 别名</code></p></li><li><p>查看远程仓库链接：<code>git remote -v(详细信息)</code></p></li><li><p>查看所有分支：<code>git branch -a</code></p></li><li><p>若A修改文档并推送到远程仓库，B也修改了此文档进行推送则不会成功，后推送的需要在A修改推送后再将远程仓库的先抓取下来，进行冲突合并后再推送</p></li><li><p>远程仓库抓取：<code>git pull (分支名)</code></p></li><li><p>推送到远程仓库：<code>git push (分支名)</code></p></li></ol><h3 id="创建GitHub博客"><a href="#创建GitHub博客" class="headerlink" title="创建GitHub博客"></a>创建GitHub博客</h3><ol><li>安装jeklly :sudo gem install bundler jekyll</li><li>端口输入：Jekyll 确认是否安装成功</li><li>创建本地Jekyll文件：Jekyll new 文件名</li><li>进入该文件（第一次需要初始化仓库）</li><li>安装markdown 并编辑文件（命名与__plot中文档一致）–&gt; 博客内容</li><li>将其推送到GitHub的（learn666-gif.github.io）仓库（需要自己在GitHub网站创建）中去</li><li>进入博客：learn666-gif.github.io</li></ol><h3 id="…or-create-a-new-repository-on-the-command-line"><a href="#…or-create-a-new-repository-on-the-command-line" class="headerlink" title="…or create a new repository on the command line"></a>…or create a new repository on the command line</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# python_resources&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md   #可能不成功，使用 touch README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:learn666-gif&#x2F;python_resources.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="…or-push-an-existing-repository-from-the-command-line"><a href="#…or-push-an-existing-repository-from-the-command-line" class="headerlink" title="…or push an existing repository from the command line"></a>…or push an existing repository from the command line</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:learn666-gif&#x2F;python_resources.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
