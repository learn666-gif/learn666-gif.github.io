<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jwangcloud</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/learn666-gif/"/>
  <updated>2020-05-23T10:22:53.383Z</updated>
  <id>https://github.com/learn666-gif/</id>
  
  <author>
    <name>Jwang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA框架_MyBatis</title>
    <link href="https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6-MyBatis/"/>
    <id>https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6-MyBatis/</id>
    <published>2020-05-16T07:05:08.000Z</published>
    <updated>2020-05-23T10:22:53.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="什么是框架？"><a href="#什么是框架？" class="headerlink" title="什么是框架？"></a>什么是框架？</h3><ul><li>它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题。</li><li>使用框架的好处：框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提高开发效率。</li></ul><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>表现层：是用于展示数据的</li><li>业务层：是处理业务需求</li><li>持久层：是和数据库交互的</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="三层架构"></p><h3 id="持久层技术解决方案"><a href="#持久层技术解决方案" class="headerlink" title="持久层技术解决方案"></a>持久层技术解决方案</h3><h4 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h4><ul><li><p>Connection</p></li><li><p>PreparedStatement</p></li><li><p>ResultSet</p></li></ul><h4 id="Spring的JdbcTemplate"><a href="#Spring的JdbcTemplate" class="headerlink" title="Spring的JdbcTemplate"></a>Spring的JdbcTemplate</h4><ul><li>Spring中对jdbc的简单封装</li></ul><h4 id="Apache的DBUtils"><a href="#Apache的DBUtils" class="headerlink" title="Apache的DBUtils"></a>Apache的DBUtils</h4><ul><li>它和Spring的JdbcTemplate很像，也是对Jdbc的简单封装</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>JDBC是规范</p></li><li><p>Spring的JdbcTemplate和Apache的DBUtils都只是工具类</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/02%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt="持久层纵览">    </p><h2 id="mybatis的概述"><a href="#mybatis的概述" class="headerlink" title="mybatis的概述"></a>mybatis的概述</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>mybatis是一个持久层框架，用java编写的。</li><li>它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程</li><li>它使用了ORM思想实现了结果集的封装。</li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><ul><li>Object Relational Mappging 对象关系映射:就是把数据库表和实体类及实体类的属性对应起来让我们可以操作实体类就实现操作数据库表。</li></ul><blockquote><p>user – User  id – UserId</p></blockquote><ul><li>需要实体类中的属性和数据库表的字段名称保持一致。</li></ul><blockquote><p>user –User. id – id</p></blockquote><h3 id="mybatis的入门"><a href="#mybatis的入门" class="headerlink" title="mybatis的入门"></a>mybatis的入门</h3><h4 id="mybatis的环境搭建"><a href="#mybatis的环境搭建" class="headerlink" title="mybatis的环境搭建"></a>mybatis的环境搭建</h4><ul><li>第一步：创建maven工程并导入坐标</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.26&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步：创建实体类和dao的接口</li><li>第三步：创建Mybatis的主配置文件 SqlMapConifg.xml</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mybatis主配置文件 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置环境 --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置mysql环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务类型 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 配置数据源（连接池）--&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;!--配置连接数据库的四个基本信息--&gt;</span><br><span class="line">                &lt;property name=<span class="string">"drive"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://locahist:3306/mybatisbd"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--指定映射配置文件的位置 映射配置文件指每个dao独立的配置文件 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/jwang/dao/UserDao.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>第四步：创建映射配置文件 UserDao.xml</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.UserDao"</span>&gt;</span><br><span class="line">    &lt;!-- 配置查询所有  id取在userDao中对应的方法名--&gt;</span><br><span class="line">    &lt;select id="findAll"&gt; select * from user;&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="环境搭建的注意事项："><a href="#环境搭建的注意事项：" class="headerlink" title="环境搭建的注意事项："></a>环境搭建的注意事项：</h4><ul><li><p>第一个：创建UserDao.xml 和 UserDao.java时名称是为了保持一致。</p><blockquote><p>在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper<br>所以：UserDao 和 UserMapper是一样的</p></blockquote></li><li><p>第二个：在idea中创建目录的时候，它和包是不一样的</p><blockquote><p>包在创建时：com.jwang.dao它是三级结构</p><p>目录在创建时：com.jwang.dao是一级目录</p></blockquote></li><li><p>第三个：mybatis的映射配置文件位置必须和dao接口的包结构相同</p></li><li><p>第四个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</p></li><li><p>第五个：映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名</p></li></ul><blockquote><p>当我们遵从了第三，四，五点之后，我们在开发中就无须再写dao的实现类。</p></blockquote><h3 id="mybatis的入门案例"><a href="#mybatis的入门案例" class="headerlink" title="mybatis的入门案例"></a>mybatis的入门案例</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/04mybatis%E7%9A%84%E5%88%86%E6%9E%90.png" alt="mybatis分析"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>不要忘记在映射配置中告知mybatis要封装到哪个实体类中</p></li><li><p>配置的方式：指定实体类的全限定类名</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.1 绝对路径和相对路径写法不靠谱</span></span><br><span class="line"><span class="comment">        1.2 其他加载方法：</span></span><br><span class="line"><span class="comment">             使用类加载器</span></span><br><span class="line"><span class="comment">             使用SeevletContext对象的getRealPath()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个sqlsessionfactory工厂</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2。1：创建工厂，mybatis使用构建者模式 用构建者对in进行build 把对象创建细节隐藏。使用者直接调用方法拿到对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3。使用工厂生产一个sqlSession对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3。1：生产一个sqlSession对象使用工厂模式：降低类之间的依赖关系即解藕</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4。使用sqlsession创建dao接口的代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4。1：创建dao接口实现类 使用代理模式：不修改源码的基础上对已有方法的增强</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5。使用代理对象执行方法</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6。释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li>不需要编写UserDao.xml 可以直接在接口相关方法上加注解sql语句</li></ul><h4 id="mybatis基于注解的入门案例："><a href="#mybatis基于注解的入门案例：" class="headerlink" title="mybatis基于注解的入门案例："></a>mybatis基于注解的入门案例：</h4><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E7%9A%84%E5%88%86%E6%9E%90.png" alt="案例分析"></p><ul><li>把UserDao.xml移除，在dao接口的方法上使用@Select注解，并且指定SQL语句</li><li>同时需要在SqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.dao.UserDao"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>明确：</li></ul><blockquote><p>我们在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式。</p></blockquote><blockquote><p>不管使用XML还是注解配置。</p></blockquote><blockquote><p>但是Mybatis它是支持写dao实现类的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Mybatis的分析："><a href="#自定义Mybatis的分析：" class="headerlink" title="自定义Mybatis的分析："></a>自定义Mybatis的分析：</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E5%88%86%E6%9E%90.png" alt="查询所有分析"></p><ul><li>mybatis在使用代理dao的方式实现增删改查时做什么事呢？</li><li>只有两件事：</li></ul><blockquote><p>第一：创建代理对象</p></blockquote><blockquote><p>第二：在代理对象中调用selectList</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E5%BC%A0%E5%9B%BE-%E5%88%86%E6%9E%90%E4%BB%A3%E7%90%86dao%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="代理dao"></p><ul><li>自定义mybatis能通过入门案例看到类</li></ul><blockquote><p>class Resources</p></blockquote><blockquote><p>class SqlSessionFactoryBuilder</p></blockquote><blockquote><p>interface SqlSessionFactory</p></blockquote><blockquote><p>interface SqlSession</p></blockquote><h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#UserDao.xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.UserDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 查询所有 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">        select * from user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 保存用户 --&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"saveUser"</span> parameterType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">        &lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span><br><span class="line">        &lt;selectKey keyProperty=<span class="string">"id"</span> keyColumn=<span class="string">"id"</span> resultType=<span class="string">"int"</span> order=<span class="string">"AFTER"</span>&gt;</span><br><span class="line">            <span class="function">select <span class="title">last_insert_id</span><span class="params">()</span></span>;</span><br><span class="line">        &lt;/selectKey&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">user</span><span class="params">(username,address,sex,birthday)</span><span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)</span></span>;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 更新用户 --&gt;</span><br><span class="line">    &lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.itheima.domain.User"</span>&gt;</span><br><span class="line">        update user set username=#&#123;username&#125;,address=#&#123;address&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 删除用户--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">        delete from user where id = #&#123;uid&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 根据id查询用户 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findById"</span> parameterType=<span class="string">"INT"</span> resultType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根据名称模糊查询 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByName"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"com.jwang.domain.User"</span>&gt;</span><br><span class="line">          select * from user where username like #&#123;name&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 获取用户的总记录条数 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findTotal"</span> resultType=<span class="string">"int"</span>&gt;</span><br><span class="line">        <span class="function">select <span class="title">count</span><span class="params">(id)</span> from user</span>;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">sqlMapConfig.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mybatis主配置文件 --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置文件路径 --&gt;</span><br><span class="line">    &lt;properties resource="jdbcConfig.properties"&gt;&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--指定配置别名的包，全部实体类都会注册别名，类名就是别名，不区分大小写 --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.domain"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置环境 --&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!-- 配置mysql环境 --&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--配置事务类型 --&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!-- 配置数据源（连接池）--&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;!--配置连接数据库的四个基本信息--&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--指定映射配置文件的位置 映射配置文件指每隔dao独立的配置文件</span><br><span class="line">    如果是注解配置 此处应该使用<span class="class"><span class="keyword">class</span>属性指定被注解的<span class="title">dao</span>全限定类名--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">mappers</span>&gt;</span></span><br><span class="line">        &lt;!--URL: 协议 主机 端口 URI 统一资源定位符   URI:统一资源标示符 唯一定位应用的资源 --&gt;</span><br><span class="line">&lt;!--        &lt;mapper resource=<span class="string">"com/jwang/dao/UserDao.xml"</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.dao.UserDao"</span>/&gt;--&gt;</span><br><span class="line">        &lt;!--dao接口所在的包 上面的就不需要写 --&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.dao"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E8%87%AA%E5%AE%9A%E4%B9%89mybatis%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="开发流程"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E5%BC%A0%E5%9B%BE.png" alt="过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#main测试类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个sqlsessionfactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3。使用工厂生产一个sqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4。使用sqlsession创建dao接口的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.1 绝对路径和相对路径写法不靠谱</span></span><br><span class="line"><span class="comment">        1.2 其他加载方法：</span></span><br><span class="line"><span class="comment">             使用类加载器</span></span><br><span class="line"><span class="comment">             使用SeevletContext对象的getRealPath()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建一个sqlsessionfactory工厂</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2。1：创建工厂，mybatis使用构建者模式 用构建者对in进行build 把对象创建细节隐藏。使用者直接调用方法拿到对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//3。使用工厂生产一个sqlSession对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3。1：生产一个sqlSession对象使用工厂模式：降低类之间的依赖关系即解藕</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4。使用sqlsession创建dao接口的代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4。1：创建dao接口实现类 使用代理模式：不修改源码的基础上对已有方法的增强</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5。使用代理对象执行方法</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6。释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"mada"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"asa"</span>);</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">51</span>);</span><br><span class="line">        user.setUsername(<span class="string">"mada"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"asa"</span>);</span><br><span class="line">        user.setSex(<span class="string">"女"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        userDao.updateUser(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.deletrUser(<span class="number">51</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> User user = userDao.findById(<span class="number">48</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = userDao.findByName(<span class="string">"%王%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = userDao.findTotal();</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * queryvo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryVo queryVo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">        User user =<span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%王%"</span>);</span><br><span class="line">        queryVo.setUser(user);</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; userByVo = userDao.findUserByVo(queryVo);</span><br><span class="line">        <span class="keyword">for</span> (User u : userByVo) &#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/01/%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E5%88%86%E6%9E%90.png" alt="自定义nybatis"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/02/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="模糊查询"></p><h2 id="MyBatis连接池"><a href="#MyBatis连接池" class="headerlink" title="MyBatis连接池"></a>MyBatis连接池</h2><h3 id="POOLED原理"><a href="#POOLED原理" class="headerlink" title="POOLED原理"></a>POOLED原理</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/mybatis_pooled%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="mybatis_pooled"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/1.jpg" alt="连接池"></p><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">    &lt;!-- 配置mysql环境 --&gt;</span><br><span class="line">    &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;!--配置事务类型 --&gt;</span><br><span class="line">        &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">        &lt;!-- 配置数据源（连接池）--&gt;</span><br><span class="line">        &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">            &lt;!--配置连接数据库的四个基本信息--&gt;</span><br><span class="line">            &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">        &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><h4 id="配置的位置"><a href="#配置的位置" class="headerlink" title="配置的位置"></a>配置的位置</h4><ul><li>主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是表示采用何种连接池方式。</li></ul><h4 id="type属性的取值"><a href="#type属性的取值" class="headerlink" title="type属性的取值"></a>type属性的取值</h4><ul><li>POOLED     采用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现(会在池中获取链接最后归还)</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="满足的要求"></p><ul><li>UNPOOLED 采用传统的获取连接的方式，虽然也实现Javax.sql.DataSource接口，但是并没有使用池的思想。（直接创建链接，最后关闭）</li><li>JNDI     采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到DataSource是不一样。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/03/%E6%97%A0%E6%A0%87%E9%A2%982.png" alt="区别"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>如果不是web或者maven的war工程，是不能使用的。我们使用的是tomcat服务器，采用连接池就是dbcp连接池。</li></ul><h2 id="MyBatis动态sql语句"><a href="#MyBatis动态sql语句" class="headerlink" title="MyBatis动态sql语句"></a>MyBatis动态sql语句</h2><h3 id="if与where标签"><a href="#if与where标签" class="headerlink" title="if与where标签"></a>if与where标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    &lt;select id=<span class="string">"findUserByCondition"</span> resultType=<span class="string">"com.jwang.domain.User"</span> parameterType=<span class="string">"User"</span>&gt;--&gt;</span><br><span class="line">&lt;!--        select * from user where <span class="number">1</span>=<span class="number">1</span>--&gt;</span><br><span class="line">&lt;!--        &lt;<span class="keyword">if</span> test=<span class="string">"username != null"</span>&gt;--&gt;</span><br><span class="line">&lt;!--            and username = #&#123;username&#125;--&gt;</span><br><span class="line">&lt;!--        &lt;/if&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;<span class="keyword">if</span> test=<span class="string">"sex != null"</span>&gt;--&gt;</span><br><span class="line">&lt;!--            and sex = #&#123;sex&#125;--&gt;</span><br><span class="line">&lt;!--        &lt;/if&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findUserByCondition"</span> resultType=<span class="string">"com.jwang.domain.User"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"username != null"</span>&gt;</span><br><span class="line">                and username = #&#123;username&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"sex != null"</span>&gt;</span><br><span class="line">                and sex = #&#123;sex&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testFindByCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"老王"</span>);</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    List&lt;User&gt; users =userDao.findUserByCondition(user);</span><br><span class="line">    <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach和sql标签"><a href="#foreach和sql标签" class="headerlink" title="foreach和sql标签"></a>foreach和sql标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserByInIds"</span> resultType=<span class="string">"com.jwang.domain.User"</span> parameterType=<span class="string">"QueryVo"</span>&gt;</span><br><span class="line">       select * from user</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"ids != null and ids,size()&gt;0"</span>&gt;</span><br><span class="line">               &lt;foreach collection=<span class="string">"ids"</span> open=<span class="string">"and id in ("</span> close=<span class="string">")"</span> item=<span class="string">"id"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">                   #&#123;id&#125;</span><br><span class="line">               &lt;/foreach&gt;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>sql代码片段抽取</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=<span class="string">"defalutUser"</span>&gt;</span><br><span class="line">    select * from user</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line">在使用该语句的地方</span><br><span class="line">&lt;include refid="defalutUser"&gt;&lt;/include&gt;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.IAcountDao"</span>&gt;</span><br><span class="line">    &lt;select id="findAll" resultType="acount"&gt;select * from account&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;select id=<span class="string">"findAllAcount"</span> resultType=<span class="string">"acountuser"</span>&gt;--&gt;</span><br><span class="line">&lt;!--        select a.*, u.username, u.address from account a, user u where u.id = a.uid--&gt;</span><br><span class="line">&lt;!--    &lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义user和acount的封装--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"acountUserMap"</span> type=<span class="string">"acount"</span>&gt;</span><br><span class="line">        &lt;id property="id" column="aid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="uid" column="uid"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="money" column="money"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--一对一关系映射 --&gt;</span><br><span class="line">        &lt;association property=<span class="string">"user"</span> column=<span class="string">"uid"</span> javaType=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findAllAcount"</span> resultMap=<span class="string">"acountUserMap"</span>&gt;</span><br><span class="line">        select u.*, a.id as aid, a.uid, a.money from account a, user u where u.id = a.uid</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">acount实体类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Acount</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多，主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Acount&gt; acounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Acount&gt; <span class="title">getAcounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> acounts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义User的resultMap --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">"userAcountMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">    &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">    &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--一对多 user对象中的acount对象的映射 pro数据库字段 co对象属性--&gt;</span><br><span class="line">    &lt;collection property=<span class="string">"acounts"</span> ofType=<span class="string">"acount"</span>&gt;</span><br><span class="line">        &lt;id property="id" column="aid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="uid" column="uid"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="money" column="money"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"userAcountMap"</span>&gt;</span><br><span class="line">    select * from user u left outer join account a on u.id = a.uid</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><h4 id="角色–用户"><a href="#角色–用户" class="headerlink" title="角色–用户"></a>角色–用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射 一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(List&lt;User&gt; user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.jwang.dao.IRoleDao"</span>&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"roleMap"</span> type=<span class="string">"role"</span>&gt;</span><br><span class="line">        &lt;id property="roleId" column="rid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="roleName" column="ROLE_NAME"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="roleDesc" column="ROLE_DESC"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">        &lt;collection property=<span class="string">"user"</span> ofType=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"roleMap"</span>&gt;</span><br><span class="line">        select u.*, r.ID as rid, r.ROLE_NAME,r.ROLE_DESC</span><br><span class="line">        from role r left outer join user_role ur on r.id = ur.RID</span><br><span class="line">        left outer join user u on u.id = ur.UID;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="用户–角色"><a href="#用户–角色" class="headerlink" title="用户–角色"></a>用户–角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多关系映射 一个用户具备多个角色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定义User的resultMap --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">"userAcountMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">    &lt;id property="id" column="id"&gt;&lt;/id&gt;</span><br><span class="line">    &lt;result property="username" column="username"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="address" column="address"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="sex" column="sex"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="birthday" column="birthday"&gt;&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">    &lt;collection property=<span class="string">"roles"</span> ofType=<span class="string">"Role"</span>&gt;</span><br><span class="line">        &lt;id property="roleId" column="rid"&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result property="roleName" column="ROLE_NAME"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="roleDesc" column="ROLE_DESC"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"userAcountMap"</span>&gt;</span><br><span class="line">    select u.*, r.ID as rid, r.ROLE_NAME,r.ROLE_DESC</span><br><span class="line">    from user u left outer join user_role ur on u.id = ur.UID</span><br><span class="line">    left outer join role r on r.id = ur.RID;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><ul><li>JNDI：Java Naming and Directory Interface。是SUN公司推出的一套规范，属于JavaEE技术之一。目的是模仿windows系统中的注册表。在服务器中注册数据源：</li></ul><h2 id="延迟加载和立即加载"><a href="#延迟加载和立即加载" class="headerlink" title="延迟加载和立即加载"></a>延迟加载和立即加载</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><ul><li>在真正使用数据时才发起查询，不用的时候不查询。按需加载（懒加载）</li><li>先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速<br>度要快。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/04/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD.png" alt="延迟加载"></p><h4 id="立即加载"><a href="#立即加载" class="headerlink" title="立即加载"></a>立即加载</h4><ul><li>不管用不用，只要一调用方法，马上发起查询。</li></ul><h4 id="四种表间关系的加载方法"><a href="#四种表间关系的加载方法" class="headerlink" title="四种表间关系的加载方法"></a>四种表间关系的加载方法</h4><ul><li><p>在对应的四种表关系中：一对多，多对一，一对一，多对多</p></li><li><p>一对多，多对多：通常情况下我们都是采用延迟加载。</p></li><li><p>多对一，一对一：通常情况下我们都是采用立即加载。</p></li></ul><h3 id="使用-assocation-实现延迟加载"><a href="#使用-assocation-实现延迟加载" class="headerlink" title="使用 assocation 实现延迟加载"></a>使用 assocation 实现延迟加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.itheima.dao.IAccountDao"</span>&gt;&lt;!-- 建立对应关系 --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"account"</span> id=<span class="string">"accountMap"</span>&gt;</span><br><span class="line">&lt;id column=<span class="string">"aid"</span> property=<span class="string">"id"</span>/&gt;&lt;result column=<span class="string">"uid"</span> property=<span class="string">"uid"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"money"</span> property=<span class="string">"money"</span>/&gt; </span><br><span class="line">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;&lt;association property="user" javaType="user" select="com.jwang.dao.IUserDao.findById" column="uid"&gt;&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;&lt;select id="findAll" resultMap="accountMap"&gt; </span><br><span class="line">select * from account</span><br><span class="line">&lt;/select&gt;&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">select: 填写我们要调用的 select 映射的 id </span><br><span class="line">column : 填写我们要传递给 select 映射的参数</span><br></pre></td></tr></table></figure><ul><li>开启Mybatis的延迟加载策略</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们需要在 Mybatis 的配置文件 SqlMapConfig.xml 文件中添加延迟加载的配置。 </span><br><span class="line">&lt;!-- 开启延迟加载的支持 --&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=<span class="string">"lazyLoadingEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;setting name="aggressiveLazyLoading" value="false"/&gt;&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-Collection-实现延迟加载"><a href="#使用-Collection-实现延迟加载" class="headerlink" title="使用 Collection 实现延迟加载"></a>使用 Collection 实现延迟加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt; resultMap type=<span class="string">"user"</span> id=<span class="string">"userMap"</span>&gt; </span><br><span class="line">&lt;id column="id" property="id"&gt;&lt;/id&gt;&lt;result column="username" property="username"/&gt; </span><br><span class="line">&lt;result column=<span class="string">"address"</span> property=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"sex"</span> property=<span class="string">"sex"</span>/&gt;&lt;result column=<span class="string">"birthday"</span> property=<span class="string">"birthday"</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;!-- collection是用于建立一对多中集合属性的对应关系</span><br><span class="line">ofType 用于指定集合元素的数据类型select 是用于指定查询账户的唯一标识(账户的 dao 全限定类名加上方法名称)</span><br><span class="line">column 是用于指定使用哪个字段的值作为条件查询 </span><br><span class="line">--&gt;&lt;collection property=<span class="string">"accounts"</span> ofType=<span class="string">"account"</span> </span><br><span class="line">select="com.itheima.dao.IAccountDao.findByUid" column="id"&gt;&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;&lt;!-- 配置查询所有操作 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"userMap"</span>&gt;</span><br><span class="line">    select * from user&lt;/select&gt; </span><br><span class="line"></span><br><span class="line">&lt;collection&gt;标签:主要用于加载关联的集合对象select 属性:用于指定查询 account 列表的 sql 语句，所以填写的是该 sql 映射的 id</span><br><span class="line">column 属性:用于指定 select 属性的 sql 语句的参数来源，上面的参数来自于 user 的 id 列，所以就写成 id 这一 个字段名了</span><br></pre></td></tr></table></figure><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><h3 id="概念-userCache"><a href="#概念-userCache" class="headerlink" title="概念(userCache)"></a>概念(userCache)</h3><ul><li>像大多数的持久化框架一样，Mybatis 也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提 高性能。</li><li>Mybatis 中缓存分为一级缓存，二级缓存</li><li>什么是缓存 ：存在于内存中的临时数据。</li><li>为什么使用缓存：减少和数据库的交互次数，提高执行效率。</li></ul><h4 id="适用于缓存："><a href="#适用于缓存：" class="headerlink" title="适用于缓存："></a>适用于缓存：</h4><ul><li>经常查询并且不经常改变的。</li><li>数据的正确与否对最终结果影响不大的。</li></ul><h4 id="不适用于缓存："><a href="#不适用于缓存：" class="headerlink" title="不适用于缓存："></a>不适用于缓存：</h4><ul><li>经常改变的数据</li><li>数据的正确与否对最终结果影响很大的。</li></ul><blockquote><p>例如：商品的库存，银行的汇率，股市的牌价。</p></blockquote><h3 id="Mybatis-一级缓存"><a href="#Mybatis-一级缓存" class="headerlink" title="Mybatis 一级缓存"></a>Mybatis 一级缓存</h3><ul><li>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。</li><li>它指的是Mybatis中SqlSession对象的缓存。</li><li>如果 sqlSession 去执行 commit 操作(执行插入、更新、删除)，清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>当我们执行查询之后，查询的结果会同时存入到SqlSession为我们提供一块区域中。</li><li>该区域的结构是一个Map。当我们再次查询同样的数据，mybatis会先去sqlsession中<br>查询是否有，有的话直接拿出来用。</li><li>当SqlSession对象消失时，mybatis的一级缓存也就消失了。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span><br><span class="line">&lt;!-- 根据 id 查询 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findById"</span> resultType=<span class="string">"UsEr"</span> parameterType=<span class="string">"int"</span> useCache=<span class="string">"true"</span>&gt;</span><br><span class="line">select * from user where id = #&#123;uid&#125;&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="测试一级缓存"><a href="#测试一级缓存" class="headerlink" title="测试一级缓存"></a>测试一级缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试一级缓存 */</span><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">User user1 = userDao.findById(<span class="number">41</span>);System.out.println(user1); </span><br><span class="line"><span class="comment">// sqlSession.close();</span></span><br><span class="line"><span class="comment">//再次获取 SqlSession 对象</span><span class="comment">// sqlSession = factory.openSession(); </span></span><br><span class="line">sqlSession.clearCache();<span class="comment">//此方法也可以清空缓存</span>userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line"></span><br><span class="line">User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line"> System.out.println(user2);</span><br><span class="line">System.out.println(user1 == user2); &#125;<span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 测试缓存的同步</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClearlCache</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.根据 id 查询用户</span></span><br><span class="line">User user1 = userDao.findById(<span class="number">41</span>);System.out.println(user1);<span class="comment">//2.更新用户信息</span></span><br><span class="line">user1.setUsername(<span class="string">"update user clear cache"</span>); </span><br><span class="line">user1.setAddress(<span class="string">"北京市海淀区"</span>); </span><br><span class="line">userDao.updateUser(user1);<span class="comment">//3.再次查询 id 为 41 的用户</span>User user2 = userDao.findById(<span class="number">41</span>); </span><br><span class="line">System.out.println(user2); </span><br><span class="line">System.out.println(user1 == user2);</span><br><span class="line">&#125;当执行 sqlSession.close()后，再次获取 sqlSession 并查询 id=<span class="number">41</span> 的 User 对象时，又重新执行了 sql 语句，从数据库进行了查询操作。</span><br></pre></td></tr></table></figure><h3 id="Mybatis-二级缓存"><a href="#Mybatis-二级缓存" class="headerlink" title="Mybatis 二级缓存"></a>Mybatis 二级缓存</h3><ul><li>它指的是Mybatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession共享其缓存。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/mybatis/04/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt=""></p><h4 id="二级缓存的使用步骤："><a href="#二级缓存的使用步骤：" class="headerlink" title="二级缓存的使用步骤："></a>二级缓存的使用步骤：</h4><ul><li>第一步：让Mybatis框架支持二级缓存（在SqlMapConfig.xml中配置）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;!-- 开启二级缓存的支持 --&gt;</span><br><span class="line">&lt;setting name="cacheEnabled" value="true"/&gt;&lt;/settings&gt;</span><br><span class="line">因为 cacheEnabled 的取值默认就为 <span class="keyword">true</span>，所以这一步可以省略不配置。</span><br><span class="line">为 <span class="keyword">true</span> 代表开启二级缓存;为 <span class="keyword">false</span> 代表不开启二级缓存。</span><br></pre></td></tr></table></figure><ul><li>第二步：让当前的映射文件支持二级缓存（在IUserDao.xml中配置）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache&gt;标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt; </span><br><span class="line">&lt;!DOCTYPE mapperPUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"> &lt;mapper namespace=<span class="string">"com.itheima.dao.IUserDao"</span>&gt;</span><br><span class="line">&lt;!-- 开启二级缓存的支持 --&gt;&lt;cache&gt;&lt;/cache&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步：让当前的操作支持二级缓存（在select标签中配置）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 根据 id 查询 --&gt;&lt;select id="findById" resultType="user" parameterType="int" useCache="true"&gt; select * from user where id = #&#123;uid&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">将 UserDao.xml 映射文件中的&lt;select&gt;标签中设置 useCache=”<span class="keyword">true</span>”代表当前这个 statement 要使用二级缓存，如果不使用二级缓存可以设置为 <span class="keyword">false</span>。</span><br><span class="line"></span><br><span class="line">注意:针对每次查询都需要最新的数据 sql，要设置成 useCache=<span class="keyword">false</span>，禁用二级缓存。</span><br></pre></td></tr></table></figure><h4 id="二级缓存测试"><a href="#二级缓存测试" class="headerlink" title="二级缓存测试"></a>二级缓存测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> * <span class="doctag">@Company</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondLevelCacheTest</span> </span>&#123;<span class="keyword">private</span> InputStream in;</span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"> <span class="meta">@Before</span><span class="comment">//用于在测试方法执行之前执行 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> <span class="comment">//1.读取配置文件，生成字节输入流</span></span><br><span class="line">in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取 SqlSessionFactory</span></span><br><span class="line"> factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in); &#125;</span><br><span class="line">  <span class="meta">@After</span><span class="comment">//用于在测试方法执行之后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">in.close();&#125;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试一级缓存 */</span></span><br><span class="line"><span class="meta">@Test</span><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession1 = factory.openSession();IUserDao dao1 = sqlSession1.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">User user1 = dao1.findById(<span class="number">41</span>); </span><br><span class="line">System.out.println(user1); </span><br><span class="line">sqlSession1.close();<span class="comment">//一级缓存消失</span></span><br><span class="line">  SqlSession sqlSession2 = factory.openSession();IUserDao dao2 = sqlSession2.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">User user2 = dao2.findById(<span class="number">41</span>); </span><br><span class="line">System.out.println(user2);</span><br><span class="line">sqlSession2.close();</span><br><span class="line">  </span><br><span class="line">  System.out.println(user1 == user2); </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-注解开发"><a href="#Mybatis-注解开发" class="headerlink" title="Mybatis 注解开发"></a>Mybatis 注解开发</h2><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li>@Insert:实现新增 </li><li>@Update:实现更新</li><li>@Delete:实现删除 </li><li>@Select:实现查询 </li><li>@Result:实现结果集封装</li><li>@Results:可以与@Result 一起使用，封装多个结果集 </li><li>@ResultMap:实现引用@Results 定义的封装</li><li>@One:实现一对一结果集封装 </li><li>@Many:实现一对多结果集封装 </li><li>@SelectProvider: 实现动态SQL映射 </li><li>@CacheNamespace:实现注解二级缓存的使用</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多 关系映射， 一个用户对应多个账户</span></span><br><span class="line">    <span class="comment">//在一方写多方的列表对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 引入配置文件--&gt;</span><br><span class="line">    &lt;properties resource="jdbcConfig.properties"&gt;&lt;/properties&gt;</span><br><span class="line">    &lt;!--配置开启二级缓存--&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--实体类别名--&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.domain"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"mysql"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"mysql"</span>&gt;</span><br><span class="line">            &lt;!--设置mysql--&gt;</span><br><span class="line">            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!--dao--&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"com.jwang.dao"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace</span>(blocking = <span class="keyword">true</span>)  <span class="comment">//开启二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"userMap"</span>,value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"accounts"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(</span><br><span class="line">                    select = <span class="string">"com.jwang.dao.IAccountDao.findAccountByUid"</span>,</span><br><span class="line">                    fetchType = FetchType.LAZY</span><br><span class="line">            ))</span><br><span class="line">    &#125;) <span class="comment">//一对多，采用延迟加载</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username, address, sex, birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>) <span class="comment">//@ResultMap(value = &#123;"userMap"&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userid)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(<span class="string">"userMap"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在多方实体类写一方的实体类对象引用</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"accountMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(id = <span class="keyword">true</span>, property = <span class="string">"id"</span>, column = <span class="string">"id"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>, property = <span class="string">"money"</span>),</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>, column = <span class="string">"uid"</span>,</span><br><span class="line">                    one = <span class="meta">@One</span>(select=<span class="string">"com.jwang.dao.IUserDao.findById"</span>,</span><br><span class="line">                            fetchType= FetchType.EAGER))</span><br><span class="line">    &#125;)  <span class="comment">//一对一，立即加载 一个账号对应一个用户</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询账号信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account where uid = #&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;框架&quot;&gt;&lt;a href=&quot;#框架&quot; class=&quot;headerlink&quot; title=&quot;框架&quot;&gt;&lt;/a&gt;框架&lt;/h2&gt;&lt;h3 id=&quot;什么是框架？&quot;&gt;&lt;a href=&quot;#什么是框架？&quot; class=&quot;headerlink&quot; title=&quot;什么是框架？&quot;&gt;&lt;/a&gt;什
      
    
    </summary>
    
    
      <category term="JAVA框架" scheme="https://github.com/learn666-gif/categories/JAVA%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="MyBatis" scheme="https://github.com/learn666-gif/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>JAVA框架_SSM整合</title>
    <link href="https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_SSM%E6%95%B4%E5%90%88/"/>
    <id>https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_SSM%E6%95%B4%E5%90%88/</id>
    <published>2020-05-16T07:05:08.000Z</published>
    <updated>2020-05-23T10:22:18.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC整合"><a href="#SpringMVC整合" class="headerlink" title="SpringMVC整合"></a>SpringMVC整合</h2><h2 id="搭建整合环境步骤"><a href="#搭建整合环境步骤" class="headerlink" title="搭建整合环境步骤"></a>搭建整合环境步骤</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/03/01.bmp" alt=""></p><h3 id="整合说明"><a href="#整合说明" class="headerlink" title="整合说明"></a>整合说明</h3><ul><li>SSM整合可以使用多种方式，选择配置文件 XML + 注解的方式 </li></ul><h3 id="整合的思路"><a href="#整合的思路" class="headerlink" title="整合的思路"></a>整合的思路</h3><ol><li>先搭建整合的环境</li><li>先把Spring的配置搭建完成</li><li>再使用Spring整合SpringMVC框架 </li><li>最后使用Spring整合MyBatis框架</li></ol><h3 id="创建数据库和表结构"><a href="#创建数据库和表结构" class="headerlink" title="创建数据库和表结构"></a>创建数据库和表结构</h3><pre><code class="java">create database ssm;use ssm;<span class="function">create table <span class="title">account</span><span class="params">(</span></span><span class="function"><span class="params">    id <span class="keyword">int</span> primary key auto_increment,</span></span><span class="function"><span class="params">    name varchar(<span class="number">20</span>)</span>,</span><span class="function">    money <span class="keyword">double</span></span><span class="function">)</span>;&lt;!--￼<span class="number">0</span>--&gt;####  编写实体类，在ssm_domain项目中编写#### 编写dao接口#### 编写service接口和实现类## Spring框架代码的编写### 搭建和测试Spring的开发环境#### 在ssm_web项目中创建applicationContext.xml的配置文件，编写具体的配置信息&lt;!--￼<span class="number">1</span>--&gt;#### 在ssm_web项目中编写测试方法，进行测试&lt;!--￼<span class="number">2</span>--&gt;## Spring整合SpringMVC框架### 搭建和测试SpringMVC的开发环境#### 在web.xml中配置DispatcherServlet前端控制器&lt;!--￼<span class="number">3</span>--&gt;#### 创建springmvc.xml的配置文件，编写配置文件&lt;!--￼<span class="number">4</span>--&gt;#### 测试SpringMVC的框架搭建是否成功* 编写index.jsp和list.jsp编写，超链接&lt;!--￼<span class="number">5</span>--&gt;* 创建AccountController类，编写方法，进行测试&lt;!--￼<span class="number">6</span>--&gt;### Spring整合SpringMVC的框架* 目的:在controller中能成功的调用service对象中的方法。* 在项目启动的时候，就去加载applicationContext.xml的配置文件，在web.xml中配置 ContextLoaderListener监听器(该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文 件)。&lt;!--￼<span class="number">7</span>--&gt;#### 在controller中注入service对象，调用service对象的方法进行测试&lt;!--￼<span class="number">8</span>--&gt;## Spring整合MyBatis框架### 搭建和测试MyBatis的环境#### 在web项目中编写SqlMapConfig.xml的配置文件，编写核心配置文件&lt;!--￼<span class="number">9</span>--&gt;#### 在AccountDao接口的方法上添加注解，编写SQL语句&lt;!--￼<span class="number">10</span>--&gt;#### 测试&lt;!--￼<span class="number">11</span>--&gt;### Spring整合MyBatis框架#### 目的* 把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中&lt;!--￼<span class="number">12</span>--&gt;#### 在AccountDao接口中添加@Repository注解#### 在service中注入dao对象，进行测试&lt;!--￼<span class="number">13</span>--&gt;#### 配置Spring的声明式事务管理&lt;!--￼<span class="number">14</span>--&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringMVC整合&quot;&gt;&lt;a href=&quot;#SpringMVC整合&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC整合&quot;&gt;&lt;/a&gt;SpringMVC整合&lt;/h2&gt;&lt;h2 id=&quot;搭建整合环境步骤&quot;&gt;&lt;a href=&quot;#搭建整合环境步骤&quot;
      
    
    </summary>
    
    
      <category term="JAVA框架" scheme="https://github.com/learn666-gif/categories/JAVA%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ssm" scheme="https://github.com/learn666-gif/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>JAVA框架_SPringMVC</title>
    <link href="https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_SpringMVC/"/>
    <id>https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_SpringMVC/</id>
    <published>2020-05-16T07:05:08.000Z</published>
    <updated>2020-05-23T10:22:42.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h2 id="三层架构和MVC"><a href="#三层架构和MVC" class="headerlink" title="三层架构和MVC"></a>三层架构和MVC</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序</li><li>Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/01.bmp" alt=""></p><h4 id="三层架构概念"><a href="#三层架构概念" class="headerlink" title="三层架构概念"></a>三层架构概念</h4><ol><li>表现层:WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型 </li><li>业务层:处理公司具体的业务逻辑的</li><li>持久层:用来操作数据库的</li></ol><h3 id="表现层的设计模式–MVC模型"><a href="#表现层的设计模式–MVC模型" class="headerlink" title="表现层的设计模式–MVC模型"></a>表现层的设计模式–MVC模型</h3><ol><li>MVC全名是Model View Controller 模型视图控制器，每个部分各司其职。</li><li>Model:数据模型，JavaBean的类，用来进行数据封装。</li><li>View:指JSP、HTML用来展示数据给用户</li><li>Controller:用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</li></ol><h2 id="SpringMVC-1"><a href="#SpringMVC-1" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>是一种基于Java实现的MVC设计模型的请求驱动类型的轻量级WEB框架。</li><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</li><li>使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的<br>SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="清晰的角色划分"><a href="#清晰的角色划分" class="headerlink" title="清晰的角色划分:"></a>清晰的角色划分:</h4><ul><li>前端控制器(DispatcherServlet)</li><li>请求到处理器映射(HandlerMapping) </li><li>处理器适配器(HandlerAdapter)</li><li>视图解析器(ViewResolver) </li><li>处理器或页面控制器(Controller) </li><li>验证器( Validator)</li><li>命令对象(Command 请求参数绑定到的对象就叫命令对象)</li><li>表单对象(Form Object 提供给表单展示和提交到的对象就叫表单对象)。</li></ul><h4 id="SpringMVC-和-Struts2-的优略分析"><a href="#SpringMVC-和-Struts2-的优略分析" class="headerlink" title="SpringMVC 和 Struts2 的优略分析"></a>SpringMVC 和 Struts2 的优略分析</h4><ul><li>共同点:</li></ul><blockquote><p>它们都是表现层框架，都是基于 MVC 模型编写的。 </p><p>它们的底层都离不开原始 ServletAPI。 </p><p>它们处理请求的机制都是一个核心控制器。</p></blockquote><ul><li>区别:</li></ul><blockquote><p>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</p><p>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所 以 Spring MVC 会稍微比 Struts2 快些。</p></blockquote><blockquote><p>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</p></blockquote><blockquote><p>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提<br>升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</p></blockquote><h2 id="SpringMVC-的入门程序"><a href="#SpringMVC-的入门程序" class="headerlink" title="SpringMVC 的入门程序"></a>SpringMVC 的入门程序</h2><h3 id="创建WEB工程，引入开发的jar包"><a href="#创建WEB工程，引入开发的jar包" class="headerlink" title="创建WEB工程，引入开发的jar包"></a>创建WEB工程，引入开发的jar包</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/02.bmp" alt=""></p><h4 id="具体的坐标"><a href="#具体的坐标" class="headerlink" title="具体的坐标"></a>具体的坐标</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 版本锁定 --&gt; &lt;properties&gt;</span><br><span class="line">&lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt; &lt;/properties&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置核心的控制器-配置DispatcherServlet"><a href="#配置核心的控制器-配置DispatcherServlet" class="headerlink" title="配置核心的控制器(配置DispatcherServlet)"></a>配置核心的控制器(配置DispatcherServlet)</h3><h4 id="在web-xml配置文件中核心控制器DispatcherServlet"><a href="#在web-xml配置文件中核心控制器DispatcherServlet" class="headerlink" title="在web.xml配置文件中核心控制器DispatcherServlet"></a>在web.xml配置文件中核心控制器DispatcherServlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">dispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="resource下编写springmvc-xml的配置文件"><a href="#resource下编写springmvc-xml的配置文件" class="headerlink" title="resource下编写springmvc.xml的配置文件"></a>resource下编写springmvc.xml的配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.jwang"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"internalResourceViewResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启springMVC注解支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="编写index-jsp和HelloController控制器类"><a href="#编写index-jsp和HelloController控制器类" class="headerlink" title="编写index.jsp和HelloController控制器类"></a>编写index.jsp和HelloController控制器类</h3><h4 id="1-index-jsp"><a href="#1-index-jsp" class="headerlink" title="1. index.jsp"></a>1. index.jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门程序&lt;/h3&gt;</span><br><span class="line">    &lt;a href="hello"&gt; 入门&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-HelloController"><a href="#2-HelloController" class="headerlink" title="2. HelloController"></a>2. HelloController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制器类</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>) <span class="comment">//请求映射  路径为/hello</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello StringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在WEB-INF目录下创建pages文件夹，编写success-jsp的成功页面"><a href="#在WEB-INF目录下创建pages文件夹，编写success-jsp的成功页面" class="headerlink" title="在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面"></a>在WEB-INF目录下创建pages文件夹，编写success.jsp的成功页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; &lt;h3&gt;入门成功!!&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="入门案例的执行过程分析"><a href="#入门案例的执行过程分析" class="headerlink" title="入门案例的执行过程分析"></a>入门案例的执行过程分析</h2><h3 id="入门案例的执行流程"><a href="#入门案例的执行流程" class="headerlink" title="入门案例的执行流程"></a>入门案例的执行流程</h3><ol><li>当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象， 就会加载springmvc.xml配置文件</li><li>开启了注解扫描，那么HelloController对象就会被创建</li><li>从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解找到执行的具体方法</li><li>根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</li><li>Tomcat服务器渲染页面，做出响应</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/03.bmp" alt=""></p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h3><h4 id="RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系"><a href="#RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系" class="headerlink" title="RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系"></a>RequestMapping注解的作用是建立请求URL和处理方法之间的对应关系</h4><h4 id="RequestMapping注解可以作用在方法和类上"><a href="#RequestMapping注解可以作用在方法和类上" class="headerlink" title="RequestMapping注解可以作用在方法和类上"></a>RequestMapping注解可以作用在方法和类上</h4><ol><li>作用在类上:第一级的访问目录</li><li>作用在方法上:第二级的访问目录</li><li>细节:路径可以不编写 / 表示应用的根目录开始</li><li>细节:${ pageContext.request.contextPath }也可以省略不写，但是路径上不能写 /</li></ol><h4 id="RequestMapping的属性"><a href="#RequestMapping的属性" class="headerlink" title="RequestMapping的属性"></a>RequestMapping的属性</h4><ol><li>path：指定请求路径的url</li><li>value：与path属性一样</li><li>mthod：指定该方法的请求方式 枚举类</li><li>params：指定限定请求参数的条件. 请求参数需要有该指定名称的属性 {“username”}</li><li>headers 发送的请求中必须包含的请求头 {“Accept”}</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/01/04.bmp" alt=""></p><h2 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h2><h3 id="请求参数的绑定说明"><a href="#请求参数的绑定说明" class="headerlink" title="请求参数的绑定说明"></a>请求参数的绑定说明</h3><h4 id="绑定机制"><a href="#绑定机制" class="headerlink" title="绑定机制"></a>绑定机制</h4><ol><li>表单提交的数据都是k=v格式的 username=haha&amp;password=123</li><li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的 </li><li>要求:提交表单的name和参数的名称是相同的</li></ol><h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><ol><li>基本数据类型和字符串类型</li><li>实体类型(JavaBean)</li><li>集合数据类型(List、map集合等)</li></ol><h4 id="基本数据类型和字符串类型"><a href="#基本数据类型和字符串类型" class="headerlink" title="基本数据类型和字符串类型"></a>基本数据类型和字符串类型</h4><ol><li>提交表单的name和参数的名称是相同的</li><li>区分大小写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/testrequest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequest</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"requestmapping。。。"</span>+ username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;a href="user/testrequest?username=aaa"&gt;requestmapping&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt;http:<span class="comment">//localhost:8080/jwang/user/testrequest?username=aaa    </span></span><br><span class="line">&gt;&gt;&gt;requestmapping。。。aaa</span><br></pre></td></tr></table></figure><h4 id="实体类型-JavaBean"><a href="#实体类型-JavaBean" class="headerlink" title="实体类型(JavaBean)"></a>实体类型(JavaBean)</h4><ol><li>提交表单的name和JavaBean中的属性名称需要一致</li><li>如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成:对象.属性 例如:<br>address.name</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">## Domain</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">## controller</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/saveAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> ## index.jsp</span><br><span class="line">     &lt;form action=<span class="string">"user/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户地址：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.address"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Account&#123;username=<span class="string">'jwang'</span>, id=<span class="keyword">null</span>, password=<span class="string">'xxx'</span>, money=<span class="number">10.0</span>, </span><br><span class="line">&gt;&gt;&gt;user=User&#123;username=<span class="string">'jkh'</span>, address=<span class="string">'kjhhk'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="给集合属性数据封装"><a href="#给集合属性数据封装" class="headerlink" title="给集合属性数据封装"></a>给集合属性数据封装</h4><ol><li>JSP页面编写方式:list[0].属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">       用户姓名<span class="number">1</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       用户地址<span class="number">1</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].address"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">       用户姓名<span class="number">2</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       用户地址<span class="number">2</span>：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].address"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span>&gt;</span><br><span class="line">       </span><br><span class="line">## domain    </span><br><span class="line">   <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;String,User&gt; map;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;Account&#123;username=<span class="string">'jwang'</span>, id=<span class="keyword">null</span>, password=<span class="string">'xxx'</span>, money=<span class="number">10.0</span>, </span><br><span class="line">user=User&#123;username=<span class="string">'娃说的是'</span>, address=<span class="string">'阿萨'</span>&#125;, </span><br><span class="line">users=[User&#123;username=<span class="string">'sad'</span>, address=<span class="string">'asdas'</span>&#125;], </span><br><span class="line">map=&#123;one=User&#123;username=<span class="string">'asdas'</span>, address=<span class="string">'asdad'</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="请求参数中文乱码的解决"><a href="#请求参数中文乱码的解决" class="headerlink" title="请求参数中文乱码的解决"></a>请求参数中文乱码的解决</h4><ul><li>在web.xml中配置Spring提供的过滤器类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置过滤器，解决post中文乱码问题--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">UTF</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">characterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在控制器中使用原生的ServletAPI对象"><a href="#在控制器中使用原生的ServletAPI对象" class="headerlink" title="在控制器中使用原生的ServletAPI对象"></a>在控制器中使用原生的ServletAPI对象</h4><ol><li>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>) <span class="comment">//请求映射  路径为/hello</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello StringMVC"</span>);</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    System.out.println(session);</span><br><span class="line"></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><ol><li>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明<br>Spring框架内部会默认进行数据类型转换。</li><li>如果想自定义数据类型转换，可以实现Converter的接口</li></ol><h4 id="自定义类型转换器-1"><a href="#自定义类型转换器-1" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h4><ul><li>自定义数据类型转换，可以实现Converter的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请传入一个数据"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-MM-dd"</span>);</span><br><span class="line">        <span class="comment">//字符串转换为日期</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> df.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据类型转换失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启springMVC注解支持 默认配置了处理适配器，映射器，视图解析器 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService2"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置自定义类型转换器--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"conversionService2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;bean class="com.jwang.utils.StringToDateConverter"&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h2><h3 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="RequestParam注解"></a>RequestParam注解</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>把请求中的指定名称的参数传递给控制器中的形参赋值 </li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ol><li><p>value:请求参数中的名称</p></li><li><p>required:请求参数中是否必须提供此参数，默认值是true，必须提供@RequestParam(value=”username”,required=false)</p></li><li><p>代码如下</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="anno/testRequestParam?name=haha"&gt;RequestParam&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String username)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RequestParam...."</span>+username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestBody注解"><a href="#RequestBody注解" class="headerlink" title="RequestBody注解"></a>RequestBody注解</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用:"></a>作用:</h4><ul><li>用于获取请求体的内容(注意:get方法不可以) </li></ul><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>required:是否必须有请求体，默认值是true </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="PathVariable注解"></a>PathVariable注解</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用:"></a>作用:</h4><ul><li>拥有绑定url中的占位符的。例如:url中有<code>/delete/{id}，{id}</code>就是占位符 方法:findById</li></ul><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><ol><li>value:指定url中的占位符名称 </li></ol><h4 id="Restful风格的URL"><a href="#Restful风格的URL" class="headerlink" title="Restful风格的URL"></a>Restful风格的URL</h4><ol><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法 </li><li>restful风格的URL优点<ol><li>结构清晰 </li><li>符合标准 </li><li>易于理解 </li><li>扩展方便</li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/01-restful%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.bmp" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"user/saveAccount/4"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/saveAccount/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> Integer id,Account account)</span>&#123;</span><br><span class="line">    account.setId(id);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h3><ol><li>作用:获取指定请求头的值 </li></ol><h4 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h4><ol><li>value:请求头的名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@RequestHeader(value=<span class="string">"Accept"</span>)</span> String header)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h3><ol><li>作用:用于获取指定cookie的名称的值 </li></ol><h4 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h4><ol><li>value:cookie的名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>)</span> String cookieValue) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="ModelAttribute注解"><a href="#ModelAttribute注解" class="headerlink" title="ModelAttribute注解"></a>ModelAttribute注解</h3><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><ol><li>出现在方法上:表示当前方法会在控制器方法执行前先执行。</li><li>出现在参数上:获取指定的数据给参数赋值。</li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。</li></ol><ul><li>修饰的方法有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用在方法，先执行 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"showUser执行了..."</span>); </span><br><span class="line"><span class="comment">// 模拟从数据库中查询对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setName(<span class="string">"哈哈"</span>); </span><br><span class="line">user.setPassword(<span class="string">"123"</span>); </span><br><span class="line">user.setMoney(<span class="number">100</span>d);</span><br><span class="line">   <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改用户的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cookieValue </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/updateUser"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修饰的方法没有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用在方法，先执行 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">(String name,Map&lt;String, User&gt; map)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"showUser执行了..."</span>); </span><br><span class="line"><span class="comment">// 模拟从数据库中查询对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setName(<span class="string">"哈哈"</span>); </span><br><span class="line">user.setPassword(<span class="string">"123"</span>); </span><br><span class="line">user.setMoney(<span class="number">100</span>d);</span><br><span class="line">map.put(<span class="string">"abc"</span>, user); &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改用户的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cookieValue * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@ModelAttribute(value=<span class="string">"abc"</span>)</span> User user) </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SessionAttributes注解"><a href="#SessionAttributes注解" class="headerlink" title="SessionAttributes注解"></a>SessionAttributes注解</h3><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><ul><li>用于多次执行控制器方法间的参数共享 </li></ul><h4 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h4><ol><li>value:指定存入属性的名称</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value= &#123;<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"age"</span>&#125;,types=&#123;String<span class="class">.<span class="keyword">class</span>,<span class="title">Integer</span>.<span class="title">class</span>&#125;) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 向session中存入值 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 把数据存入到session域对象中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/save"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"向session域中保存数据"</span>); </span><br><span class="line">model.addAttribute(<span class="string">"username"</span>, <span class="string">"root"</span>); </span><br><span class="line">model.addAttribute(<span class="string">"password"</span>, <span class="string">"123"</span>); </span><br><span class="line">model.addAttribute(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从session中获取值 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/find"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">String username = (String) modelMap.get(<span class="string">"username"</span>); </span><br><span class="line">String password = (String) modelMap.get(<span class="string">"password"</span>); </span><br><span class="line">Integer age = (Integer) modelMap.get(<span class="string">"age"</span>); </span><br><span class="line">System.out.println(username + <span class="string">" : "</span>+password +<span class="string">" : "</span>+age); </span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清除值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(SessionStatus status)</span> </span>&#123;</span><br><span class="line">status.setComplete();</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC-响应数据和结果视图"><a href="#SpringMVC-响应数据和结果视图" class="headerlink" title="SpringMVC 响应数据和结果视图"></a>SpringMVC 响应数据和结果视图</h2><h3 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h3><h4 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h4><ul><li>Controller方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 视图解析器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"internalResourceViewResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello SpringMVC!!"</span>); </span><br><span class="line"><span class="comment">// 跳转到XX页面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体的应用场景</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 请求参数的绑定 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/initUpdate"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">initUpdate</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 模拟从数据库中查询的数据</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setUsername(<span class="string">"张三"</span>); </span><br><span class="line">user.setPassword(<span class="string">"123"</span>); </span><br><span class="line">user.setMoney(<span class="number">100</span>d); </span><br><span class="line">user.setBirthday(<span class="keyword">new</span> Date()); </span><br><span class="line">model.addAttribute(<span class="string">"user"</span>, user); </span><br><span class="line"><span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;修改用户&lt;/h3&gt;</span><br><span class="line">$&#123; requestScope &#125;</span><br><span class="line">&lt;form action=<span class="string">"user/update"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123; user.username &#125;"</span>&gt;&lt;br&gt; </span><br><span class="line">密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span> value=<span class="string">"$&#123; user.password &#125;"</span>&gt;&lt;br&gt; </span><br><span class="line">金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> value=<span class="string">"$&#123; user.money &#125;"</span>&gt;&lt;br&gt; </span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="返回值是void"><a href="#返回值是void" class="headerlink" title="返回值是void"></a>返回值是void</h3><ul><li>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。<ul><li>默认会跳转到@RequestMapping(value=”/initUpdate”) initUpdate的页面。 自动找视图解析器中配置的/WEB-INF/pages/initUpdate.jsp</li></ul></li><li>可以使用请求转发或者重定向跳转到指定的页面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping</span>(value=<span class="string">"/initAdd"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAdd</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">Exception </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"请求转发或者重定向"</span>);</span><br><span class="line"><span class="comment">// 请求转发</span></span><br><span class="line"><span class="comment">// request.getRequestDispatcher("/WEB-INF/pages/add.jsp").forward(request,response);</span></span><br><span class="line"><span class="comment">// 重定向</span></span><br><span class="line"><span class="comment">// response.sendRedirect(request.getContextPath()+"/add2.jsp");</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>); </span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 直接响应数据 </span></span><br><span class="line">response.getWriter().print(<span class="string">"你好"</span>); </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值是ModelAndView对象"><a href="#返回值是ModelAndView对象" class="headerlink" title="返回值是ModelAndView对象"></a>返回值是ModelAndView对象</h3><ol><li>ModelAndView对象是Spring提供的一个对象，可以用来调整具体的JSP视图</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回ModelAndView对象</span></span><br><span class="line"><span class="comment">* 可以传入视图的名称(即跳转的页面)，还可以传入对象。 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/findAll"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView(); </span><br><span class="line"><span class="comment">// 跳转到list.jsp的页面 </span></span><br><span class="line">mv.setViewName(<span class="string">"list"</span>);</span><br><span class="line"><span class="comment">// 模拟从数据库中查询所有的用户信息 </span></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">User user1 = <span class="keyword">new</span> User(); </span><br><span class="line">user1.setUsername(<span class="string">"张三"</span>); </span><br><span class="line">user1.setPassword(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">User user2 = <span class="keyword">new</span> User(); </span><br><span class="line">user2.setUsername(<span class="string">"赵四"</span>);</span><br><span class="line">user2.setPassword(<span class="string">"456"</span>);</span><br><span class="line">users.add(user1); </span><br><span class="line">users.add(user2);</span><br><span class="line"><span class="comment">// 添加对象 </span></span><br><span class="line">mv.addObject(<span class="string">"users"</span>, users);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt; </span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;查询所有的数据&lt;/h3&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123; users &#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">$&#123; user.username &#125; </span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC框架提供的转发和重定向"><a href="#SpringMVC框架提供的转发和重定向" class="headerlink" title="SpringMVC框架提供的转发和重定向"></a>SpringMVC框架提供的转发和重定向</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/02-%E5%93%8D%E5%BA%94%E7%9A%84%E6%96%B9%E5%BC%8F.bmp" alt=""></p><h3 id="forward请求转发"><a href="#forward请求转发" class="headerlink" title="forward请求转发"></a>forward请求转发</h3><h4 id="controller方法返回String类型"><a href="#controller方法返回String类型" class="headerlink" title="controller方法返回String类型"></a>controller方法返回String类型</h4><ul><li>想进行请求转发也可以编写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用forward关键字进行请求转发</span></span><br><span class="line"><span class="comment">* "forward:转发的JSP路径"，不走视图解析器了，所以需要编写完整的路径 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"delete方法执行了..."</span>);</span><br><span class="line"><span class="comment">// return "forward:/WEB-INF/pages/success.jsp"; </span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/user/findAll"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h3><h4 id="controller方法返回String类型-1"><a href="#controller方法返回String类型-1" class="headerlink" title="controller方法返回String类型"></a>controller方法返回String类型</h4><ul><li>进行重定向可以编写(项目名称框架默认加上的)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 重定向</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/count"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">count</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"count方法执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/add.jsp"</span>;</span><br><span class="line"><span class="comment">// return "redirect:/user/findAll";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseBody响应json数据"><a href="#ResponseBody响应json数据" class="headerlink" title="ResponseBody响应json数据"></a>ResponseBody响应json数据</h2><ol><li>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源(img、css、js)也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置  </li></ol><h3 id="mvc-resources标签配置不过滤"><a href="#mvc-resources标签配置不过滤" class="headerlink" title="mvc:resources标签配置不过滤"></a>mvc:resources标签配置不过滤</h3><ol><li>location元素表示webapp目录下的包下的所有文件</li><li>mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 设置静态资源不过滤 --&gt;</span><br><span class="line">&lt;mvc:resources location=<span class="string">"/css/"</span> mapping=<span class="string">"/css/**"</span>/&gt; &lt;!-- 样式 --&gt; </span><br><span class="line">&lt;mvc:resources location=<span class="string">"/images/"</span> mapping=<span class="string">"/images/**"</span>/&gt; &lt;!-- 图片 --&gt; </span><br><span class="line">&lt;mvc:resources location=<span class="string">"/js/"</span> mapping=<span class="string">"/js/**"</span>/&gt; &lt;!-- javascript --&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestBody获取请求体数据"><a href="#使用-RequestBody获取请求体数据" class="headerlink" title="使用@RequestBody获取请求体数据"></a>使用@RequestBody获取请求体数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载</span></span><br><span class="line"><span class="comment">// 页面加载 </span></span><br><span class="line">$(function()&#123;</span><br><span class="line"><span class="comment">// 绑定点击事件 </span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"user/testJson"</span>, </span><br><span class="line">contentType:<span class="string">"application/json;charset=UTF-8"</span>, data:<span class="string">'&#123;"addressName":"aa","addressNum":100&#125;'</span>, </span><br><span class="line">dataType:<span class="string">"json"</span>,</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">alert(data.addressName); </span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取请求体的数据 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">(@RequestBody String body)</span> </span>&#123;</span><br><span class="line">System.out.println(body); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-RequestBody注解把json的字符串转换成JavaBean的对象"><a href="#使用-RequestBody注解把json的字符串转换成JavaBean的对象" class="headerlink" title="使用@RequestBody注解把json的字符串转换成JavaBean的对象"></a>使用@RequestBody注解把json的字符串转换成JavaBean的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 页面加载</span></span><br><span class="line"><span class="comment">// 页面加载 </span></span><br><span class="line">$(function()&#123;</span><br><span class="line"><span class="comment">// 绑定点击事件 </span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"user/testJson"</span>, </span><br><span class="line">contentType:<span class="string">"application/json;charset=UTF-8"</span>, data:<span class="string">'&#123;"addressName":"aa","addressNum":100&#125;'</span>, </span><br><span class="line">dataType:<span class="string">"json"</span>,</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">alert(data.addressName); </span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取请求体的数据 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">(@RequestBody Address address)</span> </span>&#123;</span><br><span class="line">System.out.println(address); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ResponseBody注解把JavaBean对象转换成json字符串，直接响应"><a href="#使用-ResponseBody注解把JavaBean对象转换成json字符串，直接响应" class="headerlink" title="使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应"></a>使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</h3><ol><li>要求方法需要返回JavaBean的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载 </span></span><br><span class="line">$(function()&#123;</span><br><span class="line"><span class="comment">// 绑定点击事件 </span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"user/testJson"</span>, </span><br><span class="line">contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">data:<span class="string">'&#123;"addressName":"哈哈","addressNum":100&#125;'</span>,</span><br><span class="line">dataType:<span class="string">"json"</span>, type:<span class="string">"post"</span>, </span><br><span class="line">success:function(data)&#123;</span><br><span class="line">               alert(data);</span><br><span class="line">alert(data.addressName); </span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Address <span class="title">testJson</span><span class="params">(@RequestBody Address address)</span> </span>&#123;</span><br><span class="line">System.out.println(address); </span><br><span class="line">address.setAddressName(<span class="string">"上海"</span>); </span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包"><a href="#json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包" class="headerlink" title="json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包"></a>json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h2><h3 id="以前文件上传方式"><a href="#以前文件上传方式" class="headerlink" title="以前文件上传方式"></a>以前文件上传方式</h3><h4 id="导入文件上传的jar包"><a href="#导入文件上传的jar包" class="headerlink" title="导入文件上传的jar包"></a>导入文件上传的jar包</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-fileupload&lt;/groupId&gt; </span><br><span class="line">&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; </span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-io&lt;/groupId&gt; </span><br><span class="line">&lt;artifactId&gt;commons-io&lt;/artifactId&gt; </span><br><span class="line">&lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="编写文件上传的JSP页面"><a href="#编写文件上传的JSP页面" class="headerlink" title="编写文件上传的JSP页面"></a>编写文件上传的JSP页面</h4><ul><li>form表单的 enctype值必须是：multipart/form-data</li><li>method属性必须是：post</li><li>需提供一个文件域：input type=”file”</li></ul><pre><code class="java">&lt;h3&gt;文件上传&lt;/h3&gt;&lt;form action=<span class="string">"user/fileupload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;     选择文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传文件"</span>/&gt;&lt;/form&gt;&lt;!--￼<span class="number">34</span>--&gt;![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/03-%E5%8E%9F%E7%90%86.bmp)</span>### SpringMVC传统方式文件上传* SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的name属性名称相同。* MultipartFile upload 的upload这个名字与表单的name值需要一样，识别&lt;!--￼<span class="number">35</span>--&gt;* 配置文件解析器对象&lt;!--￼<span class="number">36</span>--&gt;### SpringMVC跨服务器方式文件上传#### 搭建图片服务器<span class="number">1</span>. 根据文档配置tomcat9的服务器，现在是<span class="number">2</span>个服务器<span class="number">2</span>. 导入资料中day02_springmvc5_02image项目，作为图片服务器使用![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/04.bmp)</span>#### 实现SpringMVC跨服务器方式文件上传* 导入开发需要的jar包&lt;!--￼<span class="number">37</span>--&gt;* 编写文件上传的JSP页面&lt;!--￼<span class="number">38</span>--&gt;*  编写控制器&lt;!--￼<span class="number">39</span>--&gt;## SpringMVC的异常处理### 异常处理思路* Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进 行异常的处理。![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/05.bmp)</span>### SpringMVC的异常处理#### 自定义异常类&lt;!--￼<span class="number">40</span>--&gt;#### 自定义异常处理器```java <span class="keyword">package</span> cn.itcast.exception;<span class="keyword">import</span> javax.servlet.http.HttpServletRequest; <span class="keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver; <span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="comment">/**</span><span class="comment">* 异常处理器 * <span class="doctag">@author</span> rt */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>{    <span class="comment">/**</span><span class="comment">    * 跳转到具体的错误页面的方法 </span><span class="comment">    */</span>    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span><span class="function"><span class="params">response, Object handler,Exception ex)</span> </span>{     ex.printStackTrace();     SysException e = <span class="keyword">null</span>;     <span class="comment">// 获取到异常对象</span>    <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SysException) {         e = (SysException) ex;    }<span class="keyword">else</span> {        e = <span class="keyword">new</span> SysException(<span class="string">"请联系管理员"</span>);    }    ModelAndView mv = <span class="keyword">new</span> ModelAndView();     <span class="comment">// 存入错误的提示信息 </span>    mv.addObject(<span class="string">"message"</span>, e.getMessage());     <span class="comment">// 跳转的Jsp页面</span>    mv.setViewName(<span class="string">"error"</span>);    <span class="keyword">return</span> mv;    } }&lt;!--￼<span class="number">41</span>--&gt;## SpringMVC框架中的拦截器### 拦截器的概述![](https:<span class="comment">//jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/SpringMVC/02/06.bmp)</span><span class="number">1</span>. SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。<span class="number">2</span>. 可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行。<span class="number">3</span>. 拦截器和过滤器的功能比较类似，有区别    <span class="number">1</span>. 过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。     <span class="number">2</span>. 拦截器是SpringMVC框架独有的。    <span class="number">3</span>. 过滤器配置了<span class="comment">/*，可以拦截任何资源。</span><span class="comment">    4. 拦截器只会对控制器中的方法进行拦截。</span><span class="comment">4. 拦截器也是AOP思想的一种实现方式</span><span class="comment">5. 想要自定义拦截器，需要实现HandlerInterceptor接口。</span><span class="comment"></span><span class="comment">### 自定义拦截器步骤</span><span class="comment"></span><span class="comment">#### 创建拦截器类，实现HandlerInterceptor接口，重写需要的方法</span><span class="comment"></span><span class="comment"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.demo1;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest; </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义拦截器1 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> rt </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* controller方法执行前，进行拦截的方法</span></span><br><span class="line"><span class="comment">* return true放行, 执行下一个拦截器，没有就实现controller的方法</span></span><br><span class="line"><span class="comment">* return false拦截</span></span><br><span class="line"><span class="comment">* 可以使用转发或者重定向直接跳转到指定的页面。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"拦截器执行了..."</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span><span class="comment"></span><span class="comment">#### 在springmvc.xml中配置拦截器类</span><span class="comment"></span><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 配置拦截器 --&gt; </span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!-- 哪些方法进行拦截 --&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/user/*"</span>/&gt;</span><br><span class="line">&lt;!-- 哪些方法不进行拦截</span><br><span class="line">&lt;mvc:exclude-mapping path=<span class="string">""</span>/&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 注册拦截器对象 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.demo1.MyInterceptor1"</span>/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></span><span class="comment"></span><span class="comment">### HandlerInterceptor接口中的方法</span><span class="comment"></span><span class="comment">####  preHandle方法是controller方法执行前拦截的方法</span><span class="comment"></span><span class="comment">1. 可以使用request或者response跳转到指定的页面</span><span class="comment">2. return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。 </span><span class="comment">3. return false不放行，不会执行controller中的方法。</span><span class="comment"></span><span class="comment">#### postHandle是controller方法执行后执行的方法，在JSP视图执行前。 </span><span class="comment"></span><span class="comment">1. 可以使用request或者response跳转到指定的页面</span><span class="comment">2. 如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。 </span><span class="comment"></span><span class="comment">#### postHandle方法是在JSP执行后执行</span><span class="comment"></span><span class="comment">1. request或者response不能再跳转页面了</span><span class="comment"></span><span class="comment">### 配置多个拦截器</span><span class="comment"></span><span class="comment">1. 再编写一个拦截器的类 </span><span class="comment">2. 配置2个拦截器</span><span class="comment"></span><span class="comment"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 配置拦截器 --&gt; </span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!-- 哪些方法进行拦截 --&gt; </span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/user/*"</span>/&gt; </span><br><span class="line">&lt;!-- 哪些方法不进行拦截 &lt;mvc:exclude-mapping path=<span class="string">""</span>/&gt;--&gt;  &lt;!-- 注册拦截器对象 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.demo1.MyInterceptor1"</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!-- 哪些方法进行拦截 --&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;!-- 注册拦截器对象 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.demo1.MyInterceptor2"</span>/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h2&gt;&lt;h2 id=&quot;三层架构和MVC&quot;&gt;&lt;a href=&quot;#三层架构和MVC&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="JAVA框架" scheme="https://github.com/learn666-gif/categories/JAVA%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="SpringMVC" scheme="https://github.com/learn666-gif/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>JAVA框架_log4j日志配置详解</title>
    <link href="https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_log4j%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_log4j%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-05-16T07:05:08.000Z</published>
    <updated>2020-05-23T10:02:43.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Log4j简介"><a href="#一、Log4j简介" class="headerlink" title="一、Log4j简介"></a>一、Log4j简介</h3><p>Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。</p><h4 id="1、Loggers"><a href="#1、Loggers" class="headerlink" title="1、Loggers"></a>1、Loggers</h4><p>Loggers组件在此系统中被分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，分别用来指定这条日志信息的重要程度，明白这一点很重要，Log4j有一个规则：只输出级别不低于设定级别的日志信息，假设Loggers级别设定为INFO，则INFO、WARN、ERROR和FATAL级别的日志信息都会输出，而级别比INFO低的DEBUG则不会输出。</p><h4 id="2、Appenders"><a href="#2、Appenders" class="headerlink" title="2、Appenders"></a>2、Appenders</h4><p>禁用和使用日志请求只是Log4j的基本功能，Log4j日志系统还提供许多强大的功能，比如允许把日志输出到不同的地方，如控制台（Console）、文件（Files）等，可以根据天数或者文件大小产生新的文件，可以以流的形式发送到其它地方等等。</p><p>常使用的类如下：</p><ul><li>org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li><li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li><li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li></ul><p>配置模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName = className</span><br><span class="line">log4j.appender.appenderName.Option1 = value1</span><br><span class="line">…</span><br><span class="line">log4j.appender.appenderName.OptionN = valueN</span><br></pre></td></tr></table></figure><h4 id="3、Layouts"><a href="#3、Layouts" class="headerlink" title="3、Layouts"></a>3、Layouts</h4><p>有时用户希望根据自己的喜好格式化自己的日志输出，Log4j可以在Appenders的后面附加Layouts来完成这个功能。Layouts提供四种日志输出样式，如根据HTML样式、自由指定样式、包含日志级别与信息的样式和包含日志时间、线程、类别等信息的样式。</p><p>常使用的类如下：</p><ul><li>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li></ul><p>配置模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.appenderName.layout =className</span><br><span class="line">log4j.appender.appenderName.layout.Option1 = value1</span><br><span class="line">…</span><br><span class="line">log4j.appender.appenderName.layout.OptionN = valueN</span><br></pre></td></tr></table></figure><h3 id="二、配置详解"><a href="#二、配置详解" class="headerlink" title="二、配置详解"></a>二、配置详解</h3><p>在实际应用中，要使Log4j在系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。Log4j支持两种配置文件格式，一种是XML格式的文件，一种是properties属性文件。下面以properties属性文件为例介绍log4j.properties的配置。</p><h4 id="1、配置根Logger"><a href="#1、配置根Logger" class="headerlink" title="1、配置根Logger"></a>1、配置根Logger</h4><p><code>log4j.rootLogger = [ level ] , appenderName1, appenderName2, …</code></p><p>log4j.additivity.org.apache=false：表示Logger不会在父Logger的appender里输出，默认为true。</p><p>level ：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别，Log4j建议只使用中间四个级别。通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。</p><p>appenderName：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。<br>例如：log4j.rootLogger＝INFO,A1,B2,C3</p><h4 id="2、配置日志信息输出目的地（appender）"><a href="#2、配置日志信息输出目的地（appender）" class="headerlink" title="2、配置日志信息输出目的地（appender）"></a>2、配置日志信息输出目的地（appender）</h4><p><code>log4j.appender.appenderName = className</code></p><ul><li><p>appenderName：自定义appderName，在log4j.rootLogger设置中使用；</p></li><li><p>className：可设值如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)org.apache.log4j.ConsoleAppender（控制台）</span><br><span class="line">(<span class="number">2</span>)org.apache.log4j.FileAppender（文件）</span><br><span class="line">(<span class="number">3</span>)org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</span><br><span class="line">(<span class="number">4</span>)org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</span><br><span class="line">(<span class="number">5</span>)org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)ConsoleAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Target=System.err：默认值是System.out。</span><br><span class="line">(<span class="number">2</span>)FileAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Append=<span class="keyword">false</span>：<span class="keyword">true</span>表示消息增加到指定文件中，<span class="keyword">false</span>则将消息覆盖指定的文件内容，默认值是<span class="keyword">true</span>。</span><br><span class="line">File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</span><br><span class="line">(<span class="number">3</span>)DailyRollingFileAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Append=<span class="keyword">false</span>：<span class="keyword">true</span>表示消息增加到指定文件中，<span class="keyword">false</span>则将消息覆盖指定的文件内容，默认值是<span class="keyword">true</span>。</span><br><span class="line">File=D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。</span><br><span class="line">DatePattern=<span class="string">'.'</span>yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。</span><br><span class="line"></span><br><span class="line">另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下：</span><br><span class="line"><span class="number">1</span>)<span class="string">'.'</span>yyyy-MM：每月</span><br><span class="line"><span class="number">2</span>)<span class="string">'.'</span>yyyy-ww：每周</span><br><span class="line"><span class="number">3</span>)<span class="string">'.'</span>yyyy-MM-dd：每天</span><br><span class="line"><span class="number">4</span>)<span class="string">'.'</span>yyyy-MM-dd-a：每天两次</span><br><span class="line"><span class="number">5</span>)<span class="string">'.'</span>yyyy-MM-dd-HH：每小时</span><br><span class="line"><span class="number">6</span>)<span class="string">'.'</span>yyyy-MM-dd-HH-mm：每分钟</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)RollingFileAppender选项：</span><br><span class="line">Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="line">ImmediateFlush=<span class="keyword">true</span>：表示所有消息都会被立即输出，设为<span class="keyword">false</span>则不输出，默认值是<span class="keyword">true</span>。</span><br><span class="line">Append=<span class="keyword">false</span>：<span class="keyword">true</span>表示消息增加到指定文件中，<span class="keyword">false</span>则将消息覆盖指定的文件内容，默认值是<span class="keyword">true</span>。</span><br><span class="line">File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</span><br><span class="line">MaxFileSize=<span class="number">100</span>KB：后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j<span class="number">.1</span>文件中。</span><br><span class="line">MaxBackupIndex=<span class="number">2</span>：指定可以产生的滚动文件的最大数，例如，设为<span class="number">2</span>则可以产生logging.log4j<span class="number">.1</span>，logging.log4j<span class="number">.2</span>两个滚动文件和一个logging.log4j文件。</span><br></pre></td></tr></table></figure><h4 id="3、配置日志信息的输出格式（Layout）："><a href="#3、配置日志信息的输出格式（Layout）：" class="headerlink" title="3、配置日志信息的输出格式（Layout）："></a>3、配置日志信息的输出格式（Layout）：</h4><p><code>log4j.appender.appenderName.layout=className</code></p><ul><li>className：可设值如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)org.apache.log4j.HTMLLayout（以HTML表格形式布局）</span><br><span class="line">(<span class="number">2</span>)org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</span><br><span class="line">(<span class="number">3</span>)org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</span><br><span class="line">(<span class="number">4</span>)org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span><br><span class="line">(<span class="number">1</span>)HTMLLayout选项：</span><br><span class="line">LocationInfo=<span class="keyword">true</span>：输出java文件名称和行号，默认值是<span class="keyword">false</span>。</span><br><span class="line">Title=My Logging： 默认值是Log4J Log Messages。</span><br><span class="line">(<span class="number">2</span>)PatternLayout选项：</span><br><span class="line">ConversionPattern=%m%n：设定以怎样的格式显示消息。</span><br></pre></td></tr></table></figure><ul><li>格式化符号说明：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</span><br><span class="line">%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d&#123;yyyy/MM/dd HH:mm:ss,SSS&#125;。</span><br><span class="line">%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</span><br><span class="line">%t：输出产生该日志事件的线程名。</span><br><span class="line">%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:<span class="number">10</span>)。</span><br><span class="line">%c：输出日志信息所属的类目，通常就是所在类的全名。</span><br><span class="line">%M：输出产生日志信息的方法名。</span><br><span class="line">%F：输出日志消息产生时所在的文件名称。</span><br><span class="line">%L:：输出代码中的行号。</span><br><span class="line">%m:：输出代码中指定的具体日志信息。</span><br><span class="line">%n：输出一个回车换行符，Windows平台为<span class="string">"rn"</span>，Unix平台为<span class="string">"n"</span>。</span><br><span class="line">%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class="line">%%：输出一个<span class="string">"%"</span>字符。</span><br><span class="line">另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</span><br><span class="line"><span class="number">1</span>) c：指定输出category的名称，最小的长度是<span class="number">20</span>，如果category的名称长度小于<span class="number">20</span>的话，默认的情况下右对齐。</span><br><span class="line"><span class="number">2</span>)%-<span class="number">20</span>c：<span class="string">"-"</span>号表示左对齐。</span><br><span class="line"><span class="number">3</span>)%.<span class="number">30</span>c：指定输出category的名称，最大的长度是<span class="number">30</span>，如果category的名称长度大于<span class="number">30</span>的话，就会将左边多出的字符截掉，但小于<span class="number">30</span>的话也不会补空格。</span><br></pre></td></tr></table></figure><h3 id="附：Log4j比较全面的配置"><a href="#附：Log4j比较全面的配置" class="headerlink" title="附：Log4j比较全面的配置"></a>附：Log4j比较全面的配置</h3><ul><li>Log4j配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,console,dailyFile,im</span><br><span class="line">log4j.additivity.org.apache=<span class="keyword">true</span></span><br><span class="line"># 控制台(console)</span><br><span class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.console.Target=System.err</span><br><span class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"></span><br><span class="line"># 日志文件(logFile)</span><br><span class="line">log4j.appender.logFile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.logFile.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.logFile.Append=<span class="keyword">true</span></span><br><span class="line">log4j.appender.logFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.logFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logFile.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 回滚文件(rollingFile)</span><br><span class="line">log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.rollingFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.rollingFile.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.rollingFile.Append=<span class="keyword">true</span></span><br><span class="line">log4j.appender.rollingFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.rollingFile.MaxFileSize=<span class="number">200</span>KB</span><br><span class="line">log4j.appender.rollingFile.MaxBackupIndex=<span class="number">50</span></span><br><span class="line">log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.rollingFile.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 定期回滚日志文件(dailyFile)</span><br><span class="line">log4j.appender.dailyFile=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.dailyFile.Threshold=DEBUG</span><br><span class="line">log4j.appender.dailyFile.ImmediateFlush=<span class="keyword">true</span></span><br><span class="line">log4j.appender.dailyFile.Append=<span class="keyword">true</span></span><br><span class="line">log4j.appender.dailyFile.File=D:/logs/log.log4j</span><br><span class="line">log4j.appender.dailyFile.DatePattern=<span class="string">'.'</span>yyyy-MM-dd</span><br><span class="line">log4j.appender.dailyFile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.dailyFile.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 应用于socket</span><br><span class="line">log4j.appender.socket=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.socket.RemoteHost=localhost</span><br><span class="line">log4j.appender.socket.Port=<span class="number">5001</span></span><br><span class="line">log4j.appender.socket.LocationInfo=<span class="keyword">true</span></span><br><span class="line"># Set up for Log Factor 5</span><br><span class="line">log4j.appender.socket.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.socket.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># Log Factor 5 Appender</span><br><span class="line">log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender</span><br><span class="line">log4j.appender.LF5_APPENDER.MaxNumberOfRecords=<span class="number">2000</span></span><br><span class="line"># 发送日志到指定邮件</span><br><span class="line">log4j.appender.mail=org.apache.log4j.net.SMTPAppender</span><br><span class="line">log4j.appender.mail.Threshold=FATAL</span><br><span class="line">log4j.appender.mail.BufferSize=<span class="number">10</span></span><br><span class="line">log4j.appender.mail.From = xxx<span class="meta">@mail</span>.com</span><br><span class="line">log4j.appender.mail.SMTPHost=mail.com</span><br><span class="line">log4j.appender.mail.Subject=Log4J Message</span><br><span class="line">log4j.appender.mail.To= xxx<span class="meta">@mail</span>.com</span><br><span class="line">log4j.appender.mail.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.mail.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"># 应用于数据库</span><br><span class="line">log4j.appender.database=org.apache.log4j.jdbc.JDBCAppender</span><br><span class="line">log4j.appender.database.URL=jdbc:mysql:<span class="comment">//localhost:3306/test</span></span><br><span class="line">log4j.appender.database.driver=com.mysql.jdbc.Driver</span><br><span class="line">log4j.appender.database.user=root</span><br><span class="line">log4j.appender.database.password=</span><br><span class="line">log4j.appender.database.sql=<span class="function">INSERT INTO <span class="title">LOG4J</span> <span class="params">(Message)</span> <span class="title">VALUES</span><span class="params">(<span class="string">'=[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n'</span>)</span></span></span><br><span class="line"><span class="function">log4j.appender.database.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.database.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br><span class="line"></span><br><span class="line"># 自定义Appender</span><br><span class="line">log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender</span><br><span class="line">log4j.appender.im.host = mail.cybercorlin.net</span><br><span class="line">log4j.appender.im.username = username</span><br><span class="line">log4j.appender.im.password = password</span><br><span class="line">log4j.appender.im.recipient = corlin<span class="meta">@cybercorlin</span>.net</span><br><span class="line">log4j.appender.im.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.im.layout.ConversionPattern=[%-<span class="number">5</span>p] %d(%r) --&gt; [%t] %l: %m %x %n</span><br></pre></td></tr></table></figure><ul><li>log4j的强大功能无可置疑，但实际应用中免不了遇到某个功能需要输出独立的日志文件的情况，怎样才能把所需的内容从原有日志中分离，形成单独的日志文件呢？其实只要在现有的log4j基础上稍加配置即可轻松实现这一功能。</li></ul><ul><li>先看一个常见的log4j.properties文件，它是在控制台和myweb.log文件中记录日志：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout, logfile</span><br><span class="line">log4j.category.org.springframework=ERROR</span><br><span class="line">log4j.category.org.apache=INFO</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.logfile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.logfile.File=$&#123;myweb.root&#125;/WEB-INF/log/myweb.log</span><br><span class="line">log4j.appender.logfile.MaxFileSize=<span class="number">512</span>KB</span><br><span class="line">log4j.appender.logfile.MaxBackupIndex=<span class="number">5</span></span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">```　</span><br><span class="line"></span><br><span class="line">* 如果想对不同的类输出不同的文件(以cn.com.Test为例)，先要在Test.java中定义:`<span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(Test<span class="class">.<span class="keyword">class</span>)</span>;`然后在log4j.properties中加入:</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">log4j.logger.cn.com.Test= DEBUG, test</span><br><span class="line">log4j.appender.test=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test.File=$&#123;myweb.root&#125;/WEB-INF/log/test.log</span><br><span class="line">log4j.appender.test.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><ul><li>也就是让cn.com.Test中的logger使用log4j.appender.test所做的配置。</li><li>但是，如果在同一类中需要输出多个日志文件呢？其实道理是一样的，先在Test.java中定义:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger1 = LogFactory.getLog(<span class="string">"myTest1"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger2 = LogFactory.getLog(<span class="string">"myTest2"</span>);</span><br></pre></td></tr></table></figure><ul><li>然后在log4j.properties中加入:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">log4j.logger.myTest1= DEBUG, test1</span><br><span class="line">log4j.appender.test1=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test1.File=$&#123;myweb.root&#125;/WEB-INF/log/test1.log</span><br><span class="line">log4j.appender.test1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test1.layout.ConversionPattern=%d %p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.myTest2= DEBUG, test2</span><br><span class="line">log4j.appender.test2=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.test2.File=$&#123;myweb.root&#125;/WEB-INF/log/test2.log</span><br><span class="line">log4j.appender.test2.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.test2.layout.ConversionPattern=%d %p [%c] - %m%n</span><br></pre></td></tr></table></figure><blockquote><p>也就是在用logger时给它一个自定义的名字(如这里的”myTest1”)，然后在log4j.properties中做出相应配置即可。别忘了不同日志要使用不同的logger(如输出到test1.log的要用logger1.info(“abc”))。</p></blockquote><ul><li>还有一个问题，就是这些自定义的日志默认是同时输出到log4j.rootLogger所配置的日志中的，如何能只让它们输出到自己指定的日志中呢？别急，这里有个开关：<br><code>log4j.additivity.myTest1 = false</code>它用来设置是否同时输出到log4j.rootLogger所配置的日志中，设为false就不会输出到其它地方啦！注意这里的”myTest1”是你在程序中给logger起的那个自定义的名字！</li></ul><p>如果你说，我只是不想同时输出这个日志到log4j.rootLogger所配置的logfile中，stdout里我还想同时输出呢！那也好办，把你的log4j.logger.myTest1 = DEBUG, test1改为下式就OK啦！<code>log4j.logger.myTest1=DEBUG, test1</code></p><ul><li>下面是文件上传时记录文件类型的log日志，并输出到指定文件的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">######################### logger ##############################</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.conversionPattern = %d [%t] %-<span class="number">5</span>p %c - %m%n</span><br><span class="line">log4j.logger.extProfile=INFO, extProfile#日志级别是INFO,标签是extProfile</span><br><span class="line">log4j.additivity.extProfile=false;#输出到指定文件extProfile.log中</span><br><span class="line"></span><br><span class="line">#userProfile log\uff08\u8bb0\u5f55\u4fee\u6539\u5bc6\u7801\uff0c\u627e\u56de\u5bc6\u7801\uff0c\u4fee\u6539\u90ae\u7bb1\uff0c\u4fee\u6539\u624b\u673a\u53f7\uff09</span><br><span class="line">log4j.appender.extProfile=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.extProfile.File=logs/extProfile.log#输出到resin根目录的logs文件夹,log4j会自动生成目录和文件</span><br><span class="line">log4j.appender.extProfile.MaxFileSize=20480KB#超过20M就重新创建一个文件</span><br><span class="line">log4j.appender.extProfile.MaxBackupIndex=<span class="number">10</span></span><br><span class="line">log4j.appender.extProfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.extProfile.layout.ConversionPattern=%d [%t] %-<span class="number">5</span>p %c - %m%n</span><br></pre></td></tr></table></figure><ul><li>Java端控制代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">"text/html"</span> session=<span class="string">"false"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;&lt;%<span class="meta">@page</span></span><br><span class="line">...</span><br><span class="line">org.apache.commons.logging.Log,</span><br><span class="line">org.apache.commons.logging.LogFactory</span><br><span class="line"><span class="string">"%&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Log extProfile  = LogFactory.getLog("</span>extProfile<span class="string">");</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">if (!item.isFormField()) &#123;</span></span><br><span class="line"><span class="string">       String fileExt = StringUtils.substringAfterLast(item.getName(), "</span>.<span class="string">").toLowerCase();</span></span><br><span class="line"><span class="string">       extProfile.info("</span>upfile type is : [ <span class="string">"+fileExt +"</span> ]<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Log4j简介&quot;&gt;&lt;a href=&quot;#一、Log4j简介&quot; class=&quot;headerlink&quot; title=&quot;一、Log4j简介&quot;&gt;&lt;/a&gt;一、Log4j简介&lt;/h3&gt;&lt;p&gt;Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)
      
    
    </summary>
    
    
      <category term="JAVA框架" scheme="https://github.com/learn666-gif/categories/JAVA%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="log4j" scheme="https://github.com/learn666-gif/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>JAVA框架_Spring</title>
    <link href="https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_Spring/"/>
    <id>https://github.com/learn666-gif/2020/05/16/JAVA%E6%A1%86%E6%9E%B6_Spring/</id>
    <published>2020-05-16T07:05:08.000Z</published>
    <updated>2020-05-23T10:24:53.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念相关"><a href="#概念相关" class="headerlink" title="概念相关"></a>概念相关</h2><h3 id="spring-是什么"><a href="#spring-是什么" class="headerlink" title="spring 是什么"></a>spring 是什么</h3><ul><li>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC(Inverse Of Control: 反转控制)和 AOP(Aspect Oriented Programming:面向切面编程)为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术</li></ul><h3 id="spring-的优势"><a href="#spring-的优势" class="headerlink" title="spring 的优势"></a>spring 的优势</h3><ul><li>方便解耦，简化开发</li></ul><p>通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造 成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可 以更专注于上层的应用。</p><ul><li>AOP 编程的支持</li><li>声明式事务的支持</li><li>方便程序的测试</li><li>方便集成各种优秀框架 Spring 可以降低各种框架的使用难度，提供了对各种优秀框架(Struts、Hibernate、Hessian、Quartz 等)的直接支持。</li><li>降低 JavaEE API 的使用难度 Spring 对 JavaEE API(如 JDBC、JavaMail、远程调用等)进行了薄薄的封装层，使这些 API 的使用难度大为降低。</li></ul><h2 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调 用模块的方式以及通过界面传送数据的多少</li></ul><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><h4 id="类之间的耦合"><a href="#类之间的耦合" class="headerlink" title="类之间的耦合"></a>类之间的耦合</h4><ul><li>使用反射来创建对象，避免使用new 关键字</li><li>通过读取配置文件来获取要创建的对象全限定类名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 耦合性高</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">//全限定类名写死</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/easy"</span>,<span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">final</span> PreparedStatement pstm = connection.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line">        <span class="keyword">final</span> ResultSet resultSet = pstm.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultSet.close();</span><br><span class="line">        pstm.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="方法间的耦合-需要做到：编译器不依赖，执行期再依赖"><a href="#方法间的耦合-需要做到：编译器不依赖，执行期再依赖" class="headerlink" title="方法间的耦合 需要做到：编译器不依赖，执行期再依赖"></a>方法间的耦合 需要做到：编译器不依赖，执行期再依赖</h4><h3 id="创建Bean对象"><a href="#创建Bean对象" class="headerlink" title="创建Bean对象"></a>创建Bean对象</h3><ul><li><p>Bean：在计算机英语中，为可重用组件的含义</p></li><li><p>JavaBean: Javabean并不为实体类，实体类只是其一部分，其是用Java语言编写的可重用组件</p></li><li><p>它是创建其service 和 dao 对象的</p><ol><li><p>一个配置文件进行配置service和dao  </p><blockquote><p>配置内容：唯一标识=全限定类名(key=value)</p></blockquote><blockquote><p>配置文件：xml或者properties</p></blockquote></li><li><p>通过读取配置文件中的配置内容，反射创建对象</p></li></ol></li></ul><h3 id="工厂模式解藕合"><a href="#工厂模式解藕合" class="headerlink" title="工厂模式解藕合"></a>工厂模式解藕合</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/ioc.png" alt=""></p><ul><li>其产生的为多例，每次使用都会新创建一个实例,效率会低于单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">## bean.properties</span><br><span class="line"></span><br><span class="line">accountService=com.jwang.service.impl.AccountServiceImpl</span><br><span class="line">accountDao=com.jwang.dao.impl.AccountDaoImpl</span><br><span class="line"></span><br><span class="line">## BeanFactory</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用静态代码块为其赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实列化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//读取流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">            System.out.println(bean);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private IAccountDao accountDao = new AccountDaoImpl();</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = (IAccountDao)BeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountDao.saveAcccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟表现层servlet 调用业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            IAccountService as = (IAccountService)BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">            as.saveAccount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">com.jwang.dao.impl.AccountDaoImpl@<span class="number">1218025</span>c</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">816f</span>27d</span><br><span class="line">保存账户完成</span><br><span class="line"><span class="number">1</span></span><br><span class="line">com.jwang.dao.impl.AccountDaoImpl@<span class="number">87</span>aac27</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">3e3</span>abc88</span><br><span class="line">保存账户完成</span><br><span class="line"><span class="number">1</span></span><br><span class="line">com.jwang.dao.impl.AccountDaoImpl@<span class="number">6</span>ce253f1</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">53</span>d8d10a</span><br><span class="line">保存账户完成</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>使用单例，使其只创建一次对象 让其保存在一个容器中 后期就不用反复创建</li><li>使用单例，在业务层和持久层没有值的改变，其效果更好，不会出现线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line">    <span class="comment">//定义一个Map用于存放需要创建的对象--容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用静态代码块为其赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实列化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//读取流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中的所有key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历取key</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取bean对象 --单例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">1218025</span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line">保存账户完成</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">1218025</span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line">保存账户完成</span><br><span class="line">com.jwang.service.impl.AccountServiceImpl@<span class="number">1218025</span>c</span><br><span class="line"><span class="number">1</span></span><br><span class="line">保存账户完成</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><h2 id="Spring的IoC"><a href="#Spring的IoC" class="headerlink" title="Spring的IoC"></a>Spring的IoC</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 把对象的创建交给Spring管理 唯一标识和全限定类名--&gt;</span><br><span class="line">    &lt;bean id="accountService" class="com.jwang.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id="accountDao" class="com.jwang.dao.impl.AccountDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取soring的Ioc核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        IAccountDao ad = ac.getBean(<span class="string">"accountDao"</span>, IAccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(as);</span><br><span class="line">        System.out.println(ad);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/DI.jpg" alt=""></p><h3 id="ApplicationContext三个常用实现类"><a href="#ApplicationContext三个常用实现类" class="headerlink" title="ApplicationContext三个常用实现类"></a>ApplicationContext三个常用实现类</h3><ul><li>ClassPathXmlApplicationContext：加载类路径下的配置文件，要求配置文件必须在类路径下</li><li>FileSystemXmlApplicationContext：加载磁盘任意路径下的配置文件（必须有访问权限）绝对路径</li><li>AnnotationConfigApplicationContext：读取注解创建容器</li></ul><h3 id="核心容器的两个接口"><a href="#核心容器的两个接口" class="headerlink" title="核心容器的两个接口"></a>核心容器的两个接口</h3><h4 id="ApplicationContext：一般使用该接口，可以判断是否是单例"><a href="#ApplicationContext：一般使用该接口，可以判断是否是单例" class="headerlink" title="ApplicationContext：一般使用该接口，可以判断是否是单例"></a>ApplicationContext：一般使用该接口，可以判断是否是单例</h4><ul><li>构建核心容器时，创建对象采取的是立即加载的方式，只要一读取配置文件马上就创建配置文件中的对象(单例对象)</li></ul><h4 id="BeanFactory："><a href="#BeanFactory：" class="headerlink" title="BeanFactory："></a>BeanFactory：</h4><ul><li>创建对象采取延迟加载的方式，在根据id获取对象时才创建对象（多例对象使用）</li></ul><h2 id="spring对bean的管理细节"><a href="#spring对bean的管理细节" class="headerlink" title="spring对bean的管理细节"></a>spring对bean的管理细节</h2><h3 id="创建bean的三种方法"><a href="#创建bean的三种方法" class="headerlink" title="创建bean的三种方法"></a>创建bean的三种方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取soring的Ioc核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        System.out.println(as);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用默认构造函数创建：在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="accountService" class="com.jwang.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>使用普通工厂中的方法创建对象 （使用某个类中的方法创建对象，并存入Spring容器）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;bean id="instanceFactory" class="com.jwang.factory.InstanceFactory"&gt;&lt;/bean&gt;</span><br><span class="line"> &lt;bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"&gt;&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个工厂类（jar包，无法修改源码)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入Spring容器）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="accountService" class="com.jwang.factory.StaticFactory" factory-method="getAccountService"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="bean对象的作用范围"><a href="#bean对象的作用范围" class="headerlink" title="bean对象的作用范围"></a>bean对象的作用范围</h3><ul><li>bean标签的scope属性：用于指定bean的作用范围</li><li>取值：<ul><li>singleton：单例的 - 默认值) </li><li>prototype：多例</li><li>request：作用于web的请求范围：</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，就是session</li></ul></li><li>集群：一个应用在多个服务器上部署则有多个ip地址，其访问网址的请求通过负载均衡访问，其产生的session在多个服务器上的公用session就是global-session</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/01/%E5%85%A8%E5%B1%80session.png" alt=""></p><h3 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h3><ul><li>单例对象：当容器创建时对象就产生，直到容器销毁，对象才销毁，即单例对象的生命周期与容器相同</li><li>多例对象：使用对象时Spring框架为我们创建，只要使用过程中就一直存在，当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收机制回收</li><li>bean标签生命周期属性：<ul><li>init-method=”初始化调用的该类中方法名”</li><li>destroy-method=”对象销毁调用的方法名”</li></ul></li></ul><h2 id="Spring的依赖注入DI"><a href="#Spring的依赖注入DI" class="headerlink" title="Spring的依赖注入DI"></a>Spring的依赖注入DI</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul><li><p>Dependency Injection：依赖关系的维护就为依赖注入</p></li><li><p>IOC的作用：降低程序间的耦合（依赖关系）</p></li><li><p>依赖关系的管理：交给Spring维护，当前类中需要用到其他类的对象，由Spring提供，只需要在配置文件中说明</p></li><li><p>分类：</p><ul><li>基本类型和String</li><li>其他bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul></li><li><p>注入方法（如果经常变化的数据，并不适用注入方式）：</p><ul><li>使用构造函数提供</li><li>使用set方法提供</li><li>使用注解  </li></ul></li></ul><h3 id="构造函数注入（不推荐）"><a href="#构造函数注入（不推荐）" class="headerlink" title="构造函数注入（不推荐）"></a>构造函数注入（不推荐）</h3><ul><li><p>使用的标签：constructor-arg</p></li><li><p>出现位置：bean标签内部</p></li><li><p>标签属性：</p><ul><li>type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型</li><li>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始</li><li>name：用于指定给构造函数中指定名称的参数赋值（常用）</li><li>value：用于提供基本类型和string类型的数据</li><li>ref：用于指定其他的bean类型的类型数据，它指在spring的Ioc核心容器中出现的bean对象，比如配置的Data类</li></ul></li><li><p>优势：在获取bean对象时，注入数据是必须的，否则对象创建失败</p></li><li><p>弊端：改变类（bean对象）的实例化方式，在创建对象时，如果用不到其中某些参数，也必须提供</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">## 模拟工厂类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果经常变化的数据，并不适用注入方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"accountService ...."</span>+name+<span class="string">","</span>+age+<span class="string">","</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 模拟使用</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//根据id获取bean对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">## bean依赖注入，name的属性顺序需要一致</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"accountService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.service.impl.AccountServiceImpl"</span>&gt;</span><br><span class="line">        &lt;constructor-arg name="name" value="ss"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name="age" value="12"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">        &lt;constructor-arg name="birthday" ref="now"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置日期对象--&gt;</span><br><span class="line">    &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="set方法注入-常用"><a href="#set方法注入-常用" class="headerlink" title="set方法注入(常用)"></a>set方法注入(常用)</h3><ul><li><p>使用的标签：property </p></li><li><p>出现位置：bean标签内部</p></li><li><p>标签属性：</p><ul><li>name：用于指定注入时所调用的set方法名称(setUserName – userName)</li><li>value：用于提供基本类型和string类型的数据</li><li>ref：用于指定其他的bean类型的类型数据，它指在spring的Ioc核心容器中出现的bean对象，比如配置的Data类</li></ul></li><li><p>优势：创建对象时没有明确的限制，可以直接使用默认构造函数</p></li><li><p>弊端：如果某个成员必须有值，则获取对象是有可能set方法没有执行</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置日期对象--&gt;</span><br><span class="line">&lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"accountService2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.service.impl.AccountServiceImpl2"</span>&gt;</span><br><span class="line">    &lt;property name="userName" value="tesa"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="age" value="23"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="复杂类型注入-集合类型植入"><a href="#复杂类型注入-集合类型植入" class="headerlink" title="复杂类型注入/集合类型植入"></a>复杂类型注入/集合类型植入</h3><ul><li>用于给list结构集合注入的标签：list array set</li><li>用于给Map结构集合注入的标签：props map</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"accountService3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jwang.service.impl.AccountServiceImpl3"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"mystrs"</span>&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">                &lt;value&gt;aaa&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;bbb&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">"myMap"</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key="as" value="asa"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key="ad"&gt;&lt;value&gt;asa&lt;/value&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="基于注解的ioc以及ioc的使用"><a href="#基于注解的ioc以及ioc的使用" class="headerlink" title="基于注解的ioc以及ioc的使用"></a>基于注解的ioc以及ioc的使用</h2><h3 id="spring中ioc的常用注解"><a href="#spring中ioc的常用注解" class="headerlink" title="spring中ioc的常用注解"></a>spring中ioc的常用注解</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;!--告知Spring在创建容器时，需要扫描的包，配置所需要的标签不在bean中，而是一个名称为context名称空间和约束中  --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.jwang"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><h4 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h4><ul><li>和XML配置文件中编写一个bean标签实现的功能一样</li><li>@Component：将当前对象存入spring容器中<ul><li>value：用于指定bean的id，不写时，默认值为类名，首字母变小写 </li></ul></li><li>与Component的使用一样，但提供了明确的三层使用的注解，更加清晰（可以混用，都继承Component）<ul><li>@Controller：表现层</li><li>@Service：业务层</li><li>@Repository：持久层</li></ul></li></ul><h4 id="用于注入数据的"><a href="#用于注入数据的" class="headerlink" title="用于注入数据的"></a>用于注入数据的</h4><ul><li>在bean标签中写一个property标签作用一样</li><li>@Autowired：自动按照类型注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功；若ioc容器中没有bean类型和要注入的变量类型匹配，则报错；若有多个匹配时，<ul><li>位置：成员变量和方法上等，在使用注解注入时，set方法就不是必须的</li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/02/%E8%87%AA%E5%8A%A8%E6%8C%89%E7%85%A7%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5.png" alt=""></p><ul><li>Qualifier：在按照类中注入的基础上再按照名称注入，在给类成员注入时不能单独使用，但是在给方法参数注入时可以<ul><li>value：用于指定注入bean的id</li></ul></li><li>Resource：直接按照bean的id注入，可以独立使用<ul><li>name：用于指定bean的id  </li></ul></li></ul><blockquote><p>以上注解都只能注入其他bean类型的数据，而基本类型和String类型无法使用，另外，集合数据类型的注入只能使用xml实现</p></blockquote><ul><li>@Value：用于注入基本类型和String类型的数据<ul><li>value：用于指定数据的值，它可以使用Spring中的SqEl(也就是spring的el表达式)</li><li>sqel表达式：${表达式} </li></ul></li></ul><h4 id="用于改变作用范围的"><a href="#用于改变作用范围的" class="headerlink" title="用于改变作用范围的"></a>用于改变作用范围的</h4><ul><li>在bean标签中使用scope属性实现功能一样</li><li>@Scope：用于指定bean的作用范围<ul><li>value：指定范围的取值:singleton/propertype </li></ul></li></ul><h4 id="用于改变生命周期"><a href="#用于改变生命周期" class="headerlink" title="用于改变生命周期"></a>用于改变生命周期</h4><ul><li>与bean标签的init-method以及destroy-method作用一样</li><li>@PreDestory：用于指定销毁方法</li><li>@PostConstruct：用于指定初始化方法</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--告知spring在创建容器时要扫描的包 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.jwang"&gt;&lt;/context:component-scan&gt;</span><br><span class="line">    &lt;!--配置queryRunner对象(单例-多例) --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"runner"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> scope=<span class="string">"prototype"</span>&gt;</span><br><span class="line">        &lt;!-- 注入数据源（构造函数）--&gt;</span><br><span class="line">        &lt;constructor-arg name="ds" ref="dataSources"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--配置bean对象 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSources"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line">        &lt;!--连接数据库的必备信息 --&gt;</span><br><span class="line">        &lt;property name="driverClass" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="jdbcUrl" value="jdbc:mysql://localhost:3306/easy"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="user" value="root"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="password" value="123456"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h4><ul><li><p>Configuration: 指定当前类是一个配置类,当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写，只要不是其参数，就需要加上注解</p></li><li><p>ConponentScan：用于通过注解指定spring在创建容器时需要扫描的包</p><ul><li>value：它和basePackages一样，都是用于指定创建容器时要扫描的包，使用此注解等于在xml中配置了<code>&lt;context:component-scan base-package=&quot;com.jwang&quot;&gt;&lt;/context:component-scan&gt;</code></li></ul></li><li><p>Bean：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</p><ul><li>name：用于指定bean的id 不写，默认值为当前方法的名称</li><li>使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象 </li></ul></li><li><p>Import：用于导入其他配置类</p><ul><li>value：用于指定其他配置类的字节码，当使用该import注解后，有import注解的类就是主配置（父配置类） 导入的都是子配置类（子配置可以不写configuration和conponentscan） </li></ul></li><li><p>PropertySource：用于指定properties文件的位置</p><ul><li>value：指定文件的名称和路径<ul><li>classpath关键字：表示类路径下  </li></ul></li></ul></li><li><p>Qualifier：指定用哪一个id的bean， 可以写在对象前</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.jwang"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建一个QueryRunner对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">creatQueryRunner</span><span class="params">(@Qualifier(<span class="string">"id1"</span>)</span> DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"id1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">creatDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">            ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            ds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/easy"</span>);</span><br><span class="line">            ds.setUser(<span class="string">"root"</span>);</span><br><span class="line">            ds.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/02/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        final ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> IAccountService as = ac.getBean(<span class="string">"accountService"</span>, IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring整合junit"><a href="#Spring整合junit" class="headerlink" title="Spring整合junit"></a>Spring整合junit</h4><ul><li><p>应用程序的入口：main方法</p></li><li><p>junit单元测试中，没有main方法也能执行； junit集成了一个main方法 ，该方法就会判断当前测试类中哪些方法有 @Test注解 junit就让有Test注解的方法执行</p></li><li><p>junit不会管我们是否采用spring框架，在执行测试方法时，junit根本不知道我们是不是使用了spring框架，所以也就不会为我们读取配置文件/配置类创建spring核心容器</p></li><li><p>当测试方法执行时，没有Ioc容器，就算写了Autowired注解，也无法实现注入</p></li><li><p>解决：导入spring整合junit的jar（坐标）使用Junit提供的一个注解把原有main方法替换替换成spring提供的@Runwith ,告知spring运行期，spring和ioc创建是基于创建是基于xml还是注解，并说明位置@ContextConfiguration(location:指定xml文件位置，加classpath关键字，表示在类路径下/classes：指定注解类所在位置)</p></li><li><p>当我们使用spring5.x版本时，要求junit的jar包必须是4.1.2及以上</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// @<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:bean.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring的Aop"><a href="#Spring的Aop" class="headerlink" title="Spring的Aop"></a>Spring的Aop</h2><h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><ul><li>AOP:全称是 Aspect Oriented Programming 即:面向切面编程</li><li>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的 基础上，对我们的已有方法进行增强。</li><li>实现方式：动态代理技术</li><li>spring中的aop：配置的方式</li></ul><h3 id="动态代理技术"><a href="#动态代理技术" class="headerlink" title="动态代理技术"></a>动态代理技术</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>字节码随用随创建，随用随加载。 </li><li>它与静态代理的区别也在于此。因为静态代理是字节码一上来就创建好，并完成加载。 </li><li>装饰者模式就是静态代理的一种体现。</li></ul><h4 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h4><ul><li>提供者:JDK 官方的 Proxy 类。 要求:被代理类最少实现一个接口。</li><li>涉及的类：Proxy 提供者：JDK官方</li><li>创建代理对象：使用Proxy类的newProxyInstance方法</li><li>创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用</li><li>newProxyInstance方法参数<ul><li>ClassLoader：类加载器 用于加载代理对象字节码的，和被代理对象使用相同的类加载器。固定写法</li><li>Class[]：字节码数组 用于代理对象和被代理对象有相同方法，固定写法</li><li>InvocationHandler：用于提供增强的代码 让我们写如何代理。一般写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的，此接口谁用谁写 </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        </span><br><span class="line">       IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy   代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method  当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args    当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>        和被代理对象方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//提供增强的代码</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于子类的动态代理"><a href="#基于子类的动态代理" class="headerlink" title="基于子类的动态代理"></a>基于子类的动态代理</h4><ul><li>导入依赖</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1_3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li>涉及的类：Enhancer</li><li>提供者：第三方cglib库</li><li>如何创建代理对象：<ul><li>使用Enhancer类中的create方法</li></ul></li><li>创建代理对象的要求：<ul><li>被代理类不能是最终类</li></ul></li><li>create方法的参数：<ul><li>Class：字节码.  它是用于指定被代理对象的字节码。</li><li>Callback：用于提供增强的代码   它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写。 我们一般写的都是该接口的子接口实现类：MethodInterceptor</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        </span><br><span class="line">        Producer cglibProducer = (Producer)Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-中的AOP"><a href="#Spring-中的AOP" class="headerlink" title="Spring 中的AOP"></a>Spring 中的AOP</h3><h4 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP 相关术语"></a>AOP 相关术语</h4><ul><li>Joinpoint(连接点 ):所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。业务层的方法</li><li>Pointcut(切入点 ):所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。 invoke中的被增强方法</li><li>Advice(通知/增强):所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。 通知的类型:前置通知,后置通知,异常通知,最终通知,环绕通知。</li><li>Introduction(引介 ):引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。 </li><li>Target(目标对象 ):代理的目标对象。被代理对象</li><li>Weaving(织入 ): 是指把增强应用到目标对象来创建新的代理对象的过程。spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。 </li><li>Proxy(代理) :一个类被 AOP 织入增强后，就产生一个结果代理类。 代理对象</li><li>Aspect(切面 ):是切入点和通知(引介)的结合。</li></ul><h3 id="spring-中的-AOP-要明确的"><a href="#spring-中的-AOP-要明确的" class="headerlink" title="spring 中的 AOP 要明确的"></a>spring 中的 AOP 要明确的</h3><h4 id="开发阶段-我们做-的"><a href="#开发阶段-我们做-的" class="headerlink" title="开发阶段(我们做 的)"></a>开发阶段(我们做 的)</h4><ul><li>编写核心业务代码(开发主线):大部分程序员来做，要求熟悉业务需求。 </li><li>把公用代码抽取出来，制作成通知。(开发阶段最后再做):AOP 编程人员来做。 </li><li>在配置文件中，声明切入点与通知间的关系，即切面。:AOP 编程人员来做。</li></ul><h4 id="运行阶段-Spring-框架完成的"><a href="#运行阶段-Spring-框架完成的" class="headerlink" title="运行阶段(Spring 框架完成的)"></a>运行阶段(Spring 框架完成的)</h4><ul><li>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对 象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</li></ul><h4 id="代理的选择"><a href="#代理的选择" class="headerlink" title="代理的选择"></a>代理的选择</h4><ul><li>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</li></ul><h3 id="基于-XML-的-AOP-配置"><a href="#基于-XML-的-AOP-配置" class="headerlink" title="基于 XML 的 AOP 配置"></a>基于 XML 的 AOP 配置</h3><ul><li>配置spring的ioc把Service对象配置进来</li></ul><h4 id="spring中基于xml的aop配置"><a href="#spring中基于xml的aop配置" class="headerlink" title="spring中基于xml的aop配置"></a>spring中基于xml的aop配置</h4><ul><li>1.把通知bean也交给spring 来管理</li><li>2.使用aop：config标签来表明开始aop配置</li><li>3.使用aop:aspect标签表明开始配置切面<ul><li>id: 给切面一个唯一标志</li><li>ref: 指定通知类bean的ID</li></ul></li><li>4.在aop:aspect标签内部使用对应标签来配置通知类型(现在的例子是让pringLog方法在切入点方法执行前，所以是前置通知)<ul><li>aop:before：表示前置通知（在切入点方法执行之前） /aop:after-returning: 后置通知 （在切入点方法正常执行之后）/aop:after-throwing ：异常通知（在切入点方法异常执行后）/ aop:after：最后通知（相当于finally）</li><li>method：用于指定Logger类中的哪个方法是前置通知</li><li>pointcut：用于指定切入点表达式，其含义指对业务层中哪一个方法增强</li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/03/%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B.jpg" alt=""></p><h4 id="切入点表达式："><a href="#切入点表达式：" class="headerlink" title="切入点表达式："></a>切入点表达式：</h4><ul><li><p>关键字：execution（表达式）</p></li><li><p>表达式：访问修饰符 返回值 包名.包名.方法名（参数列表）</p></li><li><p>标准写法：execution(public void com.jwang.service.impl.AccountServiceImpl.saveAccount()</p></li><li><p>访问修饰符可以省略</p></li><li><p>返回值可以使用通配符，表示任意返回值</p></li><li><p>包名可以使用通配符，表示任意包。但有几级包，就需要几个*.</p></li><li><p>包名可以使用..表示当前包及其子包</p></li><li><p>类名和方法名都可以使用* 来实现通配</p></li><li><p>参数列表：可以直接写数据类型：基本数据类型直接写 int 引用类型写包名.类名的方法：java.lang.String 可以使用通配符表示任意类型(必须有参数) ..表示有无参数均可，有参数可以是任意类型</p></li><li><p>全通配写法：<code>* *..*.*(..)</code></p></li><li><p>实际写法：切到业务层实现类下的所有方法: * com.jwang.service.impl.<em>.</em>(..)</p></li><li><p>配置切入点表达式  id属性用于指定表达式的唯一标志，expression属性用于指定表达式内容</p></li></ul><blockquote><p>此标签写在aop:aspect标签内部只能当前切面可用</p></blockquote><blockquote><p>此标签写在外面，此时所有切面都可以使用，其必须在其之前（有顺序要求）</p></blockquote> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--配置aop --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">"ptl"</span> expression=<span class="string">"execution(* com.jwang.service.impl.*.*(..))"</span>/&gt;</span><br><span class="line">        &lt;!--配置切面 --&gt;</span><br><span class="line">        &lt;aop:aspect id=<span class="string">"logAdvice"</span> ref=<span class="string">"logger"</span>&gt;</span><br><span class="line">            &lt;!--配置通知类型，建立通知方法和切入点方法的关联 --&gt;</span><br><span class="line">            &lt;aop:before method="printLog" pointcut-ref="ptl"&gt;&lt;/aop:before&gt;</span><br><span class="line">            &lt;!--配置切入点表达式  id属性用于指定表达式的唯一标志，expression属性用于指定表达式内容--&gt;</span><br><span class="line">&lt;!--            &lt;aop:pointcut id=<span class="string">"ptl"</span> expression=<span class="string">"execution(* com.jwang.service.impl.*.*(..))"</span>/&gt;--&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h4 id="前置通知xml配置例"><a href="#前置通知xml配置例" class="headerlink" title="前置通知xml配置例"></a>前置通知xml配置例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置spring的ioc把Service对象配置进来--&gt;</span><br><span class="line">    &lt;bean id="service" class="com.jwang.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Logger --&gt;</span><br><span class="line">    &lt;bean id="logger" class="com.jwang.utils.Logger"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置aop --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--配置切面 --&gt;</span><br><span class="line">        &lt;aop:aspect id=<span class="string">"logAdvice"</span> ref=<span class="string">"logger"</span>&gt;</span><br><span class="line">            &lt;!--配置通知类型，建立通知方法和切入点方法的关联 在业务层service的saveAccount()方法前执行 printLog--&gt;</span><br><span class="line">            &lt;aop:before method=<span class="string">"printLog"</span> pointcut=<span class="string">"execution(</span></span><br><span class="line">            public void com.jwang.service.impl.AccountServiceImpl.saveAccount())"&gt;&lt;/aop:before&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="配置环绕通知"><a href="#配置环绕通知" class="headerlink" title="配置环绕通知"></a>配置环绕通知</h4><ul><li>配置环绕通知后，切入点方法没有执行，通知方法执行的原因：动态代理中的环绕通知有明确的切入点方法调用，而我们的代码中没有</li><li>解决：Spring框架为我们提供了一个接口，PreceedingJoinPoint。该接口的方法proceed(）此方法相当于明确调用切入点方法。该接口作为环绕通知的方法参数，在程序执行时，Spring框架会为我们提供该接口的实现类供我们使用</li><li>Spring的环绕通知：是Spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bean.xml添加</span><br><span class="line">&lt;aop:around method=<span class="string">"aroudPrintLog"</span> pointcut-ref=<span class="string">"ptl"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;环绕通知方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroudPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">    Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Object[] args = pjp.getArgs();<span class="comment">//得到方法执行时需要的参数</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--前置"</span>);</span><br><span class="line"></span><br><span class="line">        rtValue = pjp.proceed(args); <span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--后置"</span>);</span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--异常"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的aroudprintLog开始记录日志--最终"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/03/%E9%80%9A%E7%9F%A5%E7%9A%84%E7%B1%BB%E5%9E%8B.jpg" alt=""></p><h3 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h3><ul><li>Spring的其执行顺序有一定问题，但环绕通知没有问题（是自己写的）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!-- 配置spring创建容器时要扫描的包--&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.jwang"</span>/&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"> </span><br><span class="line"> &gt;&gt;&gt;impl </span><br><span class="line">    <span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示当前类是切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于打印日志，计划让其在切入点方法执行前执行（也就是业务层方法执行后）</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.jwang.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"tt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger中的printLog开始记录日志"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring中的JdbcTemplate"><a href="#Spring中的JdbcTemplate" class="headerlink" title="Spring中的JdbcTemplate"></a>Spring中的JdbcTemplate</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt=""></p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li>它是 spring 框架中提供的一个对象，是对原始 Jdbc API 对象的简单封装。spring 框架为我们提供了很多 的操作模板类。</li><li>操作关系型数据的: JdbcTemplate，HibernateTemplate </li><li>操作nosql 数据库的: RedisTemplate</li><li>操作消息队列的: JmsTemplate</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/jdbctemplate%E5%92%8Cqueryrunner%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt=""></p><h3 id="JdbcTemplate-对象的创建"><a href="#JdbcTemplate-对象的创建" class="headerlink" title="JdbcTemplate 对象的创建"></a>JdbcTemplate 对象的创建</h3><ul><li>使用前提：包在：spring-jdbc-5.0.2.RELEASE.jar 中，我们在导包的时候，除了要导入这个 jar 包<br>外，还需要导入一个 spring-tx-5.0.2.RELEASE.jar(它是和事务相关的)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/easy"</span>);</span><br><span class="line">        ds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        ds.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        jt.setDataSource(ds);</span><br><span class="line">        jt.execute(<span class="string">"insert into account(name, money)values('ccc', 1000)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用bean注解的方式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:lang=<span class="string">"http://www.springframework.org/schema/lang"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/lang</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/lang/spring-lang.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"jdbcTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/easy"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        JdbcTemplate jt = ac.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        jt.execute(<span class="string">"insert into account(name, money)values('eee', 1000)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JdbcTemplate 的crud操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        JdbcTemplate jt = ac.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//crud操作</span></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        jt.update(<span class="string">"insert into account(name, money)values(?,?)"</span>, <span class="string">"eed"</span>,<span class="number">3333f</span>);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        jt.update(<span class="string">"update account set name = ?, money=? where id = ?"</span>, <span class="string">"eee"</span>,<span class="number">122f</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        jt.update(<span class="string">"delete from account where id = ?"</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ?"</span>,</span><br><span class="line">                <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), 999<span class="title">f</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Integer count = jt.queryForObject(<span class="string">"select count(*) from account where money &gt;= ?"</span>, Integer<span class="class">.<span class="keyword">class</span>, 1000<span class="title">f</span>)</span>;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring中的事务控制的API"><a href="#spring中的事务控制的API" class="headerlink" title="spring中的事务控制的API"></a>spring中的事务控制的API</h3><ul><li>第一:JavaEE 体系进行分层开发，事务处理位于业务层，Spring 提供了分层设计业务层的事务处理解决方 案。</li><li>第二:spring 框架为我们提供了一组事务控制的接口。具体在后面的第二小节介绍。这组接口是在 spring-tx-5.0.2.RELEASE.jar 中。</li><li>第三:spring 的事务控制都是基于 AOP 的，它既可以使用编程的方式实现，也可以使用配置的方式实现。我 们学习的重点是使用配置的方式实现。</li></ul><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><ul><li>此接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法 在开发中都是使用它的实现类<ul><li>org.springframework.jdbc.datasource.DataSourceTransactionManager 使用 Spring JDBC 或 iBatis 进行持久化数据时使用</li><li>org.springframework.orm.hibernate5.HibernateTransactionManager 使用 Hibernate 版本进行持久化数据时使用</li></ul></li></ul><h4 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h4><h2 id="基于-XML-的声明式事务控制-配置方式"><a href="#基于-XML-的声明式事务控制-配置方式" class="headerlink" title="基于 XML 的声明式事务控制(配置方式)"></a>基于 XML 的声明式事务控制(配置方式)</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul><li>第一步:拷贝必要的 jar 包到工程的 lib 目录</li><li>第二步:创建 spring 的配置文件并导入约束</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">此处需要导入 aop 和 tx 两个名称空间&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> </span><br><span class="line">xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span>xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop </span></span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步:准备数据库表和实体类</li><li>第四步:编写业务层接口和实现类</li><li>第五步:编写 Dao 接口和实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where id = ? "</span>,</span><br><span class="line">                <span class="keyword">new</span> AccountRowMapper(),id);</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()?<span class="keyword">null</span>:list.get(<span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = getJdbcTemplate().query(<span class="string">"select * from account where name = ? "</span>,</span><br><span class="line">                <span class="keyword">new</span> AccountRowMapper(),name); </span><br><span class="line">        <span class="keyword">if</span>(list.isEmpty())&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一，不是只有一个账户对象"</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>); &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        getJdbcTemplate().update(<span class="string">"update account set money = ? where id = ? "</span>,</span><br><span class="line">                account.getMoney(),account.getId()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的封装类 RowMapper 的实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(); </span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>)); </span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>)); </span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>)); </span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第六步:在配置文件中配置业务层和持久层</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 配置 service --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"accountService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span><br><span class="line">    &lt;property name="accountDao" ref="accountDao"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置 dao --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"accountDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span><br><span class="line">    &lt;!-- 注入 dataSource --&gt;</span><br><span class="line">    &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置数据源 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">&lt;property name="driverClassName" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt; &lt;property name="url" value="jdbc:mysql:///spring_day04"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="username" value="root"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="password" value="1234"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="基于xml的配置事务步骤"><a href="#基于xml的配置事务步骤" class="headerlink" title="基于xml的配置事务步骤"></a>基于xml的配置事务步骤</h4><ul><li>第一步:配置事务管理器</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置一个事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">    &lt;!-- 注入 DataSource --&gt;</span><br><span class="line">    &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步:配置事务的通知引用事务管理器</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务的配置 --&gt;&lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步:配置事务的属性</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--在 tx:advice 标签内部 配置事务的属性 --&gt; </span><br><span class="line"></span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;!-- 指定方法名称:是业务核心方法read-only:是否是只读事务。默认 <span class="keyword">false</span>，不只读。</span><br><span class="line">isolation:指定事务的隔离级别。默认值是使用数据库的默认隔离级别。propagation:指定事务的传播行为。</span><br><span class="line">timeout:指定超时时间。默认值为:-<span class="number">1</span>。永不超时。</span><br><span class="line">rollback-<span class="keyword">for</span>:用于指定一 个异常，当 执行产生该 异常时，事 务回滚。</span><br><span class="line">产 生其他异常 ，事务不回 滚。没有默认值，任何异常都回滚。 </span><br><span class="line">no-rollback-<span class="keyword">for</span>:用于指定一个异常，当产生该异常时，事务不回滚，</span><br><span class="line">产生其他异常时，事务回滚。没有默认值，任何异常都回滚。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"*"</span> read-only=<span class="string">"false"</span> propagation=<span class="string">"REQUIRED"</span>/&gt; </span><br><span class="line">&lt;tx:method name="find*" read-only="true" propagation="SUPPORTS"/&gt;&lt;/tx:attributes&gt;</span><br></pre></td></tr></table></figure><ul><li>第四步:配置 AOP 切入点表达式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置 aop --&gt;&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 配置切入点表达式 --&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span> id=<span class="string">"pt1"</span>/&gt; </span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><ul><li>第五步:配置切入点表达式和事务通知的对应关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 aop:config 标签内部:建立事务的通知和切入点表达式的关系 --&gt; </span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"pt1"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="基于注解的事务配置"><a href="#基于注解的事务配置" class="headerlink" title="基于注解的事务配置"></a>基于注解的事务配置</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/%E6%B3%A8%E8%A7%A3AOP%E6%8E%A7%E5%88%B6%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png" alt=""></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ul><li>第一步:拷贝必备的 jar 包到工程的 lib 目录</li><li>第二步:创建 spring 的配置文件导入约束并配置扫描的包</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> </span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> </span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/tx </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd </span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt; </span><br><span class="line">    &lt;!-- 配置 spring 创建容器时要扫描的包 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.jwang"&gt;&lt;/context:component-scan&gt; </span><br><span class="line">    &lt;!-- 配置 JdbcTemplate--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"jdbcTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/easy"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>第三步:创建数据库表和实体类(与xml配置相同)</li><li>第四步:创建业务层接口和实现类并使用注解让 spring 管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的业务层实现类 */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123; </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao; </span><br><span class="line"><span class="comment">//其余代码和基于 XML 的配置相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第五步:创建 Dao 接口和实现类并使用注解让 spring 管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 账户的持久层实现类 */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123; </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">//其余代码和基于 XML 的配置相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务纯注解配置"><a href="#事务纯注解配置" class="headerlink" title="事务纯注解配置"></a>事务纯注解配置</h3><ul><li>第一步:配置事务管理器并注入数据源</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id="transactionManager"class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;&lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; </span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>第二步:在业务层使用@Transactional 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>) </span><br><span class="line"><span class="meta">@Transactional</span>(readOnly=<span class="keyword">true</span>,propagation=Propagation.SUPPORTS) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly=<span class="keyword">false</span>,propagation=Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targeName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据名称查询两个账户</span></span><br><span class="line">        Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">        Account target = accountDao.findAccountByName(targeName); </span><br><span class="line">        <span class="comment">//2.修改两个账户的金额 source.setMoney(source.getMoney()-money);//转出账户减钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);<span class="comment">//转入账户加钱 </span></span><br><span class="line">        <span class="comment">// 3.更新两个账户</span></span><br><span class="line">        accountDao.updateAccount(source); <span class="comment">//int i=1/0; accountDao.updateAccount(target); </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    该注解的属性和 xml 中的属性含义一致。</span><br><span class="line">        该注解可以出现在接口上，类上和方法上。 </span><br><span class="line">        出现接口上，表示该接口的所有实现类都有事务支持。</span><br><span class="line">        出现在类上，表示类中所有方法有事务支持 出现在方法上，表示方法有事务支持。 </span><br><span class="line">        以上三个位置的优先级:方法&gt;类&gt;接口</span><br></pre></td></tr></table></figure><ul><li>第三步:在配置文件中开启 spring 对注解事务的支持</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 开启 spring 对注解事务的支持 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>不使用 xml 的配置方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTxConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">//里面配置数据源，配置 JdbcTemplate,配置事务管理器。详细内容在下面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置jdbc-config"><a href="#配置jdbc-config" class="headerlink" title="配置jdbc config"></a>配置jdbc config</h4><ul><li>SpringConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring的配置类，相当于bean.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.itheima"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>,<span class="title">TransactionConfig</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line">@PropertySource("jdbcConfig.properties")</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JdbcConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和连接数据库相关的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JdbcTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TransactionConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和事务相关的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建事务管理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/blog/java/Spring/04/%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念相关&quot;&gt;&lt;a href=&quot;#概念相关&quot; class=&quot;headerlink&quot; title=&quot;概念相关&quot;&gt;&lt;/a&gt;概念相关&lt;/h2&gt;&lt;h3 id=&quot;spring-是什么&quot;&gt;&lt;a href=&quot;#spring-是什么&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="JAVA框架" scheme="https://github.com/learn666-gif/categories/JAVA%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Spring" scheme="https://github.com/learn666-gif/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb核心技术04--Cookie&amp;Session笔记</title>
    <link href="https://github.com/learn666-gif/2020/05/07/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF04--Cookie&amp;Session%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/learn666-gif/2020/05/07/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF04--Cookie&amp;Session%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-07T13:57:20.000Z</published>
    <updated>2020-05-11T04:00:47.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h3 id="基本要点"><a href="#基本要点" class="headerlink" title="基本要点"></a>基本要点</h3><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h2 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h2><p>概念：客户端会话技术，将数据保存到客户端</p><h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><ul><li>使用步骤：<ol><li>创建Cookie对象，绑定数据<ul><li>new Cookie(String name, String value) </li></ul></li><li>发送Cookie对象<ul><li>response.addCookie(Cookie cookie) </li></ul></li><li>获取Cookie，拿到数据<ul><li>Cookie[]  request.getCookies()  </li></ul></li></ol></li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/Cookie%E5%8E%9F%E7%90%86.bmp" alt=""></p><ul><li>基于响应头set-cookie和请求头cookie实现</li></ul><h3 id="cookie的细节"><a href="#cookie的细节" class="headerlink" title="cookie的细节"></a>cookie的细节</h3><h4 id="一次可不可以发送多个cookie"><a href="#一次可不可以发送多个cookie" class="headerlink" title="一次可不可以发送多个cookie?"></a>一次可不可以发送多个cookie?</h4><ul><li>可以</li><li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</li></ul><h4 id="cookie在浏览器中保存多长时间？"><a href="#cookie在浏览器中保存多长时间？" class="headerlink" title="cookie在浏览器中保存多长时间？"></a>cookie在浏览器中保存多长时间？</h4><ol><li>默认情况下，当浏览器关闭后，Cookie数据被销毁</li><li>持久化存储：<ul><li>setMaxAge(int seconds)<ol><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值</li><li>零：删除cookie信息</li></ol></li></ul></li></ol><h4 id="cookie能不能存中文？"><a href="#cookie能不能存中文？" class="headerlink" title="cookie能不能存中文？"></a>cookie能不能存中文？</h4><ul><li>在tomcat 8 之前 cookie中不能直接存储中文数据。<ul><li>需要将中文数据转码—一般采用URL编码(%E3)</li></ul></li><li>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</li></ul><h4 id="cookie共享问题？"><a href="#cookie共享问题？" class="headerlink" title="cookie共享问题？"></a>cookie共享问题？</h4><ol><li><p>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</p><ul><li><p>默认情况下cookie不能共享</p></li><li><p>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</p><ul><li>如果要共享，则可以将path设置为”/“</li></ul></li></ul></li></ol><ol start="2"><li>不同的tomcat服务器间cookie共享问题？<ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享<ul><li>setDomain(“.baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享</li></ul></li></ul></li></ol><h3 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h3><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li></ol><ul><li>作用：<ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul><h2 id="案例：记住上一次访问时间"><a href="#案例：记住上一次访问时间" class="headerlink" title="案例：记住上一次访问时间"></a>案例：记住上一次访问时间</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li><li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li></ol><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol><li>可以采用Cookie来完成</li><li>在服务器中的Servlet判断是否有一个名为lastTime的cookie<ol><li>有：不是第一次访问<ol><li>响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li><li>没有：是第一次访问<ol><li>响应数据：您好，欢迎您首次访问</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/Cookie%E6%A1%88%E4%BE%8B_%E8%AE%B0%E4%BD%8F%E4%B8%8A%E6%AC%A1%E8%AE%BF%E9%97%AE%E6%97%B6%E9%97%B4.bmp" alt=""></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jwang.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上次访问时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletCookieDemo1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletCookieDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span> &amp;&amp; cookies.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="keyword">final</span> String name = cookie.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line"></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line">                    str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line"></span><br><span class="line">                    value = URLDecoder.decode(value, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">                    response.getWriter().write(<span class="string">"欢迎再次回来，上次访问时间："</span>+value);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cookies==<span class="keyword">null</span> || cookies.length == <span class="number">0</span> || flag == <span class="keyword">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line">            str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>, str_date);</span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"首次访问"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/JSP%E5%8E%9F%E7%90%86.bmp" alt=""></p><ul><li>Java Server Pages： java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>JSP本质上就是一个Servlet</li></ul><h3 id="JSP的脚本：JSP定义Java代码的方式"><a href="#JSP的脚本：JSP定义Java代码的方式" class="headerlink" title="JSP的脚本：JSP定义Java代码的方式"></a>JSP的脚本：JSP定义Java代码的方式</h3><ol><li>&lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li>&lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。（可能出现线程安全问题）</li><li>&lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。（就近原则）</li></ol><h3 id="JSP的内置对象："><a href="#JSP的内置对象：" class="headerlink" title="JSP的内置对象："></a>JSP的内置对象：</h3><ul><li>在jsp页面中不需要获取和创建，可以直接使用的对象</li><li>jsp一共有9个内置对象。</li><li>其中3个：<ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似</li><li>response.getWriter()和out.write()的区别：<ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li>response.getWriter()数据输出永远在out.write()之前</li></ul></li></ul></li></ul><h3 id="案例-改造Cookie案例"><a href="#案例-改造Cookie案例" class="headerlink" title="案例:改造Cookie案例"></a>案例:改造Cookie案例</h3><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/Session%E5%8E%9F%E7%90%86.bmp" alt=""></p><h3 id="快速入门：-1"><a href="#快速入门：-1" class="headerlink" title="快速入门："></a>快速入门：</h3><ol><li><p>获取HttpSession对象：</p><ul><li>HttpSession session = request.getSession();</li></ul></li><li><p>使用HttpSession对象：</p><ul><li>Object getAttribute(String name)  </li><li>void setAttribute(String name, Object value)</li><li>void removeAttribute(String name)  </li></ul></li><li><p>原理</p><ul><li>Session的实现是依赖于Cookie的。</li></ul></li></ol><h3 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h3><h4 id="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"><a href="#当客户端关闭后，服务器不关闭，两次获取session是否为同一个？" class="headerlink" title="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"></a>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</h4><ul><li>默认情况下。不是(相当于本次会话结束)。</li><li>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure><h4 id="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h4><ul><li>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作<ul><li>session的钝化：<ul><li>在服务器正常关闭之前，将session对象序列化到硬盘上</li></ul></li><li>session的活化：<ul><li>在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul></li></ul></li></ul><h4 id="session什么时候被销毁？"><a href="#session什么时候被销毁？" class="headerlink" title="session什么时候被销毁？"></a>session什么时候被销毁？</h4><ul><li>服务器关闭<ol start="2"><li>session对象调用invalidate() 。</li><li>session默认失效时间 30分钟</li></ol></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择性配置修改tomcat中web.xml修改</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><h3 id="session的特点"><a href="#session的特点" class="headerlink" title="session的特点"></a>session的特点</h3><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><ul><li>session与Cookie的区别：<ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol></li></ul><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><ol><li>案例需求：<ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户名，密码以及验证码。<ul><li>如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</li><li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li><li>如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</li></ul></li></ol></li></ol><ol start="2"><li>分析：</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/cookie/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B.bmp" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;会话技术&quot;&gt;&lt;a href=&quot;#会话技术&quot; class=&quot;headerlink&quot; title=&quot;会话技术&quot;&gt;&lt;/a&gt;会话技术&lt;/h2&gt;&lt;h3 id=&quot;基本要点&quot;&gt;&lt;a href=&quot;#基本要点&quot; class=&quot;headerlink&quot; title=&quot;基本要点&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Cookie" scheme="https://github.com/learn666-gif/tags/Cookie/"/>
    
      <category term="Session" scheme="https://github.com/learn666-gif/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb核心技术02--学会使用Servlet(Servlet-HTTP)</title>
    <link href="https://github.com/learn666-gif/2020/05/06/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF02--%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8Servlet(Servlet-HTTP)/"/>
    <id>https://github.com/learn666-gif/2020/05/06/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF02--%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8Servlet(Servlet-HTTP)/</id>
    <published>2020-05-06T13:57:20.000Z</published>
    <updated>2020-05-11T01:20:56.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet：server-applet"><a href="#Servlet：server-applet" class="headerlink" title="Servlet：server applet"></a>Servlet：server applet</h2><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/Servlet.bmp" alt=""></p><ul><li>概念：运行在服务器端的小程序</li><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>创建JavaEE项目 创建项目选择web application/配置好tomcat和servlet</li><li>定义一个类，实现Servlet接口<ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li>实现接口中的抽象方法</li><li>配置Servlet<ul><li>在web.xml中配置：</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><br><span class="line">         version=<span class="string">"4.0"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">jwang</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">ServletDemo1</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">demo1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">demo1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>执行原理：<ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.bmp" alt=""></p><h3 id="Servlet中的生命周期方法："><a href="#Servlet中的生命周期方法：" class="headerlink" title="Servlet中的生命周期方法："></a>Servlet中的生命周期方法：</h3><ol><li>被创建：执行init方法，只执行一次<ul><li>Servlet什么时候被创建？<ul><li>默认情况下，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机。<ul><li>在<servlet>标签下配置<ol><li>第一次被访问时，创建<ul><li><code>&lt;load-on-startup&gt;</code>的值为负数</li></ul></li><li>在服务器启动时，创建<ul><li><code>&lt;load-on-startup&gt;</code>的值为0或正整数</li></ul></li></ol></li></ul></li></ul></li></ul></li></ol><pre><code>* Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的    * 多个用户同时访问时，可能存在线程安全问题。    * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改值</code></pre><ol start="2"><li>提供服务：执行service方法，执行多次<ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li>被销毁：执行destroy方法，只执行一次<ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol><h3 id="Servlet3-0："><a href="#Servlet3-0：" class="headerlink" title="Servlet3.0："></a>Servlet3.0：</h3><ul><li><p>好处：</p><ul><li>支持注解配置。可以不需要web.xml了。</li></ul></li><li><p>步骤：</p><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>复写方法</li><li>在类上使用@WebServlet注解，进行配置<ul><li>@WebServlet(“资源路径即URL访问的最后名”)</li></ul></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"><span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"><span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><ul><li>Servlet 接口 – GenericServlet抽象类–HttpServlet抽象类</li><li>GenericServlet抽象类<ul><li>将Servlet接口中其他方法做了空实现，只将Service方法作为抽象</li><li>定义Servlet类时，可以继承GenericServlet实现Service方法即可<ul><li>service方法：1.获取数据（需要判断请求方式String str = req.getMethod()是get还是post）—HttpServlet</li></ul></li></ul></li><li>HttpServlet（建议使用）：对http协议的一种封装，简化操作<ul><li>定义类继承HttpServlet方法 </li><li>其中定义了 <code>doGet(){}</code>.<code>doPost(){}</code>方法，只需要覆写这两个就行</li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/request/HttpServlet.bmp" alt=""></p><h3 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h3><ul><li>urlpartten：servlet配置的访问路径</li><li>一个servlet可以定义多个URL路径 <code>@WebServlet({&quot;/demo4&quot;,&quot;/demo04&quot;})</code></li><li>路径定义规则: 1. <code>/xxx</code>  2. <code>/xxx/xx</code>  3.<code>*.do</code></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>Hyper Text Transfer Protocol 超文本传输协议</li><li>传输协议：定义了，客户端和服务端通信时，发送数据的格式<ul><li>特点：<ul><li>基于TCP/IP的高级协议</li><li>http默认端口号为80</li><li>基于请求响应模型的（一次请求对应一次响应）</li><li>无状态协议：每次请求间相互独立，不能交互数据</li></ul></li></ul></li><li>历史版本</li><li>1.0: 每一次请求都会建立一个新的连接</li><li>1.1: 复用连接，缓存支持较好</li></ul><h3 id="请求消息数据格式（servletRequest对象）"><a href="#请求消息数据格式（servletRequest对象）" class="headerlink" title="请求消息数据格式（servletRequest对象）"></a>请求消息数据格式（servletRequest对象）</h3><ul><li><p>请求消息：客户端发送给服务器端的数据</p><ul><li>数据格式：<ol><li>请求行</li><li>请求头</li><li>请求空行</li><li>请求体</li></ol></li></ul></li><li><p>请求行</p><ul><li>格式：请求方式 请求URL 请求协议/版本。GET /login.html HTTP/1.1</li><li>请求方式：HTTP协议中有7种请求方式，常用有2种<ul><li>GET：请求参数在请求行中,在URL后 请求URL长度限制 不安全</li><li>POST：请求参数在请求体中 请求的URL长度没有限制 相对安全</li></ul></li></ul></li><li><p>请求头: 浏览器客户端告知服务器端个人信息</p><ul><li>格式：请求头名称：请求头值</li><li>创建请求头参数：<ul><li>User-Agent：浏览器告诉服务器，访问使用的浏览器版本信息，可以在服务器端获取该头的信息，解决浏览器兼容问题</li><li>Referer：告诉服务器，当前请求从哪里来     <code>Referer: http://localhost:8080/login.html</code><ul><li>防止盗链 可以使用该referer字符串判断该连接是否是从目标连接来</li><li>统计 从百度/搜狐等点击进来的人有多少</li></ul></li></ul></li></ul></li><li><p>请求空行</p></li><li><p>空行 </p></li><li><p>请求体（正文）</p><ul><li>封装POST请求消息的请求参数 </li></ul></li></ul><h3 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h3><ul><li>响应消息：服务器端发送给客户端的数据<ol><li>响应行<ol><li>组成：协议/版本 响应状态码 状态码描述</li><li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。<ol><li>状态码都是3位数字 </li><li>分类：<ol><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302(重定向)，304(访问缓存)</li><li>4xx：客户端错误。<ul><li>404（请求路径没有对应的资源） </li><li>405：请求方式没有对应的doXxx方法</li></ul></li><li>5xx：服务器端错误。代表：500(服务器内部出现异常</li></ol></li></ol></li></ol></li><li>响应头：<ol><li>格式：头名称： 值</li><li>常见的响应头：<ol><li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据<ul><li>值：<ul><li>in-line:默认值,在当前页面内打开</li><li>attachment;filename=xxx：以附件形式打开响应体。文件下载</li></ul></li></ul></li></ol></li></ol></li><li>响应空行</li><li>响应体:传输的数据</li></ol></li></ul><ul><li>响应字符串格式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type: text/html;charset=UTF-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">101</span></span><br><span class="line">Date: Wed, <span class="number">06</span> Jun <span class="number">2018</span> <span class="number">07</span>:<span class="number">08</span>:<span class="number">42</span> GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> hello , response</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h2><h3 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h3><ul><li><code>public void service(ServletRequest servletRequest, ServletResponse servletResponse)</code><ul><li>tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo1的对象</li><li>tomcat服务器，会创建request和response对象，request对象中封装请求消息数据</li><li>tomcat将request和response两个对象传递给service方法，并且调用该方法</li><li>程序员可以通过request对象获取请求消息数据，通过response对象设置响应消息数据</li><li>服务器在给浏览器作出响应之前，会从response对象中拿程序猿设置的响应消息数据</li></ul></li></ul><h3 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h3><ul><li>request和response对象是由服务器创建的。我们来使用它们</li><li>request对象是来获取请求消息，response对象是来设置响应消息</li><li>request对象继承体系结构：ServletRequest接口继承HttpServletRequest接口实现org.apache.catalina.connector.RequestFacade 类(tomcat)</li></ul><h3 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h3><h4 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h4><blockquote><p>同一个IDEA中启动两个servlet需要重新创建一个tomcat，设置不同的端口和名字</p></blockquote><ol><li><p>获取请求行数据</p><ul><li><p>GET /jwang/demo1?name=zhangsan HTTP/1.1</p></li><li><p>方法：</p><ol><li><p>获取请求方式 ：GET</p><ul><li>String getMethod()  </li></ul></li><li><p>获取虚拟目录：/jwang（常用）</p><ul><li>String getContextPath()</li></ul></li><li><p>获取Servlet路径: /demo1</p><ul><li>String getServletPath()</li></ul></li><li><p>获取get方式请求参数：name=zhangsan</p><ul><li>String getQueryString()</li></ul></li><li><p>获取请求<code>URI</code>：/jwang/demo1（常用）</p><ul><li><p>String getRequestURI():/jwang/demo1</p></li><li><p>StringBuffer getRequestURL():<a href="http://localhost/jwang/demo1" target="_blank" rel="noopener">http://localhost/jwang/demo1</a></p></li><li><p>URL:统一资源定位符 ： <a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a> 中华人民共和国</p></li><li><p>URI：统一资源标识符 : /day14/demo1  共和国            </p></li></ul></li><li><p>获取协议及版本：HTTP/1.1</p><ul><li>String getProtocol()</li></ul></li><li><p>获取客户机的IP地址：</p><ul><li>String getRemoteAddr()</li></ul></li></ol></li></ul></li><li><p>获取请求头数据(常用)</p><ul><li>方法：<ul><li>(*)String getHeader(String name):通过请求头的名称获取请求头的值</li><li>Enumeration<String> getHeaderNames():获取所有的请求头名称</li></ul></li></ul></li><li><p>获取请求体数据:</p><ul><li><p>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p></li><li><p>步骤：</p><ol><li><p>获取流对象</p><ul><li>BufferedReader getReader()：获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</li></ul></li><li><p>再从流对象中拿数据</p></li></ol></li></ul></li></ol><h2 id="Response功能"><a href="#Response功能" class="headerlink" title="Response功能"></a>Response功能</h2><h3 id="功能：设置响应消息"><a href="#功能：设置响应消息" class="headerlink" title="功能：设置响应消息"></a>功能：设置响应消息</h3><ol><li>设置响应行<ol><li>格式：HTTP/1.1 200 ok</li><li>设置状态码：setStatus(int sc) </li></ol></li><li>设置响应头：setHeader(String name, String value)</li><li>设置响应体：<ul><li>使用步骤：<ol><li>获取输出流<ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul></li><li>使用输出流，将数据输出到客户端浏览器</li></ol></li></ul></li></ol><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h4><ul><li>重定向：资源跳转的方式</li><li>重定向的特点:redirect<ol><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ol></li><li>转发的特点：forward<ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ol></li><li>路径写法：<ol><li>路径分类<ol><li>相对路径：通过相对路径不可以确定唯一资源<ul><li>如：./index.html</li><li>不以/开头，以.开头路径</li><li>规则：找到当前资源和目标资源之间的相对位置关系<ul><li>./：当前目录</li><li>../:后退一级目录</li><li>当前资源：<a href="http://localhost/jwang/location.html" target="_blank" rel="noopener">http://localhost/jwang/location.html</a></li><li>目标资源：<a href="http://localhost/jwang/responseDemo2" target="_blank" rel="noopener">http://localhost/jwang/responseDemo2</a></li><li>相对路径：./responseDemo2(./可不写，默认)</li></ul></li></ul></li><li>绝对路径：通过绝对路径可以确定唯一资源<ul><li>如：<a href="http://localhost/jwang/responseDemo2" target="_blank" rel="noopener">http://localhost/jwang/responseDemo2</a> –&gt; /day15/responseDemo2</li><li>以/开头的路径</li><li>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出<ul><li>给客户端浏览器使用：需要加虚拟目录(项目的访问路径)<ul><li>建议虚拟目录动态获取：request.getContextPath()</li><li><code>&lt;a&gt; , &lt;form&gt;</code> 重定向…</li></ul></li><li>给服务器使用：不需要加虚拟目录<ul><li>转发路径</li></ul></li></ul></li></ul></li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//2.设置响应头location</span></span><br><span class="line">response.setHeader(<span class="string">"location"</span>,<span class="string">"/jwang/responseDemo2"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的重定向方法</span></span><br><span class="line">response.sendRedirect(<span class="string">"/jwang/responseDemo2"</span>);</span><br><span class="line"></span><br><span class="line">response.sendRedirect(<span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure><h4 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h4><ul><li><p>步骤：</p><ol><li>获取字符输出流</li><li>输出数据</li></ol></li><li><p>注意：</p><ul><li>乱码问题：<ol><li>PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</li><li>设置该流的默认编码<ul><li>response.setCharacterEncoding(“utf-8”)</li></ul></li><li>告诉浏览器响应体使用的编码<ul><li>response.setHeader(“content-type”, “text/html;charset=utf-8”);(可以不用2的设置)</li></ul></li><li>简单的形式，设置编码，是在获取流之前设置<ul><li>response.setContentType(“text/html;charset=utf-8”);</li></ul></li></ol></li></ul></li></ul><h4 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h4><ul><li>步骤：<ol><li>获取字节输出流</li><li>输出数据</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ServletOutputStream outputStream = </span><br><span class="line">response.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">"hello"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br></pre></td></tr></table></figure><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><ol><li>本质：图片</li><li>目的：防止恶意表单注册</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletCheckcode"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletCheckcode</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个对象，在内存中存图片（验证码图片对象）</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1填充背景颜色</span></span><br><span class="line">        Graphics g = image.getGraphics(); <span class="comment">//画笔</span></span><br><span class="line">        g.setColor(Color.PINK); <span class="comment">//画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>, height-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.3字</span></span><br><span class="line">        String str = <span class="string">"AQZWSXEDCRFVTGBYHNUJMIKLOPqaxswedcvfrtgbyhnuj0123456789"</span>;</span><br><span class="line">        <span class="comment">//生产随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);</span><br><span class="line"></span><br><span class="line">            g.setColor(Color.BLACK);</span><br><span class="line">            g.drawString(ch+<span class="string">""</span>, width/<span class="number">4</span>*i, height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4随机线条</span></span><br><span class="line">        <span class="comment">//随机坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.setColor(Color.GREEN);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2。将图片输出到页面显示</span></span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img id = <span class="string">"checkcode"</span> src=<span class="string">"/jwang/ServletCheckcode"</span> /&gt;</span><br><span class="line">    &lt;a id = "change" href=""&gt;看不清换。。。。&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取图片对象</span></span><br><span class="line">            <span class="keyword">var</span> img =  document.getElementById(<span class="string">"checkcode"</span>);</span><br><span class="line">            <span class="comment">//2.绑定单击事件</span></span><br><span class="line">            img.onclick = function () &#123;</span><br><span class="line">                <span class="comment">//地址后加时间戳,使用其不使用缓存</span></span><br><span class="line">                <span class="keyword">var</span> date = <span class="keyword">new</span> Date().getTime();</span><br><span class="line"></span><br><span class="line">                img.src = <span class="string">"/jwang/ServletCheckcode?"</span>+date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li><p>概念：代表整个web应用，可以和程序的容器(服务器)来通信</p></li><li><p>获取：</p><ol><li>通过request对象获取 request.getServletContext();</li><li>通过HttpServlet获取 this.getServletContext();</li></ol></li><li><p>功能：</p><ol><li>获取MIME类型：<ul><li>MIME类型:在互联网通信过程中定义的一种文件数据类型<ul><li>格式： 大类型/小类型 text/html image/jpeg</li></ul></li><li>获取：String getMimeType(String file)  </li></ul></li><li>域对象：共享数据<ol><li>setAttribute(String name,Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)<ul><li>ServletContext对象范围：所有用户所有请求的数据</li></ul></li></ol></li></ol></li><li><p>获取文件的真实(服务器)路径</p><ol><li>方法：String getRealPath(String path)  <ul><li>String b = context.getRealPath(“/b.txt”);//web目录下资源访问        </li><li>String c = context.getRealPath(“/WEB-INF/c.txt”);//WEB-INF目录下的资源访问</li><li>String a = context.getRealPath(“/WEB-INF/classes/a.txt”);//src目录下的资源访问</li></ul></li></ol></li></ol><h2 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><ol><li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li><li>任何资源都必须弹出下载提示框</li><li>使用响应头设置资源的打开方式：<ul><li>content-disposition:attachment;filename=xxx</li></ul></li></ol><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称参数filename</li><li>定义Servlet<ol><li>获取文件名称</li><li>使用字节输入流加载文件进内存(真实路径)</li><li>指定response的响应头： <ul><li>content-disposition:attachment;filename=xxx</li></ul></li><li>将数据写出到response输出流</li></ol></li></ol><ul><li>问题：<ul><li>中文文件问题<ul><li>解决思路：<ol><li>获取客户端使用的浏览器版本信息</li><li>根据不同的版本信息，设置filename的编码方式不同</li></ol></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/downloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><ol><li>获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数<ol><li>String getParameter(String name):根据参数名称获取参数值username=zs&amp;password=123</li><li>String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</li><li>Enumeration<String> getParameterNames():获取所有请求的参数名称</li><li>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</li><li>中文乱码问题：<ul><li>get方式：tomcat 8 已经将get方式乱码问题解决了</li><li>post方式：会乱码<ul><li>解决：在获取参数前，设置request的编码request.setCharacterEncoding(“utf-8”);</li></ul></li></ul></li></ol></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/request/Request%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%26%E5%9F%9F%E5%AF%B9%E8%B1%A1.bmp" alt=""></p><ol start="2"><li><p>请求转发：一种在服务器内部的资源跳转方式</p><ol><li><p>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</p></li><li><p>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </p></li><li><p>特点：</p><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求(请求是同一个,属于一次请求的作用范围)</li></ol></li></ol></li><li><p>共享数据：</p><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ol><li>void setAttribute(String name,Object obj):存储数据</li><li>Object getAttitude(String name):通过键获取值</li><li>void removeAttribute(String name):通过键移除键值对</li></ol></li></ul></li><li><p>获取ServletContext：</p><ul><li>ServletContext getServletContext()</li></ul></li></ol><h2 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h2><h3 id="用户登录案例需求："><a href="#用户登录案例需求：" class="headerlink" title="用户登录案例需求："></a>用户登录案例需求：</h3><ol><li>编写login.html登录页面 username &amp; password 两个输入框</li><li>使用Druid数据库连接池技术,操作mysql，userlogin数据库中user表</li><li>使用JdbcTemplate技术封装JDBC</li><li>登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您</li><li>登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>开发步骤</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/request/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.bmp" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 创建项目，导入html页面，配置文件，jar包</span><br><span class="line"><span class="number">2</span>. 创建数据库环境</span><br><span class="line">CREATE DATABASE userlogin;</span><br><span class="line">USE userlogin;</span><br><span class="line"><span class="function">CREATE TABLE <span class="title">USER</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">id INT PRIMARY KEY AUTO_INCREMENT,</span></span></span><br><span class="line"><span class="function"><span class="params">username VARCHAR(<span class="number">32</span>)</span> UNIQUE NOT NULL,</span></span><br><span class="line"><span class="function">PASSWORD <span class="title">VARCHAR</span><span class="params">(<span class="number">32</span>)</span> NOT NULL</span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 创建包cn.itcast.domain,创建类User</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.jwang.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 创建包cn.itcast.util,编写工具类JDBCUtils</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类 使用Druid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            <span class="keyword">final</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//使用classloader加载配置文件，获取字节输入流</span></span><br><span class="line">            final InputStream resourceAsStream = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            properties.load(resourceAsStream);</span><br><span class="line"></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2。初始化连接池</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接connection对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 创建包cn.itcast.dao,创建类UserDao,提供login方法</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.jwang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jwang.domain.User;</span><br><span class="line"><span class="keyword">import</span> cn.jwang.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库中User表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申明JDBCTemplate对象共用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginUser 只有用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 包含用户全部数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User loginUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//编写sql</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>;</span><br><span class="line">            <span class="comment">//调用query方法</span></span><br><span class="line">            <span class="keyword">final</span> User user = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">loginUser</span>.<span class="title">getUsername</span>(), <span class="title">loginUser</span>.<span class="title">getPassword</span>())</span>;</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>. 编写cn.itcast.web.servlet.LoginServlet类</span><br><span class="line"><span class="keyword">package</span> cn.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jwang.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.jwang.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码和获取请求参数</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="keyword">final</span> String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">final</span> String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装user对象</span></span><br><span class="line">        User loginuser = <span class="keyword">new</span> User();</span><br><span class="line">        loginuser.setUsername(username);</span><br><span class="line">        loginuser.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用userdao的login方法，进行数据库操作，查询用户是否存在</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="keyword">final</span> User user = dao.login(loginuser);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//用户不存在，登陆失败，转接</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/failServlet"</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//存储user对象的数据信息，并转发</span></span><br><span class="line">            request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/successServlet"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>. 编写FailServlet和SuccessServlet类</span><br><span class="line"><span class="keyword">package</span> cn.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jwang.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/successServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">successServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="keyword">final</span> User user = (User)request.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"用户"</span>+user.getUsername()+<span class="string">"您好"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/failServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">failServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">"登陆失败，用户名或者密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>login.html中form表单的action路径的写法</p><ul><li>虚拟目录+Servlet的资源路径</li></ul></li><li><p>BeanUtils工具类，简化数据封装 用于封装JavaBean的(一般放在domain中)</p><ol><li>JavaBean：标准的Java类 功能：封装数据<ol><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共setter和getter方法</li></ol></li><li>概念：<ul><li>成员变量：方法的</li><li>属性：setter和getter方法截取后的产物<ul><li>例如：getUsername() –&gt; Username–&gt; username</li></ul></li></ul></li><li>方法：<ol><li>setProperty()：设置属性值</li><li>getProperty()：获取属性值</li><li>populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中 </li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有请求参数</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        <span class="comment">//创建uer对象</span></span><br><span class="line">        User loginuser = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Apache的BeanUtils进行封装</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(loginuser, map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet：server-applet&quot;&gt;&lt;a href=&quot;#Servlet：server-applet&quot; class=&quot;headerlink&quot; title=&quot;Servlet：server applet&quot;&gt;&lt;/a&gt;Servlet：server applet&lt;/
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="HTTP" scheme="https://github.com/learn666-gif/tags/HTTP/"/>
    
      <category term="Servlet" scheme="https://github.com/learn666-gif/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb核心技术01--Tomcat</title>
    <link href="https://github.com/learn666-gif/2020/05/05/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF01--Tomcat/"/>
    <id>https://github.com/learn666-gif/2020/05/05/javaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF01--Tomcat/</id>
    <published>2020-05-05T13:45:53.000Z</published>
    <updated>2020-05-11T01:21:10.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web相关概念"><a href="#web相关概念" class="headerlink" title="web相关概念"></a>web相关概念</h2><h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol><h3 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h3><ol><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析<ul><li>如： html,css,JavaScript</li></ul></li><li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul><li>如：servlet/jsp,php,asp….</li></ul></li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB.bmp" alt="">            </p><ol start="3"><li>网络通信三要素<ol><li>IP：电子设备(计算机)在网络中的唯一标识。</li><li>端口：应用程序在计算机中的唯一标识。 0~65536</li><li>传输协议：规定了数据传输的规则<ol><li>基础协议：<ol><li>tcp:安全协议，三次握手。 速度稍慢</li><li>udp：不安全协议。 速度快</li></ol></li></ol></li></ol></li></ol><h2 id="web服务器软件："><a href="#web服务器软件：" class="headerlink" title="web服务器软件："></a>web服务器软件：</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li><li>web服务器软件：接收用户的请求，处理请求，做出响应。<ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li></ul><h3 id="常见的java相关的web服务器软件："><a href="#常见的java相关的web服务器软件：" class="headerlink" title="常见的java相关的web服务器软件："></a>常见的java相关的web服务器软件：</h3><ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul><h3 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h3><ul><li>Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</li></ul><h2 id="Tomcat：web服务器软件"><a href="#Tomcat：web服务器软件" class="headerlink" title="Tomcat：web服务器软件"></a>Tomcat：web服务器软件</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/tomcat/tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt=""></p><ol><li><p>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p></li><li><p>安装：解压压缩包即可。</p><ul><li>注意：安装目录建议不要有中文和空格</li></ul></li><li><p>卸载：删除目录就行了</p></li><li><p>启动：</p><ul><li><p>bin/startup.bat ,<code>sudo sh startup.sh</code> 双击运行该文件即可</p></li><li><p>访问：浏览器输入：</p><ul><li><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 回车访问自己</li><li>http://别人的ip:8080 访问别人</li></ul></li><li><p>可能遇到的问题：</p><ol><li><p>黑窗口一闪而过：</p><ul><li>原因： 没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ul></li><li><p>启动报错：</p><ol><li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程<ul><li>netstat -ano</li></ul></li><li>温柔：修改自身的端口号<ul><li>conf/server.xml</li><li>`&lt;Connector port=”8888” protocol=”HTTP/1.1”<pre><code>connectionTimeout=&quot;20000&quot;redirectPort=&quot;8445&quot; /&gt;`</code></pre></li><li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</li><li>好处：在访问时，就不用输入端口号</li></ul></li></ol></li></ol></li></ul></li><li><p>关闭：</p><ol><li>正常关闭：<ul><li>bin/shutdown.bat <code>sudo sh shutdown.bat</code></li><li>ctrl+c</li></ul></li><li>强制关闭：<ul><li>点击启动窗口的×</li></ul></li></ol></li><li><p>配置:</p><ul><li><p>部署项目的方式：</p><ol><li>直接将项目放到webapps目录下即可。<ul><li>/hello：项目的访问路径–&gt;虚拟目录</li></ul></li></ol></li><li><p>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</p><ul><li>war包会自动解压缩</li></ul><ol start="2"><li><p>配置conf/server.xml文件在<Host>标签体中配置<br> <code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code></p><ul><li>docBase:项目存放的路径</li><li>path：虚拟目录</li></ul></li><li><p>在<code>conf\Catalina\localhost</code>创建任意名称的xml文件。在文件中编写</p><pre><code>`&lt;Context docBase=&quot;D:\hello&quot; /&gt;`</code></pre><ul><li><p>虚拟目录：xml文件的名称</p></li><li><p>静态项目和动态项目：</p><ul><li><p>目录结构</p><ul><li><p>java动态项目的目录结构：</p><pre><code>-- 项目的根目录    -- WEB-INF目录：        -- web.xml：web项目的核心配置文件        -- classes目录：放置字节码文件的目录        -- lib目录：放置依赖的jar包</code></pre></li></ul></li></ul></li></ul></li></ol></li></ul></li></ol><pre><code>* 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</code></pre><h2 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h2><h3 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h3><ol><li><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</p><ul><li><p>查看控制台的log：</p><p><code>CATALINA_BASE：[/Users/jwang/Library/Caches/JetBrains/IntelliJIdea2020.1/tomcat/Tomcat_9_0_34_servletstu_2]</code></p></li></ul></li><li><p>工作空间项目 和 tomcat部署的web项目</p><ul><li>tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</li><li>WEB-INF目录下的资源不能被浏览器直接访问。</li></ul></li><li><p>断点调试：使用”小虫子”启动 dubug 启动</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;web相关概念&quot;&gt;&lt;a href=&quot;#web相关概念&quot; class=&quot;headerlink&quot; title=&quot;web相关概念&quot;&gt;&lt;/a&gt;web相关概念&lt;/h2&gt;&lt;h3 id=&quot;软件架构&quot;&gt;&lt;a href=&quot;#软件架构&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaWeb" scheme="https://github.com/learn666-gif/tags/JavaWeb/"/>
    
      <category term="tomcat" scheme="https://github.com/learn666-gif/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap</title>
    <link href="https://github.com/learn666-gif/2020/05/05/bootstrap/"/>
    <id>https://github.com/learn666-gif/2020/05/05/bootstrap/</id>
    <published>2020-05-05T04:47:22.000Z</published>
    <updated>2020-05-05T04:48:24.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bootstrap："><a href="#Bootstrap：" class="headerlink" title="Bootstrap："></a>Bootstrap：</h2><p><a href="https://v3.bootcss.com/" target="_blank" rel="noopener">bootstrap官方</a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</li><li>框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li><li>好处：<ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备。</li></ul></li></ol></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, </span></span><br><span class="line"><span class="string">initial-scale=1"</span>&gt;</span><br><span class="line">&lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">&lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;</span><br><span class="line">&lt;!-- Bootstrap --&gt;</span><br><span class="line">&lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;!-- jQuery (Bootstrap 的所有 JavaScript </span><br><span class="line">插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">&lt;script src="js/jquery-3.2.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。</span><br><span class="line">你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">&lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好，世界！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>同一套页面可以兼容不同分辨率的设备。</li><li>实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>定义容器。相当于之前的table、</p><ul><li>容器分类：<ol><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ol></li></ul></li><li><p>定义行。相当于之前的tr   样式：row</p></li><li><p>定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目</p><ul><li><p>设备代号：</p><ol><li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ol></li><li><p>注意：</p><ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</li></ol></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="col-lg-1 col-sm-2 inner"&gt;1&lt;/div&gt;. </span><br><span class="line">大屏幕该标签占用<span class="number">1</span>个和小屏幕占用<span class="number">2</span>个</span><br></pre></td></tr></table></figure><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><h3 id="全局CSS样式："><a href="#全局CSS样式：" class="headerlink" title="全局CSS样式："></a>全局CSS样式：</h3><ul><li>按钮：<code>class=&quot;btn btn-default&quot;</code></li><li>图片：<ul><li><code>class=&quot;img-responsive&quot;</code>：图片在任意尺寸都占100%</li><li>图片形状</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;</code>：方形</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt;</code>： 圆形</li><li><code>&lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt;</code> ：相框</li></ul></li><li>表格<ul><li>table</li><li>table-bordered</li><li>table-hover</li></ul></li><li>表单<ul><li>给表单项添加：class=”form-control” </li></ul></li></ul><ol start="2"><li>组件：<pre><code>* 导航条* 分页条</code></pre><ol start="3"><li>插件：<ul><li>轮播图</li></ul></li></ol></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">    &lt;script src="js/jquery-3.2.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .paddtop&#123;</span><br><span class="line">            padding-top: <span class="number">10</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .search-btn&#123;</span><br><span class="line">            <span class="keyword">float</span>: left;</span><br><span class="line">            border:1px solid #ffc900;</span><br><span class="line">            width: <span class="number">90</span>px;</span><br><span class="line">            height: <span class="number">35</span>px;</span><br><span class="line">            background-color:#ffc900 ;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: <span class="number">35</span>px;</span><br><span class="line">            margin-top: <span class="number">15</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .search-input&#123;</span><br><span class="line">            <span class="keyword">float</span>: left;</span><br><span class="line">            border:2px solid #ffc900;</span><br><span class="line">            width: <span class="number">400</span>px;</span><br><span class="line">            height: <span class="number">35</span>px;</span><br><span class="line">            padding-left: <span class="number">5</span>px;</span><br><span class="line">            margin-top: <span class="number">15</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .jx&#123;</span><br><span class="line">            border-bottom: 2px solid #ffc900;</span><br><span class="line">            padding: <span class="number">5</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .company&#123;</span><br><span class="line">            height: <span class="number">40</span>px;</span><br><span class="line">            background-color: #ffc900;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height:<span class="number">40</span>px ;</span><br><span class="line">            font-size: <span class="number">8</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- <span class="number">1</span>.页眉部分--&gt;</span><br><span class="line">   &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">"img/top_banner.jpg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row paddtop"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"img/logo.jpg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-5"</span>&gt;</span><br><span class="line">               &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"search-input"</span> placeholder=<span class="string">"请输入线路名称"</span>&gt;</span><br><span class="line">               &lt;a class="search-btn" href="#"&gt;搜索&lt;/a&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"img/hotel_tel.png"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;!--导航栏--&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-default"</span>&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">                   &lt;!-- Brand and toggle get grouped <span class="keyword">for</span> better mobile display --&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">                       &lt;!-- 定义汉堡按钮 --&gt;</span><br><span class="line">                       &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-toggle collapsed"</span> data-toggle=<span class="string">"collapse"</span> data-target=<span class="string">"#bs-example-navbar-collapse-1"</span> aria-expanded=<span class="string">"false"</span>&gt;</span><br><span class="line">                           &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;</span><br><span class="line">                           &lt;span class="icon-bar"&gt;&lt;/span&gt;</span><br><span class="line">                           &lt;span class="icon-bar"&gt;&lt;/span&gt;</span><br><span class="line">                           &lt;span class="icon-bar"&gt;&lt;/span&gt;</span><br><span class="line">                       &lt;/button&gt;</span><br><span class="line">                       &lt;a class="navbar-brand" href="#"&gt;首页&lt;/a&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;!-- Collect the nav links, forms, and other content <span class="keyword">for</span> toggling --&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"collapse navbar-collapse"</span> id=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span><br><span class="line">                       &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav navbar-nav"</span>&gt;</span><br><span class="line">                           &lt;li class="active"&gt;&lt;a href="#"&gt;Link &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;/ul&gt;</span><br><span class="line">                   &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;</span><br><span class="line">               &lt;/div&gt;&lt;!-- /.container-fluid --&gt;</span><br><span class="line">           &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!--轮播图--&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;div id=<span class="string">"carousel-example-generic"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel slide"</span> data-ride=<span class="string">"carousel"</span>&gt;</span><br><span class="line">               &lt;!-- Indicators --&gt;</span><br><span class="line">               &lt;ol <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-indicators"</span>&gt;</span><br><span class="line">                   &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt;</span><br><span class="line">                   &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt;</span><br><span class="line">                   &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt;</span><br><span class="line">               &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Wrapper <span class="keyword">for</span> slides --&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"carousel-inner"</span> role=<span class="string">"listbox"</span>&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item active"</span>&gt;</span><br><span class="line">                       &lt;img src=<span class="string">"img/banner_1.jpg"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">                       &lt;img src=<span class="string">"img/banner_2.jpg"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">                       &lt;img src=<span class="string">"img/banner_3.jpg"</span> alt=<span class="string">"..."</span>&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Controls --&gt;</span><br><span class="line">               &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"left carousel-control"</span> href=<span class="string">"#carousel-example-generic"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"prev"</span>&gt;</span><br><span class="line">                   &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt;</span><br><span class="line">                   &lt;span class="sr-only"&gt;Previous&lt;/span&gt;</span><br><span class="line">               &lt;/a&gt;</span><br><span class="line">               &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"right carousel-control"</span> href=<span class="string">"#carousel-example-generic"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"next"</span>&gt;</span><br><span class="line">                   &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt;</span><br><span class="line">                   &lt;span class="sr-only"&gt;Next&lt;/span&gt;</span><br><span class="line">               &lt;/a&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/header&gt;</span><br><span class="line">   &lt;!-- <span class="number">2</span>.主体部分--&gt;</span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row jx"</span>&gt;</span><br><span class="line">            &lt;img src=<span class="string">"img/icon_5.jpg"</span>&gt;</span><br><span class="line">            &lt;span&gt;黑马精选&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row paddtop"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                    &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                    &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                    &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                   &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                   &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line"></span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                   &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                   &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;</span><br><span class="line"></span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                   &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                   &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row jx"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">"img/icon_6.jpg"</span>&gt;</span><br><span class="line">           &lt;span&gt;国内游&lt;/span&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row paddtop"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">               &lt;img src=<span class="string">"img/guonei_1.jpg"</span>&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-8"</span>&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">               &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">                   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4"</span>&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">                           &lt;img src=<span class="string">"img/jiangxuan_3.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;</span><br><span class="line">                           &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">           &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;!-- <span class="number">3</span>.页脚部分--&gt;</span><br><span class="line">   &lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">           &lt;img src=<span class="string">"img/footer_service.png"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive"</span>&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row company"</span>&gt;</span><br><span class="line">           版权所有Copyright <span class="number">2006</span>-<span class="number">2018</span>, All Rights Reserved 苏ICP备<span class="number">16007882</span></span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Bootstrap：&quot;&gt;&lt;a href=&quot;#Bootstrap：&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap：&quot;&gt;&lt;/a&gt;Bootstrap：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://v3.bootcss.com/&quot; targ
      
    
    </summary>
    
    
      <category term="前端开发" scheme="https://github.com/learn666-gif/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="https://github.com/learn666-gif/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="bootstrap" scheme="https://github.com/learn666-gif/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>可扩展标记语言 -- XML</title>
    <link href="https://github.com/learn666-gif/2020/05/05/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-XML/"/>
    <id>https://github.com/learn666-gif/2020/05/05/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-XML/</id>
    <published>2020-05-05T04:44:45.000Z</published>
    <updated>2020-05-05T04:46:03.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>Extensible Markup Language 可扩展标记语言</p></li><li><p>可扩展：标签都是自定义的。 <code>&lt;user&gt;</code> <code>&lt;student&gt;</code></p></li><li><p>功能</p><ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><p>xml与html的区别</p><ol><li>xml标签都是自定义的，html标签是预定义。</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol></li><li><p>w3c:万维网联盟</p></li></ul><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><ul><li>基本语法：<ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭，自闭合或者双</li><li>xml标签名称区分大小写</li></ol></li><li>快速入门：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">'1.0'</span> ?&gt;</span><br><span class="line">&lt;users&gt;</span><br><span class="line">    &lt;user id=<span class="string">'1'</span>&gt;</span><br><span class="line">        &lt;name&gt;zhangsan&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;23&lt;/age&gt;</span><br><span class="line">        &lt;gender&gt;male&lt;/gender&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line"></span><br><span class="line">    &lt;user id=<span class="string">'2'</span>&gt;</span><br><span class="line">        &lt;name&gt;lisi&lt;/name&gt;</span><br><span class="line">        &lt;age&gt;24&lt;/age&gt;</span><br><span class="line">        &lt;gender&gt;female&lt;/gender&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">&lt;/users&gt;</span><br></pre></td></tr></table></figure><ul><li><p>组成部分：</p><ol><li><p>文档声明</p><ol><li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li><li>属性列表：<ul><li>version：版本号，必须的属性</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值：<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><ul><li><code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</code></li></ul></li><li><p>标签：标签名称自定义的</p><ul><li>规则：<ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格 </li></ul></li></ul></li><li><p>属性：</p><ul><li>id属性值唯一</li></ul></li><li><p>文本：</p><ul><li>CDATA区：在该区域中的数据会被原样展示</li><li>格式：  <code>&lt;![CDATA[ 数据 ]]&gt;</code></li></ul></li></ol></li></ul><ul><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li>DTD:一种简单的约束技术</li><li>Schema:一种复杂的约束技术</li></ol></li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/web/%E7%BA%A6%E6%9D%9F.bmp" alt=""></p><ul><li>DTD：<ul><li>引入dtd文档到xml文档中<ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code></li><li>网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></li></ul></li></ul></li></ul></li></ul><ul><li>Schema:<ul><li>引入：<ol><li>填写xml文档的根元素</li><li>引入xsi前缀.  <code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code></li><li>引入xsd文件命名空间.  <code>xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;</code></li><li>为每一个xsd约束声明一个前缀,作为标识  <code>xmlns=&quot;http://www.itcast.cn/xml&quot;</code> </li></ol></li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line"><span class="number">1</span>.填写xml文档的根元素</span><br><span class="line"><span class="number">2</span>.引入xsi前缀.  xmlns:xsi=<span class="string">"http://www.w3.org/2001/</span></span><br><span class="line"><span class="string">XMLSchema-instance"</span></span><br><span class="line"><span class="number">3</span>.引入xsd文件命名空间.  xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml  student.xsd"</span></span><br><span class="line"><span class="number">4</span>.为每一个xsd约束声明一个前缀,作为标识  xmlns=<span class="string">"http:</span></span><br><span class="line"><span class="string">//www.itcast.cn/xml"</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> --&gt;</span><br><span class="line">&lt;students   xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml1</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml1  student.xsd</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml2</span></span><br><span class="line"><span class="string">http://www.itcast.cn/xml2  student2.xsd</span></span><br><span class="line"><span class="string">"</span> </span><br><span class="line">  xmlns:a=<span class="string">"http://www.itcast.cn/xml"</span></span><br><span class="line">  xmlns:b=<span class="string">"http://www.itcast.cn/xml2"</span></span><br><span class="line">&gt;</span><br><span class="line">&lt;a:student number=<span class="string">"heima_0001"</span>&gt;</span><br><span class="line">&lt;a:name&gt;tom&lt;/a:name&gt;</span><br><span class="line">&lt;a:age&gt;18&lt;/a:age&gt;</span><br><span class="line">&lt;a:sex&gt;male&lt;/a:sex&gt;</span><br><span class="line">&lt;/a:student&gt;</span><br><span class="line">&lt;b:student number=<span class="string">"heima_9999"</span>&gt;</span><br><span class="line">&lt;b:name&gt;sdd&lt;/b:name&gt;</span><br><span class="line">&lt;b:age&gt;13&lt;/b:age&gt;</span><br><span class="line">&lt;b:sex&gt;female&lt;/b:sex&gt;</span><br><span class="line">&lt;/b:student&gt;</span><br><span class="line"></span><br><span class="line">&lt;/students&gt;</span><br></pre></td></tr></table></figure><h3 id="解析：操作xml文档，将文档中的数据读取到内存中"><a href="#解析：操作xml文档，将文档中的数据读取到内存中" class="headerlink" title="解析：操作xml文档，将文档中的数据读取到内存中"></a>解析：操作xml文档，将文档中的数据读取到内存中</h3><ul><li><p>操作xml文档</p><ol><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ol></li><li><p>解析xml的方式：</p><ol><li>DOM(服务器端)：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li>SAX(安卓等客户端)：逐行读取，基于事件驱动的。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li><li><p>xml常见的解析器：</p><ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol></li><li><p>Jsoup 快速入门：</p><ul><li><p>步骤：</p><ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li><li><p>代码：</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo1.class.getClassLoader().getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的使用："><a href="#对象的使用：" class="headerlink" title="对象的使用："></a>对象的使用：</h3><ul><li><p>Jsoup：工具类，可以解析html或xml文档，返回Document</p><ul><li>parse：解析html或xml文档，返回Document<ul><li>parse​(File in, String charsetName)：解析xml或html文件的。</li><li>parse​(String html)：解析xml或html字符串</li><li>parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</li></ul></li></ul></li><li><p>Document：文档对象。代表内存中的dom树</p><ul><li>获取Element对象<ul><li>getElementById​(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li></ul></li><li><p>Elements：元素Element对象的集合。可以当做 ArrayList<Element>来使用</p></li><li><p>Element：元素对象</p><ol><li><p>获取子元素对象</p><ul><li>getElementById​(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li><li><p>获取属性值</p><ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li><p>获取文本内容</p><ul><li>String text():获取文本内容</li><li>String html():获取标签体的所有内容(包括字标签的字符串内容)</li></ul></li></ol></li><li><p>Node：节点对象</p><ul><li>是Document和Element的父类</li></ul></li><li><p>快捷查询方式：</p><ol><li>selector:选择器<ul><li>使用的方法：Elements select​(String cssQuery)</li><li>语法：参考Selector类中定义的语法</li></ul></li><li>XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言<ul><li>使用Jsoup的Xpath需要额外导入jar包。</li><li>查询w3cshool参考手册，使用xpath的语法完成查询</li></ul></li></ol></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;students&gt;</span><br><span class="line">&lt;student number=<span class="string">"heima_0001"</span>&gt;</span><br><span class="line">&lt;name id=<span class="string">"itcast"</span>&gt;</span><br><span class="line">&lt;xing&gt;张&lt;/xing&gt;</span><br><span class="line">&lt;ming&gt;三&lt;/ming&gt;</span><br><span class="line">&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;male&lt;/sex&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line">&lt;student number=<span class="string">"heima_0002"</span>&gt;</span><br><span class="line">&lt;name&gt;jack&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;female&lt;/sex&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line"></span><br><span class="line">&lt;/students&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *选择器查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo5<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().</span></span><br><span class="line">        getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.查询name标签</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            div&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Elements elements = document.select(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line">        System.out.println(<span class="string">"=----------------"</span>);</span><br><span class="line">        <span class="comment">//4.查询id值为itcast的元素</span></span><br><span class="line">        Elements elements1 = document.select(<span class="string">"#itcast"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        <span class="comment">//5.获取student标签并且number属性值为hei_0001的age子标签</span></span><br><span class="line">        <span class="comment">//5.1.获取student标签并且number属性值为hei_0001</span></span><br><span class="line">        Elements elements2 = </span><br><span class="line">        document.select(<span class="string">"student[number=\"hei_0001\"]"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.2获取student标签并且number属性值为hei_0001的age子标签</span></span><br><span class="line">        Elements elements3 = </span><br><span class="line">        document.select(<span class="string">"student[number=\"hei_0001\"] &gt; age"</span>);</span><br><span class="line">        System.out.println(elements3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *XPath查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, </span></span><br><span class="line"><span class="function">    XpathSyntaxErrorException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = </span><br><span class="line">JsoupDemo6<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResource</span></span></span><br><span class="line">("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/</span></span><br><span class="line"><span class="string">        name[@id]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/</span></span><br><span class="line"><span class="string">        name[@id='itcast']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Extensible Markup Language 可扩展标记语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可扩展：标签都是自
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="XML" scheme="https://github.com/learn666-gif/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>javascript</title>
    <link href="https://github.com/learn666-gif/2020/05/04/javascript/"/>
    <id>https://github.com/learn666-gif/2020/05/04/javascript/</id>
    <published>2020-05-04T14:37:08.000Z</published>
    <updated>2020-05-04T15:10:41.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h2><p><a href="https://www.w3school.com.cn/jsref/index.asp" target="_blank" rel="noopener">w3cschool传送门</a></p><h3 id="概念：-一门客户端脚本语言"><a href="#概念：-一门客户端脚本语言" class="headerlink" title="概念：    一门客户端脚本语言"></a>概念：    一门客户端脚本语言</h3><ul><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ul><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul><h3 id="JavaScript发展史："><a href="#JavaScript发展史：" class="headerlink" title="JavaScript发展史："></a>JavaScript发展史：</h3><ul><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li></ul><blockquote><p>JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</p></blockquote><h2 id="ECMAScript：客户端脚本语言的标准"><a href="#ECMAScript：客户端脚本语言的标准" class="headerlink" title="ECMAScript：客户端脚本语言的标准"></a>ECMAScript：客户端脚本语言的标准</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><ul><li><p>与html结合方式</p><ol><li>内部JS：<ul><li>定义<code>&lt;script&gt;</code>，标签体内容就是js代码 –会有阻塞，从页面上端开始加载，才执行之后的</li></ul></li><li>外部JS：<ul><li>定义<code>&lt;script&gt;</code>，通过src属性引入外部的js文件</li></ul></li></ol><ul><li>注意：<ol><li><code>&lt;script&gt;</code>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</li><li><code>&lt;script&gt;</code>可以定义多个。</li></ol></li></ul></li><li><p>注释</p><ol><li>单行注释：<code>//注释内容</code></li><li>多行注释：<code>/*注释内容*/</code></li></ol></li><li><p>数据类型：</p><ol><li><p>原始数据类型(基本数据类型)：</p><ol><li>number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)</li><li>string：字符串。 字符串  “abc” “a” ‘abc’</li><li>boolean: true和false</li><li>null：一个对象为空的占位符</li><li>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</li></ol></li><li><p>引用数据类型：对象</p></li></ol></li><li><p>变量</p><ul><li><p>变量：一小块存储数据的内存空间</p></li><li><p>Java语言是强类型语言，而JavaScript是弱类型语言。</p><ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li></ul></li><li><p>语法：</p><ul><li><p><code>var 变量名 = 初始化值;</code></p></li><li><p>typeof运算符：获取变量的类型。</p><blockquote><p>注：null运算后得到的是object</p></blockquote></li></ul></li></ul></li><li><p>运算符</p><ol><li><p>一元运算符：只有一个运算数的运算符</p><blockquote><p>++，– ， +(正号)  </p></blockquote><ul><li>++ –: 自增(自减)</li><li>++(–) 在前，先自增(自减)，再运算</li><li>++(–) 在后，先运算，再自增(自减)</li><li>+(-)：正负号<blockquote><p>注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</p></blockquote><ul><li>其他类型转number:</li><li>string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</li><li>boolean转number：true转为1，false转为0</li></ul></li></ul></li><li><p>算数运算符</p><ul><li><code>+ - * / % ...</code></li></ul></li><li><p>赋值运算符</p><ul><li><code>= += -+....</code></li></ul></li><li><p>比较运算符</p><ul><li><code>&gt; &lt; &gt;= &lt;= == ===(全等于)</code></li><li>比较方式<ol><li>类型相同：直接比较<ul><li>字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</li></ul></li><li>类型不同：先进行类型转换，再比较<ul><li>===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ul></li></ol></li></ul></li></ol></li></ul><pre><code>5. 逻辑运算符    * `&amp;&amp; || !`    * 其他类型转boolean：       1. number：0或NaN为假，其他为真       2. string：除了空字符串(&quot;&quot;)，其他都是true       3. null&amp;undefined:都是false       4. 对象：所有对象都为true6. 三元运算符    * `? : 表达式`    * </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a &gt; b ? <span class="number">1</span>:<span class="number">0</span>;</span><br></pre></td></tr></table></figure><pre><code>* 语法：* 表达式`? 值1:值2;`    * 判断表达式的值，如果是true则取值1，如果是false则取值2；</code></pre><ul><li><p>流程控制语句：</p><ol><li>if…else…</li><li>switch:<ul><li>在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)</li><li>switch(变量):case 值:</li><li>在JS中,switch语句可以接受任意的原始数据类型</li></ul></li><li>while</li><li>do…while</li><li>for</li></ol></li><li><p>JS特殊语法：</p><ol><li>语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</li><li>变量的定义使用var关键字，也可以不使用<ul><li>用： 定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ul></li></ol></li><li><p>运用：99乘法表</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;99乘法表&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">td&#123;</span><br><span class="line">border: <span class="number">1</span>px solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(<span class="string">"&lt;table  align='center'&gt;"</span>);</span><br><span class="line"><span class="comment">//1.完成基本的for循环嵌套，展示乘法表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span> ; i++) &#123;</span><br><span class="line">document.write(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;=i ; j++) &#123;</span><br><span class="line">document.write(<span class="string">"&lt;td&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出  1 * 1 = 1</span></span><br><span class="line">document.write(i + <span class="string">" * "</span> + j + <span class="string">" = "</span> + </span><br><span class="line">( i*j) +<span class="string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>);</span><br><span class="line">document.write(<span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*//输出换行</span></span><br><span class="line"><span class="comment">document.write("&lt;br&gt;");*/</span></span><br><span class="line">document.write(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.完成表格嵌套</span></span><br><span class="line">document.write(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><h4 id="Function：函数-方法-对象"><a href="#Function：函数-方法-对象" class="headerlink" title="Function：函数(方法)对象"></a>Function：函数(方法)对象</h4><ul><li>创建：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">var</span> fun = <span class="keyword">new</span> Function(形式参数列表,方法体);  <span class="comment">//忘掉吧</span></span><br><span class="line"><span class="number">2</span>. </span><br><span class="line">function 方法名称(形式参数列表)&#123;</span><br><span class="line">         方法体</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. </span><br><span class="line"><span class="keyword">var</span> 方法名 = function(形式参数列表)&#123;</span><br><span class="line">         方法体</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法：</p></li><li><p>属性：</p><blockquote><p>length:代表形参的个数</p></blockquote></li><li><p>特点：</p><ol><li>方法定义是，形参的类型不用写,返回值类型也不写。</li><li>方法是一个对象，如果定义名称相同的方法，会覆盖</li><li>在JS中，方法的调用只与方法的名称有关，和参数列表无关</li><li>在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</li></ol></li><li><p>调用:<code>方法名称(实际参数列表);</code></p></li></ul><h4 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array:数组对象"></a>Array:数组对象</h4><ol><li>创建：<ol><li>var arr = new Array(元素列表);</li><li>var arr = new Array(默认长度);</li><li>var arr = [元素列表];</li></ol></li><li>方法<ol><li>join(参数):将数组中的元素按照指定的分隔符拼接为字符串</li><li>push()    向数组的末尾添加一个或更多元素，并返回新的长度。</li></ol></li><li>属性 <code>length:数组的长度</code></li><li>特点：<ol><li>JS中，数组元素的类型可变的。</li><li>JS中，数组长度可变的。</li></ol></li></ol><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><h4 id="Date：日期对象"><a href="#Date：日期对象" class="headerlink" title="Date：日期对象"></a>Date：日期对象</h4><ol><li>创建：<code>var date = new Date();</code></li><li>方法：<ul><li>toLocaleString()：返回当前date对象对应的时间本地字符串格式</li><li>getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</li></ul></li></ol><h4 id="Math：数学对象"><a href="#Math：数学对象" class="headerlink" title="Math：数学对象"></a>Math：数学对象</h4><ol><li><p>创建：</p><ul><li>特点：Math对象不用创建，直接使用。  Math.方法名();</li></ul></li><li><p>方法：</p><ul><li>random():返回 0 ~ 1 之间的随机数。 含0不含1</li><li>ceil(x)：对数进行上舍入。</li><li>floor(x)：对数进行下舍入。</li><li>round(x)：把数四舍五入为最接近的整数。</li></ul></li><li><p>属性：</p><ul><li>PI<ul><li>Number</li><li>String</li></ul></li></ul></li></ol><h4 id="RegExp：正则表达式对象"><a href="#RegExp：正则表达式对象" class="headerlink" title="RegExp：正则表达式对象"></a>RegExp：正则表达式对象</h4><ol><li><p>正则表达式：定义字符串的组成规则。</p><ol><li><p>单个字符:[] 如： [a] [ab] [a-zA-Z0-9_]</p><ul><li><p>特殊符号代表特殊含义的单个字符:</p><blockquote><p>\d:单个数字字符 [0-9]</p><p>\w:单个单词字符[a-zA-Z0-9_]</p></blockquote></li></ul></li><li><p>量词符号：</p><ul><li>?：表示出现0次或1次</li><li>*：表示出现0次或多次</li><li>+：出现1次或多次</li><li>{m,n}:表示 m&lt;= 数量 &lt;= n<ul><li><code>*</code> m如果缺省： {,n}:最多n次</li><li>n如果缺省：{m,} 最少m次</li></ul></li></ul></li><li><p>开始结束符号</p><ul><li>^:开始</li><li>$:结束</li></ul></li></ol></li><li><p>正则对象：</p><ol><li>创建<ol><li>var reg = new RegExp(“正则表达式”);</li><li>var reg = /正则表达式/;</li></ol></li><li>方法    <ol><li>test(参数):验证指定的字符串是否符合正则定义的规范    <h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h4></li></ol></li></ol></li><li><p>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  <code>方法名();</code></p></li><li><p>方法：</p><ul><li><p>encodeURI():url编码</p></li><li><p>decodeURI():url解码</p></li><li><p>encodeURIComponent():url编码,编码的字符更多</p></li><li><p>decodeURIComponent():url解码</p></li><li><p>parseInt():将字符串转为数字</p><ul><li>逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</li></ul></li><li><p>isNaN():判断一个值是否是NaN</p><ul><li>NaN六亲不认，连自己都不认。NaN参与的==比较全部问false</li></ul></li><li><p>eval():将 JavaScript 字符串，并把它作为脚本代码来执行。</p></li></ul></li><li><p>URL编码</p><ul><li>传智播客 =  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2</li></ul></li></ol><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ol><li><p>概念：Browser Object Model 浏览器对象模型</p><ul><li>将浏览器各个组成部分封装成一个个对象 ：浏览器Navigator对象/窗口Window对象/地址栏Location对象/history对象/显示器屏幕对象Screen/DOM对象 Document对象/</li></ul></li><li><p>Window对象</p><ul><li><p>特点</p><ul><li>window对象不需要创建可以直接使用 window对象：window.方法名()</li><li>window引用可以忽略 方法名() </li></ul></li><li><p>方法</p><ul><li>与弹出框有关：<ol><li>alert() : 显示带有一段消息和一个确认按钮的警告框</li><li>confirm：显示带有一段消息以及确认和取消按钮的对话框，点击确定，返回true</li><li>prompt：显示可提示用户输入的对话框，返回值为获取用户输入的值</li></ol></li><li>与打开关闭有关的方法<ol><li>close()：关闭浏览器窗口（谁调用就关闭谁）</li><li>open()：打开一个新浏览器窗口 其返回值为打开的新窗口对象</li></ol></li><li>与定时器有关的方法<ol><li>setTimeout()：在指定的毫秒数后调用函数或计算表达式<ol><li>参数：js代码或者方法对象  毫秒值</li><li>返回值：唯一标识，用于取消定时器</li></ol></li><li>clearTimeout：取消上面方法设置的timeout</li><li>setIntval()：按照指定的周期（以毫秒计）来调用函数数或计算表达式</li><li>clearIntervar()：关闭 </li></ol></li></ul></li><li><p>属性</p><ol><li>获取其他BOM对象 history /location / navigator / screen</li><li>获取DOM对象 document对象</li></ol></li></ul></li><li><p>Location对象：地址栏对象</p><ul><li>创建(获取): window.location/location </li><li>方法：<ul><li>reload() 重新加载当前文档，即刷新页面    </li><li>获取href：location.href 返回值为URL地址,也可以为其赋值为目标网址,就可以实现不用新开窗口直接到目标网址    </li></ul></li></ul></li><li><p>History：历史记录对象 (当前窗口)</p><ul><li>创建(获取)：window.history/history</li><li>方法:<ul><li>back()：加载history列表中的前一个url</li><li>forword()：加载下一个url</li><li>go()：加载某个具体页面</li></ul></li><li>属性：<ul><li>length：返回当前窗口历史列表中的url数量</li></ul></li></ul></li></ol><h4 id="DOM–控制html文档的内容-文档对象模型，DOM树型结构"><a href="#DOM–控制html文档的内容-文档对象模型，DOM树型结构" class="headerlink" title="DOM–控制html文档的内容,文档对象模型，DOM树型结构"></a>DOM–控制html文档的内容,文档对象模型，DOM树型结构</h4><ul><li><p>定义了访问HTML和XML文档的标准</p></li><li><p>将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</p></li><li><p>核心DOM - 针对任何结构化文档的结构模型</p><ul><li>Document：文档对象<ol><li>创建（获取）：在html dom模型中可以使用window对象来获取 window.document/document</li><li>方法：获取Element对象<ul><li>getElementById()：根据ID属性值获取元素对象。ID属性唯一 .value获取内容  </li><li>getElementByTagName()：元素名称获取对象，返回数组</li><li>getElementByClassName()：根据class属性获取元素对象们，返回数组</li><li>getElementByName()：根据name属性值获取对象，返回数组</li></ul></li><li>方法：创建其他DOM对象<ul><li>creatAttribute(name)</li><li>creatComment()</li><li>creatElement()</li><li>creatTextNode()</li></ul></li><li>属性</li></ol></li><li>Element：元素对象<ol><li>获取/创建：通过Document来获取和创建</li><li>方法：removeAttribute():删除属性/setAttribute()：设置属性</li></ol></li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li><li>Node：节点对象，其他5个的父对象<ol><li>所有DOM对象都可以被认为是一个节点</li><li>方法：<ul><li>CRUD DOM树：appendChild()：向节点的子节点列表的结尾添加新的子节点/removeChild()：删除（并返回）当前节点的指定子节点/replaceChild()：用新节点替换子节点  </li></ul></li><li>属性：<ul><li>parentNode：返回节点的父节点</li></ul></li></ol></li><li>获取页面标签（元素）对象Element</li></ul></li><li><p>HTML DOM</p></li><li><p>标签体的设置和获取：innerHTML</p><ol><li>标签替换 原标签.innerHTML = “新标签内容”；</li><li>标签追加：追加标签.innerHTML += “标签内容”；在该标签下添加标签</li></ol></li><li><p>使用HTML元素对象的属性</p></li><li><p>控制元素样式设置</p><ul><li>使用元素的style属性设置<ol><li>标签标识符.style.样式 = “1px sclid red”; 放在函数中，设置在事件下产生改变</li><li>样式为font-size 在这里就是.fontSize</li></ol></li><li>提前定义好类选择器的样式，通过元素className来设置class的属性值<ol><li>标签标识符.className = “类选择器名”<blockquote><p>document.getElementById(“id”) 通过id获取元素对象</p></blockquote></li></ol></li></ul></li><li><p>操作Element对象</p><ul><li><p>修改属性值：对象.属性值 = “”；</p><blockquote><p>明确获取的对象是哪一个</p><p>查看API文档，查看其中有哪些属性可以修改</p></blockquote></li><li><p>修改标签内容</p><blockquote><p>属性：对象.innerHTML = “”; </p></blockquote></li></ul></li></ul><h4 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h4><ul><li><p>功能：某些组件被执行了某些操作后，触发某些代码的执行</p></li><li><p>事件：某些操作，如：单机、双击、键盘操作、鼠标移动等</p></li><li><p>事件源：组件，如：按钮， 文本输入框</p></li><li><p>监听器：代码</p></li><li><p>注册监听：将事件、事件源、监听器结合在一起。当事件源上发生了某个事件，则触发执行某个监听器代码</p></li><li><p>常见事件：</p><ul><li>点击事件：onclick 单击事件 /ondblclick 双击事件</li><li>焦点事件：onblur 元素失去焦点 （一般用于表单验证）/ onfocus 元素获得焦点</li><li>加载事件：onload 一个页面或图片完成加载（在加载完后再加载javascript，给body 加onload或者直接window.onload = function(){事件}）</li><li>鼠标事件：onmouse(down/up/move/out/over) (onmousedown:)</li><li>键盘事件：onkey(down/up/press)</li><li>选中和改变：onchange 域的内容改变/ onselect 文本被选中</li><li>表单事件：onsubmit 确认按钮被点击/onreset 重置按钮被点击</li></ul></li><li><p>绑定事件：</p><ul><li><p>在html标签上指定事件属性，属性就是js代码（可以写一个函数再在这里调用）</p><blockquote><p>事件：onclick —单击事件。耦合度太高</p></blockquote></li><li><p>通过js获取元素对象，指定事件属性，设置一个函数，并绑定该函数 </p></li></ul></li></ul><h4 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h4><ul><li>轮播图</li><li>分析<ul><li>在页面上使用img标签展示图片</li><li>定义一个方法，修改图片的src属性</li><li>定义一个定时器，每隔三秒调用方法一次</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img id=<span class="string">"img"</span> src=<span class="string">"img/banner_1.jpg"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> number = <span class="number">1</span></span><br><span class="line">        <span class="function">function <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            number ++;</span><br><span class="line">            <span class="comment">//三张图 </span></span><br><span class="line">            <span class="keyword">if</span>(number &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                number = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取img对象</span></span><br><span class="line">            <span class="keyword">var</span> img = document.getElementById(<span class="string">"img"</span>);</span><br><span class="line">            img.src = <span class="string">"img/banner_"</span>+number+<span class="string">".jpg"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置定时器</span></span><br><span class="line">        setInterval(fun, <span class="number">300</span>)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>自动跳转</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span id="time"&gt;5&lt;/span&gt;秒之后，自动跳转到页面...</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> second = <span class="number">5</span>;</span><br><span class="line">    <span class="function">function <span class="title">showtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        second--;</span><br><span class="line">        <span class="keyword">if</span>(second&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            location.href = <span class="string">"https:www.baidu.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> time = document.getElementById(<span class="string">"time"</span>);</span><br><span class="line">        time.innerHTML = second + <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setInterval(showtime, <span class="number">1000</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript：&quot;&gt;&lt;a href=&quot;#JavaScript：&quot; class=&quot;headerlink&quot; title=&quot;JavaScript：&quot;&gt;&lt;/a&gt;JavaScript：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.w3school.com.
      
    
    </summary>
    
    
      <category term="前端开发" scheme="https://github.com/learn666-gif/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="https://github.com/learn666-gif/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://github.com/learn666-gif/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>最好的JAVA--JDBC连接池&amp;JDBCTemplate</title>
    <link href="https://github.com/learn666-gif/2020/05/04/%E6%9C%80%E5%A5%BD%E7%9A%84JAVA-JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0-JDBCTemplate/"/>
    <id>https://github.com/learn666-gif/2020/05/04/%E6%9C%80%E5%A5%BD%E7%9A%84JAVA-JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0-JDBCTemplate/</id>
    <published>2020-05-04T03:28:46.000Z</published>
    <updated>2020-05-04T03:30:27.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念：其实就是一个容器-集合-，存放数据库连接的容器。"><a href="#概念：其实就是一个容器-集合-，存放数据库连接的容器。" class="headerlink" title="概念：其实就是一个容器(集合)，存放数据库连接的容器。"></a>概念：其实就是一个容器(集合)，存放数据库连接的容器。</h3><ul><li>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</li></ul><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><ul><li>节约资源</li><li>用户访问高效</li></ul><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ul><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li><p>方法：</p><ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li></ul><h3 id="C3P0：数据库连接池技术"><a href="#C3P0：数据库连接池技术" class="headerlink" title="C3P0：数据库连接池技术"></a>C3P0：数据库连接池技术</h3><ul><li><p>步骤：</p><ol><li><p>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</p><ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p></li><li><p>获取连接： getConnection</p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池对象</span></span><br><span class="line">DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2. 获取连接对象</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><h3 id="Druid：数据库连接池实现技术，由阿里巴巴提供的"><a href="#Druid：数据库连接池实现技术，由阿里巴巴提供的" class="headerlink" title="Druid：数据库连接池实现技术，由阿里巴巴提供的"></a>Druid：数据库连接池实现技术，由阿里巴巴提供的</h3><ul><li>步骤：<ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.加载配置文件</span></span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is =DruidDemo.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">pro.load(is);</span><br><span class="line"><span class="comment">//4.获取连接池对象</span></span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="comment">//5.获取连接</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure><ul><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="comment">//2.静态</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1。加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().</span></span><br><span class="line">            getResourceAsStream("druid.properties"));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmp, Connection conn)</span></span>&#123;</span><br><span class="line">        close(<span class="keyword">null</span>,stmp, conn);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,</span></span></span><br><span class="line"><span class="function"><span class="params">    Statement stmp, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmp.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</li></ul><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li><code>JdbcTemplate template = new JdbcTemplate(ds);</code></li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ol><li><code>update()</code>:执行DML语句。增、删、改语句</li><li><code>queryForMap()</code>:查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li><code>queryForList()</code>:查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li><code>query()</code>:查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li><code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code></li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ol></li></ul><h3 id="运用："><a href="#运用：" class="headerlink" title="运用："></a>运用：</h3><ul><li>需求：<ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.datasource.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.datasource.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> </span><br><span class="line">    JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">//Junit单元测试,让方法独立执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 balance 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义sql</span></span><br><span class="line">        String sql = <span class="string">"update account set </span></span><br><span class="line"><span class="string">        balance = 10000 where id = ?"</span>;</span><br><span class="line">        <span class="comment">//执行sql</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = template.update(sql,<span class="number">1</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2。添加一个记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into account</span></span><br><span class="line"><span class="string">        (name, balance) values(?,?)"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = template.update(sql, <span class="string">"qq"</span>, <span class="number">2312</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除添加的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from account where name = ?"</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = template.update(sql, <span class="string">"qq"</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1的记录，将其封装成Map集合</span></span><br><span class="line"><span class="comment">     * 注意：该方法的查询结果集只能是一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account where id = ?"</span>;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; map = </span><br><span class="line">        template.queryForMap(sql, <span class="number">1</span>);</span><br><span class="line">        System.out.println(map);  </span><br><span class="line">        <span class="comment">//&#123;id=1, name=张三, balance=10000&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5。查询所有的数据，先封装为map集合，再将map集合放在list集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Map&lt;String, Object&gt;&gt; list = </span><br><span class="line">        template.queryForList(sql);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, </span><br><span class="line">        <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                <span class="keyword">final</span> String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">double</span> balance = rs.getDouble(<span class="string">"balance"</span>);</span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setName(name);</span><br><span class="line">                emp.setBalance(balance);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Emp&gt; query = template.query(sql, </span><br><span class="line">        <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : query) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7.查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select count(id) from account"</span>;</span><br><span class="line">        <span class="keyword">final</span> Long total = template.queryForObject(</span><br><span class="line">        sql, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emp&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", balance="</span> + balance +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(Double balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库连接池&quot;&gt;&lt;a href=&quot;#数据库连接池&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池&quot;&gt;&lt;/a&gt;数据库连接池&lt;/h2&gt;&lt;h3 id=&quot;概念：其实就是一个容器-集合-，存放数据库连接的容器。&quot;&gt;&lt;a href=&quot;#概念：其实就是一个容
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JDBC" scheme="https://github.com/learn666-gif/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb核心技术03--JDBC</title>
    <link href="https://github.com/learn666-gif/2020/05/03/JavaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF03--JDBC/"/>
    <id>https://github.com/learn666-gif/2020/05/03/JavaWeb%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF03--JDBC/</id>
    <published>2020-05-03T09:07:26.000Z</published>
    <updated>2020-05-11T01:21:29.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><pre><code>1. JDBC基本概念2. 快速入门3. 对JDBC中各个接口和类详解</code></pre><h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h3><ul><li>Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</li><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><h3 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h3><ul><li>步骤：</li></ul><ol><li><p>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</p><ul><li>1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</li><li>2.右键–&gt;Add As Library</li></ul></li><li><p>注册驱动</p></li><li><p>获取数据库连接对象 Connection</p></li><li><p>定义sql</p></li><li><p>获取执行sql语句的对象 Statement</p></li><li><p>执行sql，接受返回结果</p></li><li><p>处理结果</p></li><li><p>释放资源</p></li></ol><ul><li>代码实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入驱动jar包</span></span><br><span class="line"><span class="comment">//2.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:</span></span><br><span class="line"><span class="string">//localhost:3306/db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//4.定义sql语句</span></span><br><span class="line">String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line"><span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//6.执行sql</span></span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//7.处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//8.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><pre><code>3. 详解各个对象：    1. DriverManager：驱动管理对象        * 功能：            1. 注册驱动：告诉程序该使用哪一个数据库驱动jar                static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。                 写代码使用：  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块                 static {                        try {                            java.sql.DriverManager.registerDriver(new Driver());                        } catch (SQLException E) {                            throw new RuntimeException(&quot;Can&apos;t register driver!&quot;);                        }                    }                注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。            2. 获取数据库连接：                * 方法：static Connection getConnection(String url, String user, String password)                 * 参数：                    * url：指定连接的路径                        * 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称                        * 例子：jdbc:mysql://localhost:3306/db3                        * 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称                    * user：用户名                    * password：密码     2. Connection：数据库连接对象        1. 功能：            1. 获取执行sql 的对象                * Statement createStatement()                * PreparedStatement prepareStatement(String sql)              2. 管理事务：                * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务                * 提交事务：commit()                 * 回滚事务：rollback()     3. Statement：执行sql的对象        1. 执行sql            1. boolean execute(String sql) ：可以执行任意的sql 了解             2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句                * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。            3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句        2. 练习：            1. account表 添加一条记录            2. account表 修改记录            3. account表 删除一条记录            代码：                Statement stmt = null;                Connection conn = null;                try {                    //1. 注册驱动                    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                    //2. 定义sql                    String sql = &quot;insert into account values(null,&apos;王五&apos;,3000)&quot;;                    //3.获取Connection对象                    conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;, &quot;root&quot;, &quot;root&quot;);                    //4.获取执行sql的对象 Statement                    stmt = conn.createStatement();                    //5.执行sql                    int count = stmt.executeUpdate(sql);//影响的行数                     //6.处理结果                    System.out.println(count);                    if(count &gt; 0){                        System.out.println(&quot;添加成功！&quot;);                    }else{                        System.out.println(&quot;添加失败！&quot;);                    }                } catch (ClassNotFoundException e) {                    e.printStackTrace();                } catch (SQLException e) {                    e.printStackTrace();                }finally {                    //stmt.close();                    //7. 释放资源                    //避免空指针异常                    if(stmt != null){                        try {                            stmt.close();                        } catch (SQLException e) {                            e.printStackTrace();                        }                    }                    if(conn != null){                        try {                            conn.close();                        } catch (SQLException e) {                            e.printStackTrace();                        }                    }                }    4. ResultSet：结果集对象,封装查询结果        * boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true        * getXxx(参数):获取数据            * Xxx：代表数据类型   如： int getInt() ,    String getString()            * 参数：                1. int：代表列的编号,从1开始   如： getString(1)                2. String：代表列名称。 如： getDouble(&quot;balance&quot;)        * 注意：            * 使用步骤：                1. 游标向下移动一行                2. 判断是否有数据                3. 获取数据               //循环判断游标是否是最后一行末尾。                while(rs.next()){                    //获取数据                    //6.2 获取数据                    int id = rs.getInt(1);                    String name = rs.getString(&quot;name&quot;);                    double balance = rs.getDouble(3);                    System.out.println(id + &quot;---&quot; + name + &quot;---&quot; + balance);                }        * 练习：            * 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。                1. 定义Emp类                2. 定义方法 public List&lt;Emp&gt; findAll(){}                3. 实现方法 select * from emp;    5. PreparedStatement：执行sql的对象        1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题            1. 输入用户随便，输入密码：a&apos; or &apos;a&apos; = &apos;a            2. sql：select * from user where username = &apos;fhdsjkf&apos; and password = &apos;a&apos; or &apos;a&apos; = &apos;a&apos;         2. 解决sql注入问题：使用PreparedStatement对象来解决        3. 预编译的SQL：参数使用?作为占位符        4. 步骤：            1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar            2. 注册驱动            3. 获取数据库连接对象 Connection            4. 定义sql                * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;            5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)             6. 给？赋值：                * 方法： setXxx(参数1,参数2)                    * 参数1：？的位置编号 从1 开始                    * 参数2：？的值            7. 执行sql，接受返回结果，不需要传递sql语句            8. 处理结果            9. 释放资源        5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作            1. 可以防止SQL注入            2. 效率更高</code></pre><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><pre><code>* 目的：简化书写* 分析：    1. 注册驱动也抽取    2. 抽取一个方法获取连接对象        * 需求：不想传递参数（麻烦），还得保证工具类的通用性。        * 解决：配置文件            jdbc.properties                url=                user=                password=    3. 抽取一个方法释放资源* 代码实现：    public class JDBCUtils {    private static String url;    private static String user;    private static String password;    private static String driver;    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static{        //读取资源文件，获取值。        try {            //1. 创建Properties集合类。            Properties pro = new Properties();            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器            ClassLoader classLoader = JDBCUtils.class.getClassLoader();            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);            String path = res.getPath();            System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));            pro.load(new FileReader(path));            //3. 获取数据，赋值            url = pro.getProperty(&quot;url&quot;);            user = pro.getProperty(&quot;user&quot;);            password = pro.getProperty(&quot;password&quot;);            driver = pro.getProperty(&quot;driver&quot;);            //4. 注册驱动            Class.forName(driver);        } catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }    /**     * 获取连接     * @return 连接对象     */    public static Connection getConnection() throws SQLException {        return DriverManager.getConnection(url, user, password);    }    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(Statement stmt,Connection conn){        if( stmt != null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( conn != null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close(ResultSet rs,Statement stmt, Connection conn){        if( rs != null){            try {                rs.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( stmt != null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if( conn != null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }}* 练习：    * 需求：        1. 通过键盘录入用户名和密码        2. 判断用户是否登录成功            * select * from user where username = &quot;&quot; and password = &quot;&quot;;            * 如果这个sql有查询结果，则成功，反之，则失败    * 步骤：        1. 创建数据库表 user            CREATE TABLE USER(                id INT PRIMARY KEY AUTO_INCREMENT,                username VARCHAR(32),                PASSWORD VARCHAR(32)            );            INSERT INTO USER VALUES(NULL,&apos;zhangsan&apos;,&apos;123&apos;);            INSERT INTO USER VALUES(NULL,&apos;lisi&apos;,&apos;234&apos;);        2. 代码实现：            public class JDBCDemo9 {                public static void main(String[] args) {                    //1.键盘录入，接受用户名和密码                    Scanner sc = new Scanner(System.in);                    System.out.println(&quot;请输入用户名：&quot;);                    String username = sc.nextLine();                    System.out.println(&quot;请输入密码：&quot;);                    String password = sc.nextLine();                    //2.调用方法                    boolean flag = new JDBCDemo9().login(username, password);                    //3.判断结果，输出不同语句                    if(flag){                        //登录成功                        System.out.println(&quot;登录成功！&quot;);                    }else{                        System.out.println(&quot;用户名或密码错误！&quot;);                    }                }                /**                 * 登录方法                 */                public boolean login(String username ,String password){                    if(username == null || password == null){                        return false;                    }                    //连接数据库判断是否登录成功                    Connection conn = null;                    Statement stmt =  null;                    ResultSet rs = null;                    //1.获取连接                    try {                        conn =  JDBCUtils.getConnection();                        //2.定义sql                        String sql = &quot;select * from user where username = &apos;&quot;+username+&quot;&apos; and password = &apos;&quot;+password+&quot;&apos; &quot;;                        //3.获取执行sql的对象                        stmt = conn.createStatement();                        //4.执行查询                        rs = stmt.executeQuery(sql);                        //5.判断                       /* if(rs.next()){//如果有下一行，则返回true                            return true;                        }else{                            return false;                        }*/                       return rs.next();//如果有下一行，则返回true                    } catch (SQLException e) {                        e.printStackTrace();                    }finally {                        JDBCUtils.close(rs,stmt,conn);                    }                    return false;                }            }</code></pre><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><pre><code>1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。2. 操作：    1. 开启事务    2. 提交事务    3. 回滚事务3. 使用Connection对象来管理事务    * 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务        * 在执行sql之前开启事务    * 提交事务：commit()         * 当所有sql都执行完提交事务    * 回滚事务：rollback()         * 在catch中回滚事务4. 代码：    public class JDBCDemo10 {        public static void main(String[] args) {            Connection conn = null;            PreparedStatement pstmt1 = null;            PreparedStatement pstmt2 = null;            try {                //1.获取连接                conn = JDBCUtils.getConnection();                //开启事务                conn.setAutoCommit(false);                //2.定义sql                //2.1 张三 - 500                String sql1 = &quot;update account set balance = balance - ? where id = ?&quot;;                //2.2 李四 + 500                String sql2 = &quot;update account set balance = balance + ? where id = ?&quot;;                //3.获取执行sql对象                pstmt1 = conn.prepareStatement(sql1);                pstmt2 = conn.prepareStatement(sql2);                //4. 设置参数                pstmt1.setDouble(1,500);                pstmt1.setInt(2,1);                pstmt2.setDouble(1,500);                pstmt2.setInt(2,2);                //5.执行sql                pstmt1.executeUpdate();                // 手动制造异常                int i = 3/0;                pstmt2.executeUpdate();                //提交事务                conn.commit();            } catch (Exception e) {                //事务回滚                try {                    if(conn != null) {                        conn.rollback();                    }                } catch (SQLException e1) {                    e1.printStackTrace();                }                e.printStackTrace();            }finally {                JDBCUtils.close(pstmt1,conn);                JDBCUtils.close(pstmt2,null);            }        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. JDBC基本概念
2. 快速入门
3. 对JDBC中各个接口和类详解&lt;/code&gt;&lt;/pre&gt;&lt;h2 
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="mysql数据库" scheme="https://github.com/learn666-gif/tags/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JAVA实现网络编程--网络通信杂谈</title>
    <link href="https://github.com/learn666-gif/2020/05/02/JAVA%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9D%82%E8%B0%88/"/>
    <id>https://github.com/learn666-gif/2020/05/02/JAVA%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%9D%82%E8%B0%88/</id>
    <published>2020-05-02T13:21:07.000Z</published>
    <updated>2020-05-02T13:30:49.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【网络编程】"><a href="#【网络编程】" class="headerlink" title="【网络编程】"></a>【网络编程】</h1><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>软件架构CS／BS</li><li>网络通信三要素</li><li>TCP通信</li><li>Socket套接字</li><li>ServerSocket</li></ul><h1 id="第一章-网络编程入门"><a href="#第一章-网络编程入门" class="headerlink" title="第一章 网络编程入门"></a>第一章 网络编程入门</h1><h2 id="1-1软件结构"><a href="#1-1软件结构" class="headerlink" title="1.1软件结构"></a>1.1软件结构</h2><ul><li><strong>C/S结构</strong> ：全称为Client/Server结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1_cs.jpg" alt=""></p><p><strong>B/S结构</strong> ：全称为Browser/Server结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2_bs.jpg" alt=""></p><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><h2 id="1-2-网络通信协议"><a href="#1-2-网络通信协议" class="headerlink" title="1.2 网络通信协议"></a>1.2 网络通信协议</h2><ul><li><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li></ul><ul><li><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/3_tcp_ip.jpg" alt=""></p><p>上图中，TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。<br>链路层：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br>网络层：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br>运输层：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。<br>应用层：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</p><h2 id="1-3-协议分类"><a href="#1-3-协议分类" class="headerlink" title="1.3 协议分类"></a>1.3 协议分类</h2><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/UDP%E9%80%9A%E4%BF%A1%E5%9B%BE%E8%A7%A3.bmp" alt="UDP通信图解"></p><p>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</p><p>数据报(Datagram):网络传输的基本单位 </p><ul><li><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</li></ul></li></ul></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/4_tcp.jpg" alt=""></p><p>​    完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h2 id="1-4-网络编程三要素"><a href="#1-4-网络编程三要素" class="headerlink" title="1.4 网络编程三要素"></a>1.4 网络编程三要素</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li><strong>协议：</strong>计算机网络通信必须遵守的规则，已经介绍过了，不再赘述。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li></ul><p><strong>IP地址分类</strong></p><ul><li><p>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><p><strong>常用命令</strong></p><ul><li>查看本机IP地址，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>检查网络是否连通，在控制台输入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping 空格 IP地址</span><br><span class="line">ping <span class="number">220.181</span><span class="number">.57</span><span class="number">.216</span></span><br></pre></td></tr></table></figure><p><strong>特殊的IP地址</strong></p><ul><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code> 。</li></ul><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h1 id="第二章-TCP通信程序"><a href="#第二章-TCP通信程序" class="headerlink" title="第二章 TCP通信程序"></a>第二章 TCP通信程序</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h2 id="2-2-Socket类"><a href="#2-2-Socket类" class="headerlink" title="2.2 Socket类"></a>2.2 Socket类</h2><p><code>Socket</code> 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><code>public Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><blockquote><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote></li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br></pre></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><p><code>public InputStream getInputStream()</code> ： 返回此套接字的输入流。</p><ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public OutputStream getOutputStream()</code> ： 返回此套接字的输出流。</p><ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><p><code>public void close()</code> ：关闭此套接字。</p><ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。 </li></ul></li><li><p><code>public void shutdownOutput()</code> ： 禁用此套接字的输出流。   </p><ul><li>任何先前写出的数据将被发送，随后终止输出流。 </li></ul><h2 id="2-3-ServerSocket类"><a href="#2-3-ServerSocket类" class="headerlink" title="2.3 ServerSocket类"></a>2.3 ServerSocket类</h2></li></ul><p><code>ServerSocket</code>类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ServerSocket(int port)</code> ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br></pre></td></tr></table></figure><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><code>public Socket accept()</code> ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><h2 id="2-4-简单的TCP网络程序"><a href="#2-4-简单的TCP网络程序" class="headerlink" title="2.4 简单的TCP网络程序"></a>2.4 简单的TCP网络程序</h2><h3 id="TCP通信分析图解"><a href="#TCP通信分析图解" class="headerlink" title="TCP通信分析图解"></a>TCP通信分析图解</h3><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Scoket对象，获取InputStream，读取客户端发送的数据。</li></ol><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg" alt=""></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote><ol start="6"><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Scoket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><h3 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h3><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">      <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b)；</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="comment">//5.关闭资源.</span></span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line"><span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.获取流对象 . 输出流</span></span><br><span class="line">OutputStream os = client.getOutputStream();</span><br><span class="line"><span class="comment">// 3.写出数据.</span></span><br><span class="line">os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line"><span class="comment">// 4. 关闭资源 .</span></span><br><span class="line">os.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h3><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.接收连接 accept 方法, 返回 socket 对象.</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.通过socket 获取输入流</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.一次性读取数据</span></span><br><span class="line">      <span class="comment">// 4.1 创建字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="comment">// 4.2 据读取到字节数组中.</span></span><br><span class="line">        <span class="keyword">int</span> len = is.read(b)；</span><br><span class="line">        <span class="comment">// 4.3 解析数组,打印字符串信息</span></span><br><span class="line">        String msg = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">      <span class="comment">// =================回写数据=======================</span></span><br><span class="line">      <span class="comment">// 5. 通过 socket 获取输出流</span></span><br><span class="line">       OutputStream out = server.getOutputStream();</span><br><span class="line">      <span class="comment">// 6. 回写数据</span></span><br><span class="line">       out.write(<span class="string">"我很好,谢谢你"</span>.getBytes());</span><br><span class="line">      <span class="comment">// 7.关闭资源.</span></span><br><span class="line">      out.close();</span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端 发送数据"</span>);</span><br><span class="line"><span class="comment">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span></span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.通过Scoket,获取输出流对象 </span></span><br><span class="line">OutputStream os = client.getOutputStream();</span><br><span class="line"><span class="comment">// 3.写出数据.</span></span><br><span class="line">os.write(<span class="string">"你好么? tcp ,我来了"</span>.getBytes());</span><br><span class="line">      <span class="comment">// ==============解析回写=========================</span></span><br><span class="line">      <span class="comment">// 4. 通过Scoket,获取 输入流对象</span></span><br><span class="line">      InputStream in = client.getInputStream();</span><br><span class="line">      <span class="comment">// 5. 读取数据数据</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">      <span class="keyword">int</span> len = in.read(b);</span><br><span class="line">      System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line"><span class="comment">// 6. 关闭资源 .</span></span><br><span class="line">      in.close();</span><br><span class="line">os.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-综合案例"><a href="#第三章-综合案例" class="headerlink" title="第三章 综合案例"></a>第三章 综合案例</h1><h2 id="3-1-文件上传案例"><a href="#3-1-文件上传案例" class="headerlink" title="3.1 文件上传案例"></a>3.1 文件上传案例</h2><h3 id="文件上传分析图解"><a href="#文件上传分析图解" class="headerlink" title="文件上传分析图解"></a>文件上传分析图解</h3><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6_upload.jpg" alt="">    </p><h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><p><strong>服务端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">      ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">  <span class="comment">// 2. 建立连接 </span></span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line">      <span class="comment">// 3. 创建流对象</span></span><br><span class="line">      <span class="comment">// 3.1 获取输入流,读取文件数据</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">        <span class="comment">// 3.2 创建输出流,保存到本地 .</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.jpg"</span>));</span><br><span class="line"><span class="comment">// 4. 读写数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 关闭 资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUPload_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件  </span></span><br><span class="line">        BufferedInputStream bis  = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端 </span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream   bos   = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据. </span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ; </span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line"></span><br><span class="line">        bos.close(); </span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close(); </span><br><span class="line">        System.out.println(<span class="string">"文件上传完毕 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传优化分析"><a href="#文件上传优化分析" class="headerlink" title="文件上传优化分析"></a>文件上传优化分析</h3><ol><li><p><strong>文件名称写死的问题</strong></p><p>服务端，保存文件的名称如果写死，那么最终导致服务器硬盘，只会保留一个文件，建议使用系统时间优化，保证文件名称唯一，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis()+<span class="string">".jpg"</span>) <span class="comment">// 文件名称</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>循环接收的问题</strong></p><p>服务端，指保存一个文件就关闭了，之后的用户无法再上传，这是不符合实际的，使用循环改进，可以不断的接收不同用户的文件，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次接收新的连接,创建一个Socket</span></span><br><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>效率问题</strong></p><p>服务端，在接收大文件时，可能耗费几秒钟的时间，此时不能接收其他用户上传，所以，使用多线程技术优化，代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>（<span class="keyword">true</span>）&#123;</span><br><span class="line">    Socket accept = serverSocket.accept();</span><br><span class="line">    <span class="comment">// accept 交给子线程处理.</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      ......</span><br><span class="line">        InputStream bis = accept.getInputStream();</span><br><span class="line">      ......</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化实现"><a href="#优化实现" class="headerlink" title="优化实现"></a>优化实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">      <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/* </span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                      bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//4. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信息回写分析图解"><a href="#信息回写分析图解" class="headerlink" title="信息回写分析图解"></a>信息回写分析图解</h3><p>前四步与基本文件上传一致.</p><ol start="5"><li>【服务端】获取输出流，回写数据。</li><li>【客户端】获取输入流，解析回写数据。</li></ol><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6_upload2.jpg" alt=""></p><h4 id="回写实现"><a href="#回写实现" class="headerlink" title="回写实现"></a>回写实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器 启动.....  "</span>);</span><br><span class="line">        <span class="comment">// 1. 创建服务端ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2. 循环接收,建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket accept = serverSocket.accept();</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          3. socket对象交给子线程处理,进行读写操作</span></span><br><span class="line"><span class="comment">               Runnable接口中,只有一个run方法,使用lambda表达式简化格式</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    <span class="comment">//3.1 获取输入流对象</span></span><br><span class="line">                    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(accept.getInputStream());</span><br><span class="line">                    <span class="comment">//3.2 创建输出流对象, 保存到本地 .</span></span><br><span class="line">                    FileOutputStream fis = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">                    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fis);</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="comment">// 3.3 读写数据</span></span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4.=======信息回写===========================</span></span><br><span class="line">                    System.out.println(<span class="string">"back ........"</span>);</span><br><span class="line">                    OutputStream out = accept.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    out.close();</span><br><span class="line">                    <span class="comment">//================================</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. 关闭 资源</span></span><br><span class="line">                    bos.close();</span><br><span class="line">                    bis.close();</span><br><span class="line">                    accept.close();</span><br><span class="line">                    System.out.println(<span class="string">"文件上传已保存"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 创建输入流,读取本地文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.jpg"</span>));</span><br><span class="line">        <span class="comment">// 1.2 创建输出流,写到服务端</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据.</span></span><br><span class="line">        <span class="keyword">byte</span>[] b  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span> ];</span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> (( len  = bis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭输出流,通知服务端,写出数据完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件发送完毕"</span>);</span><br><span class="line">        <span class="comment">// 3. =====解析回写============</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        in.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">// ============================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-模拟B-S服务器-扩展知识点"><a href="#3-2-模拟B-S服务器-扩展知识点" class="headerlink" title="3.2 模拟B\S服务器(扩展知识点)"></a>3.2 模拟B\S服务器(扩展知识点)</h2><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>准备页面数据，web文件夹。</p><p>复制到我们Module中，比如复制到day08中</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%A4%8D%E5%88%B6.png" alt=""></p></li><li><p>我们模拟服务器端，ServerSocket类监听端口，使用浏览器访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">    Socket socket = server.accept();</span><br><span class="line">    InputStream in = socket.getInputStream();</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = in.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">    socket.close();</span><br><span class="line">    server.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE.jpg" alt=""></p></li><li><p>服务器程序中字节输入流可以读取到浏览器发来的请求信息</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E8%AF%BB%E5%8F%96%E8%AE%BF%E9%97%AE%E4%BF%A1%E6%81%AF.jpg" alt=""></p></li></ol><p>GET/web/index.html HTTP/1.1是浏览器的请求消息。/web/index.html为浏览器想要请求的服务器端的资源,使用字符串切割方式获取到请求的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">BufferedReader readWb = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">String requst = readWb.readLine();</span><br><span class="line"><span class="comment">//取出请求资源的路径</span></span><br><span class="line">String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//去掉web前面的/</span></span><br><span class="line">String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">System.out.println(path);</span><br></pre></td></tr></table></figure><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p>服务端实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务端  启动 , 等待连接 .... "</span>);</span><br><span class="line">        <span class="comment">// 创建ServerSocket 对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 转换流读取浏览器的请求消息</span></span><br><span class="line">        BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">        String requst = readWb.readLine();</span><br><span class="line">        <span class="comment">// 取出请求资源的路径</span></span><br><span class="line">        String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">// 去掉web前面的/</span></span><br><span class="line">        String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 读取客户端请求的资源文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 字节输出流,将文件写会客户端</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 写入HTTP协议响应头,固定写法</span></span><br><span class="line">        out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">        out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 必须要写入空行,否则浏览器不解析</span></span><br><span class="line">        out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        readWb.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问效果"><a href="#访问效果" class="headerlink" title="访问效果"></a>访问效果</h3><ul><li><strong>火狐</strong></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E6%95%88%E6%9E%9C%E5%9B%BE1.png" alt=""></p><blockquote><p>小贴士：不同的浏览器，内核不一样，解析效果有可能不一样。</p></blockquote><p>发现浏览器中出现很多的叉子,说明浏览器没有读取到图片信息导致。</p><p>浏览器工作原理是遇到图片会开启一个线程进行单独的访问,因此在服务器端加入线程技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Web(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Web</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.socket=socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//转换流,读取浏览器请求第一行</span></span><br><span class="line">                BufferedReader readWb = <span class="keyword">new</span></span><br><span class="line">                        BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String requst = readWb.readLine();</span><br><span class="line">                <span class="comment">//取出请求资源的路径</span></span><br><span class="line">                String[] strArr = requst.split(<span class="string">" "</span>);</span><br><span class="line">                System.out.println(Arrays.toString(strArr));</span><br><span class="line">                String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                System.out.println(path);</span><br><span class="line"></span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">                System.out.println(fis);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">                <span class="comment">//向浏览器 回写数据</span></span><br><span class="line">                OutputStream out = socket.getOutputStream();</span><br><span class="line">                out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">                out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                out.close();</span><br><span class="line">                readWb.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问效果：</strong></p><p>图解：</p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/JAVA%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/BS%E9%80%9A%E4%BF%A1.bmp" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【网络编程】&quot;&gt;&lt;a href=&quot;#【网络编程】&quot; class=&quot;headerlink&quot; title=&quot;【网络编程】&quot;&gt;&lt;/a&gt;【网络编程】&lt;/h1&gt;&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网络编程" scheme="https://github.com/learn666-gif/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象</title>
    <link href="https://github.com/learn666-gif/2020/05/02/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://github.com/learn666-gif/2020/05/02/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-05-02T11:54:09.000Z</published>
    <updated>2020-05-11T03:58:18.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-面向对象思想"><a href="#第1章-面向对象思想" class="headerlink" title="第1章 面向对象思想"></a>第1章 面向对象思想</h1><h2 id="1-1-面向对象思想概述"><a href="#1-1-面向对象思想概述" class="headerlink" title="1.1 面向对象思想概述"></a>1.1 面向对象思想概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下， 使用Java语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面 向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算 机事件的设计思想。 它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去 操作实现。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>洗衣服:</p><ul><li>面向过程:把衣服脱下来–&gt;找一个盆–&gt;放点洗衣粉–&gt;加点水–&gt;浸泡10分钟–&gt;揉一揉–&gt;清洗衣服–&gt;拧干–&gt;晾 起来</li><li>面向对象:把衣服脱下来–&gt;打开全自动洗衣机–&gt;扔衣服–&gt;按钮–&gt;晾起来</li></ul><p>区别:</p><ul><li><p>面向过程:强调步骤。 </p></li><li><p>面向对象:强调对象，这里的对象就是洗衣机。</p></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。 面向对象的语言中，包含了三大基本特征，即封装、继承和多态。</p><h2 id="1-2-类和对象"><a href="#1-2-类和对象" class="headerlink" title="1.2 类和对象"></a>1.2 类和对象</h2><p>环顾周围，你会发现很多对象，比如桌子，椅子，同学，老师等。桌椅属于办公用品，师生都是人类。那么什么是类呢?什么是对象呢? </p><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><ul><li>类:是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该 类事物。</li></ul><p>现实中，描述一类事物:</p><ul><li><p>属性:就是该事物的状态信息。 行为:就是该事物能够做什么。<br>举例:小猫。</p></li><li><p>属性:名字、体重、年龄、颜色。 行为:走、跑、叫。</p></li></ul><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><ul><li>对象:是一类事物的具体体现。对象是类的一个实例(对象并不是找个女朋友)，必然具备该类事物的属性和行为。</li></ul><p>现实中，一类事物的一个实例:一只小猫。 </p><p>举例:  一只小猫。</p><p>属性:tom、5kg、2 years、yellow。 行为:溜墙根走、蹦跶的跑、喵喵叫。 </p><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li>类是对一类事物的描述，是抽象的。 </li><li>对象是一类事物的实例，是具体的。 </li><li>类是对象的模板，对象是类的实体。</li></ul><h2 id="1-3-类的定义"><a href="#1-3-类的定义" class="headerlink" title="1.3 类的定义"></a>1.3 类的定义</h2><h3 id="事物与类的对比"><a href="#事物与类的对比" class="headerlink" title="事物与类的对比"></a>事物与类的对比</h3><p>现实世界的一类事物:</p><ul><li><p>属性:事物的状态信息。 </p></li><li><p>行为:事物能够做什么。 </p></li></ul><p>Java中用class描述事物也是如此:</p><ul><li>成员变量:对应事物的属性 </li><li>成员方法:对应事物的行为 </li></ul><h3 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h3><ul><li><p>定义类:就是定义类的成员，包括成员变量和成员方法。 </p></li><li><p>成员变量:和以前定义变量几乎是一样的。只不过位置发生了改变。在类中，方法外。 </p></li><li><p>成员方法:和以前定义方法几乎是一样的。只不过把static去掉。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123; </span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的定义格式举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">String name;<span class="comment">//姓名 </span></span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="comment">//学习的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//吃饭的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学习饿了要吃饭"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-对象的使用"><a href="#1-4-对象的使用" class="headerlink" title="1.4 对象的使用"></a>1.4 对象的使用</h2><h3 id="对象的使用格式"><a href="#对象的使用格式" class="headerlink" title="对象的使用格式"></a>对象的使用格式</h3><ul><li>创建对象:</li></ul><p><code>类名 对象名 = new 类名();</code></p><ul><li><p>使用对象访问类中的成员:</p><pre><code>对象名.成员变量; 对象名.成员方法();</code></pre></li><li><p>对象的使用格式举例:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01_Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象格式:类名 对象名 = new 类名();</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(<span class="string">"s:"</span>+s); <span class="comment">//cn.itcast.Student@100363</span></span><br><span class="line"><span class="comment">//直接输出成员变量值 </span></span><br><span class="line">System.out.println(<span class="string">"姓名:"</span>+s.name); <span class="comment">//null </span></span><br><span class="line">System.out.println(<span class="string">"年龄:"</span>+s.age); <span class="comment">//0 </span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"><span class="comment">//给成员变量赋值 </span></span><br><span class="line">s.name = <span class="string">"赵丽颖"</span>; </span><br><span class="line">s.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次输出成员变量的值 </span></span><br><span class="line">System.out.println(<span class="string">"姓名:"</span>+s.name); <span class="comment">//赵丽颖 </span></span><br><span class="line">System.out.println(<span class="string">"年龄:"</span>+s.age); <span class="comment">//18 </span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"><span class="comment">//调用成员方法</span></span><br><span class="line">s.study(); <span class="comment">// "好好学习，天天向上" </span></span><br><span class="line">s.eat(); <span class="comment">// "学习饿了要吃饭"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h3><table><thead><tr><th align="center"></th><th align="center">数据类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">基本类型</td><td align="center">整数(byte，short，int，long)</td><td align="center">0</td></tr><tr><td align="center"></td><td align="center">浮点数(float，double)</td><td align="center">0.0</td></tr><tr><td align="center"></td><td align="center">字符(char)</td><td align="center">‘\u0000’</td></tr><tr><td align="center"></td><td align="center">布尔(boolean)</td><td align="center">false</td></tr><tr><td align="center">引用类型</td><td align="center">数组，类，接口</td><td align="center">null</td></tr></tbody></table><h2 id="1-5-类与对象的练习"><a href="#1-5-类与对象的练习" class="headerlink" title="1.5 类与对象的练习"></a>1.5 类与对象的练习</h2><h3 id="定义手机类"><a href="#定义手机类" class="headerlink" title="定义手机类"></a>定义手机类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123; </span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">String brand; <span class="comment">//品牌 </span></span><br><span class="line"><span class="keyword">int</span> price; <span class="comment">//价格 </span></span><br><span class="line">String color; <span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="comment">//打电话</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发短信</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"群发短信"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义测试类"><a href="#定义测试类" class="headerlink" title="定义测试类"></a>定义测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//输出成员变量值 System.out.println("品牌:"+p.brand);//null </span></span><br><span class="line">System.out.println(<span class="string">"价格:"</span>+p.price);<span class="comment">//0 </span></span><br><span class="line">System.out.println(<span class="string">"颜色:"</span>+p.color);<span class="comment">//null</span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"></span><br><span class="line">p.brand = <span class="string">"锤子"</span>; </span><br><span class="line">p.price = <span class="number">2999</span>; </span><br><span class="line">p.color = <span class="string">"棕色"</span>;</span><br><span class="line"><span class="comment">//再次输出成员变量值 </span></span><br><span class="line">System.out.println(<span class="string">"品牌:"</span>+p.brand);<span class="comment">//锤子 </span></span><br><span class="line">System.out.println(<span class="string">"价格:"</span>+p.price);<span class="comment">//2999 </span></span><br><span class="line">System.out.println(<span class="string">"颜色:"</span>+p.color);<span class="comment">//棕色 </span></span><br><span class="line">System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line"><span class="comment">//调用成员方法 </span></span><br><span class="line">p.call(<span class="string">"紫霞"</span>); </span><br><span class="line">p.sendMessage();</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-对象内存图"><a href="#1-6-对象内存图" class="headerlink" title="1.6 对象内存图"></a>1.6 对象内存图</h2><h3 id="只有一个对象的内存图"><a href="#只有一个对象的内存图" class="headerlink" title="只有一个对象的内存图"></a>只有一个对象的内存图</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/01-%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="只有一个对象的内存图"></p><h3 id="两个对象使用同一个方法的内存图"><a href="#两个对象使用同一个方法的内存图" class="headerlink" title="两个对象使用同一个方法的内存图"></a>两个对象使用同一个方法的内存图</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/02-%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="两个对象使用同一个方法的内存图"></p><h3 id="两个引用指向同一个对象的内存图"><a href="#两个引用指向同一个对象的内存图" class="headerlink" title="两个引用指向同一个对象的内存图"></a>两个引用指向同一个对象的内存图</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/03-%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="两个引用指向同一个对象的内存图"></p><h3 id="使用对象类型作为方法的参数"><a href="#使用对象类型作为方法的参数" class="headerlink" title="使用对象类型作为方法的参数"></a>使用对象类型作为方法的参数</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/04-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="使用对象类型作为方法的参数"></p><h3 id="使用对象类型作为方法的返回值"><a href="#使用对象类型作为方法的返回值" class="headerlink" title="使用对象类型作为方法的返回值"></a>使用对象类型作为方法的返回值</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/oop/05-%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.png" alt="使用对象类型作为方法的返回值"></p><h2 id="1-7-成员变量和局部变量区别"><a href="#1-7-成员变量和局部变量区别" class="headerlink" title="1.7 成员变量和局部变量区别"></a>1.7 成员变量和局部变量区别</h2><p>变量根据定义位置的不同，我们给变量起了不同的名字。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String color;  <span class="comment">//成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> speed = <span class="number">80</span>; <span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(<span class="string">"时速"</span>+speed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在类中的位置不同"><a href="#在类中的位置不同" class="headerlink" title="在类中的位置不同"></a>在类中的位置不同</h3><ul><li>成员变量:类中，方法外</li><li>局部变量:方法中或者方法声明上(形式参数) </li></ul><h3 id="作用范围不一样"><a href="#作用范围不一样" class="headerlink" title="作用范围不一样"></a>作用范围不一样</h3><ul><li>成员变量:类中 </li><li>局部变量:方法中</li></ul><h3 id="初始化值的不同"><a href="#初始化值的不同" class="headerlink" title="初始化值的不同"></a>初始化值的不同</h3><ul><li>成员变量:有默认值 </li><li>局部变量:没有默认值。必须先定义，赋值，最后使用</li></ul><h3 id="在内存中的位置不同"><a href="#在内存中的位置不同" class="headerlink" title="在内存中的位置不同"></a>在内存中的位置不同</h3><ul><li>成员变量:堆内存 </li><li>局部变量:栈内存</li></ul><h3 id="生命周期不同"><a href="#生命周期不同" class="headerlink" title="生命周期不同"></a>生命周期不同</h3><ul><li>成员变量:随着对象的创建而存在，随着对象的消失而消失 </li><li>局部变量:随着方法的调用而存在，随着方法的调用完毕而消失</li></ul><h1 id="第二章-封装"><a href="#第二章-封装" class="headerlink" title="第二章 封装"></a>第二章 封装</h1><h2 id="2-1-封装概述"><a href="#2-1-封装概述" class="headerlink" title="2.1 封装概述"></a>2.1 封装概述</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。 封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的 方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>将属性隐藏起来，若需要访问某个属性，提供公共方法对其访问。</p><h2 id="2-2-封装的步骤"><a href="#2-2-封装的步骤" class="headerlink" title="2.2 封装的步骤"></a>2.2 封装的步骤</h2><ul><li>使用 private 关键字来修饰成员变量。</li><li>对需要访问的成员变量，提供对应的一对 getXxx 方法 、 setXxx 方法。 </li></ul><h2 id="2-3-封装的操作——private关键字"><a href="#2-3-封装的操作——private关键字" class="headerlink" title="2.3 封装的操作——private关键字"></a>2.3 封装的操作——private关键字</h2><h3 id="private的含义"><a href="#private的含义" class="headerlink" title="private的含义"></a>private的含义</h3><ol><li>private是一个权限修饰符，代表最小权限。</li><li>可以修饰成员变量和成员方法。</li><li>被private修饰后的成员变量和成员方法，只在本类中才能访问。</li></ol><h3 id="private的使用格式"><a href="#private的使用格式" class="headerlink" title="private的使用格式"></a>private的使用格式</h3><ul><li>使用 private 修饰成员变量，代码如下</li></ul><p><code>private 数据类型 变量名 ;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提供 getXxx 方法 / setXxx 方法，可以访问成员变量，代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123; </span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; </span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-封装优化1——this关键字"><a href="#2-4-封装优化1——this关键字" class="headerlink" title="2.4 封装优化1——this关键字"></a>2.4 封装优化1——this关键字</h2><p>发现 setXxx 方法中的形参名字并不符合见名知意的规定，那么如果修改与成员变量名一致，是否就见名知意 了呢?代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        name = name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">        age = age;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过修改和测试，我们发现新的问题，成员变量赋值失败了。也就是说，在修改了 setXxx() 的形参变量名后，方 法并没有给成员变量赋值!这是由于形参变量名与成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无 法访问到成员变量，从而赋值失败。所以，我们只能使用this关键字，来解决这个重名问题。</p><h3 id="this的含义"><a href="#this的含义" class="headerlink" title="this的含义"></a>this的含义</h3><ul><li>this代表所在类的当前对象的引用(地址值)，即对象自己的引用。</li></ul><blockquote><p>记住 :方法被哪个对象调用，方法中的this就代表那个对象。即谁在调用，this就代表谁。</p></blockquote><h3 id="this使用格式"><a href="#this使用格式" class="headerlink" title="this使用格式"></a>this使用格式</h3><p><code>this.成员变量名</code></p><ul><li><p>使用 this 修饰方法中的变量，解决成员变量被隐藏的问题，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//name = name;</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//age = age;</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>小贴士:方法中只有一个变量名时，默认也是使用 this 修饰，可以省略不写。</p></blockquote><h2 id="2-5-封装优化2——构造方法"><a href="#2-5-封装优化2——构造方法" class="headerlink" title="2.5 封装优化2——构造方法"></a>2.5 封装优化2——构造方法</h2><ul><li>当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</li></ul><blockquote><p>小贴士:无论你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数构造方法， 一旦自己定义了构造方法，Java自动提供的默认无参数构造方法就会失效。</p></blockquote><h3 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 构造方法名(参数列表)&#123; </span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，甚至不需要void。使用 构造方法后，代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>如果你不提供构造方法，系统会给出无参数构造方法。</li><li>如果你提供了构造方法，系统将不再提供无参数构造方法。</li><li>构造方法是可以重载的，既可以定义参数，也可以不定义参数。</li></ol><h2 id="2-6-标准代码——JavaBean"><a href="#2-6-标准代码——JavaBean" class="headerlink" title="2.6 标准代码——JavaBean"></a>2.6 标准代码——JavaBean</h2><p>JavaBean 是 Java语言编写类的一种标准规范。符合 JavaBean 的类，要求类必须是具体的和公共的，并且具有无参数的构造方法，提供用来操作成员变量的 set 和 get 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123; </span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//构造方法 </span></span><br><span class="line">    <span class="comment">// 无参构造方法【必须】 </span></span><br><span class="line">    <span class="comment">// 有参构造方法【建议】 </span></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="comment">//getXxx()</span></span><br><span class="line">    <span class="comment">//setXxx()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写符合 JavaBean 规范的类，以学生类为例，标准代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类，代码如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造使用</span></span><br><span class="line">        Student s= <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(<span class="string">"柳岩"</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>); System.out.println(s.getName()+<span class="string">"‐‐‐"</span>+s.getAge());</span><br><span class="line">        <span class="comment">//带参构造使用</span></span><br><span class="line">        Student s2= <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>,<span class="number">18</span>); </span><br><span class="line">        System.out.println(s2.getName()+<span class="string">"‐‐‐"</span>+s2.getAge());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-面向对象思想&quot;&gt;&lt;a href=&quot;#第1章-面向对象思想&quot; class=&quot;headerlink&quot; title=&quot;第1章 面向对象思想&quot;&gt;&lt;/a&gt;第1章 面向对象思想&lt;/h1&gt;&lt;h2 id=&quot;1-1-面向对象思想概述&quot;&gt;&lt;a href=&quot;#1-1-面向对象思
      
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/tags/JAVA%E7%BC%96%E7%A8%8B/"/>
    
      <category term="面向对象" scheme="https://github.com/learn666-gif/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>python小知识--小小爬虫概述</title>
    <link href="https://github.com/learn666-gif/2020/04/27/python%E5%B0%8F%E7%9F%A5%E8%AF%86-%E5%B0%8F%E5%B0%8F%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/"/>
    <id>https://github.com/learn666-gif/2020/04/27/python%E5%B0%8F%E7%9F%A5%E8%AF%86-%E5%B0%8F%E5%B0%8F%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/</id>
    <published>2020-04-27T02:52:10.000Z</published>
    <updated>2020-04-28T10:39:15.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a>爬虫概述</h2><p>爬虫就是给网站发起请求，并从响应中提取需要的数据的自动化程序</p><h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><h3 id="发起请求，获取相应"><a href="#发起请求，获取相应" class="headerlink" title="发起请求，获取相应"></a>发起请求，获取相应</h3><ul><li>通过http库，对目标站点进行请求，等同于自己打开浏览器，输入网址</li><li>常用库：urllib（标准库）, urllib3, requests</li><li>服务器会返回请求的内容，一般为：html，二进制文件（音频/视频），文档，json字符串等</li></ul><h3 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h3><ul><li>寻找需要的信息，就是利用正则表达式或者其他库提目标信息</li></ul><blockquote><p>F12  查看网页源码: Elements：源码 Console: 页面后台输出 Network：监控网络状况（有我们需要的一些关键信息，如头信息，User-Agent,cookies，响应response等）</p></blockquote><ul><li>常用库：re, beautifulsoup4</li></ul><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><ul><li>将解析得到的数据持久化到文件或者数据库中</li></ul><h2 id="爬虫–请求"><a href="#爬虫–请求" class="headerlink" title="爬虫–请求"></a>爬虫–请求</h2><h3 id="使用urllib发送请求"><a href="#使用urllib发送请求" class="headerlink" title="使用urllib发送请求"></a>使用urllib发送请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line"></span><br><span class="line">res = request.urlopen(url)  <span class="comment"># 访问url并获取响应</span></span><br><span class="line"></span><br><span class="line">print(res.geturl())  <span class="comment"># 获取主机地址</span></span><br><span class="line">print(res.getcode())  <span class="comment"># 获取请求状态码</span></span><br><span class="line">print(res.info())  <span class="comment"># 获取响应头</span></span><br><span class="line"></span><br><span class="line">html = res.read()  <span class="comment"># 获取的是字节形式的内容</span></span><br><span class="line">html.decode(<span class="string">"utf-8"</span>)  <span class="comment"># 解码</span></span><br><span class="line"></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><ul><li>状态码</li></ul><blockquote><p>2xx：正常访问</p><p>3xx：发生了重定向，访问A内部转发到B网站</p><p>4xx：404，页面不存在 403，请求被禁止(反爬)</p><p>5xx：服务器内部错误</p></blockquote><ul><li>出现403则存在反爬，需要添加User-Agent   <code>HTTP Error 403: Forbidden</code></li><li>反爬措施：将自己的User-agent信息加入到header中（基本）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.dianping.com'</span></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel </span></span><br><span class="line"><span class="string">        Mac OS X 10_15_4) AppleWebKit/537.36 </span></span><br><span class="line"><span class="string">        (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(url, headers=header)  <span class="comment"># 访问url并获取响应</span></span><br><span class="line">res = request.urlopen(req)</span><br></pre></td></tr></table></figure><h3 id="使用requests发送请求"><a href="#使用requests发送请求" class="headerlink" title="使用requests发送请求"></a>使用requests发送请求</h3><ul><li>安装：pip install requests</li><li>发起请求requests.get()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.dianping.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反爬--添加header</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"www.dianping.com"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS "</span></span><br><span class="line">                  <span class="string">"AppleWebKit/537.36 (KHTML, like Gecko) "</span></span><br><span class="line">                  <span class="string">"Chrome/81.0.4044.122 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url, headers=header)  </span><br><span class="line"><span class="comment"># 发起请求,不需要像上面进行处理直接使用</span></span><br><span class="line">print(resp.encoding)  <span class="comment"># 查看编码</span></span><br><span class="line">print(resp.status_code)  <span class="comment"># 查看状态码</span></span><br><span class="line"><span class="comment"># html = resp.text 二进制</span></span><br><span class="line">resp.encoding = <span class="string">"utf-8"</span></span><br><span class="line"><span class="comment"># 如果里面没有Content-Type, encoding=utf-8,就以设置为准，否则就是iso8859-1</span></span><br><span class="line">html = resp.text</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h2 id="爬虫–解析"><a href="#爬虫–解析" class="headerlink" title="爬虫–解析"></a>爬虫–解析</h2><h3 id="使用beautifulsoup4解析内容"><a href="#使用beautifulsoup4解析内容" class="headerlink" title="使用beautifulsoup4解析内容"></a>使用beautifulsoup4解析内容</h3><ul><li>beautifulsoup4将复杂的HTML文档转换成一个树形结构，每个节点都是python对象</li><li>安装：pip install beautifulsoup4</li><li>Beautifulsoup4(html)</li></ul><blockquote><p>获取节点：find()、fiand_all(）/select()</p><p>获取属性：attrs</p><p>获取文本：text</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求</span></span><br><span class="line">url = <span class="string">'http://wsjkw.sc.gov.cn/scwsjkw/gzbd/fyzt.shtml'</span></span><br><span class="line">res =requests.get(url)</span><br><span class="line">res.encoding = <span class="string">"utf-8"</span></span><br><span class="line">html = res.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析，需要规定解析器features</span></span><br><span class="line">soup = BeautifulSoup(html, features=<span class="string">"html.parser"</span>)</span><br><span class="line">soup.find(<span class="string">"h2"</span>)  <span class="comment"># 解析所有的h2标签</span></span><br><span class="line">a = soup.find(<span class="string">"a"</span>)  <span class="comment"># 解析获取第一个a标签对象</span></span><br><span class="line"><span class="comment"># print(a.attrs)  # 获取该对象的属性信息</span></span><br><span class="line">u = a.attrs[<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取的url与其前面部分拼接成新的url</span></span><br><span class="line">url_new = <span class="string">"http://wsjkw.sc.gov.cn"</span> + u</span><br><span class="line">print(url_new)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次请求</span></span><br><span class="line">res_new = requests.get(url_new)</span><br><span class="line">res_new.encoding = <span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次解析</span></span><br><span class="line">soup_new = BeautifulSoup(res_new.text, features=<span class="string">"html.parser"</span>)</span><br><span class="line">s = soup_new.find(<span class="string">"p"</span>) </span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h3 id="使用re解析内容"><a href="#使用re解析内容" class="headerlink" title="使用re解析内容"></a>使用re解析内容</h3><ul><li>re是python自带的正则表达式模块</li><li>re.search(regex, str)</li></ul><blockquote><p>在str中查找满足条件的字符串，匹配不上返回none</p><p>对返回的结果分组，可以在字符串内添加小括号分离数据：groups(), groups(index):返回指定分组内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">confirm_add_patten = <span class="string">"确诊病例(\d+)例"</span></span><br><span class="line">confirm_add = re.search(confirm_add_patten, res_new.text)</span><br><span class="line">print(confirm_add)</span><br><span class="line">print(confirm_add.group())</span><br><span class="line">print(confirm_add.group(<span class="number">0</span>))  <span class="comment"># 所有符合的</span></span><br><span class="line">print(confirm_add.group(<span class="number">1</span>))  <span class="comment"># 匹配正则里的</span></span><br></pre></td></tr></table></figure><h2 id="爬取腾讯疫情数据"><a href="#爬取腾讯疫情数据" class="headerlink" title="爬取腾讯疫情数据"></a>爬取腾讯疫情数据</h2><ul><li>部分网站反爬手段较高，需要较好的反反爬策略</li></ul><h3 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h3><ul><li>分析网站</li><li>F12 查看网站信息，然后在network中查看js的数据信息找到需要的json数据，在headers中复制相关的request url(注意其url取舍)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5'</span></span><br><span class="line"></span><br><span class="line">res = requests.get(url)</span><br><span class="line"><span class="comment"># xx = res.text # json 字符串文本</span></span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">xx = res.text</span><br><span class="line">data = json.loads(xx)  <span class="comment"># 加载json字符串</span></span><br><span class="line">print(type(data[<span class="string">'data'</span>]))  <span class="comment"># str</span></span><br><span class="line"></span><br><span class="line">data_all = json.loads(data[<span class="string">"data"</span>])  <span class="comment"># 继续加载json，变成字典</span></span><br><span class="line">print(type(data_all))  <span class="comment"># dict</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> data_all.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><ul><li>分析处理</li></ul><blockquote><p>lastUpdateTime #最后更新时间</p></blockquote><blockquote><p>chinaTotal #总数</p><p>chinaAdd # 新增</p><p>areaTree : </p><blockquote><p>-name #areaTree[0]: 中国数据</p><p>-today/-total</p><p>-childre：name # 市级数据，列表 today/total</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> traceback  <span class="comment"># 追踪异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tencent_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: 返回历史数据和当日详细数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?</span></span><br><span class="line"><span class="string">    name=disease_other'</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User - Agent"</span>: <span class="string">"Mozilla /</span></span><br><span class="line"><span class="string">         5.0(Macintosh;IntelMacOSX10_15_4) </span></span><br><span class="line"><span class="string">         AppleWebKit / 537.36(KHTML, "</span></span><br><span class="line">         <span class="string">"likeGecko) Chrome / </span></span><br><span class="line"><span class="string">         81.0.4044.122Safari / </span></span><br><span class="line"><span class="string">         537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, headers)</span><br><span class="line">    res = json.loads(r.text) <span class="comment"># json转字典</span></span><br><span class="line">    data_all = json.loads(res[<span class="string">'data'</span>])</span><br><span class="line"></span><br><span class="line">    history = &#123;&#125;  <span class="comment"># 每日总数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_all[<span class="string">'chinaDayList'</span>]:</span><br><span class="line">        ds = <span class="string">"2020."</span>+i[<span class="string">'date'</span>]</span><br><span class="line">        tup = time.strptime(ds, <span class="string">"%Y.%m.%d"</span>)</span><br><span class="line">        ds = time.strftime(<span class="string">"%Y.%m.%d"</span>, tup)</span><br><span class="line">        confirm = i[<span class="string">'confirm'</span>]</span><br><span class="line">        suspect = i[<span class="string">'suspect'</span>]</span><br><span class="line">        heal = i[<span class="string">'heal'</span>]</span><br><span class="line">        dead = i[<span class="string">'dead'</span>]</span><br><span class="line">        history[ds] = &#123;</span><br><span class="line">        <span class="string">"confirm"</span>: confirm, </span><br><span class="line">        <span class="string">"suspect"</span>: suspect, </span><br><span class="line">        <span class="string">"heal"</span>: heal, <span class="string">"dead"</span>: dead&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_all[<span class="string">'chinaDayAddList'</span>]:</span><br><span class="line">        ds = <span class="string">"2020."</span>+i[<span class="string">'date'</span>]</span><br><span class="line">        tup = time.strptime(ds, <span class="string">"%Y.%m.%d"</span>)</span><br><span class="line">        ds = time.strftime(<span class="string">"%Y.%m.%d"</span>, tup)</span><br><span class="line">        confirm = i[<span class="string">'confirm'</span>]</span><br><span class="line">        suspect = i[<span class="string">'suspect'</span>]</span><br><span class="line">        heal = i[<span class="string">'heal'</span>]</span><br><span class="line">        dead = i[<span class="string">'dead'</span>]</span><br><span class="line">        history[ds].update(&#123;<span class="string">"confirm_add"</span>: </span><br><span class="line">        confirm, <span class="string">"suspect_add"</span>: suspect, </span><br><span class="line">        <span class="string">"heal_add"</span>: heal, </span><br><span class="line">        <span class="string">"dead_add"</span>: dead&#125;) <span class="comment"># 更新</span></span><br><span class="line">    <span class="keyword">return</span> history</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_day_details</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?</span></span><br><span class="line"><span class="string">    name=disease_h5'</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User - Agent"</span>: <span class="string">"Mozilla / </span></span><br><span class="line"><span class="string">        5.0(Macintosh;IntelMacOSX10_15_4) </span></span><br><span class="line"><span class="string">        AppleWebKit / 537.36(KHTML, "</span></span><br><span class="line">        <span class="string">"likeGecko) Chrome / 81.0.4044.122Safari </span></span><br><span class="line"><span class="string">        / 537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, headers)</span><br><span class="line">    res = json.loads(r.text) <span class="comment"># json转字典</span></span><br><span class="line">    data_all = json.loads(res[<span class="string">'data'</span>])</span><br><span class="line">    datails = [] <span class="comment"># 当日详细数据</span></span><br><span class="line">    update_time = data_all[<span class="string">"lastUpdateTime"</span>]</span><br><span class="line">    data_country = data_all[<span class="string">"areaTree"</span>]  <span class="comment"># 25个国家</span></span><br><span class="line">    data_provice = data_country[<span class="number">0</span>][<span class="string">"children"</span>]  <span class="comment"># 中国省份</span></span><br><span class="line">    <span class="keyword">for</span> pro_infos <span class="keyword">in</span> data_provice:</span><br><span class="line">        provice = pro_infos[<span class="string">"name"</span>]  <span class="comment"># 名</span></span><br><span class="line">        <span class="keyword">for</span> city_infos <span class="keyword">in</span> pro_infos[<span class="string">'children'</span>]:</span><br><span class="line">            city = city_infos[<span class="string">'name'</span>]</span><br><span class="line">            confirm = city_infos[<span class="string">'total'</span>][<span class="string">"confirm"</span>]</span><br><span class="line">            confirm_add = city_infos[<span class="string">'today'</span>][<span class="string">'confirm'</span>]</span><br><span class="line">            heal = city_infos[<span class="string">'total'</span>][<span class="string">'heal'</span>]</span><br><span class="line">            dead = city_infos[<span class="string">'total'</span>][<span class="string">'dead'</span>]</span><br><span class="line">            datails.append([update_time, provice, </span><br><span class="line">            city, confirm, confirm_add, heal, dead])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datails</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立数据库连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    config = dict(host=<span class="string">'localhost'</span>,</span><br><span class="line">                  user=<span class="string">'root'</span>,</span><br><span class="line">                  password=<span class="string">'123456'</span>,</span><br><span class="line">                  cursorclass=pymysql.cursors.DictCursor,</span><br><span class="line">                  db=<span class="string">'cov'</span>,</span><br><span class="line">                  charset=<span class="string">"utf8"</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">    conn = pymysql.connect(**config)</span><br><span class="line">    cursor = conn.cursor()  <span class="comment"># 创建游标， 默认元祖</span></span><br><span class="line">    print(<span class="string">'数据库连接开启'</span>)</span><br><span class="line">    <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_conn</span><span class="params">(conn, cursor)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    <span class="keyword">if</span> conn:</span><br><span class="line">        conn.close()</span><br><span class="line">    print(<span class="string">'数据库连接关闭'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updata_details</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    更新details表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        li = get_day_details() <span class="comment"># 0是历史数据字典,1最新详细数据列表</span></span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">"insert into details(update_time, </span></span><br><span class="line"><span class="string">        province, </span></span><br><span class="line"><span class="string">        city, </span></span><br><span class="line"><span class="string">        confirm, </span></span><br><span class="line"><span class="string">        confirm_add, </span></span><br><span class="line"><span class="string">        heal, dead) </span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s,%s,%s)"</span></span><br><span class="line">        sql_query = <span class="string">"select %s=(</span></span><br><span class="line"><span class="string">        select update_time from details order </span></span><br><span class="line"><span class="string">        by id desc limit 1)"</span> <span class="comment"># 对比当前最大时间戳</span></span><br><span class="line">        cursor.execute(sql_query, li[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cursor.fetchone():</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>开始更新数据"</span>)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">                cursor.execute(sql, item)</span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>更新数据完毕"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>已经是最新数据"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_history</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入历史数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dic = get_tencent_data()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>开始插入数据"</span>)</span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">'insert into history </span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s,%s,%s,%s)'</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> dic.items():</span><br><span class="line">            <span class="comment"># item 格式&#123;'2020-1-1':</span></span><br><span class="line">            &#123;<span class="string">"confirm"</span>: <span class="number">41</span>, <span class="string">'suspect'</span>: <span class="number">0</span> ...&#125;&#125;</span><br><span class="line">            cursor.execute(sql, [k, </span><br><span class="line">            v.get(<span class="string">"confirm"</span>), </span><br><span class="line">            v.get(<span class="string">"confirm_add"</span>), </span><br><span class="line">            v.get(<span class="string">"suspect"</span>), </span><br><span class="line">            v.get(<span class="string">"suspect_add"</span>),</span><br><span class="line">            v.get(<span class="string">'heal'</span>), </span><br><span class="line">            v.get(<span class="string">'dead'</span>), </span><br><span class="line">            v.get(<span class="string">'dead_add'</span>)])</span><br><span class="line">            conn.commit()</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>插入历史数据完毕"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_history</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    更新历史数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dic = get_tencent_data()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>开始更新数据"</span>)</span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">"insert into history </span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s,%s,%s,%s,%s)"</span></span><br><span class="line">        sql_query = <span class="string">"select confirm </span></span><br><span class="line"><span class="string">        from history where ds = %s"</span></span><br><span class="line">        <span class="keyword">for</span> k ,v <span class="keyword">in</span> dic.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cursor.execute(sql_query, k):</span><br><span class="line">                cursor.execute(sql, [k, </span><br><span class="line">                v.get(<span class="string">"confirm"</span>), </span><br><span class="line">                v.get(<span class="string">"confirm_add"</span>), </span><br><span class="line">                v.get(<span class="string">"suspect"</span>), </span><br><span class="line">                v.get(<span class="string">"suspect_add"</span>),</span><br><span class="line">                v.get(<span class="string">'heal'</span>), </span><br><span class="line">                v.get(<span class="string">'heal_add'</span>), </span><br><span class="line">                v.get(<span class="string">'dead'</span>), </span><br><span class="line">                v.get(<span class="string">'dead_add'</span>)])</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>历史数据更新完毕"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><ul><li>数据库建表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `history`(</span><br><span class="line">`ds` datetime Not NULL COMMENT <span class="string">'日期'</span>,</span><br><span class="line">`confirm` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计确诊'</span>,</span><br><span class="line">`confirm_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增确诊'</span>,</span><br><span class="line">`suspect` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'剩余疑似'</span>,</span><br><span class="line">`suspect_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增疑似'</span>,</span><br><span class="line">`heal` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计治愈'</span>,</span><br><span class="line">`dead` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计死亡'</span>,</span><br><span class="line">`dead_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增死亡'</span>,</span><br><span class="line">PRIMARY KEY (`ds`) USING BTREE</span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET = utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `details`(</span><br><span class="line">`id` int(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`update_time` datetime DEFAULT NULL COMMENT <span class="string">'数据最后更新时间'</span>,</span><br><span class="line">`province` VARCHAR(<span class="number">50</span>) DEFAULT NULL COMMENT <span class="string">'省'</span>,</span><br><span class="line">`city` VARCHAR(<span class="number">50</span>) DEFAULT NULL COMMENT <span class="string">'市'</span>,</span><br><span class="line">`confirm` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计确诊'</span>,</span><br><span class="line">`confirm_add` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'当日新增确诊'</span>,</span><br><span class="line">`heal` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计治愈'</span>,</span><br><span class="line">`dead` int(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">'累计死亡'</span>,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET = utf8mb4;</span><br></pre></td></tr></table></figure><ul><li>数据存储 –pymysql</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 建立数据库连接</span></span><br><span class="line">config = dict(host=<span class="string">'localhost'</span>, </span><br><span class="line">              user=<span class="string">'root'</span>, </span><br><span class="line">              password=<span class="string">'123456'</span>,</span><br><span class="line">              cursorclass=pymysql.cursors.DictCursor, </span><br><span class="line">              db=<span class="string">'cov'</span>)</span><br><span class="line"></span><br><span class="line">conn = pymysql.Connect(**config)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()  <span class="comment"># 创建游标， 默认元祖</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">"select * from history"</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.commit() # 提交事物</span></span><br><span class="line">res = cursor.fetchall()  <span class="comment"># 获取所有查询结果</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="抓取百度热搜数据"><a href="#抓取百度热搜数据" class="headerlink" title="抓取百度热搜数据"></a>抓取百度热搜数据</h2><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><ul><li>百度的数据页面使用了动态渲染技术，需要使用selenium来抓取</li></ul><blockquote><p>selenium是一个用于web应用程序测试的工具，直接运行在浏览器中，就像真正的用户在操作</p><p>安装：pip install selenium</p></blockquote><h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="抓取数据"></a>抓取数据</h3><ul><li>数据都是通过js动态加载的</li><li>安装浏览器（谷歌）打开浏览器设置-关于谷歌-可以查看版本号</li><li>下载对应版本浏览器驱动：<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/</a><blockquote><p>mac下载的驱动需要放在/usr/local/bin 通过chromedriver –version 查看，需要在安全与隐私中把chromedriver去掉才能用</p><p>或者直接放在你当前执行的目录下</p></blockquote></li></ul><blockquote><p>创建浏览器对象</p><p>浏览器.get()</p><p>浏览器.find()</p></blockquote><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_baidu_hot</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回百度疫情热搜</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    option = ChromeOptions()</span><br><span class="line">    option.add_argument(<span class="string">"--headless"</span>)</span><br><span class="line">    <span class="comment"># 隐藏浏览器</span></span><br><span class="line">    option.add_argument(<span class="string">"--no-sandbox"</span>)</span><br><span class="line">    <span class="comment"># linux部署需要禁用</span></span><br><span class="line"></span><br><span class="line">    brower = Chrome(options=option)</span><br><span class="line">    <span class="comment"># executable_path= 浏览器.exe文件位置</span></span><br><span class="line">    brower.get(url=<span class="string">"https://voice.baidu.com/act"</span></span><br><span class="line">                   <span class="string">"/virussearch/virussear"</span></span><br><span class="line">                   <span class="string">"ch?from=osari_map&amp;tab=0&amp;infomore=1"</span>)</span><br><span class="line">    <span class="comment"># print(brower.page_source)   # 查看网页源码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展开按钮的selector</span></span><br><span class="line">    buttur = brower.find_element_by_css_selector(</span><br><span class="line">        <span class="string">'#ptab-0 &gt; div &gt; div.VirusHot_1-5-6_32'</span></span><br><span class="line">        <span class="string">'AY4F.VirusHot_1-5-6_2RnRvg &gt; section &gt; div'</span>)</span><br><span class="line">    buttur.click()  <span class="comment"># 点击</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    c = brower.find_elements_by_xpath(</span><br><span class="line">        <span class="string">'//*[@id="ptab-0"]/div/div[1]/section/a/div/span[2]'</span>)</span><br><span class="line">    context = [i.text <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">    print(context)</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_hotsearch</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    保存到数据库</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        contect = get_baidu_hot()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>：开始更新数据"</span>)</span><br><span class="line">        conn, cursor = get_conn()</span><br><span class="line">        sql = <span class="string">'insert into hotsearch(dt, content) values(%s, %s)'</span></span><br><span class="line">        ts = time.strftime(<span class="string">"%y-%m-%d %X"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> contect:</span><br><span class="line">            cursor.execute(sql, (ts, i))</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;time.asctime()&#125;</span>：数据更新完毕"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        close_conn(conn, cursor)</span><br></pre></td></tr></table></figure><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Flask 是一个使用python编写的轻量级web应用框架。其WSGI(Python Web Server ..)工具包采用Werkzeug,模版引擎则使用Jinja2，目前比较流行</p><h3 id="小应用"><a href="#小应用" class="headerlink" title="小应用"></a>小应用</h3><ul><li>安装：pip install flask</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')   # 使用装饰器定义路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')  # 获取表单信息并返回给页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world2</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.values.get(<span class="string">"name"</span>)</span><br><span class="line">    pwd = request.values.get(<span class="string">'pwd'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"name=<span class="subst">&#123;name&#125;</span>, pwd=<span class="subst">&#123;pwd&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/abc')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world1</span><span class="params">()</span>:</span>  <span class="comment"># 获取ID 提交表单</span></span><br><span class="line">    id = request.values.get(<span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'&lt;form action="/login"&gt;账号：&lt;input name="name" </span></span><br><span class="line"><span class="string">    value="<span class="subst">&#123;id&#125;</span>"&gt;&lt;br&gt;密码：&lt;input name="pwd"&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="submit"&gt;&lt;/form&gt;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="template模版使用"><a href="#template模版使用" class="headerlink" title="template模版使用"></a>template模版使用</h3><ul><li>模版就是事先写好的页面，里面可以使用特殊语法引入变量</li><li>使用render_template返回模版页面 就是前端页面</li><li>return的有三种：字符串、模版、json</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')   # 使用装饰器定义路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/mypage")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moban</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"new.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="使用ajax局部刷新页面"><a href="#使用ajax局部刷新页面" class="headerlink" title="使用ajax局部刷新页面"></a>使用ajax局部刷新页面</h3><ul><li><p>ajax 是Asynchronous Javascript and XML 的简称，通过Ajax向服务器发送请求，接收服务器返回的json数据，然后使用javascript修改网页来实现页面局部数据更新</p></li><li><p>使用jquery框架可方便的编写ajax代码，需要jquery.js文件</p></li><li><p>使用时需要在jquery官网下载相关jquery.js,将其文件放入static/js文件夹中，在相关html调用，就是在head头信息中加入<code>&lt;script src=&quot;../static/js/jquery-3.5.0.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>异步请求–局部刷新 代码</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>疫情追踪<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>实时报道<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义一个button标签点击click函数 点击后执行下面ajax内容</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"/ajax"</span>,  <span class="comment">//请求路由，后端定义的相关路由</span></span></span><br><span class="line"><span class="actionscript">            type:<span class="string">"post"</span>,  <span class="comment">//请求类型</span></span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"name"</span>:<span class="string">"xxx"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"pwd"</span>:<span class="string">"asadwqdw"</span></span></span><br><span class="line"><span class="actionscript">            &#125;, <span class="comment">//数据</span></span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(d)</span> </span>&#123;  </span></span><br><span class="line"><span class="actionscript">            <span class="comment">//请求成功的回调函数，d是后端返回的数据</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"h1"</span>).html(<span class="string">"实时报道替换成了"</span>+d)</span></span><br><span class="line"><span class="actionscript">            &#125;,error:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;  <span class="comment">//请求失败执行的函数</span></span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"发送ajax请求失败"</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/ajax", methods=["get", "post"]) </span></span><br><span class="line"><span class="comment"># 默认为get请求 在ajax中定义url的路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_ceshi</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.values.get(<span class="string">"name"</span>) </span><br><span class="line">    <span class="comment"># 获取前端ajax的date中的数据</span></span><br><span class="line">    pwd = request.values.get(<span class="string">"pwd"</span>)</span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;name, pwd&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"10000"</span> <span class="comment">#前端接收到的d='10000'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/index") #ajax直接写在该页面中，在该页面操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_ap</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="可视化大屏模版制作"><a href="#可视化大屏模版制作" class="headerlink" title="可视化大屏模版制作"></a>可视化大屏模版制作</h2><h3 id="Hbuider–前端软件"><a href="#Hbuider–前端软件" class="headerlink" title="Hbuider–前端软件"></a>Hbuider–前端软件</h3><ul><li>使用绝对定位划分板块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#.css 采用id选择器</span><br><span class="line">#c0&#123;</span><br><span class="line">position: absolute; /*绝对定位*/</span><br><span class="line">width: 40%;</span><br><span class="line">height: 10%;</span><br><span class="line">top: 0;</span><br><span class="line">left: 30%;</span><br><span class="line">/* background: #666666; */</span><br><span class="line">color: white;  /* 字体颜色*/</span><br><span class="line">font-size: 30px;</span><br><span class="line"></span><br><span class="line">display: flex;  /*弹性布局*/</span><br><span class="line">align-items: center;   /*横居中*/</span><br><span class="line">justify-content: center; /*竖居中*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># .html 引用前面的选择器</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>疫情监控<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../static/css/main.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c0"</span>&gt;</span>全国疫情实时追踪<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flask-–-后端"><a href="#flask-–-后端" class="headerlink" title="flask – 后端"></a>flask – 后端</h3><ul><li>自定义工具，utils.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">()</span>:</span></span><br><span class="line">    time_str = time.strftime(<span class="string">"%Y&#123;&#125;%m&#123;&#125;%d %X"</span>)</span><br><span class="line">    <span class="keyword">return</span> time_str.format(<span class="string">"年"</span>, <span class="string">"月"</span>, <span class="string">"日"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_conn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    连接，游标</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">"localhost"</span>,</span><br><span class="line">        user=<span class="string">"root"</span>,</span><br><span class="line">        password=<span class="string">"123456"</span>,</span><br><span class="line">        db=<span class="string">"cov"</span>,</span><br><span class="line">        charset=<span class="string">"utf8"</span>,</span><br><span class="line">    )</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="keyword">return</span> conn, cursor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_conn</span><span class="params">(conn, cursor)</span>:</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(sql, *args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    封装通用查询</span></span><br><span class="line"><span class="string">    :param sql:</span></span><br><span class="line"><span class="string">    :param args:</span></span><br><span class="line"><span class="string">    :return:返回查询结果，((),())</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    conn, cursor = get_conn()</span><br><span class="line">    cursor.execute(sql, args)</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    close_conn(conn, cursor)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cl_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回ID= c1 的数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sql = <span class="string">"SELECT SUM(confirm), "</span> \</span><br><span class="line">          <span class="string">"(SELECT suspect from history "</span> \</span><br><span class="line">          <span class="string">"ORDER BY ds DESC LIMIT 1),"</span> \</span><br><span class="line">          <span class="string">"SUM(heal),SUM(dead) from details "</span> \</span><br><span class="line">          <span class="string">"WHERE update_time=(SELECT update_time </span></span><br><span class="line"><span class="string">          from details ORDER BY update_time desc LIMIT 1)"</span></span><br><span class="line">    res = query(sql)</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>app.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_ap</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"main.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/time")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> utils.get_time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/c1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_c1_data</span><span class="params">()</span>:</span></span><br><span class="line">    data = utils.get_cl_data()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">    <span class="string">"confirm"</span>:int(data[<span class="number">0</span>]),</span><br><span class="line">    <span class="string">"suspect"</span>:int(data[<span class="number">1</span>]),</span><br><span class="line">    <span class="string">"heal"</span>:int(data[<span class="number">2</span>]),</span><br><span class="line">    <span class="string">"dead"</span>:int(data[<span class="number">3</span>])&#125;)</span><br></pre></td></tr></table></figure><h3 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爬虫概述&quot;&gt;&lt;a href=&quot;#爬虫概述&quot; class=&quot;headerlink&quot; title=&quot;爬虫概述&quot;&gt;&lt;/a&gt;爬虫概述&lt;/h2&gt;&lt;p&gt;爬虫就是给网站发起请求，并从响应中提取需要的数据的自动化程序&lt;/p&gt;
&lt;h2 id=&quot;爬虫原理&quot;&gt;&lt;a href=&quot;#爬虫原
      
    
    </summary>
    
    
      <category term="python编程" scheme="https://github.com/learn666-gif/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="https://github.com/learn666-gif/tags/python/"/>
    
      <category term="爬虫" scheme="https://github.com/learn666-gif/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="疫情" scheme="https://github.com/learn666-gif/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>python小工具--notebook</title>
    <link href="https://github.com/learn666-gif/2020/04/27/python%E5%B0%8F%E5%B7%A5%E5%85%B7-notebook/"/>
    <id>https://github.com/learn666-gif/2020/04/27/python%E5%B0%8F%E5%B7%A5%E5%85%B7-notebook/</id>
    <published>2020-04-27T02:02:20.000Z</published>
    <updated>2020-04-27T02:47:36.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h2><p>Jupyter Notebook（又称IPython Notebook）是一个交互式的笔记本，支持运行超过40种编程语言。将介绍Jupyter Notebook的主要特点，了解为什么它能成为人们创造优美的可交互式文档和教育资源的一个强大工具。</p><p>自从Jupyter Notebook 1.0发布以来，越来越多科学家、研究者、教师使用IPython Notebook处理数据、写研究报告、甚至编写书籍。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>安装 <code>pip install notebook</code></li><li>启动 <code>jupyter notebook</code> 其用户为当前使用的目录</li><li>修改工作目录 </li></ul><blockquote><p>`jupyter notebook –generate-config</p><p>编辑jupyter-generate-config 里notebook_dir指到你的目录</p><p><code>c.NotebookApp.notebook_dir = r&#39;/Users/jwang/pyworkplace/note&#39;</code></p></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>新建文件与导入文件，直接导入或者将需要的文件放入运行目录</li></ul><p><img src="" alt="new和上传"></p><p><img src="" alt="运行界面"></p><ul><li>H唤出快捷键提示</li></ul><p><img src="" alt=""></p><ul><li>单元格分类：code, markdown</li><li>命令模式（蓝色边框）与编辑模式（绿色边框）–esc进入命令模式</li><li>常用快捷键</li></ul><blockquote><p>单元格类型转换：Y,M</p><p>插入单元格:A,B</p><p>进入命令模式:esc</p><p>代码补全:Tab</p><p>运行单元格: ctr/shift/alt + enter</p><p>删除单元格: DD</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;notebook&quot;&gt;&lt;a href=&quot;#notebook&quot; class=&quot;headerlink&quot; title=&quot;notebook&quot;&gt;&lt;/a&gt;notebook&lt;/h2&gt;&lt;p&gt;Jupyter Notebook（又称IPython Notebook）是一个交互式的笔记本
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅谈Django微信小程序后台开发</title>
    <link href="https://github.com/learn666-gif/2020/04/17/Django%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E6%B5%85%E6%9E%90/"/>
    <id>https://github.com/learn666-gif/2020/04/17/Django%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E6%B5%85%E6%9E%90/</id>
    <published>2020-04-17T03:55:25.000Z</published>
    <updated>2020-04-17T14:33:49.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django微信小程序后台开发浅析"><a href="#Django微信小程序后台开发浅析" class="headerlink" title="Django微信小程序后台开发浅析"></a>Django微信小程序后台开发浅析</h2><p><a href="#1">1.申请小程序，创建hello world小程序</a></p><p><a href="#2">2.添加交互框和按钮</a></p><p><a href="#3">3.服务器配置</a></p><p><a href="#4">4.配置服务器将后端与微信小程序连接</a></p><more--><h2 id="申请小程序，创建hello-world小程序"><a href="#申请小程序，创建hello-world小程序" class="headerlink" title="申请小程序，创建hello world小程序"></a>申请小程序，创建hello world小程序</h2><p><a name="1"></a></p><h3 id="在微信开发平台http-mp-weixin-qq-com申请小程序并获取APP-id"><a href="#在微信开发平台http-mp-weixin-qq-com申请小程序并获取APP-id" class="headerlink" title="在微信开发平台http://mp.weixin.qq.com申请小程序并获取APP id"></a>在微信开发平台<a href="http://mp.weixin.qq.com" target="_blank" rel="noopener">http://mp.weixin.qq.com</a>申请小程序并获取APP id</h3><ul><li>在微信公众平台注册选择小程序，按照提示进行注册</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat01.jpg" alt=""></p><ul><li>注册成功后，填写小程序基本信息</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat02.jpg" alt=""></p><ul><li>查看小程序详细信息下拉到底部找到AppID</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat03.jpg" alt=""></p><h3 id="下载微信开发者工具"><a href="#下载微信开发者工具" class="headerlink" title="下载微信开发者工具"></a>下载微信开发者工具</h3><ul><li><p>小程序主页选择<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">文档</a>–下载–稳定版Stable build</p></li><li><p>新建小程序项目,将AppID填写进去,不使用云服务（只是测试，如果需要再详细解决）</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat04.jpg" alt=""></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat05.jpg" alt=""></p><h2 id="添加交互框和按钮"><a href="#添加交互框和按钮" class="headerlink" title="添加交互框和按钮"></a>添加交互框和按钮</h2><p><a name="2"></a></p><ul><li>index.wxml</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input"</span> <span class="attr">bindinput</span>=<span class="string">'input'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"calculate"</span>&gt;</span>cal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; result &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>index.wxss</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**index.wxss**/</span><br><span class="line">.input &#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">index</span>.js</span><br><span class="line">//获取应用实例</span><br><span class="line">const app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    resul<span class="variable">t:</span> <span class="string">"暂无结果"</span>,</span><br><span class="line">    formul<span class="variable">a:</span> <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  //事件处理函数</span><br><span class="line">  calculate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      ur<span class="variable">l:</span> <span class="string">'https://192.168.0.100/calculate'</span>,</span><br><span class="line">      dat<span class="variable">a:</span> &#123;</span><br><span class="line">        formul<span class="variable">a:</span> this.data.formula</span><br><span class="line">      &#125;,</span><br><span class="line">      succes<span class="variable">s:</span> <span class="keyword">res</span> =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">res</span>.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">          this.setData(&#123;</span><br><span class="line">            resul<span class="variable">t:</span> <span class="keyword">res</span>.data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  inpu<span class="variable">t:</span> <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> &#123;</span></span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      formul<span class="variable">a:</span> <span class="keyword">e</span>.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="服务器配置（这里采用本地ip-后期部署再修改）"><a href="#服务器配置（这里采用本地ip-后期部署再修改）" class="headerlink" title="服务器配置（这里采用本地ip,后期部署再修改）"></a>服务器配置（这里采用本地ip,后期部署再修改）</h2><p><a name="3"></a></p><ul><li>安装python虚拟环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ pip install virtualenv</span><br><span class="line">$ pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">$ pip install virtualenvwrapper-win (windows系列)</span><br><span class="line"></span><br><span class="line">$ export WORKON_HOME=~/Envs</span><br><span class="line">$ mkdir -p $WORKON_HOME</span><br><span class="line">$ source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><blockquote><p>注意点 virtualenv是初级的工具 只能用在你当前文件夹的目录下面去新建</p></blockquote><blockquote><p>wrapper所带的 mkvirtualenv 和 workon命令可以让你在任何地方管理虚拟环境 不用考虑文件夹位置</p></blockquote><ul><li>创建空文件夹，进入其中新建虚拟环境并激活和安装Django</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtualenv ruimi_django -p python3<span class="number">.6</span></span><br><span class="line">source ruimi_django/bin/activate</span><br><span class="line">pip install django==<span class="number">1.11</span></span><br><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><ul><li><p>pycharm安装Django环境,并选择虚拟环境，详情看<a href="https://learn666-gif.github.io/2019/05/03/Django%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">Django浅析</a></p></li><li><p>创建Django项目并试运行,查看是否成功</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject calculator</span><br><span class="line">cd calculator</span><br><span class="line"></span><br><span class="line"><span class="comment">##修改calculator/settings.py中的ALLOWED_HOSTS = []为ALLOWED_HOSTS = ['*']</span></span><br><span class="line"></span><br><span class="line">cd calculator</span><br><span class="line">python3 manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><h3 id="实现计算机接口"><a href="#实现计算机接口" class="headerlink" title="实现计算机接口"></a>实现计算机接口</h3><ul><li>创建app，并注册该app到setting.py中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp CalculateApi</span><br></pre></td></tr></table></figure><ul><li>进行URL转发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## calculator&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(&#39;^&#39;, include(&#39;CalculateApi.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">## CalculateApi&#x2F;新建urls.py</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(&#39;calculate&#39;, views.calculate)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在views中添加calulate函数进行计算并返回（报文头）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(request)</span>:</span></span><br><span class="line">    formula = request.GET[<span class="string">'formula'</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = eval(formula, &#123;&#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result = <span class="string">'Error formula'</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行服务器，访问http://服务器ip:8000/calculate?formula=2*2-3即可得到结果1</span></span><br></pre></td></tr></table></figure><h2 id="配置服务器将后端与微信小程序连接"><a href="#配置服务器将后端与微信小程序连接" class="headerlink" title="配置服务器将后端与微信小程序连接"></a>配置服务器将后端与微信小程序连接</h2><p><a name="4"></a></p><p>由于微信要求使用https协议进行通讯，我们使用nginx + uwsgi + django来配置https服务器</p><h3 id="uwsgi配置"><a href="#uwsgi配置" class="headerlink" title="uwsgi配置"></a>uwsgi配置</h3><ul><li>安装uwsgi并配置Django项目的uwsgi.ini，在主项目文件夹中新建uwsgi.ini文件添加配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">## pip3 install uwsgi</span><br><span class="line">## touch uwsgi.ini</span><br><span class="line"></span><br><span class="line">[uwsgi]</span><br><span class="line"># django项目监听的socket文件（可以使用端口代替）</span><br><span class="line">socket &#x3D; .&#x2F;calculator.sock</span><br><span class="line"># django项目所在目录</span><br><span class="line">chdir &#x3D; .</span><br><span class="line"># django项目wsgi文件</span><br><span class="line">wsgi-file &#x3D; .&#x2F;calculator&#x2F;wsgi.py</span><br><span class="line"></span><br><span class="line">master &#x3D; true</span><br><span class="line">processes &#x3D; 2</span><br><span class="line">threads &#x3D; 4</span><br><span class="line">vacuum &#x3D; true</span><br><span class="line"></span><br><span class="line"># 通过touch reload可以重启uwsgi服务器</span><br><span class="line">touch-reload &#x3D; .&#x2F;reload</span><br><span class="line"># 日志输出</span><br><span class="line">daemonize &#x3D; calculator.log</span><br></pre></td></tr></table></figure><h3 id="http协议（80端口）"><a href="#http协议（80端口）" class="headerlink" title="http协议（80端口）"></a>http协议（80端口）</h3><ul><li>安装nginx并配置</li></ul><p>Mac下</p><blockquote><p>/usr/local/etc/nginx/nginx.conf （配置文件路径）</p></blockquote><blockquote><p>/usr/local/var/www （服务器默认路径）</p></blockquote><blockquote><p>/usr/local/Cellar/nginx/1.6.2  （貌似是安装路径）</p></blockquote><p>Linux下：</p><blockquote><p>/etc/nginx</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 安装nginx</span><br><span class="line">#sudo apt-get install nginx</span><br><span class="line">#cd &#x2F;etc&#x2F;nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 修改nginx用户</span><br><span class="line">#vim nginx.conf 第一行修改为: user 用户名;</span><br><span class="line"></span><br><span class="line">## 添加80端口的配置文件或者直接在nginx.conf中添加</span><br><span class="line"># sudo touch calculator.conf</span><br><span class="line"># sudo vi calculator.conf</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    listen         80;</span><br><span class="line">    server_name    服务器ip;</span><br><span class="line">    charset UTF-8;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;calculate &#123;</span><br><span class="line">   &#x2F;&#x2F; replace &quot;path&quot; to the path of your project</span><br><span class="line">        uwsgi_pass unix:&#x2F;&#x2F;&#x2F;&quot;path&quot;&#x2F;calculator&#x2F;calculator.sock;</span><br><span class="line">        include &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx服务器. </li></ul><blockquote><p>mac <code>nginx</code></p><p>linux <code>sudo service nginx restart</code></p></blockquote><blockquote><p>重启：nginx -s reload</p></blockquote><blockquote><p>访问服务器的80端口即可访问calculate接口，如http://服务器ip/calculate?formula=2*2-3</p></blockquote><h3 id="https协议（443端口）下nginx配置"><a href="#https协议（443端口）下nginx配置" class="headerlink" title="https协议（443端口）下nginx配置"></a>https协议（443端口）下nginx配置</h3><ul><li>前提：有自己的域名和ssl证书，将calculator.conf配置文件修改如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen         <span class="number">443</span>;</span><br><span class="line">    server_name    your.domain;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate path/to/your/ssl.pem;</span><br><span class="line">    ssl_certificate_key path/to/your/ssl.key;</span><br><span class="line">    ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    charset UTF<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">    client_max_body_size <span class="number">75</span>M;</span><br><span class="line"></span><br><span class="line">    location ~ ^/calculate &#123;</span><br><span class="line">        uwsgi_pass unix:///path/to/calculator/calculator.sock;</span><br><span class="line">        include /etc/nginx/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx服务器，访问服务器443端口即可访问其接口</li></ul><h3 id="配置微信小程序的服务器信息"><a href="#配置微信小程序的服务器信息" class="headerlink" title="配置微信小程序的服务器信息"></a>配置微信小程序的服务器信息</h3><ul><li>小程序只可以跟指定的域名进行网络通信（需要填写到开发后台管理里面）</li><li>小程序必须使用HTTPS发起网络请求</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat06.jpg" alt="服务器配置"></p><ul><li>若没有，可以在微信开发者工具中选择设置-项目设置-勾选-不校验合法域名，建立本地开发对接Django后台进行操作</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/Django-wechat/WeChat08.jpg" alt=""></p><h3 id="远端部署测试"><a href="#远端部署测试" class="headerlink" title="远端部署测试"></a>远端部署测试</h3><ul><li><p>使用git远端同步代码</p></li><li><p>管理依赖环境</p></li></ul><blockquote><p>requirements.txt</p><p>pip install -r requirements.txt</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Django微信小程序后台开发浅析&quot;&gt;&lt;a href=&quot;#Django微信小程序后台开发浅析&quot; class=&quot;headerlink&quot; title=&quot;Django微信小程序后台开发浅析&quot;&gt;&lt;/a&gt;Django微信小程序后台开发浅析&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="小程序浅析" scheme="https://github.com/learn666-gif/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B5%85%E6%9E%90/"/>
    
    
      <category term="Django" scheme="https://github.com/learn666-gif/tags/Django/"/>
    
      <category term="微信小程序" scheme="https://github.com/learn666-gif/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发--配置浅析</title>
    <link href="https://github.com/learn666-gif/2020/03/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://github.com/learn666-gif/2020/03/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-03-17T14:32:06.000Z</published>
    <updated>2020-04-17T16:06:13.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目工程目录"><a href="#项目工程目录" class="headerlink" title="项目工程目录"></a>项目工程目录</h2><h3 id="小程序文件类型"><a href="#小程序文件类型" class="headerlink" title="小程序文件类型"></a>小程序文件类型</h3><ul><li>.wxml 结构，类似于html</li></ul><blockquote><p>标签名字：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由HTML（<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>...）改为===》 微信小程序的WXML (<span class="tag">&lt;<span class="name">view</span>&gt;</span>)`</span><br><span class="line"></span><br><span class="line">`wx:ifwx:for&#123;&#123;&#125;&#125;`</span><br></pre></td></tr></table></figure><ul><li>.wxss 表现，类似于css</li></ul><blockquote><p>具备css的大部分属性</p><p> 新增尺寸单位</p><p>全局样式和局部样式</p></blockquote><ul><li><p>.js  行为 —&gt; 原生js语言</p></li><li><p>.json 配置</p></li></ul><blockquote><p>工具配置—<code>project.config.json</code></p><p> 项目配置—<code>app.json</code></p><p>页面配置—<code>&lt;page name&gt;.json</code></p></blockquote><h3 id="目录解释"><a href="#目录解释" class="headerlink" title="目录解释"></a>目录解释</h3><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro01.jpg" alt=""></p><ul><li>pages目录—页面相关的代码 （新建小程序项目，自动生成）</li><li>utils目录—工具相关代码（网络请求、文件操作等） （新建小程序项目，自动生成）</li><li>其他文件—thirdparty(第三方代码)、conponents(小程序组件代码)、resources(存放小程序资源，图标图片等等)</li></ul><h3 id="小程序的全局入口、配置与样式"><a href="#小程序的全局入口、配置与样式" class="headerlink" title="小程序的全局入口、配置与样式"></a>小程序的全局入口、配置与样式</h3><ul><li>全局入口—app.js</li><li>全局配置—app.json</li><li>全局样式—app.wxss</li></ul><h2 id="小程序框架"><a href="#小程序框架" class="headerlink" title="小程序框架"></a>小程序框架</h2><h3 id="小程序的配置"><a href="#小程序的配置" class="headerlink" title="小程序的配置"></a>小程序的配置</h3><ul><li>全局配置 — <code>app.json</code></li><li>页面配置 — <code>&lt;pages&gt;.json</code></li></ul><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><ul><li>pages列表配置</li><li>window属性配置</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro02.png" alt="wechat_pro02"></p><ul><li>tabbar配置(底部菜单栏)</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/WeChat_pro03.png" alt="WeChat_pro03"></p><ul><li>补充</li></ul><blockquote><p>iconPath 是未选中时的图标</p><p>selectedIconPath 是选中时的图标</p></blockquote><h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><ul><li>只能配置全局配置中的window配置项内容</li><li>会覆盖全局配置中的window配置</li><li>开启下拉刷新</li></ul><blockquote><p>在<pages>.json写入如图所示，即可下拉触发刷新</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro05.png" alt="WeChat_pro05"></p><h3 id="小程序逻辑层"><a href="#小程序逻辑层" class="headerlink" title="小程序逻辑层"></a>小程序逻辑层</h3><ul><li>小程序注册逻辑</li></ul><blockquote><p>App函数</p></blockquote><blockquote><blockquote><p>注册全局唯一的小程序</p></blockquote></blockquote><blockquote><blockquote><p>只能调用一次</p></blockquote></blockquote><blockquote><blockquote><p>接受一个对象作为函数参数，这个对象指定了两个东西（第一个东西是小程序的全局数据，第二个东西是小程序的生命周期回调函数）</p></blockquote></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro06.png" alt="wechat_pro06"></p><ul><li>页面注册逻辑</li></ul><ol><li><p>Page函数</p><blockquote><p>注册一个页面</p><p>接受一个对象作为函数参数，这个对象指定了两个东西（第一个东西是页面数据，第二个东西是页面的生命周期回调函数）</p></blockquote></li><li><p>页面数据</p><blockquote><p>data属性</p></blockquote><p> <code>data:{message: &quot;hello world&quot;,}</code></p><blockquote><p>访问： <code>this.data.message</code></p></blockquote><blockquote><p>修改：<code>this.setData({})</code></p></blockquote><blockquote><p>使用全局数据</p></blockquote><blockquote><p>获取全局唯一的App实例    <code>const app = getApp()</code></p></blockquote><blockquote><p>通过唯一实例获取全局数据 <code>var data = app.globalData</code></p></blockquote></li><li><p>页面生命周期回调</p></li></ol><table><thead><tr><th align="center">生命周期回调函数</th><th align="center">触发时机</th></tr></thead><tbody><tr><td align="center">OnLoad</td><td align="center">生命周期回调—监听页面加载</td></tr><tr><td align="center">OnShow</td><td align="center">生命周期回调—监听页面显示</td></tr><tr><td align="center">OnReady</td><td align="center">生命周期回调—监听页面初次渲染完成</td></tr><tr><td align="center">OnHide</td><td align="center">生命周期回调—监听页面隐藏</td></tr><tr><td align="center">OnUnload</td><td align="center">生命周期回调—监听页面卸载</td></tr></tbody></table><h3 id="小程序的视图层。xxx-wxml"><a href="#小程序的视图层。xxx-wxml" class="headerlink" title="小程序的视图层。xxx.wxml"></a>小程序的视图层。xxx.wxml</h3><ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li><li>绑定事件</li></ul><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法：`&#123;&#123; &#125;&#125;`</span><br><span class="line"></span><br><span class="line">//视图层 例如：index.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//逻辑层 例如：index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        message: 'Hello MINA!'</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法：`wx:for`</span><br><span class="line"></span><br><span class="line">//逻辑层  xxx.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        array:[&#123;          // array数组，包含了两个对象</span><br><span class="line">            messqge:'foo',</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            message:'bar'</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)    </span><br><span class="line"></span><br><span class="line">//视图层 xxx.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span>   // for循环array数组   </span><br><span class="line">//注意，与变量展示相比，需要加两个冒号</span><br><span class="line">    &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125; </span><br><span class="line">    // index是数组序号，item是数组里的对象</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法： `wx:if 、wx:elif、wx:else`</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">“&#123;&#123;length</span> &gt;</span> 5&#125;&#125;”&gt; 1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;length &gt; 2&#125;&#125;"</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><table><thead><tr><th align="center">页面事件</th><th align="center">触发时机</th></tr></thead><tbody><tr><td align="center">tap</td><td align="center">手指触摸后马上离开</td></tr><tr><td align="center">longpress</td><td align="center">手指触摸后，超过350ms再离开（推荐使用）</td></tr><tr><td align="center">longtap</td><td align="center">手指触摸后，超过350ms再离开</td></tr><tr><td align="center">touchstart</td><td align="center">手指触摸动作开始</td></tr><tr><td align="center">touchend</td><td align="center">手指触摸动作结束</td></tr></tbody></table><ul><li>事件绑定的写法以key、value的形式</li><li>key以bind或catch开头，然后跟上事件的类型</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 视图层  xxx.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"tapTest"</span> <span class="attr">data-hi</span>=<span class="string">"WeChat"</span> <span class="attr">bindtap</span>=<span class="string">'tapName'</span>&gt;</span> Click me! <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 逻辑层 xxx.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    tapName: function(event) &#123;</span><br><span class="line">          console.log(event)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="小程序提供的能力和常用API"><a href="#小程序提供的能力和常用API" class="headerlink" title="小程序提供的能力和常用API"></a>小程序提供的能力和常用API</h2><h3 id="微信API"><a href="#微信API" class="headerlink" title="微信API"></a>微信API</h3><ul><li>网络请求</li><li>本地储存</li><li>文件系统</li></ul><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul><li>HTTP请求 （异步的请求！！！！！！！）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wx.request(&#123;   //HTTP请求，wx.request（）函数包含一个对象&#123;...&#125;</span><br><span class="line">    url: '',         //string类型，表示服务端地址</span><br><span class="line">    data: &#123;&#125;,    //表示请求参数</span><br><span class="line">    header: &#123;&#125;,  //object类型，表示HTTP headers请求头</span><br><span class="line">    method: 'POST',  //string类型，请求方法</span><br><span class="line">    success: function(res)&#123; //function类型，接口成功的回调函数</span><br><span class="line">        console.log(res.data) </span><br><span class="line">    &#125;,</span><br><span class="line">    fail: function(res)&#123;&#125;   //function类型，接口失败的回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>异步特性</li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro09.png" alt="wechat_pro09"></p><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro10.png" alt="wechat_pro10"></p><h3 id="文件上传、下载"><a href="#文件上传、下载" class="headerlink" title="文件上传、下载"></a>文件上传、下载</h3><ul><li>上传文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wx.uploadFile(&#123;</span><br><span class="line">    url: 'upload',   //服务端地址</span><br><span class="line">    filePath: 'example.jpg', //文件资源的路径</span><br><span class="line">    name: 'file',                //文件对应的Key,文件名字</span><br><span class="line">    formData: &#123;                  //文件附加信息</span><br><span class="line">        'user'：‘test’</span><br><span class="line">    &#125;,</span><br><span class="line">    success(res)&#123;               //异步的，成功回调函数</span><br><span class="line">       console.log(res.data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>下载文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wx.downloadFile(&#123;</span><br><span class="line">    url: 'download',         //下载的url</span><br><span class="line">    header: &#123;&#125;,</span><br><span class="line">    filePath: 'example.jpg',  //下载后存储的路径</span><br><span class="line">    success(res) &#123;               //接口成功的回调函数</span><br><span class="line">       console.log(res.statusCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>*Task(网络任务对象)</li></ul><p>异步任务提交以后，需要对任务进行操作时，使用Task对象。</p><blockquote><p>RequestTask (发起HTTP请求，可以得到一个RequestTask)</p></blockquote><blockquote><p>UploadTask (同理，上传文件时，也可以得到)</p></blockquote><blockquote><p>DownloadTask （同理）</p></blockquote><blockquote><p>SocketTask （同理）</p></blockquote><p>拿到这些task，可以做什么呢？</p><blockquote><p>中断任务  （比如上传文件的时候，上传到一半的时候，想取消它，可以调用这task来中断）</p></blockquote><blockquote><p>触发回调函数 （比如上传文件的时候，上传到10%时，可以用task来触发回调函数）</p></blockquote><blockquote><p>关闭连接 （比如HTTP请求，socket请求，请求到一半，可以用task对象来关闭网络连接）</p></blockquote><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>将数据存储在本地缓存中指定的key中，数据存储生命周期跟小程序本身一致</p><ul><li>操作本地存储，有四个API:</li></ul><blockquote><p>wx.setStorage</p></blockquote><blockquote><p>wx.getStorage（异步的），  也有同步的api：wx.getStorageSync</p></blockquote><blockquote><p>wx.removeStorage</p></blockquote><blockquote><p>wx.clearStorage  (慎用，会把本地所有的缓存都删除)</p></blockquote><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro11.png" alt="wechat_pro11"></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><ul><li>全局文件管理器</li></ul><blockquote><p>获取全局唯一的文件管理器. <code>var fs=wx.getFileSystemManager()</code></p></blockquote><ul><li>文件的增删改查</li></ul><blockquote><p>对文件进行操作的API有很多，完全覆盖编程语言对文件的各种操作</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fs.saveFile</span><br><span class="line"></span><br><span class="line">fs.writeFile</span><br><span class="line"></span><br><span class="line">fs.readFile</span><br><span class="line"></span><br><span class="line">fs.removeSavedFile</span><br><span class="line"></span><br><span class="line">fs.appendFile</span><br></pre></td></tr></table></figure><ul><li>文件夹的操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir</span><br><span class="line"></span><br><span class="line">fs.rmdir</span><br><span class="line"></span><br><span class="line">fs.isDirectory</span><br><span class="line"></span><br><span class="line">fs.isFile</span><br></pre></td></tr></table></figure><h3 id="开发能力"><a href="#开发能力" class="headerlink" title="开发能力"></a>开发能力</h3><ul><li>用户数据</li><li>推送消息</li><li>运营数据</li></ul><h3 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a>用户数据</h3><ul><li>头像、昵称等公开信息 — wx.getUserInfo()</li><li>openid等敏感数据</li></ul><h3 id="推送消息"><a href="#推送消息" class="headerlink" title="推送消息"></a>推送消息</h3><ul><li>基于微信的通知渠道，小程序框架为开发者提供了可以高效触达用户的消息。（在微信的服务通知查看）</li></ul><h3 id="运营数据"><a href="#运营数据" class="headerlink" title="运营数据"></a>运营数据</h3><ul><li>小程序管理后台—数据分析</li><li>小程序数据助手（小程序）</li></ul><h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><ul><li>视图容器—view、scroll-view、swiper、cover-view</li><li>基础内容—text、icon、rich-text</li><li>表单、导航—button、form、input</li></ul><h3 id="WeUI-wxss"><a href="#WeUI-wxss" class="headerlink" title="WeUI-wxss"></a>WeUI-wxss</h3><ul><li>WeUI是一套同微信原生视觉体验一致的基础样式库</li><li>微信官方设计团队为微信内网页和微信小程序量身设计</li><li>包含button、view等众多元素</li><li>Github搜索weui-wxss获取源码</li><li>手机预览，微信搜索：weui小程序</li></ul><h3 id="怎么使用weui"><a href="#怎么使用weui" class="headerlink" title="怎么使用weui"></a>怎么使用weui</h3><ul><li><p>1.新建一个thirdparty的目录，放入weui.wxss文件</p></li><li><p>2.在全局的app.wxss文件中，加入 @import”thirdparty/weui.wxss”;</p></li></ul><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro12.png" alt="wechat_pro12"></p><h2 id="小程序发布流程"><a href="#小程序发布流程" class="headerlink" title="小程序发布流程"></a>小程序发布流程</h2><p><img src="https://jwangblog.oss-cn-chengdu.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/wechat_pro/wechat_pro13.png" alt=""></p><h2 id="微信小程序登陆"><a href="#微信小程序登陆" class="headerlink" title="微信小程序登陆"></a>微信小程序登陆</h2><p>小程序可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系。</p><h3 id="登录流程时序"><a href="#登录流程时序" class="headerlink" title="登录流程时序"></a>登录流程时序</h3><p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/api-login.2fcc9f35.jpg" alt=""></p><ul><li><p>小程序端调用wx.login()接口获取登录凭证code</p></li><li><p>小程序端调用wx.request()接口把code发送到我的服务器后台</p></li><li><p>在我的服务器后台，我已知appId、appsecret、code,然后调用如下官方提供的http接口， 官方提供了http接口地址为： <a href="https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code</a>, 即可返回获取openId、session_key</p></li><li><p>在我的服务器后台获得的openid，session_key, 然后生成一个唯一字符串sessionid作为键，将openid和session_key作为值，存入redis，超时时间设置为2小时，将sessionid返回给微信小程序，微信小程序端把sessionid保存在storage中；</p></li><li><p>在之后，调用那些需要登录后才有权限的访问的后台服务时，你可以将保存在storage中的sessionid取出并携带在请求中（可以放在header中携带，也可以放在querystring中，或是放在body中，根据你自己的需要来使用），传递到后台服务，后台代码中获取到该sessionid后，从redis中查找是否有该sessionid存在，存在的话，即确认该session是有效的，继续后续的代码执行，否则进行错误处理。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目工程目录&quot;&gt;&lt;a href=&quot;#项目工程目录&quot; class=&quot;headerlink&quot; title=&quot;项目工程目录&quot;&gt;&lt;/a&gt;项目工程目录&lt;/h2&gt;&lt;h3 id=&quot;小程序文件类型&quot;&gt;&lt;a href=&quot;#小程序文件类型&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="小程序浅析" scheme="https://github.com/learn666-gif/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B5%85%E6%9E%90/"/>
    
    
      <category term="微信小程序" scheme="https://github.com/learn666-gif/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程基础</title>
    <link href="https://github.com/learn666-gif/2020/03/06/JAVA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/learn666-gif/2020/03/06/JAVA%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-06T05:14:13.000Z</published>
    <updated>2020-03-06T07:10:27.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java能做什么</p><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服 务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><p>更新：每日更新学习动态及学习内容，总结今日内容，做到勉励自己的作用</p><a id="more"></a><h2 id="计算机基础知识（查看python基础）"><a href="#计算机基础知识（查看python基础）" class="headerlink" title="计算机基础知识（查看python基础）"></a>计算机基础知识（查看python基础）</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><blockquote><p>计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含 0、1两个数，逢二进一，1+1=10。每一个0或者每一个1，叫做一个bit(比特)。</p></blockquote><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><blockquote><p>字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性， 我们可以查看文件的字节大小。</p><p>8个bit(二进制位) 0000-0000表示为1个字节，写成1 byte或者1 B。</p></blockquote><h2 id="Java语言开发环境搭建"><a href="#Java语言开发环境搭建" class="headerlink" title="Java语言开发环境搭建"></a>Java语言开发环境搭建</h2><h3 id="Java虚拟机—JVM"><a href="#Java虚拟机—JVM" class="headerlink" title="Java虚拟机—JVM"></a>Java虚拟机—JVM</h3><ul><li><p>JVM(Java Virtual Machine ):Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在 JVM 之上。</p></li><li><p>跨平台:任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系 统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM 运行在操作系统上。<br>  <img src="" alt="JVM"></p></li><li><p>如图所示，Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p></li></ul><h3 id="JRE-和-JDK"><a href="#JRE-和-JDK" class="headerlink" title="JRE 和 JDK"></a>JRE 和 JDK</h3><ul><li><p>JRE (Java Runtime Environment) :是Java程序的运行时环境，包含 JVM 和运行时所需要的 核心类库 。 JDK (Java Development Kit):是Java程序开发工具包，包含 JRE 和开发人员使用的工具。</p></li><li><p>我们想要运行一个已有的Java程序，那么只需安装 JRE 即可。 我们想要开发一个全新的Java程序，那么必须安装 JDK 。</p></li><li><p>三者关系: JDK &gt; JRE &gt; JVM</p><p>  <img src="" alt="关系图"></p></li></ul><h3 id="JAVA-HOME环境配置"><a href="#JAVA-HOME环境配置" class="headerlink" title="JAVA_HOME环境配置"></a>JAVA_HOME环境配置</h3><ul><li>请面向百度查询</li></ul><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="程序开发步骤说明"><a href="#程序开发步骤说明" class="headerlink" title="程序开发步骤说明"></a>程序开发步骤说明</h3><ul><li>开发环境已经搭建完毕，可以开发我们第一个Java程序了。 </li><li>Java程序开发三步骤:编写、编译、运行。<br>  <img src="" alt="步骤"></li></ul><h3 id="编写Java源程序"><a href="#编写Java源程序" class="headerlink" title="编写Java源程序"></a>编写Java源程序</h3><ul><li><p>在 d:\day01 目录下新建文本文件，完整的文件名修改为 HelloWorld.java ，其中文件名为 HelloWorld ，后 缀名必须为 .java 。</p></li><li><p>用记事本打开 使用notepad++记事本软件。</p></li><li><p>在文件中键入文本并保存，代码如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件名必须是 HelloWorld ，保证文件名和类的名字是一致的，注意大小写。</p><p>每个字母和符号必须与示例代码一模一样。</p></blockquote><p>  第一个 HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我 们必须将编写好的 Java源文件 编译成JVM可以看懂的 字节码文件 。</p></li></ul><h3 id="编译Java源文件"><a href="#编译Java源文件" class="headerlink" title="编译Java源文件"></a>编译Java源文件</h3><ul><li><p>在DOS命令行中，进入Java源文件的目录，使用 javac 命令进行编译。</p><blockquote><p>命令:</p></blockquote><pre><code>javac Java源文件名.后缀名 </code></pre><blockquote><p>举例:</p></blockquote><pre><code>javac HelloWorld.java</code></pre><blockquote><p>编译成功后，命令行没有任何提示。打开 d:\day01 目录，发现产生了一个新的文件 HelloWorld.class ，该文件 就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。</p></blockquote></li><li><p>Java源文件的编译工具 javac.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目 录下使用。</p></li><li><p>运行Java程序 在DOS命令行中，进入Java源文件的目录，使用 java 命令进行运行。</p><blockquote><p>命令:</p></blockquote><pre><code>java 类名字 </code></pre><blockquote><p>举例:</p></blockquote><p>  java HelloWorld</p><blockquote><p>java HelloWord 不要写 不要写 不要写 .class</p></blockquote></li><li><p>Java程序 .class文件 的运行工具 java.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可 以再任意目录下使用。</p></li></ul><h3 id="入门程序说明"><a href="#入门程序说明" class="headerlink" title="入门程序说明"></a>入门程序说明</h3><ul><li><p>编译和运行是两回事</p><blockquote><p>编译:是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们 所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</p></blockquote><blockquote><p>运行:是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p></blockquote></li><li><p>关于main方法 </p><blockquote><p>main方法:称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。 3.6 添加注释comment</p></blockquote><blockquote><p>注释:就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须 要的，它不影响程序的编译和运行。</p></blockquote><blockquote><blockquote><p>Java中有单行注释和多行注释 单行注释以 //开头 换行结束</p></blockquote></blockquote><blockquote><blockquote><p>多行注释以 <code>/*</code>开头 以<code>*/</code>结束 3.7 关键字keywords</p></blockquote></blockquote></li><li><p>关键字:是指在程序中，Java已经定义好的单词，具有特殊含义。</p><blockquote><p>HelloWorld案例中，出现的关键字有 public 、 class 、 static 、 void 等，这些单词已经被 Java定义好，全部都是小写字母，notepad++中颜色特殊。</p></blockquote></li><li><p>标识符</p><blockquote><p>标识符:是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。 HelloWorld案例中，出现的标识符有类名字 HelloWorld 。</p></blockquote></li><li><p><strong>命名规则: 硬性要求</strong></p><blockquote><p>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $(美元符号) 和 _(下划线) 。 </p><p>标识符不能以数字开头。</p></blockquote><blockquote><p>标识符不能是关键字。</p></blockquote></li><li><p>命名规范: 软性建议</p><blockquote><p>类名规范:首字母大写，后面每个单词首字母大写(大驼峰式)。 </p></blockquote><blockquote><p>方法名规范: 首字母小写，后面每个单词首字母大写(小驼峰式)。 </p></blockquote><blockquote><p>变量名规范:全部小写。</p></blockquote></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量:是指在Java程序中固定不变的数据。 </p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">整数常量</td><td align="center">所有的整数</td></tr><tr><td align="center">小数常量</td><td align="center">所有的小数</td></tr><tr><td align="center">字符常量</td><td align="center">单引号引起来,只能写一个字符,必须有内容</td></tr><tr><td align="center">字符串常量</td><td align="center">双引号引起来,可以写多个字符,也可以不写</td></tr><tr><td align="center">布尔常量</td><td align="center">只有两个值(流程控制中讲解)</td></tr><tr><td align="center">空常量</td><td align="center">只有一个值(引用数据类型中讲解)</td></tr></tbody></table><ul><li><p>需求:输出各种类型的常量。</p><p>  ```java<br>  public class ConstantDemo {</p><pre><code>public static void main(String[] args){    //输出整数常量     System.out.println(123);     //输出小数常量     System.out.println(0.125);     //输出字符常量     System.out.println(&apos;A&apos;);     //输出布尔常量     System.out.println(true);     //输出字符串常量     System.out.println(&quot;你好Java&quot;);    }</code></pre><p>  }</p>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 变量和数据类型</span><br><span class="line"></span><br><span class="line">### 变量概述</span><br><span class="line"></span><br><span class="line">* 变量:常量是固定不变的数据，那么在程序中可以变化的量称为变量。</span><br><span class="line">&gt;数学中，可以使用字母代替数字运算,例如 x=<span class="number">1</span>+<span class="number">5</span> 或者 <span class="number">6</span>=x+<span class="number">5</span>。 程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存<span class="number">5</span>，x也可</span><br><span class="line">以保存<span class="number">6</span>，这样x保存的数据是可以改变的，也就是我们所讲解的变量。 Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</span><br><span class="line"></span><br><span class="line">* 数据类型</span><br><span class="line"></span><br><span class="line">&gt;数据类型分类 Java的数据类型分为两大类:</span><br><span class="line">&gt;&gt;基本数据类型:包括 整数、浮点数、字符、布尔。 </span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;引用数据类型:包括 类 、 数组 、 接口 。</span><br><span class="line">   </span><br><span class="line">* 基本数据类型 四类八种基本数据类型:</span><br><span class="line"></span><br><span class="line">|数据类型 |关键字| 内存占用 |取值范围</span><br><span class="line">|:-:|:-:|:-:|:-:|</span><br><span class="line">|字节型| byte|<span class="number">1</span>个字节 |<span class="number">-128</span>~<span class="number">127</span></span><br><span class="line">|短整型 |short|<span class="number">2</span>个字节 |<span class="number">-32768</span>~<span class="number">32767</span></span><br><span class="line">|整型 |<span class="built_in">int</span>(默认) |<span class="number">4</span>个字节 |<span class="number">-231</span>次方~<span class="number">2</span>的<span class="number">31</span>次方<span class="number">-1</span> </span><br><span class="line">|长整型 |long |<span class="number">8</span>个字节 |<span class="number">-2</span>的<span class="number">63</span>次方~<span class="number">2</span>的<span class="number">63</span>次方<span class="number">-1</span> </span><br><span class="line">|单精度浮点数 |<span class="built_in">float</span> |<span class="number">4</span>个字节 |<span class="number">1.4013E-45</span>~<span class="number">3.4028E+38</span> </span><br><span class="line">|双精度浮点数 |<span class="built_in">double</span>(默认) |<span class="number">8</span>个字节 |<span class="number">4.9E-324</span>~<span class="number">1.7977E+308</span> </span><br><span class="line">|字符型 |char|<span class="number">2</span>个字节 |<span class="number">0</span><span class="number">-65535</span></span><br><span class="line">|布尔类型 |<span class="built_in">bool</span>ean|<span class="number">1</span>个字节 |<span class="literal">true</span>，<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            &gt;Java中的默认类型:整数类型是 <span class="built_in">int</span> 、浮点类型是 <span class="built_in">double</span> 。 <span class="number">5.3</span> 变量的定义</span><br><span class="line">  </span><br><span class="line">### 变量定义</span><br><span class="line"></span><br><span class="line">* 变量定义的格式包括三个要素: 数据类型 、 变量名 、 数据值 。 </span><br><span class="line">* 格式</span><br><span class="line"></span><br><span class="line">数据类型 变量名 = 数据值; 练习</span><br><span class="line"></span><br><span class="line">* 定义所有基本数据类型的变量，代码如下:</span><br><span class="line"></span><br><span class="line">```java<span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Variable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line"><span class="comment">//定义字节型变量</span></span><br><span class="line">byte b = <span class="number">100</span>; System.<span class="keyword">out</span>.println(b); </span><br><span class="line"><span class="comment">//定义短整型变量</span></span><br><span class="line">short s = <span class="number">1000</span>; System.<span class="keyword">out</span>.println(s); </span><br><span class="line"><span class="comment">//定义整型变量</span></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">123456</span>; System.<span class="keyword">out</span>.println(i); </span><br><span class="line"><span class="comment">//定义长整型变量</span></span><br><span class="line">long l = <span class="number">12345678900</span>L; System.<span class="keyword">out</span>.println(l); </span><br><span class="line"><span class="comment">//定义单精度浮点型变量 </span></span><br><span class="line"><span class="built_in">float</span> f = <span class="number">5.5</span>F; System.<span class="keyword">out</span>.println(f);</span><br><span class="line"> <span class="comment">//定义双精度浮点型变量 </span></span><br><span class="line"> <span class="built_in">double</span> d = <span class="number">8.5</span>; System.<span class="keyword">out</span>.println(d); </span><br><span class="line"> <span class="comment">//定义布尔型变量</span></span><br><span class="line"><span class="built_in">bool</span>ean <span class="built_in">bool</span> = <span class="literal">false</span>; System.<span class="keyword">out</span>.println(<span class="built_in">bool</span>); </span><br><span class="line"><span class="comment">//定义字符型变量</span></span><br><span class="line">char c = <span class="string">'A'</span>; System.<span class="keyword">out</span>.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>long类型:建议数据后加L表示。</p></li><li><p>float类型:建议数据后加F表示。</p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>变量名称:在同一个大括号范围内，变量的名字不可以相同。 </p><p>变量赋值:定义的变量，不赋值不能使用。</p></blockquote><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</p><h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><ul><li><p>一个 int 类型变量和一个 byte 类型变量进行加法运算， 结果会是什么数据类型?</p><blockquote><p>运算结果，变量的类型将是 int 类型，这就是出现了数据类型的自动类型转换现象。<br>自动转换:将 取值范围小的类型 自动提升为 取值范围大的类型 。</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//bytex=b+i;</span></span><br><span class="line"><span class="comment">// 报错 //int类型和byte类型运算，</span></span><br><span class="line">结果是<span class="keyword">int</span>类型 <span class="keyword">int</span> j = b + i; </span><br><span class="line">System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>byte 类型内存占有1个字节，在和 int 类型运算时会提升为 int 类型 ，自动补充3个字节，因此计算后的结果还是 int 类 型。</p></blockquote><blockquote><p>同样道理，当一个 int 类型变量和一个 double 变量运算时， int 类型将会自动提升为 double 类型进行运算。</p></blockquote></li><li><p>转换规则</p><blockquote><p>范围小的类型向范围大的类型提升， byte、short、char 运算时直接提升为 int 。</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">2.5</span>; </span><br><span class="line"><span class="comment">//int类型和double类型运算，结果是double类型 </span></span><br><span class="line"><span class="comment">//int类型会提升为double类型</span></span><br><span class="line"><span class="keyword">double</span> e = d+i;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>byte、short、char‐‐&gt;int‐‐&gt;long‐‐&gt;float‐‐&gt;double</p></blockquote></li></ul><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><ul><li><p>强制转换</p><blockquote><p>将 1.5 赋值到 int 类型变量会发生什么?产生编译失败，肯定无法赋值。</p></blockquote><pre><code>inti=1.5;// 错误</code></pre><blockquote><p>double 类型内存8个字节， int 类型内存4个字节。 1.5 是 double 类型，取值范围大于 int 。可以理解为 double 是8升的水壶， int 是4升的水壶，不能把大水壶中的水直接放进小水壶去。 想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值。</p></blockquote></li><li><p>强制类型转换:将 取值范围大的类型 强制转换成 取值范围小的类型 。 </p><blockquote><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。 </p></blockquote></li><li><p>转换格式:</p><pre><code>数据类型 变量名 = (数据类型)被转数据值; </code></pre></li><li><p>将 1.5 赋值到 int 类型，代码修改为:</p><pre><code>// double类型数据强制转成int类型，直接去掉小数点。 int i = (int)1.5;</code></pre><blockquote><p>同样道理，当一个 short 类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给short类型变量，就需要强制转换。</p></blockquote>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">//short类型变量，内存中2个字节</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现编译失败 s和1做运算的时候，1是int类型，s会被提升为int类型 s+1后的结果</span></span><br><span class="line"><span class="comment">是int类型，将结果在赋值会short类型时发生错误 short内存2个字节，int类型4个</span></span><br><span class="line"><span class="comment">字节 必须将int强制转成short才能完成赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = s + <span class="number">1</span>;<span class="comment">//编译失败</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s+<span class="number">1</span>);<span class="comment">//编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>强烈注意 </p><blockquote><p>浮点转成整数，直接取消小数点，可能造成数据损失精度。</p><p>int 强制转成 short 砍掉2个字节，可能造成数据丢失。</p></blockquote></li><li><p>ASCII编码表</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><ul><li><p>算数运算符包括:</p><blockquote><p><code>+</code> 加法运算，字符串连接运算 </p></blockquote><blockquote><p><code>-</code> 减法运算</p><p><code>*</code> 乘法运算</p><p><code>/</code> 除法运算</p></blockquote><blockquote><p><code>%</code> 取模运算，两个数字相除取余数 </p></blockquote><blockquote><p><code>++ 、 --</code> 自增自减运算</p></blockquote><p>  java中，整数使用以上运算符，无论怎么计算，也不会得到小数。</p></li></ul><ul><li><p><code>++</code> 运算，变量自己增长1。反之， <code>--</code> 运算，变量自己减少1，用法与 ++ 一致。 </p><blockquote><p>独立运算:</p></blockquote><blockquote><blockquote><p>变量在独立运算时， 前++ 和 后++ 没有区别 。 </p><p>变量前++ :例如++i。</p></blockquote></blockquote><blockquote><blockquote><p>变量后++ :例如i++。</p></blockquote></blockquote><blockquote><p>混合运算:</p></blockquote><blockquote><blockquote><p>和其他变量放在一起， 前++ 和 后++ 就产生了不同。</p><p>变量 前++ :变量a自己加1，将加1后的结果赋值给b，也就是说a先计算。a和b的结果都是2。</p></blockquote></blockquote><blockquote><blockquote><p>变量 后++ :变量a先把自己的值1，赋值给变量b，此时变量b的值就是1，变量a自己再加1。a的结果是2，b 的结果是1。</p></blockquote></blockquote><blockquote><p><code>+</code> 符号在字符串中的操作:</p><blockquote><p><code>+</code> 符号在遇到字符串的时候，表示连接、拼接的含义。</p><p>“a”+”b”的结果是“ab”，连接含义</p></blockquote></blockquote></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>赋值运算符包括:</p><blockquote><p><code>=</code> 等于号 </p><p><code>+=</code> 加等于</p><p><code>-=</code> 减等于 </p></blockquote><blockquote><p><code>*=</code> 乘等于</p><p><code>/=</code> 除等于 </p></blockquote><blockquote><p><code>%=</code> 取模等</p></blockquote><p>  赋值运算符，就是将符号右边的值，赋给左边的变量。</p></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li><p>比较运算符包括:</p><blockquote><p><code>==</code> 比较符号两边数据是否相等，相等结果是true。</p></blockquote><blockquote><p><code>&lt;</code> 比较符号左边的数据是否小于右边的数据，如果小于结果是true。</p></blockquote><blockquote><p><code>&gt;</code> 比较符号左边的数据是否大于右边的数据，如果大于结果是true。</p></blockquote><blockquote><p><code>&lt;=</code> 比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。 </p></blockquote><blockquote><p><code>&gt;=</code> 比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。 </p></blockquote><blockquote><p><code>!=</code> 不等于符号 ，如果符号两边的数据不相等，结果是true。</p></blockquote><p>  比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值 true 或者 false 。</p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>逻辑运算符包括：</p><blockquote><p><code>&amp;&amp;</code> </p><blockquote><ol><li><p>两边都是true，结果是true</p></li><li><p>一边是false，结果是false 短路特点:符号左边是false，右边不再运算</p></li></ol></blockquote><p><code>||</code></p><blockquote><ol><li>两边都是false，结果是false || 短路或 </li></ol><p>2.一边是true，结果是true</p><p>短路特点: 符号左边是true，右边不再运算</p></blockquote><p><code>!</code>   </p><blockquote><ol><li><p>! true 结果是false </p></li><li><p>! false结果是true</p></li></ol></blockquote></blockquote><p> 逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值 true 或者 false</p></li></ul><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li>三元运算符格式:</li></ul><p><code>数据类型 变量名 = 布尔类型表达式?结果1:结果2</code> </p><ul><li><p>三元运算符计算方式:</p><blockquote><p>布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。 </p></blockquote><blockquote><p>布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。</p></blockquote></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且 重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。</p><ul><li>方法:就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。 当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</li></ul><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li><p>定义格式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表)&#123; </span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义格式解释:</p><p>修饰符: 目前固定写法 public static 。</p><p>返回值类型: 目前固定写法 void 。 </p></blockquote><blockquote><p>方法名:为我们定义的方法起名，满足标识符的规范，用来调用方法。 </p><p>参数列表: 目前无参数， 带有参数的方法在后面。 </p></blockquote><blockquote><p>return:方法结束。因为返回值类型是void，方法大括号内的return可以不写。</p></blockquote></li></ul><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><ul><li><p>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名字就可以调用了。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//调用定义的方法method</span></span><br><span class="line">method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，被main方法调用 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自己定义的方法，需要被main调用运行"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三元运算调用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="comment">//调用定义的方法operator</span></span><br><span class="line">operator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，方法中定义三元运算符 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span>:<span class="number">200</span>); </span><br><span class="line">System.out.println(i); <span class="keyword">int</span> j = <span class="number">0</span> ;</span><br><span class="line">j = (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span>:<span class="number">600</span>); </span><br><span class="line">System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法定义注意事项:</p><blockquote><p>方法必须定义在一类中方法外 </p><p>方法不能定义在另一个方法的里面</p></blockquote></li><li><p>常量和变量的运算</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line"><span class="keyword">byte</span> b1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b2=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> b3=<span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> b4=b1 + b2; </span><br><span class="line">System.out.println(b3); </span><br><span class="line">System.out.println(b4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析: b3 = 1 + 2 ， 1 和 2 是常量，为固定不变的数据，在编译的时候(编译器javac)，已经确定了 1+2 的结果并没 有超过byte类型的取值范围，可以赋值给变量 b3 ，因此 b3=1 + 2 是正确的。</p></blockquote><blockquote><p>反之， b4 = b2 + b3 ， b2 和 b3 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定b2+b3的结果是什 么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Java能做什么&lt;/p&gt;
&lt;p&gt;Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服 务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。&lt;/p&gt;
&lt;p&gt;更新：每日更新学习动态及学习内容，总结今日内容，做到勉励自己的作用&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA编程" scheme="https://github.com/learn666-gif/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JAVA" scheme="https://github.com/learn666-gif/tags/JAVA/"/>
    
  </entry>
  
</feed>
